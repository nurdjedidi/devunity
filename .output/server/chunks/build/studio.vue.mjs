import { p as premiumFeatures } from './PremiumFeature.vue.mjs';
import { ref, shallowRef, computed, watch, nextTick, createVNode, mergeProps, Fragment, createTextVNode, toRef, defineComponent, withCtx, unref, createBlock, createCommentVNode, openBlock, renderList, toDisplayString, createSlots, useSSRContext, Transition, withDirectives, vShow, watchEffect, resolveDynamicComponent, withModifiers } from 'vue';
import { ssrRenderComponent, ssrRenderList, ssrInterpolate, ssrRenderClass, ssrRenderStyle, ssrRenderAttrs, ssrRenderVNode } from 'vue/server-renderer';
import { S as Snackbar } from './snackbar.vue.mjs';
import { k as genericComponent, p as propsFactory, aI as useLocale, l as useProxiedModel, aZ as useItems, ai as useTextColor, b0 as wrapInArray, a_ as useForm, s as useRender, g as VIcon, bm as noop, T as VList, U as VListItem, i as VAvatar, b2 as ensureValidVNode, Q as VDefaultsProvider, as as forwardRefs, aa as makeTransitionProps, az as omit, b3 as checkPrintable, b4 as matchesSelector, a$ as deepEqual, ah as getUid, bn as getPropertyFromItem, S as useUserStore, V as VApp, f as VCard, h as VDivider, Y as VCardText, bo as VBtnToggle, e as VBtn, bp as VSwitch, P as VImg, $ as VCardTitle, bq as VCardSubtitle, a0 as VCardActions, bl as VProgressCircular, br as VDialog, _ as _export_sfc, au as filterInputAttrs, av as VInput, aA as VSelectionControl, ac as VLabel, bs as VSelectionControlGroup, ap as IconValue, at as makeVInputProps, bt as makeSelectionControlGroupProps, aB as makeVSelectionControlProps, W as VListItemTitle, bu as createLayout, x as useDimension, bv as makeLayoutProps, z as makeDimensionProps, A as makeComponentProps, b5 as makeVBtnProps, bw as VListSubheader, E as useBackgroundColor, H as useRounded, bx as useTheme, aG as useLocation, by as pickWithRest, a9 as MaybeTransition, K as makeThemeProps, y as makeTagProps, L as makeRoundedProps, aM as makeLocationProps, d as VSpacer, ao as EventProp, bz as useDate, bA as getWeek, bB as createRange, J as convertToUnit, bC as templateRef, aD as createSimpleFunctional, bg as VFadeTransition } from './server.mjs';
import { V as VMain } from './VMain.mjs';
import { V as VChip, a as VChipGroup } from './VChip.mjs';
import { V as VTabs, a as VTab } from './VTabs.mjs';
import { V as VWindow, a as VWindowItem } from './VWindowItem.mjs';
import { V as VTextField, m as makeVTextFieldProps } from './VTextField.mjs';
import { V as VTextarea } from './VTextarea.mjs';
import { u as useScrolling, a as VMenu, b as VVirtualScroll, m as makeSelectProps, V as VSelect } from './VSelect.mjs';
import { V as VSlider } from './VSlider.mjs';
import { u as useFilter, m as makeFilterProps, V as VDataTable } from './VDataTable.mjs';
import { V as VCheckboxBtn } from './VCheckboxBtn.mjs';
import { V as VTooltip } from './VTooltip.mjs';
import { V as VExpansionPanels, a as VExpansionPanel, b as VExpansionPanelTitle, c as VExpansionPanelText } from './VExpansionPanels.mjs';
import { V as VAlert } from './VAlert.mjs';
import { V as VTimeline, a as VTimelineItem } from './VTimeline.mjs';
import { V as VSheet, m as makeVSheetProps } from './VSheet.mjs';
import { V as VForm } from './VForm.mjs';
import { V as VCheckbox } from './VCheckbox.mjs';
import { V as VAppBar } from './VAppBar.mjs';
import { a as makeVToolbarTitleProps, b as VToolbarTitle } from './VToolbar.mjs';
import { V as VNavigationDrawer } from './VNavigationDrawer.mjs';
import { Chart, CategoryScale, LinearScale, BarElement, LineElement, PointElement, ArcElement, RadialLinearScale, Title, Tooltip, Legend } from 'chart.js';
import { Bar, Line, Pie, Doughnut, PolarArea, Radar } from 'vue-chartjs';
import { V as VFileInput } from './VFileInput.mjs';
import { u as useHead } from './v3.mjs';
import { V as VContainer } from './VContainer.mjs';
import 'vue-router';
import '../_/nitro.mjs';
import 'node:http';
import 'node:https';
import 'node:events';
import 'node:buffer';
import 'node:fs';
import 'node:path';
import 'node:crypto';
import 'node:url';
import 'jsonwebtoken';
import 'mysql2/promise';
import 'pinia';
import 'pinia-plugin-persistedstate';
import './VTable.mjs';
import '../routes/renderer.mjs';
import 'vue-bundle-renderer/runtime';
import 'unhead/server';
import 'unhead/utils';
import 'devalue';
import 'unhead/plugins';

const cardTemplates = {
  timeline: {
    title: "Project Timeline",
    subtitle: "Last 7 days",
    text: "Chronological visualization of key milestones and achievements in the project development lifecycle with detailed activity tracking.",
    image: "https://images.unsplash.com/photo-1507925921958-8a62f3d1a50d",
    icon: "mdi-timeline-clock",
    elevation: 3,
    padding: 16,
    rounded: "xl",
    loading: false,
    disabled: false,
    showButtons: true,
    buttonText: "Filter",
    buttonWidth: 30,
    buttonPosition: "end",
    showProgress: false,
    variant: "elevated",
    color: "deep-orange",
    buttonVariant: "tonal",
    buttonColor: "deep-orange-darken-1",
    progressSize: "small",
    progressColor: "deep-orange",
    showTimeline: true,
    showSparkline: false
  },
  weather: {
    title: "London, United Kingdom",
    subtitle: "Partly cloudy, 68°F (20°C)",
    text: "Light breeze at 6mph. Humidity: 65%. Precipitation probability: 20% in the evening. UV index: moderate.",
    image: "https://images.unsplash.com/photo-1534088568595-a066f410bcda",
    icon: "mdi-weather-partly-cloudy",
    elevation: 3,
    padding: 12,
    rounded: "xl",
    loading: false,
    disabled: false,
    showButtons: true,
    buttonText: "Forecast",
    buttonWidth: 0,
    buttonPosition: "end",
    showProgress: false,
    variant: "flat",
    color: "light-blue",
    buttonVariant: "tonal",
    buttonColor: "light-blue-darken-1",
    progressSize: "default",
    progressColor: "light-blue",
    showTimeline: false,
    showSparkline: true,
    sparklineData: [18, 16, 20, 22, 19, 18, 17],
    sparklineLabels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
    sparklineShowLabels: true,
    sparklineLineWidth: 2,
    sparklineColor: "light-blue",
    sparklineGradient: false
  },
  statistics: {
    title: "Business Performance",
    subtitle: "Q1 2024",
    text: "Revenue: $2.8M (+22%)\nGross Margin: $1.9M (+18%)\nNew Customers: 145 (+35%)",
    image: "",
    icon: "mdi-finance",
    elevation: 3,
    padding: 16,
    rounded: "lg",
    loading: false,
    disabled: false,
    showButtons: true,
    buttonText: "Detailed Report",
    buttonWidth: 0,
    buttonPosition: "end",
    showProgress: false,
    showTimeline: false,
    showSparkline: true,
    sparklineType: "area",
    sparklineData: [120, 145, 138, 162, 185, 175, 198, 220, 210, 245, 260],
    sparklineColor: "green",
    sparklineHeight: 100,
    sparklineLabelSize: 16,
    sparklineShowValue: true,
    sparklineLabels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov"],
    sparklineShowLabels: true,
    sparklineLineWidth: 2,
    sparklineGradient: false
  },
  file: {
    title: "Strategic Presentation.pptx",
    subtitle: "8.2 MB - Updated today",
    text: "Complete presentation including market analysis, strategic objectives and action plan for 2024-2025.",
    image: "",
    icon: "mdi-file-presentation-box",
    variant: "",
    color: "orange",
    elevation: 2,
    padding: 12,
    rounded: "lg",
    loading: false,
    disabled: false,
    showButtons: true,
    buttonText: "Open in github",
    buttonVariant: "text",
    buttonColor: "orange-darken-1",
    buttonWidth: 0,
    buttonPosition: "start",
    buttonIcon: "mdi-github",
    showProgress: false
  }
};
const getCardTemplate = (templateName) => {
  return JSON.parse(JSON.stringify(cardTemplates[templateName] || {}));
};

const icons = [
  "mdi-home",
  "mdi-account",
  "mdi-cog-outline",
  "mdi-heart",
  "mdi-star",
  "mdi-check",
  "mdi-close",
  "mdi-plus",
  "mdi-login",
  "mdi-logout",
  "mdi-minus",
  "mdi-delete",
  "mdi-pencil",
  "mdi-magnify",
  "mdi-refresh",
  "mdi-alert",
  "mdi-bell",
  "mdi-calendar",
  "mdi-camera",
  "mdi-clock",
  "mdi-cloud",
  "mdi-download",
  "mdi-upload",
  "mdi-email",
  "mdi-file",
  "mdi-folder",
  "mdi-image",
  "mdi-link",
  "mdi-lock",
  "mdi-map",
  "mdi-menu",
  "mdi-message",
  "mdi-phone",
  "mdi-play",
  "mdi-pause",
  "mdi-print",
  "mdi-save",
  "mdi-share",
  "mdi-shopping",
  "mdi-tag",
  "mdi-trash",
  "mdi-video",
  "mdi-volume-high",
  "mdi-wifi",
  "mdi-wrench",
  "mdi-account-group",
  "mdi-airplane",
  "mdi-alarm",
  "mdi-album",
  "mdi-arrow-left",
  "mdi-arrow-right",
  "mdi-arrow-up",
  "mdi-arrow-down",
  "mdi-bank",
  "mdi-battery",
  "mdi-bike",
  "mdi-book",
  "mdi-briefcase",
  "mdi-brush",
  "mdi-bug",
  "mdi-cake",
  "mdi-car",
  "mdi-cart",
  "mdi-cash",
  "mdi-chart-bar",
  "mdi-chart-line",
  "mdi-chart-pie",
  "mdi-chat",
  "mdi-checkbox-marked",
  "mdi-clipboard",
  "mdi-coffee",
  "mdi-compass",
  "mdi-cookie",
  "mdi-credit-card",
  "mdi-crown",
  "mdi-cube",
  "mdi-cup",
  "mdi-cursor-default",
  "mdi-database",
  "mdi-desktop-mac",
  "mdi-diamond",
  "mdi-dice",
  "mdi-domain",
  "mdi-dots-horizontal",
  "mdi-dots-vertical",
  "mdi-earth",
  "mdi-emoticon",
  "mdi-eye",
  "mdi-facebook",
  "mdi-fire",
  "mdi-flag",
  "mdi-flash",
  "mdi-flask",
  "mdi-flower",
  "mdi-food",
  "mdi-format-bold",
  "mdi-format-italic",
  "mdi-format-underline",
  "mdi-gamepad",
  "mdi-gift",
  "mdi-github",
  "mdi-google",
  "mdi-guitar",
  "mdi-hammer",
  "mdi-headphones",
  "mdi-help",
  "mdi-history",
  "mdi-home-variant",
  "mdi-hospital",
  "mdi-hotel",
  "mdi-human",
  "mdi-information",
  "mdi-instagram",
  "mdi-key",
  "mdi-keyboard",
  "mdi-lamp",
  "mdi-language",
  "mdi-laptop",
  "mdi-layers",
  "mdi-leaf",
  "mdi-lightbulb",
  "mdi-linkedin",
  "mdi-lock-open",
  "mdi-login",
  "mdi-logout",
  "mdi-map-marker",
  "mdi-medal",
  "mdi-microphone",
  "mdi-microsoft",
  "mdi-monitor",
  "mdi-moon",
  "mdi-mouse",
  "mdi-music",
  "mdi-newspaper",
  "mdi-note",
  "mdi-notification",
  "mdi-numeric",
  "mdi-office",
  "mdi-package",
  "mdi-palette",
  "mdi-paperclip",
  "mdi-parking",
  "mdi-paw",
  "mdi-peace",
  "mdi-pen",
  "mdi-percent",
  "mdi-phone-in-talk",
  "mdi-piano",
  "mdi-pill",
  "mdi-pin",
  "mdi-pizza",
  "mdi-playlist-music",
  "mdi-power",
  "mdi-presentation",
  "mdi-printer",
  "mdi-puzzle",
  "mdi-qrcode",
  "mdi-radio",
  "mdi-receipt",
  "mdi-robot",
  "mdi-rocket",
  "mdi-rotate-left",
  "mdi-rss",
  "mdi-ruler",
  "mdi-run",
  "mdi-safe",
  "mdi-school",
  "mdi-scissors",
  "mdi-screwdriver",
  "mdi-script",
  "mdi-security",
  "mdi-seed",
  "mdi-server",
  "mdi-shield",
  "mdi-ship",
  "mdi-shopping-music",
  "mdi-shovel",
  "mdi-signal",
  "mdi-sitemap",
  "mdi-skype",
  "mdi-sleep",
  "mdi-snowflake",
  "mdi-soccer",
  "mdi-sofa",
  "mdi-sort",
  "mdi-spa",
  "mdi-speaker",
  "mdi-speedometer",
  "mdi-spotlight",
  "mdi-spray",
  "mdi-stack-overflow",
  "mdi-stairs",
  "mdi-star-outline",
  "mdi-store",
  "mdi-subway",
  "mdi-sun",
  "mdi-swim",
  "mdi-sync",
  "mdi-tablet",
  "mdi-target",
  "mdi-taxi",
  "mdi-tea",
  "mdi-telescope",
  "mdi-television",
  "mdi-tennis",
  "mdi-test-tube",
  "mdi-text",
  "mdi-thermometer",
  "mdi-thumb-up",
  "mdi-ticket",
  "mdi-tie",
  "mdi-timer",
  "mdi-tools",
  "mdi-train",
  "mdi-tree",
  "mdi-trophy",
  "mdi-truck",
  "mdi-twitter",
  "mdi-umbrella",
  "mdi-ungroup",
  "mdi-update",
  "mdi-usb",
  "mdi-vector-square",
  "mdi-vibrate",
  "mdi-view-dashboard",
  "mdi-virus",
  "mdi-wallet",
  "mdi-watch",
  "mdi-water",
  "mdi-weather-cloudy",
  "mdi-web",
  "mdi-weight",
  "mdi-wheelchair",
  "mdi-white-balance-sunny",
  "mdi-wikipedia",
  "mdi-window-maximize",
  "mdi-wordpress",
  "mdi-worker",
  "mdi-wrap",
  "mdi-wrench",
  "mdi-xbox",
  "mdi-youtube",
  "mdi-zip-box",
  "mdi-zodiac-aquarius",
  "mdi-zoom-in"
];

const theme = `// Vuetify theme colors :

dark: {
  colors: {
    background: '#1c2027',
    surface: '#10131b',
    'surface-dim': '#10131b',
    'surface-bright': '#363942',
    'on-surface': '#e0e2ed',
    outline: '#8b90a0',
    'outline-variant': '#414754',
    primary: '#adc7ff',
    'on-primary': '#002e68',
    secondary: '#7dd0ff',
    'on-secondary': '#00344a',
    tertiary: '#cbbeff',
    'on-tertiary': '#340098',
    error: '#ffb4ab',
    'on-error': '#690005',
    'surface-light': '#363942',
  },
  dark: true,
  variables: {
    'overlay-background': '#161c28',
  },
}`;

function highlightResult(text, matches, length) {
  if (matches == null) return text;
  if (Array.isArray(matches)) throw new Error("Multiple matches is not implemented");
  return typeof matches === "number" && ~matches ? createVNode(Fragment, null, [createVNode("span", {
    "class": "v-autocomplete__unmask"
  }, [text.substr(0, matches)]), createVNode("span", {
    "class": "v-autocomplete__mask"
  }, [text.substr(matches, length)]), createVNode("span", {
    "class": "v-autocomplete__unmask"
  }, [text.substr(matches + length)])]) : text;
}
const makeVAutocompleteProps = propsFactory({
  autoSelectFirst: {
    type: [Boolean, String]
  },
  clearOnSelect: Boolean,
  search: String,
  ...makeFilterProps({
    filterKeys: ["title"]
  }),
  ...makeSelectProps(),
  ...omit(makeVTextFieldProps({
    modelValue: null,
    role: "combobox"
  }), ["validationValue", "dirty", "appendInnerIcon"]),
  ...makeTransitionProps({
    transition: false
  })
}, "VAutocomplete");
const VAutocomplete = genericComponent()({
  name: "VAutocomplete",
  props: makeVAutocompleteProps(),
  emits: {
    "update:focused": (focused) => true,
    "update:search": (value) => true,
    "update:modelValue": (value) => true,
    "update:menu": (value) => true
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      t
    } = useLocale();
    const vTextFieldRef = ref();
    const isFocused = shallowRef(false);
    const isPristine = shallowRef(true);
    const listHasFocus = shallowRef(false);
    const vMenuRef = ref();
    const vVirtualScrollRef = ref();
    const _menu = useProxiedModel(props, "menu");
    const menu = computed({
      get: () => _menu.value,
      set: (v) => {
        var _a;
        if (_menu.value && !v && ((_a = vMenuRef.value) == null ? void 0 : _a.ΨopenChildren.size)) return;
        _menu.value = v;
      }
    });
    const selectionIndex = shallowRef(-1);
    const color = computed(() => {
      var _a;
      return (_a = vTextFieldRef.value) == null ? void 0 : _a.color;
    });
    const label = computed(() => menu.value ? props.closeText : props.openText);
    const {
      items,
      transformIn,
      transformOut
    } = useItems(props);
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor(color);
    const search = useProxiedModel(props, "search", "");
    const model = useProxiedModel(props, "modelValue", [], (v) => transformIn(v === null ? [null] : wrapInArray(v)), (v) => {
      const transformed = transformOut(v);
      return props.multiple ? transformed : transformed[0] ?? null;
    });
    const counterValue = computed(() => {
      return typeof props.counterValue === "function" ? props.counterValue(model.value) : typeof props.counterValue === "number" ? props.counterValue : model.value.length;
    });
    const form = useForm(props);
    const {
      filteredItems,
      getMatches
    } = useFilter(props, items, () => isPristine.value ? "" : search.value);
    const displayItems = computed(() => {
      if (props.hideSelected) {
        return filteredItems.value.filter((filteredItem) => !model.value.some((s) => s.value === filteredItem.value));
      }
      return filteredItems.value;
    });
    const hasChips = computed(() => !!(props.chips || slots.chip));
    const hasSelectionSlot = computed(() => hasChips.value || !!slots.selection);
    const selectedValues = computed(() => model.value.map((selection) => selection.props.value));
    const highlightFirst = computed(() => {
      var _a;
      const selectFirst = props.autoSelectFirst === true || props.autoSelectFirst === "exact" && search.value === ((_a = displayItems.value[0]) == null ? void 0 : _a.title);
      return selectFirst && displayItems.value.length > 0 && !isPristine.value && !listHasFocus.value;
    });
    const menuDisabled = computed(() => props.hideNoData && !displayItems.value.length || form.isReadonly.value || form.isDisabled.value);
    const listRef = ref();
    const listEvents = useScrolling(listRef, vTextFieldRef);
    function onClear(e) {
      if (props.openOnClear) {
        menu.value = true;
      }
      search.value = "";
    }
    function onMousedownControl() {
      if (menuDisabled.value) return;
      menu.value = true;
    }
    function onMousedownMenuIcon(e) {
      if (menuDisabled.value) return;
      if (isFocused.value) {
        e.preventDefault();
        e.stopPropagation();
      }
      menu.value = !menu.value;
    }
    function onListKeydown(e) {
      var _a;
      if (e.key !== " " && checkPrintable(e)) {
        (_a = vTextFieldRef.value) == null ? void 0 : _a.focus();
      }
    }
    function onKeydown(e) {
      var _a, _b, _c;
      if (form.isReadonly.value) return;
      const selectionStart = vTextFieldRef.value.selectionStart;
      const length = model.value.length;
      if (["Enter", "ArrowDown", "ArrowUp"].includes(e.key)) {
        e.preventDefault();
      }
      if (["Enter", "ArrowDown"].includes(e.key)) {
        menu.value = true;
      }
      if (["Escape"].includes(e.key)) {
        menu.value = false;
      }
      if (highlightFirst.value && ["Enter", "Tab"].includes(e.key) && !model.value.some((_ref2) => {
        let {
          value
        } = _ref2;
        return value === displayItems.value[0].value;
      })) {
        select(displayItems.value[0]);
      }
      if (e.key === "ArrowDown" && highlightFirst.value) {
        (_a = listRef.value) == null ? void 0 : _a.focus("next");
      }
      if (["Backspace", "Delete"].includes(e.key)) {
        if (!props.multiple && hasSelectionSlot.value && model.value.length > 0 && !search.value) return select(model.value[0], false);
        if (~selectionIndex.value) {
          e.preventDefault();
          const originalSelectionIndex = selectionIndex.value;
          select(model.value[selectionIndex.value], false);
          selectionIndex.value = originalSelectionIndex >= length - 1 ? length - 2 : originalSelectionIndex;
        } else if (e.key === "Backspace" && !search.value) {
          selectionIndex.value = length - 1;
        }
        return;
      }
      if (!props.multiple) return;
      if (e.key === "ArrowLeft") {
        if (selectionIndex.value < 0 && selectionStart > 0) return;
        const prev = selectionIndex.value > -1 ? selectionIndex.value - 1 : length - 1;
        if (model.value[prev]) {
          selectionIndex.value = prev;
        } else {
          selectionIndex.value = -1;
          vTextFieldRef.value.setSelectionRange((_b = search.value) == null ? void 0 : _b.length, (_c = search.value) == null ? void 0 : _c.length);
        }
      } else if (e.key === "ArrowRight") {
        if (selectionIndex.value < 0) return;
        const next = selectionIndex.value + 1;
        if (model.value[next]) {
          selectionIndex.value = next;
        } else {
          selectionIndex.value = -1;
          vTextFieldRef.value.setSelectionRange(0, 0);
        }
      } else if (~selectionIndex.value && checkPrintable(e)) {
        selectionIndex.value = -1;
      }
    }
    function onChange(e) {
      if (matchesSelector(vTextFieldRef.value) || matchesSelector(vTextFieldRef.value)) ;
    }
    function onAfterEnter() {
      var _a;
      if (props.eager) {
        (_a = vVirtualScrollRef.value) == null ? void 0 : _a.calculateVisibleItems();
      }
    }
    function onAfterLeave() {
      var _a;
      if (isFocused.value) {
        isPristine.value = true;
        (_a = vTextFieldRef.value) == null ? void 0 : _a.focus();
      }
    }
    function onFocusin(e) {
      isFocused.value = true;
      setTimeout(() => {
        listHasFocus.value = true;
      });
    }
    function onFocusout(e) {
      listHasFocus.value = false;
    }
    function onUpdateModelValue(v) {
      if (v == null || v === "" && !props.multiple && !hasSelectionSlot.value) model.value = [];
    }
    const isSelecting = shallowRef(false);
    function select(item) {
      let set = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      if (!item || item.props.disabled) return;
      if (props.multiple) {
        const index = model.value.findIndex((selection) => (props.valueComparator || deepEqual)(selection.value, item.value));
        const add = set == null ? !~index : set;
        if (~index) {
          const value = add ? [...model.value, item] : [...model.value];
          value.splice(index, 1);
          model.value = value;
        } else if (add) {
          model.value = [...model.value, item];
        }
        if (props.clearOnSelect) {
          search.value = "";
        }
      } else {
        const add = set !== false;
        model.value = add ? [item] : [];
        search.value = add && !hasSelectionSlot.value ? item.title : "";
        nextTick(() => {
          menu.value = false;
          isPristine.value = true;
        });
      }
    }
    watch(isFocused, (val, oldVal) => {
      var _a;
      if (val === oldVal) return;
      if (val) {
        isSelecting.value = true;
        search.value = props.multiple || hasSelectionSlot.value ? "" : String(((_a = model.value.at(-1)) == null ? void 0 : _a.props.title) ?? "");
        isPristine.value = true;
        nextTick(() => isSelecting.value = false);
      } else {
        if (!props.multiple && search.value == null) model.value = [];
        menu.value = false;
        if (!model.value.some((_ref3) => {
          let {
            title
          } = _ref3;
          return title === search.value;
        })) search.value = "";
        selectionIndex.value = -1;
      }
    });
    watch(search, (val) => {
      if (!isFocused.value || isSelecting.value) return;
      if (val) menu.value = true;
      isPristine.value = !val;
    });
    watch(menu, () => {
      if (!props.hideSelected && menu.value && model.value.length) {
        displayItems.value.findIndex((item) => model.value.some((s) => item.value === s.value));
      }
    });
    watch(() => props.items, (newVal, oldVal) => {
      if (menu.value) return;
      if (isFocused.value && !oldVal.length && newVal.length) {
        menu.value = true;
      }
    });
    useRender(() => {
      const hasList = !!(!props.hideNoData || displayItems.value.length || slots["prepend-item"] || slots["append-item"] || slots["no-data"]);
      const isDirty = model.value.length > 0;
      const textFieldProps = VTextField.filterProps(props);
      return createVNode(VTextField, mergeProps({
        "ref": vTextFieldRef
      }, textFieldProps, {
        "modelValue": search.value,
        "onUpdate:modelValue": [($event) => search.value = $event, onUpdateModelValue],
        "focused": isFocused.value,
        "onUpdate:focused": ($event) => isFocused.value = $event,
        "validationValue": model.externalValue,
        "counterValue": counterValue.value,
        "dirty": isDirty,
        "onChange": onChange,
        "class": ["v-autocomplete", `v-autocomplete--${props.multiple ? "multiple" : "single"}`, {
          "v-autocomplete--active-menu": menu.value,
          "v-autocomplete--chips": !!props.chips,
          "v-autocomplete--selection-slot": !!hasSelectionSlot.value,
          "v-autocomplete--selecting-index": selectionIndex.value > -1
        }, props.class],
        "style": props.style,
        "readonly": form.isReadonly.value,
        "placeholder": isDirty ? void 0 : props.placeholder,
        "onClick:clear": onClear,
        "onMousedown:control": onMousedownControl,
        "onKeydown": onKeydown
      }), {
        ...slots,
        default: () => createVNode(Fragment, null, [createVNode(VMenu, mergeProps({
          "ref": vMenuRef,
          "modelValue": menu.value,
          "onUpdate:modelValue": ($event) => menu.value = $event,
          "activator": "parent",
          "contentClass": "v-autocomplete__content",
          "disabled": menuDisabled.value,
          "eager": props.eager,
          "maxHeight": 310,
          "openOnClick": false,
          "closeOnContentClick": false,
          "transition": props.transition,
          "onAfterEnter": onAfterEnter,
          "onAfterLeave": onAfterLeave
        }, props.menuProps), {
          default: () => [hasList && createVNode(VList, mergeProps({
            "ref": listRef,
            "selected": selectedValues.value,
            "selectStrategy": props.multiple ? "independent" : "single-independent",
            "onMousedown": (e) => e.preventDefault(),
            "onKeydown": onListKeydown,
            "onFocusin": onFocusin,
            "onFocusout": onFocusout,
            "tabindex": "-1",
            "aria-live": "polite",
            "color": props.itemColor ?? props.color
          }, listEvents, props.listProps), {
            default: () => {
              var _a, _b, _c;
              return [(_a = slots["prepend-item"]) == null ? void 0 : _a.call(slots), !displayItems.value.length && !props.hideNoData && (((_b = slots["no-data"]) == null ? void 0 : _b.call(slots)) ?? createVNode(VListItem, {
                "key": "no-data",
                "title": t(props.noDataText)
              }, null)), createVNode(VVirtualScroll, {
                "ref": vVirtualScrollRef,
                "renderless": true,
                "items": displayItems.value
              }, {
                default: (_ref4) => {
                  var _a2;
                  let {
                    item,
                    index,
                    itemRef
                  } = _ref4;
                  const itemProps = mergeProps(item.props, {
                    ref: itemRef,
                    key: item.value,
                    active: highlightFirst.value && index === 0 ? true : void 0,
                    onClick: () => select(item, null)
                  });
                  return ((_a2 = slots.item) == null ? void 0 : _a2.call(slots, {
                    item,
                    index,
                    props: itemProps
                  })) ?? createVNode(VListItem, mergeProps(itemProps, {
                    "role": "option"
                  }), {
                    prepend: (_ref5) => {
                      let {
                        isSelected
                      } = _ref5;
                      return createVNode(Fragment, null, [props.multiple && !props.hideSelected ? createVNode(VCheckboxBtn, {
                        "key": item.value,
                        "modelValue": isSelected,
                        "ripple": false,
                        "tabindex": "-1"
                      }, null) : void 0, item.props.prependAvatar && createVNode(VAvatar, {
                        "image": item.props.prependAvatar
                      }, null), item.props.prependIcon && createVNode(VIcon, {
                        "icon": item.props.prependIcon
                      }, null)]);
                    },
                    title: () => {
                      var _a3, _b2;
                      return isPristine.value ? item.title : highlightResult(item.title, (_a3 = getMatches(item)) == null ? void 0 : _a3.title, ((_b2 = search.value) == null ? void 0 : _b2.length) ?? 0);
                    }
                  });
                }
              }), (_c = slots["append-item"]) == null ? void 0 : _c.call(slots)];
            }
          })]
        }), model.value.map((item, index) => {
          function onChipClose(e) {
            e.stopPropagation();
            e.preventDefault();
            select(item, false);
          }
          const slotProps = {
            "onClick:close": onChipClose,
            onKeydown(e) {
              if (e.key !== "Enter" && e.key !== " ") return;
              e.preventDefault();
              e.stopPropagation();
              onChipClose(e);
            },
            onMousedown(e) {
              e.preventDefault();
              e.stopPropagation();
            },
            modelValue: true,
            "onUpdate:modelValue": void 0
          };
          const hasSlot = hasChips.value ? !!slots.chip : !!slots.selection;
          const slotContent = hasSlot ? ensureValidVNode(hasChips.value ? slots.chip({
            item,
            index,
            props: slotProps
          }) : slots.selection({
            item,
            index
          })) : void 0;
          if (hasSlot && !slotContent) return void 0;
          return createVNode("div", {
            "key": item.value,
            "class": ["v-autocomplete__selection", index === selectionIndex.value && ["v-autocomplete__selection--selected", textColorClasses.value]],
            "style": index === selectionIndex.value ? textColorStyles.value : {}
          }, [hasChips.value ? !slots.chip ? createVNode(VChip, mergeProps({
            "key": "chip",
            "closable": props.closableChips,
            "size": "small",
            "text": item.title,
            "disabled": item.props.disabled
          }, slotProps), null) : createVNode(VDefaultsProvider, {
            "key": "chip-defaults",
            "defaults": {
              VChip: {
                closable: props.closableChips,
                size: "small",
                text: item.title
              }
            }
          }, {
            default: () => [slotContent]
          }) : slotContent ?? createVNode("span", {
            "class": "v-autocomplete__selection-text"
          }, [item.title, props.multiple && index < model.value.length - 1 && createVNode("span", {
            "class": "v-autocomplete__selection-comma"
          }, [createTextVNode(",")])])]);
        })]),
        "append-inner": function() {
          var _a;
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return createVNode(Fragment, null, [(_a = slots["append-inner"]) == null ? void 0 : _a.call(slots, ...args), props.menuIcon ? createVNode(VIcon, {
            "class": "v-autocomplete__menu-icon",
            "icon": props.menuIcon,
            "onMousedown": onMousedownMenuIcon,
            "onClick": noop,
            "aria-label": t(label.value),
            "title": t(label.value),
            "tabindex": "-1"
          }, null) : void 0]);
        }
      });
    });
    return forwardRefs({
      isFocused,
      isPristine,
      menu,
      search,
      filteredItems,
      select
    }, vTextFieldRef);
  }
});

const makeLineProps = propsFactory({
  autoDraw: Boolean,
  autoDrawDuration: [Number, String],
  autoDrawEasing: {
    type: String,
    default: "ease"
  },
  color: String,
  gradient: {
    type: Array,
    default: () => []
  },
  gradientDirection: {
    type: String,
    validator: (val) => ["top", "bottom", "left", "right"].includes(val),
    default: "top"
  },
  height: {
    type: [String, Number],
    default: 75
  },
  labels: {
    type: Array,
    default: () => []
  },
  labelSize: {
    type: [Number, String],
    default: 7
  },
  lineWidth: {
    type: [String, Number],
    default: 4
  },
  id: String,
  itemValue: {
    type: String,
    default: "value"
  },
  modelValue: {
    type: Array,
    default: () => []
  },
  min: [String, Number],
  max: [String, Number],
  padding: {
    type: [String, Number],
    default: 8
  },
  showLabels: Boolean,
  smooth: [Boolean, String, Number],
  width: {
    type: [Number, String],
    default: 300
  }
}, "Line");

const makeVBarlineProps = propsFactory({
  autoLineWidth: Boolean,
  ...makeLineProps()
}, "VBarline");
const VBarline = genericComponent()({
  name: "VBarline",
  props: makeVBarlineProps(),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const uid = getUid();
    const id = computed(() => props.id || `barline-${uid}`);
    const autoDrawDuration = computed(() => Number(props.autoDrawDuration) || 500);
    const hasLabels = computed(() => {
      return Boolean(props.showLabels || props.labels.length > 0 || !!(slots == null ? void 0 : slots.label));
    });
    const lineWidth = computed(() => parseFloat(props.lineWidth) || 4);
    const totalWidth = computed(() => Math.max(props.modelValue.length * lineWidth.value, Number(props.width)));
    const boundary = computed(() => {
      return {
        minX: 0,
        maxX: totalWidth.value,
        minY: 0,
        maxY: parseInt(props.height, 10)
      };
    });
    const items = computed(() => props.modelValue.map((item) => getPropertyFromItem(item, props.itemValue, item)));
    function genBars(values, boundary2) {
      const {
        minX,
        maxX,
        minY,
        maxY
      } = boundary2;
      const totalValues = values.length;
      let maxValue = props.max != null ? Number(props.max) : Math.max(...values);
      let minValue = props.min != null ? Number(props.min) : Math.min(...values);
      if (minValue > 0 && props.min == null) minValue = 0;
      if (maxValue < 0 && props.max == null) maxValue = 0;
      const gridX = maxX / totalValues;
      const gridY = (maxY - minY) / (maxValue - minValue || 1);
      const horizonY = maxY - Math.abs(minValue * gridY);
      return values.map((value, index) => {
        const height = Math.abs(gridY * value);
        return {
          x: minX + index * gridX,
          y: horizonY - height + Number(value < 0) * height,
          height,
          value
        };
      });
    }
    const parsedLabels = computed(() => {
      const labels = [];
      const points = genBars(items.value, boundary.value);
      const len = points.length;
      for (let i = 0; labels.length < len; i++) {
        const item = points[i];
        let value = props.labels[i];
        if (!value) {
          value = typeof item === "object" ? item.value : item;
        }
        labels.push({
          x: item.x,
          value: String(value)
        });
      }
      return labels;
    });
    const bars = computed(() => genBars(items.value, boundary.value));
    const offsetX = computed(() => (Math.abs(bars.value[0].x - bars.value[1].x) - lineWidth.value) / 2);
    const smooth = computed(() => typeof props.smooth === "boolean" ? props.smooth ? 2 : 0 : Number(props.smooth));
    useRender(() => {
      const gradientData = !props.gradient.slice().length ? [""] : props.gradient.slice().reverse();
      return createVNode("svg", {
        "display": "block"
      }, [createVNode("defs", null, [createVNode("linearGradient", {
        "id": id.value,
        "gradientUnits": "userSpaceOnUse",
        "x1": props.gradientDirection === "left" ? "100%" : "0",
        "y1": props.gradientDirection === "top" ? "100%" : "0",
        "x2": props.gradientDirection === "right" ? "100%" : "0",
        "y2": props.gradientDirection === "bottom" ? "100%" : "0"
      }, [gradientData.map((color, index) => createVNode("stop", {
        "offset": index / Math.max(gradientData.length - 1, 1),
        "stop-color": color || "currentColor"
      }, null))])]), createVNode("clipPath", {
        "id": `${id.value}-clip`
      }, [bars.value.map((item) => createVNode("rect", {
        "x": item.x + offsetX.value,
        "y": item.y,
        "width": lineWidth.value,
        "height": item.height,
        "rx": smooth.value,
        "ry": smooth.value
      }, [props.autoDraw && createVNode(Fragment, null, [createVNode("animate", {
        "attributeName": "y",
        "from": item.y + item.height,
        "to": item.y,
        "dur": `${autoDrawDuration.value}ms`,
        "fill": "freeze"
      }, null), createVNode("animate", {
        "attributeName": "height",
        "from": "0",
        "to": item.height,
        "dur": `${autoDrawDuration.value}ms`,
        "fill": "freeze"
      }, null)])]))]), hasLabels.value && createVNode("g", {
        "key": "labels",
        "style": {
          textAnchor: "middle",
          dominantBaseline: "mathematical",
          fill: "currentColor"
        }
      }, [parsedLabels.value.map((item, i) => {
        var _a;
        return createVNode("text", {
          "x": item.x + offsetX.value + lineWidth.value / 2,
          "y": parseInt(props.height, 10) - 2 + (parseInt(props.labelSize, 10) || 7 * 0.75),
          "font-size": Number(props.labelSize) || 7
        }, [((_a = slots.label) == null ? void 0 : _a.call(slots, {
          index: i,
          value: item.value
        })) ?? item.value]);
      })]), createVNode("g", {
        "clip-path": `url(#${id.value}-clip)`,
        "fill": `url(#${id.value})`
      }, [createVNode("rect", {
        "x": 0,
        "y": 0,
        "width": Math.max(props.modelValue.length * lineWidth.value, Number(props.width)),
        "height": props.height
      }, null)])]);
    });
  }
});

function genPath(points, radius) {
  let fill = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  let height = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 75;
  if (points.length === 0) return "";
  const start = points.shift();
  const end = points[points.length - 1];
  return (fill ? `M${start.x} ${height - start.x + 2} L${start.x} ${start.y}` : `M${start.x} ${start.y}`) + points.map((point, index) => {
    const next = points[index + 1];
    const prev = points[index - 1] || start;
    const isCollinear = next && checkCollinear(next, point, prev);
    if (!next || isCollinear) {
      return `L${point.x} ${point.y}`;
    }
    const threshold = Math.min(getDistance(prev, point), getDistance(next, point));
    const isTooCloseForRadius = threshold / 2 < radius;
    const radiusForPoint = isTooCloseForRadius ? threshold / 2 : radius;
    const before = moveTo(prev, point, radiusForPoint);
    const after = moveTo(next, point, radiusForPoint);
    return `L${before.x} ${before.y}S${point.x} ${point.y} ${after.x} ${after.y}`;
  }).join("") + (fill ? `L${end.x} ${height - start.x + 2} Z` : "");
}
function int(value) {
  return parseInt(value, 10);
}
function checkCollinear(p0, p1, p2) {
  return int(p0.x + p2.x) === int(2 * p1.x) && int(p0.y + p2.y) === int(2 * p1.y);
}
function getDistance(p1, p2) {
  return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
}
function moveTo(to, from, radius) {
  const vector = {
    x: to.x - from.x,
    y: to.y - from.y
  };
  const length = Math.sqrt(vector.x * vector.x + vector.y * vector.y);
  const unitVector = {
    x: vector.x / length,
    y: vector.y / length
  };
  return {
    x: from.x + unitVector.x * radius,
    y: from.y + unitVector.y * radius
  };
}

const makeVTrendlineProps = propsFactory({
  fill: Boolean,
  ...makeLineProps()
}, "VTrendline");
const VTrendline = genericComponent()({
  name: "VTrendline",
  props: makeVTrendlineProps(),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const uid = getUid();
    const id = computed(() => props.id || `trendline-${uid}`);
    const autoDrawDuration = computed(() => Number(props.autoDrawDuration) || (props.fill ? 500 : 2e3));
    const lastLength = ref(0);
    const path = ref(null);
    function genPoints(values, boundary2) {
      const {
        minX,
        maxX,
        minY,
        maxY
      } = boundary2;
      const totalValues = values.length;
      const maxValue = props.max != null ? Number(props.max) : Math.max(...values);
      const minValue = props.min != null ? Number(props.min) : Math.min(...values);
      const gridX = (maxX - minX) / (totalValues - 1);
      const gridY = (maxY - minY) / (maxValue - minValue || 1);
      return values.map((value, index) => {
        return {
          x: minX + index * gridX,
          y: maxY - (value - minValue) * gridY,
          value
        };
      });
    }
    const hasLabels = computed(() => {
      return Boolean(props.showLabels || props.labels.length > 0 || !!(slots == null ? void 0 : slots.label));
    });
    const lineWidth = computed(() => {
      return parseFloat(props.lineWidth) || 4;
    });
    const totalWidth = computed(() => Number(props.width));
    const boundary = computed(() => {
      const padding = Number(props.padding);
      return {
        minX: padding,
        maxX: totalWidth.value - padding,
        minY: padding,
        maxY: parseInt(props.height, 10) - padding
      };
    });
    const items = computed(() => props.modelValue.map((item) => getPropertyFromItem(item, props.itemValue, item)));
    const parsedLabels = computed(() => {
      const labels = [];
      const points = genPoints(items.value, boundary.value);
      const len = points.length;
      for (let i = 0; labels.length < len; i++) {
        const item = points[i];
        let value = props.labels[i];
        if (!value) {
          value = typeof item === "object" ? item.value : item;
        }
        labels.push({
          x: item.x,
          value: String(value)
        });
      }
      return labels;
    });
    watch(() => props.modelValue, async () => {
      await nextTick();
      if (!props.autoDraw || !path.value) return;
      const pathRef = path.value;
      const length = pathRef.getTotalLength();
      if (!props.fill) {
        pathRef.style.strokeDasharray = `${length}`;
        pathRef.style.strokeDashoffset = `${length}`;
        pathRef.getBoundingClientRect();
        pathRef.style.transition = `stroke-dashoffset ${autoDrawDuration.value}ms ${props.autoDrawEasing}`;
        pathRef.style.strokeDashoffset = "0";
      } else {
        pathRef.style.transformOrigin = "bottom center";
        pathRef.style.transition = "none";
        pathRef.style.transform = `scaleY(0)`;
        pathRef.getBoundingClientRect();
        pathRef.style.transition = `transform ${autoDrawDuration.value}ms ${props.autoDrawEasing}`;
        pathRef.style.transform = `scaleY(1)`;
      }
      lastLength.value = length;
    }, {
      immediate: true
    });
    function genPath$1(fill) {
      const smoothValue = typeof props.smooth === "boolean" ? props.smooth ? 8 : 0 : Number(props.smooth);
      return genPath(genPoints(items.value, boundary.value), smoothValue, fill, parseInt(props.height, 10));
    }
    useRender(() => {
      var _a;
      const gradientData = !props.gradient.slice().length ? [""] : props.gradient.slice().reverse();
      return createVNode("svg", {
        "display": "block",
        "stroke-width": parseFloat(props.lineWidth) ?? 4
      }, [createVNode("defs", null, [createVNode("linearGradient", {
        "id": id.value,
        "gradientUnits": "userSpaceOnUse",
        "x1": props.gradientDirection === "left" ? "100%" : "0",
        "y1": props.gradientDirection === "top" ? "100%" : "0",
        "x2": props.gradientDirection === "right" ? "100%" : "0",
        "y2": props.gradientDirection === "bottom" ? "100%" : "0"
      }, [gradientData.map((color, index) => createVNode("stop", {
        "offset": index / Math.max(gradientData.length - 1, 1),
        "stop-color": color || "currentColor"
      }, null))])]), hasLabels.value && createVNode("g", {
        "key": "labels",
        "style": {
          textAnchor: "middle",
          dominantBaseline: "mathematical",
          fill: "currentColor"
        }
      }, [parsedLabels.value.map((item, i) => {
        var _a2;
        return createVNode("text", {
          "x": item.x + lineWidth.value / 2 + lineWidth.value / 2,
          "y": parseInt(props.height, 10) - 4 + (parseInt(props.labelSize, 10) || 7 * 0.75),
          "font-size": Number(props.labelSize) || 7
        }, [((_a2 = slots.label) == null ? void 0 : _a2.call(slots, {
          index: i,
          value: item.value
        })) ?? item.value]);
      })]), createVNode("path", {
        "ref": path,
        "d": genPath$1(props.fill),
        "fill": props.fill ? `url(#${id.value})` : "none",
        "stroke": props.fill ? "none" : `url(#${id.value})`
      }, null), props.fill && createVNode("path", {
        "d": genPath$1(false),
        "fill": "none",
        "stroke": props.color ?? ((_a = props.gradient) == null ? void 0 : _a[0])
      }, null)]);
    });
  }
});

const makeVSparklineProps = propsFactory({
  type: {
    type: String,
    default: "trend"
  },
  ...makeVBarlineProps(),
  ...makeVTrendlineProps()
}, "VSparkline");
const VSparkline = genericComponent()({
  name: "VSparkline",
  props: makeVSparklineProps(),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor(toRef(props, "color"));
    const hasLabels = computed(() => {
      return Boolean(props.showLabels || props.labels.length > 0 || !!(slots == null ? void 0 : slots.label));
    });
    const totalHeight = computed(() => {
      let height = parseInt(props.height, 10);
      if (hasLabels.value) height += parseInt(props.labelSize, 10) * 1.5;
      return height;
    });
    useRender(() => {
      const Tag = props.type === "trend" ? VTrendline : VBarline;
      const lineProps = props.type === "trend" ? VTrendline.filterProps(props) : VBarline.filterProps(props);
      return createVNode(Tag, mergeProps({
        "key": props.type,
        "class": textColorClasses.value,
        "style": textColorStyles.value,
        "viewBox": `0 0 ${props.width} ${parseInt(totalHeight.value, 10)}`
      }, lineProps), slots);
    });
  }
});

const _sfc_main$5 = /* @__PURE__ */ defineComponent({
  __name: "studioCard",
  __ssrInlineRender: true,
  props: {
    initialContent: {
      type: String,
      default: ""
    },
    isPremium: {
      type: Boolean,
      default: false
    }
  },
  emits: ["update:content", "save"],
  setup(__props, { emit: __emit }) {
    const emit = __emit;
    const cardVariants = ["elevated", "flat", "tonal", "outlined", "text", "plain"];
    const cardColors = [
      { text: "Default", value: "default" },
      { text: "Primary", value: "primary" },
      { text: "Secondary", value: "secondary" },
      { text: "Success", value: "success" },
      { text: "Info", value: "info" },
      { text: "Warning", value: "warning" },
      { text: "Error", value: "error" }
    ];
    const buttonVariants = ["elevated", "flat", "tonal", "outlined", "text", "plain"];
    const progressSizes = ["x-small", "small", "default", "large", "x-large"];
    const roundedLabels = ["sm", "md", "lg", "xl", "pill"];
    const userStore = useUserStore();
    const propertiesTab = ref("content");
    const iconColorIndex = ref(5);
    const cardVariantIndex = ref(0);
    const cardColorIndex = ref(0);
    const buttonColorIndex = ref(5);
    const buttonVariantIndex = ref(2);
    ref("");
    const progressSizeIndex = ref(2);
    const progressColorIndex = ref(1);
    const showCodeDialog = ref(false);
    const generatedCode = ref("");
    const showSnackbarMessage = ref(false);
    const snackbarText = ref("Code copied to clipboard");
    const snackbarColor = ref("success");
    const componentType = ref("card");
    const timelineItemsCount = ref(3);
    const timelineItems = ref([
      { title: "User 1", message: "Message sent", color: "primary" },
      { title: "User 2", message: "File uploaded", color: "success" },
      { title: "User 3", message: "Task completed", color: "info" },
      { title: "User 4", message: "Comment added", color: "warning" },
      { title: "User 5", message: "Status updated", color: "error" }
    ]);
    const cardProperties = ref({
      title: "Premium features",
      subtitle: "Unlock all UI components with a premium plan",
      text: "Lifetime access to all premium features and updates for only 300€ one time payment",
      image: "https://images.unsplash.com/photo-1519681393784-d120267933ba",
      icon: "mdi-crown",
      elevation: 2,
      padding: 8,
      rounded: "md",
      loading: false,
      disabled: false,
      hoverEffect: false,
      showButtons: true,
      buttonText: "Checkout",
      buttonWidth: 0,
      buttonLink: "/checkout",
      buttonPosition: "start",
      buttonIcon: "mdi-cart-outline",
      showProgress: false,
      progressValue: 75,
      indeterminate: false,
      progressWidth: 6,
      progressPosition: "inline",
      showProgressLabel: false,
      progressLabelStyle: "value",
      progressLabelText: "",
      showProgressBg: false,
      showTimeline: false,
      showSparkline: false,
      sparklineData: [0, 2, 5, 9, 5, 10, 3, 5, 0, 0, 1, 8, 2, 9, 0],
      sparklineColor: "primary",
      sparklineGradient: false,
      sparklineLineWidth: 2,
      sparklineShowLabels: false,
      sparklineLabels: ["Jan", "Fév", "Mar", "Avr", "Mai", "Juin", "Juil", "Août", "Sep", "Oct", "Nov", "Déc", "Jan", "Fév", "Mar"]
    });
    const cardVariant = computed(() => cardVariants[cardVariantIndex.value]);
    const cardColor = computed(() => cardColors[cardColorIndex.value].value);
    const buttonVariant = computed(() => buttonVariants[buttonVariantIndex.value]);
    const buttonColor = computed(() => cardColors[buttonColorIndex.value].value);
    const progressColor = computed(() => cardColors[progressColorIndex.value].value);
    const progressSize = computed(() => progressSizes[progressSizeIndex.value]);
    const iconColor = computed(() => cardColors[iconColorIndex.value].value);
    const setImage = (type) => {
      switch (type) {
        case "mountains":
          cardProperties.value.image = "https://images.unsplash.com/photo-1519681393784-d120267933ba";
          break;
        case "beach":
          cardProperties.value.image = "https://images.unsplash.com/photo-1507525428034-b723cf961d3e";
          break;
        case "forest":
          cardProperties.value.image = "https://images.unsplash.com/photo-1470770841072-f978cf4d019e";
          break;
      }
      generateCardCodeSilently();
    };
    const removeImage = () => {
      cardProperties.value.image = "";
      generateCardCodeSilently();
    };
    const progressPositions = [
      "inline",
      "top-left",
      "top-center",
      "top-right",
      "center-left",
      "center",
      "center-right",
      "bottom-left",
      "bottom-center",
      "bottom-right",
      "absolute"
    ];
    const progressBgColorIndex = ref(0);
    const progressBgColor = computed(() => cardColors[progressBgColorIndex.value].value);
    const sparklineColorIndex = ref(1);
    const sparklineColor = computed(() => cardColors[sparklineColorIndex.value].value);
    const sparklineDataText = ref(cardProperties.value.sparklineData.join(","));
    const sparklineLabelsText = ref(cardProperties.value.sparklineLabels.join(","));
    const updateSparklineData = () => {
      try {
        const values = sparklineDataText.value.split(",").map((v) => parseFloat(v.trim())).filter((v) => !isNaN(v));
        if (values.length > 0) {
          cardProperties.value.sparklineData = values;
        }
      } catch (e) {
        console.error("Error parsing sparkline data:", e);
      }
    };
    const updateSparklineLabels = () => {
      try {
        const labels = sparklineLabelsText.value.split(",").map((v) => v.trim());
        if (labels.length > 0) {
          cardProperties.value.sparklineLabels = labels;
        }
      } catch (e) {
        console.error("Error parsing sparkline labels:", e);
      }
    };
    function generateCardCode() {
      const card = cardProperties.value;
      let code = "<v-card";
      code += ` elevation="${card.elevation}"`;
      if (cardVariants[cardVariantIndex.value] !== "elevated") code += ` variant="${cardVariants[cardVariantIndex.value]}"`;
      if (cardColors[cardColorIndex.value].value !== "default") code += ` color="${cardColors[cardColorIndex.value].value}"`;
      if (card.loading) code += " loading";
      if (card.disabled) code += " disabled";
      if (card.rounded !== "md") code += ` rounded="${card.rounded}"`;
      if (card.padding !== 16) code += ` style="padding: ${card.padding}px;"`;
      if (card.hoverEffect) code += ' class="hover-effect"';
      code += ">";
      if (card.image) code += `
  <v-img src="${card.image}" height="200" cover></v-img>`;
      if (card.title) {
        code += `
  <v-card-title>`;
        if (card.icon) {
          code += `<v-icon start`;
          if (cardColors[iconColorIndex.value].value !== "default") {
            code += ` color="${cardColors[iconColorIndex.value].value}"`;
          }
          code += `>${card.icon}</v-icon> `;
        }
        code += `${card.title}</v-card-title>`;
      }
      if (card.subtitle) code += `
  <v-card-subtitle>${card.subtitle}</v-card-subtitle>`;
      if (card.text) code += `
  <v-card-text>${card.text}</v-card-text>`;
      if (card.showSparkline) {
        code += `
  <v-card-text>`;
        code += `
    <div class="d-flex flex-column align-center">`;
        code += `
      <v-sparkline`;
        code += `
        :model-value="[${card.sparklineData.join(", ")}]"`;
        if (cardColors[sparklineColorIndex.value].value !== "default") {
          code += `
        color="${cardColors[sparklineColorIndex.value].value}"`;
        }
        code += `
        :line-width="${card.sparklineLineWidth}"`;
        code += `
        :gradient="${card.sparklineGradient ? [cardColors[sparklineColorIndex.value].value !== "default" ? cardColors[sparklineColorIndex.value].value : "primary"] : void 0}"`;
        code += `
        :labels="${card.sparklineShowLabels ? JSON.stringify(card.sparklineLabels) : void 0}"`;
        code += `
        padding="16"`;
        code += `
        auto-draw`;
        code += `
        smooth`;
        code += `
      ></v-sparkline>`;
        code += `
    </div>`;
        code += `
  </v-card-text>`;
      }
      if (card.showTimeline) {
        code += `
  <v-card-text>`;
        code += `
    <div class="font-weight-bold ms-1 mb-2">Today</div>`;
        code += `
    <v-timeline align="start" density="compact">`;
        for (let i = 0; i < timelineItemsCount.value; i++) {
          const item = timelineItems.value[i];
          const color = item.color;
          code += `
      <v-timeline-item`;
          code += `
        dot-color="${color}"`;
          code += `
        size="x-small"`;
          code += `
      >`;
          code += `
        <div class="mb-4">`;
          code += `
          <div class="font-weight-normal">`;
          code += `
            <strong>${item.title}</strong> @{{ new Date().getHours() }}:{{ new Date().getMinutes() }}`;
          code += `
          </div>`;
          code += `
          <div>${item.message}</div>`;
          code += `
        </div>`;
          code += `
      </v-timeline-item>`;
        }
        code += `
    </v-timeline>`;
        code += `
  </v-card-text>`;
      }
      if (card.showButtons || card.showProgress) {
        code += `
  <v-card-actions${card.buttonPosition !== "start" ? ` class="justify-${card.buttonPosition}"` : ""}>`;
        if (card.showButtons) {
          code += `
    <v-btn ${cardColors[buttonColorIndex.value].value !== "default" ? `color="${cardColors[buttonColorIndex.value].value}" ` : ""}variant="${buttonVariants[buttonVariantIndex.value]}"${card.buttonWidth > 0 ? ` style="width: ${card.buttonWidth}%"` : ""} ${card.buttonIcon ? `append-icon="${card.buttonIcon}"` : ""} ${card.buttonLink ? `to="${card.buttonLink}"` : ""}>${card.buttonText || "Action"}</v-btn>`;
        }
        if (card.showProgress) {
          if (card.progressPosition !== "inline") {
            code += `
    <div class="${card.progressPosition === "absolute" ? "progress-absolute" : `progress-${card.progressPosition}`}">`;
          }
          code += `
    <v-progress-circular`;
          code += ` model-value="${card.progressValue}"`;
          if (cardColors[progressColorIndex.value].value !== "default") code += ` color="${cardColors[progressColorIndex.value].value}"`;
          if (progressSizes[progressSizeIndex.value] !== "default") code += ` size="${progressSizes[progressSizeIndex.value]}"`;
          if (card.progressPosition === "inline") code += ` class="ml-4"`;
          if (card.indeterminate) code += ` indeterminate`;
          if (card.progressWidth !== 6) code += ` width="${card.progressWidth}"`;
          if (card.showProgressBg && cardColors[progressBgColorIndex.value].value !== "default") {
            code += ` bg-color="${cardColors[progressBgColorIndex.value].value}"`;
          }
          if (card.showProgressLabel) {
            code += `>
      <template v-slot:default>
        <span class="${progressSizes[progressSizeIndex.value] === "x-small" || progressSizes[progressSizeIndex.value] === "small" ? "text-caption" : "text-body-2"}">${card.progressLabelStyle === "value" ? `{{ ${card.progressValue} }}%` : card.progressLabelText}</span>
      </template>
    </v-progress-circular>`;
          } else {
            code += `></v-progress-circular>`;
          }
          if (card.progressPosition !== "inline") {
            code += `
    </div>`;
          }
        }
        code += "\n  </v-card-actions>";
      }
      return code + "\n</v-card>" + theme;
    }
    function generateCardCodeSilently() {
      const code = generateCardCode();
      emit("update:content", code);
    }
    const previewCode = () => {
      generatedCode.value = generateCardCode();
      showCodeDialog.value = true;
    };
    const copyCardCode = () => {
      const code = generateCardCode();
      (void 0).clipboard.writeText(code).then(() => {
        snackbarText.value = "Code copied to clipboard!";
        showSnackbarMessage.value = true;
      }).catch((err) => {
        console.error("Error copying code:", err);
      });
      console.log(cardProperties.value);
    };
    watch([
      () => cardProperties.value,
      cardVariantIndex,
      cardColorIndex,
      buttonVariantIndex,
      buttonColorIndex,
      progressSizeIndex,
      progressColorIndex,
      sparklineColorIndex,
      timelineItemsCount
    ], () => {
      generateCardCodeSilently();
    }, { deep: true });
    const roundedIndexToValue = (index) => roundedLabels[index];
    const roundedValueToIndex = (value) => roundedLabels.indexOf(value);
    const roundedIndex = computed({
      get: () => roundedValueToIndex(cardProperties.value.rounded),
      set: (index) => {
        cardProperties.value.rounded = roundedIndexToValue(index);
      }
    });
    const getProgressPositionClass = () => {
      if (cardProperties.value.progressPosition === "inline") {
        return "ml-4";
      }
      return `progress-${cardProperties.value.progressPosition}`;
    };
    const getProgressLabelClass = () => {
      return progressSizes[progressSizeIndex.value] === "x-small" || progressSizes[progressSizeIndex.value] === "small" ? "text-caption" : "text-body-2";
    };
    const getProgressLabelText = () => {
      return cardProperties.value.progressLabelText || `${cardProperties.value.progressValue}%`;
    };
    const applyTemplate = (template) => {
      const templateData = getCardTemplate(template);
      Object.assign(cardProperties.value, templateData);
      const variantIndex = cardVariants.findIndex((v) => v === templateData.variant);
      if (variantIndex !== -1) cardVariantIndex.value = variantIndex;
      const colorIndex = cardColors.findIndex((c) => c.value === templateData.color);
      if (colorIndex !== -1) cardColorIndex.value = colorIndex;
      const btnVariantIndex = buttonVariants.findIndex((v) => v === templateData.buttonVariant);
      if (btnVariantIndex !== -1) buttonVariantIndex.value = btnVariantIndex;
      const btnColorIndex = cardColors.findIndex((c) => c.value === templateData.buttonColor);
      if (btnColorIndex !== -1) buttonColorIndex.value = btnColorIndex;
      const progSizeIndex = progressSizes.findIndex((s) => s === templateData.progressSize);
      if (progSizeIndex !== -1) progressSizeIndex.value = progSizeIndex;
      const progColorIndex = cardColors.findIndex((c) => c.value === templateData.progressColor);
      if (progColorIndex !== -1) progressColorIndex.value = progColorIndex;
      const sparkColorIndex = cardColors.findIndex((c) => c.value === templateData.sparklineColor);
      if (sparkColorIndex !== -1) sparklineColorIndex.value = sparkColorIndex;
      if (templateData.sparklineData) {
        sparklineDataText.value = templateData.sparklineData.join(",");
      }
      if (template === "timeline") {
        timelineItems.value = [
          { title: "Documentation", message: "Document added: Q3 Report", color: "primary" },
          { title: "Communication", message: "Comment on presentation", color: "success" },
          { title: "Development", message: "Task completed: Website update", color: "info" },
          { title: "Planning", message: "Meeting scheduled for tomorrow", color: "warning" },
          { title: "Project", message: "New project created: UI Redesign", color: "error" }
        ];
      }
      snackbarText.value = `${template.charAt(0).toUpperCase() + template.slice(1)} template applied
                    successfully!`;
      showSnackbarMessage.value = true;
      generateCardCodeSilently();
    };
    const customTemplateName = ref("");
    const saveCurrentTemplate = async () => {
      if (!customTemplateName.value) {
        snackbarText.value = "Please enter a template name";
        snackbarColor.value = "error";
        showSnackbarMessage.value = true;
        return;
      }
      const templateData = {
        ...JSON.parse(JSON.stringify(cardProperties.value)),
        variant: cardVariants[cardVariantIndex.value],
        color: cardColors[cardColorIndex.value].value,
        buttonVariant: buttonVariants[buttonVariantIndex.value],
        buttonColor: cardColors[buttonColorIndex.value].value,
        progressSize: progressSizes[progressSizeIndex.value],
        progressColor: cardColors[progressColorIndex.value].value
      };
      const response = await userStore.saveTemplate(customTemplateName.value, templateData, componentType.value);
      if (response) {
        snackbarText.value = `Template "${customTemplateName.value}" saved successfully`;
        showSnackbarMessage.value = true;
        customTemplateName.value = "";
        await userStore.loadData();
      } else {
        snackbarText.value = `Failed to save template "${customTemplateName.value}"`;
        showSnackbarMessage.value = true;
        snackbarColor.value = "error";
      }
    };
    watch(() => {
      return "";
    }, () => {
    }, { immediate: true });
    computed(() => userStore.user.isPremium);
    return (_ctx, _push, _parent, _attrs) => {
      _push(ssrRenderComponent(VApp, _attrs, {
        default: withCtx((_, _push2, _parent2, _scopeId) => {
          if (_push2) {
            _push2(ssrRenderComponent(VMain, { class: "w-100 h-100 overflow-hidden d-flex" }, {
              default: withCtx((_2, _push3, _parent3, _scopeId2) => {
                if (_push3) {
                  _push3(`<div class="control-panel" data-v-7998bce9${_scopeId2}>`);
                  _push3(ssrRenderComponent(VCard, {
                    flat: "",
                    class: "fill-height"
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(`<div class="px-4 py-2 d-flex align-center" data-v-7998bce9${_scopeId3}>`);
                        _push4(ssrRenderComponent(VChip, {
                          color: "success",
                          "prepend-icon": "mdi-vuejs",
                          size: "small",
                          class: "mr-2 px-4 py-2"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(`Vue.js`);
                            } else {
                              return [
                                createTextVNode("Vue.js")
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VChip, {
                          color: "info",
                          "prepend-icon": "mdi-vuetify",
                          size: "small",
                          class: "mr-2 px-4 py-2"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(`Vuetify`);
                            } else {
                              return [
                                createTextVNode("Vuetify")
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(premiumFeatures, {
                          "premium-link": "/subscribe",
                          title: "Studio components",
                          icon: "mdi-palette",
                          type: "chip",
                          "feature-key": "studioComponents"
                        }, null, _parent4, _scopeId3));
                        _push4(`</div>`);
                        _push4(ssrRenderComponent(VTabs, {
                          modelValue: propertiesTab.value,
                          "onUpdate:modelValue": ($event) => propertiesTab.value = $event,
                          color: "primary",
                          "align-tabs": "center",
                          class: "px-4"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VTab, { value: "content" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Content`);
                                  } else {
                                    return [
                                      createTextVNode("Content")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VTab, { value: "style" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Style`);
                                  } else {
                                    return [
                                      createTextVNode("Style")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VTab, { value: "actions" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Actions`);
                                  } else {
                                    return [
                                      createTextVNode("Actions")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VTab, { value: "data" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Data`);
                                  } else {
                                    return [
                                      createTextVNode("Data")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VTab, { value: "templates" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Templates`);
                                  } else {
                                    return [
                                      createTextVNode("Templates")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VTab, { value: "content" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Content")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "style" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Style")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "actions" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Actions")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "data" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Data")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "templates" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Templates")
                                  ]),
                                  _: 1
                                })
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VDivider, null, null, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VCardText, {
                          class: "pa-0 fill-height",
                          style: { "overflow-y": "auto" }
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VWindow, {
                                modelValue: propertiesTab.value,
                                "onUpdate:modelValue": ($event) => propertiesTab.value = $event,
                                class: "fill-height"
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VWindowItem, { value: "content" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-7998bce9${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VTextField, {
                                            modelValue: cardProperties.value.title,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.title = $event,
                                            label: "Title",
                                            variant: "outlined",
                                            density: "comfortable",
                                            clearable: "",
                                            "prepend-inner-icon": "mdi-format-title",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VTextField, {
                                            modelValue: cardProperties.value.subtitle,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.subtitle = $event,
                                            label: "Subtitle",
                                            variant: "outlined",
                                            density: "comfortable",
                                            clearable: "",
                                            "prepend-inner-icon": "mdi-format-text",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VTextarea, {
                                            modelValue: cardProperties.value.text,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.text = $event,
                                            label: "Text",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "auto-grow": "",
                                            rows: "3",
                                            "row-height": "20",
                                            clearable: "",
                                            "prepend-inner-icon": "mdi-text",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VTextField, {
                                            modelValue: cardProperties.value.image,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.image = $event,
                                            label: "Image URL",
                                            variant: "outlined",
                                            density: "comfortable",
                                            clearable: "",
                                            "prepend-inner-icon": "mdi-image",
                                            class: "mb-1"
                                          }, null, _parent7, _scopeId6));
                                          _push7(`<div class="d-flex flex-wrap mb-4" data-v-7998bce9${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VChipGroup, {
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VChip, {
                                                  size: "small",
                                                  value: "none",
                                                  onClick: removeImage
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`None`);
                                                    } else {
                                                      return [
                                                        createTextVNode("None")
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                                _push8(ssrRenderComponent(VChip, {
                                                  size: "small",
                                                  value: "mountains",
                                                  onClick: ($event) => setImage("mountains")
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`Mountains`);
                                                    } else {
                                                      return [
                                                        createTextVNode("Mountains")
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                                _push8(ssrRenderComponent(VChip, {
                                                  size: "small",
                                                  value: "beach",
                                                  onClick: ($event) => setImage("beach")
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`Beach`);
                                                    } else {
                                                      return [
                                                        createTextVNode("Beach")
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                                _push8(ssrRenderComponent(VChip, {
                                                  size: "small",
                                                  value: "forest",
                                                  onClick: ($event) => setImage("forest")
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`Forest`);
                                                    } else {
                                                      return [
                                                        createTextVNode("Forest")
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "none",
                                                    onClick: removeImage
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("None")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "mountains",
                                                    onClick: ($event) => setImage("mountains")
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Mountains")
                                                    ]),
                                                    _: 1
                                                  }, 8, ["onClick"]),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "beach",
                                                    onClick: ($event) => setImage("beach")
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Beach")
                                                    ]),
                                                    _: 1
                                                  }, 8, ["onClick"]),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "forest",
                                                    onClick: ($event) => setImage("forest")
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Forest")
                                                    ]),
                                                    _: 1
                                                  }, 8, ["onClick"])
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div>`);
                                          _push7(ssrRenderComponent(VSelect, {
                                            modelValue: cardProperties.value.icon,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.icon = $event,
                                            items: unref(icons),
                                            label: "Icon",
                                            variant: "outlined",
                                            density: "comfortable",
                                            clearable: "",
                                            "prepend-inner-icon": "mdi-pencil",
                                            class: "mb-4"
                                          }, {
                                            item: withCtx(({ item, props: props2 }, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VListItem, props2, {
                                                  prepend: withCtx((_7, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(ssrRenderComponent(VIcon, {
                                                        icon: item.raw
                                                      }, null, _parent9, _scopeId8));
                                                    } else {
                                                      return [
                                                        createVNode(VIcon, {
                                                          icon: item.raw
                                                        }, null, 8, ["icon"])
                                                      ];
                                                    }
                                                  }),
                                                  _: 2
                                                }, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VListItem, props2, {
                                                    prepend: withCtx(() => [
                                                      createVNode(VIcon, {
                                                        icon: item.raw
                                                      }, null, 8, ["icon"])
                                                    ]),
                                                    _: 2
                                                  }, 1040)
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          if (cardProperties.value.icon) {
                                            _push7(`<div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-7998bce9${_scopeId6}>Icon color</label><div class="color-selector-container" data-v-7998bce9${_scopeId6}>`);
                                            _push7(ssrRenderComponent(VBtnToggle, {
                                              modelValue: iconColorIndex.value,
                                              "onUpdate:modelValue": ($event) => iconColorIndex.value = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              "selected-class": "border-primary"
                                            }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`<!--[-->`);
                                                  ssrRenderList(cardColors, (color, index) => {
                                                    _push8(ssrRenderComponent(VBtn, {
                                                      key: color.value,
                                                      value: index,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                        if (_push9) {
                                                          if (color.value === "default") {
                                                            _push9(ssrRenderComponent(VIcon, null, {
                                                              default: withCtx((_9, _push10, _parent10, _scopeId9) => {
                                                                if (_push10) {
                                                                  _push10(`mdi-palette-outline`);
                                                                } else {
                                                                  return [
                                                                    createTextVNode("mdi-palette-outline")
                                                                  ];
                                                                }
                                                              }),
                                                              _: 2
                                                            }, _parent9, _scopeId8));
                                                          } else {
                                                            _push9(`<!---->`);
                                                          }
                                                        } else {
                                                          return [
                                                            color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                              default: withCtx(() => [
                                                                createTextVNode("mdi-palette-outline")
                                                              ]),
                                                              _: 1
                                                            })) : createCommentVNode("", true)
                                                          ];
                                                        }
                                                      }),
                                                      _: 2
                                                    }, _parent8, _scopeId7));
                                                  });
                                                  _push8(`<!--]-->`);
                                                } else {
                                                  return [
                                                    (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                      return createVNode(VBtn, {
                                                        key: color.value,
                                                        value: index,
                                                        color: color.value !== "default" ? color.value : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: "ma-1"
                                                      }, {
                                                        default: withCtx(() => [
                                                          color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color"]);
                                                    }), 64))
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div></div>`);
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode(VTextField, {
                                                modelValue: cardProperties.value.title,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.title = $event,
                                                label: "Title",
                                                variant: "outlined",
                                                density: "comfortable",
                                                clearable: "",
                                                "prepend-inner-icon": "mdi-format-title",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VTextField, {
                                                modelValue: cardProperties.value.subtitle,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.subtitle = $event,
                                                label: "Subtitle",
                                                variant: "outlined",
                                                density: "comfortable",
                                                clearable: "",
                                                "prepend-inner-icon": "mdi-format-text",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VTextarea, {
                                                modelValue: cardProperties.value.text,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.text = $event,
                                                label: "Text",
                                                variant: "outlined",
                                                density: "comfortable",
                                                "auto-grow": "",
                                                rows: "3",
                                                "row-height": "20",
                                                clearable: "",
                                                "prepend-inner-icon": "mdi-text",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VTextField, {
                                                modelValue: cardProperties.value.image,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.image = $event,
                                                label: "Image URL",
                                                variant: "outlined",
                                                density: "comfortable",
                                                clearable: "",
                                                "prepend-inner-icon": "mdi-image",
                                                class: "mb-1"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode("div", { class: "d-flex flex-wrap mb-4" }, [
                                                createVNode(VChipGroup, {
                                                  mandatory: "",
                                                  "selected-class": "bg-primary text-white"
                                                }, {
                                                  default: withCtx(() => [
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "none",
                                                      onClick: removeImage
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("None")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "mountains",
                                                      onClick: ($event) => setImage("mountains")
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Mountains")
                                                      ]),
                                                      _: 1
                                                    }, 8, ["onClick"]),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "beach",
                                                      onClick: ($event) => setImage("beach")
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Beach")
                                                      ]),
                                                      _: 1
                                                    }, 8, ["onClick"]),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "forest",
                                                      onClick: ($event) => setImage("forest")
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Forest")
                                                      ]),
                                                      _: 1
                                                    }, 8, ["onClick"])
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              createVNode(VSelect, {
                                                modelValue: cardProperties.value.icon,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.icon = $event,
                                                items: unref(icons),
                                                label: "Icon",
                                                variant: "outlined",
                                                density: "comfortable",
                                                clearable: "",
                                                "prepend-inner-icon": "mdi-pencil",
                                                class: "mb-4"
                                              }, {
                                                item: withCtx(({ item, props: props2 }) => [
                                                  createVNode(VListItem, props2, {
                                                    prepend: withCtx(() => [
                                                      createVNode(VIcon, {
                                                        icon: item.raw
                                                      }, null, 8, ["icon"])
                                                    ]),
                                                    _: 2
                                                  }, 1040)
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                              cardProperties.value.icon ? (openBlock(), createBlock("div", {
                                                key: 0,
                                                class: "mb-4"
                                              }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Icon color"),
                                                createVNode("div", { class: "color-selector-container" }, [
                                                  createVNode(VBtnToggle, {
                                                    modelValue: iconColorIndex.value,
                                                    "onUpdate:modelValue": ($event) => iconColorIndex.value = $event,
                                                    mandatory: "",
                                                    density: "comfortable",
                                                    "selected-class": "border-primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                        return createVNode(VBtn, {
                                                          key: color.value,
                                                          value: index,
                                                          color: color.value !== "default" ? color.value : void 0,
                                                          size: "small",
                                                          variant: "tonal",
                                                          width: "40",
                                                          height: "40",
                                                          class: "ma-1"
                                                        }, {
                                                          default: withCtx(() => [
                                                            color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                              default: withCtx(() => [
                                                                createTextVNode("mdi-palette-outline")
                                                              ]),
                                                              _: 1
                                                            })) : createCommentVNode("", true)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["value", "color"]);
                                                      }), 64))
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ])
                                              ])) : createCommentVNode("", true)
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "style" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-7998bce9${_scopeId6}><div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1 d-block" data-v-7998bce9${_scopeId6}>Elevation</label><div class="d-flex align-center" data-v-7998bce9${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-card-outline`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-card-outline")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSlider, {
                                            modelValue: cardProperties.value.elevation,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.elevation = $event,
                                            min: "0",
                                            max: "24",
                                            step: "1",
                                            "thumb-label": "",
                                            class: "mx-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-layers-triple`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-layers-triple")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div></div><div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-7998bce9${_scopeId6}>Variant</label>`);
                                          _push7(ssrRenderComponent(VChipGroup, {
                                            modelValue: cardVariantIndex.value,
                                            "onUpdate:modelValue": ($event) => cardVariantIndex.value = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<!--[-->`);
                                                ssrRenderList(cardVariants, (variant, index) => {
                                                  _push8(ssrRenderComponent(VChip, {
                                                    key: variant,
                                                    size: "small",
                                                    value: index
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`${ssrInterpolate(variant)}`);
                                                      } else {
                                                        return [
                                                          createTextVNode(toDisplayString(variant), 1)
                                                        ];
                                                      }
                                                    }),
                                                    _: 2
                                                  }, _parent8, _scopeId7));
                                                });
                                                _push8(`<!--]-->`);
                                              } else {
                                                return [
                                                  (openBlock(), createBlock(Fragment, null, renderList(cardVariants, (variant, index) => {
                                                    return createVNode(VChip, {
                                                      key: variant,
                                                      size: "small",
                                                      value: index
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(toDisplayString(variant), 1)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value"]);
                                                  }), 64))
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div><div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-7998bce9${_scopeId6}>Color</label><div class="color-selector-container" data-v-7998bce9${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VBtnToggle, {
                                            modelValue: cardColorIndex.value,
                                            "onUpdate:modelValue": ($event) => cardColorIndex.value = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            "selected-class": "border-primary"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<!--[-->`);
                                                ssrRenderList(cardColors, (color, index) => {
                                                  _push8(ssrRenderComponent(VBtn, {
                                                    key: color.value,
                                                    value: index,
                                                    color: color.value !== "default" ? color.value : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: "ma-1"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        if (color.value === "default") {
                                                          _push9(ssrRenderComponent(VIcon, null, {
                                                            default: withCtx((_9, _push10, _parent10, _scopeId9) => {
                                                              if (_push10) {
                                                                _push10(`mdi-palette-outline`);
                                                              } else {
                                                                return [
                                                                  createTextVNode("mdi-palette-outline")
                                                                ];
                                                              }
                                                            }),
                                                            _: 2
                                                          }, _parent9, _scopeId8));
                                                        } else {
                                                          _push9(`<!---->`);
                                                        }
                                                      } else {
                                                        return [
                                                          color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ];
                                                      }
                                                    }),
                                                    _: 2
                                                  }, _parent8, _scopeId7));
                                                });
                                                _push8(`<!--]-->`);
                                              } else {
                                                return [
                                                  (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: index,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color"]);
                                                  }), 64))
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div></div>`);
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: cardProperties.value.loading,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.loading = $event,
                                            color: "primary",
                                            label: "Loading",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: cardProperties.value.disabled,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.disabled = $event,
                                            color: "primary",
                                            label: "Disabled",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: cardProperties.value.hoverEffect,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.hoverEffect = $event,
                                            color: "primary",
                                            label: "Hover effect",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          _push7(`<div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1 d-block" data-v-7998bce9${_scopeId6}>Padding</label><div class="d-flex align-center" data-v-7998bce9${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-arrow-collapse`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-arrow-collapse")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSlider, {
                                            modelValue: cardProperties.value.padding,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.padding = $event,
                                            min: "0",
                                            max: "16",
                                            step: "4",
                                            "thumb-label": "",
                                            class: "mx-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-arrow-expand`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-arrow-expand")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div></div><div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1 d-block" data-v-7998bce9${_scopeId6}>Border radius</label><div class="d-flex align-center" data-v-7998bce9${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-square-outline`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-square-outline")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSlider, {
                                            modelValue: roundedIndex.value,
                                            "onUpdate:modelValue": ($event) => roundedIndex.value = $event,
                                            min: 0,
                                            max: roundedLabels.length - 1,
                                            step: "1",
                                            "thumb-label": "",
                                            "thumb-label-text": roundedLabels[roundedIndex.value],
                                            class: "mx-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-rectangle-outline`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-rectangle-outline")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div></div></div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Elevation"),
                                                createVNode("div", { class: "d-flex align-center" }, [
                                                  createVNode(VIcon, {
                                                    size: "small",
                                                    color: "primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-card-outline")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VSlider, {
                                                    modelValue: cardProperties.value.elevation,
                                                    "onUpdate:modelValue": ($event) => cardProperties.value.elevation = $event,
                                                    min: "0",
                                                    max: "24",
                                                    step: "1",
                                                    "thumb-label": "",
                                                    class: "mx-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VIcon, {
                                                    size: "small",
                                                    color: "primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-layers-triple")
                                                    ]),
                                                    _: 1
                                                  })
                                                ])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Variant"),
                                                createVNode(VChipGroup, {
                                                  modelValue: cardVariantIndex.value,
                                                  "onUpdate:modelValue": ($event) => cardVariantIndex.value = $event,
                                                  mandatory: "",
                                                  "selected-class": "bg-primary text-white"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(cardVariants, (variant, index) => {
                                                      return createVNode(VChip, {
                                                        key: variant,
                                                        size: "small",
                                                        value: index
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode(toDisplayString(variant), 1)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Color"),
                                                createVNode("div", { class: "color-selector-container" }, [
                                                  createVNode(VBtnToggle, {
                                                    modelValue: cardColorIndex.value,
                                                    "onUpdate:modelValue": ($event) => cardColorIndex.value = $event,
                                                    mandatory: "",
                                                    density: "comfortable",
                                                    "selected-class": "border-primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                        return createVNode(VBtn, {
                                                          key: color.value,
                                                          value: index,
                                                          color: color.value !== "default" ? color.value : void 0,
                                                          size: "small",
                                                          variant: "tonal",
                                                          width: "40",
                                                          height: "40",
                                                          class: "ma-1"
                                                        }, {
                                                          default: withCtx(() => [
                                                            color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                              default: withCtx(() => [
                                                                createTextVNode("mdi-palette-outline")
                                                              ]),
                                                              _: 1
                                                            })) : createCommentVNode("", true)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["value", "color"]);
                                                      }), 64))
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ])
                                              ]),
                                              createVNode(VSwitch, {
                                                modelValue: cardProperties.value.loading,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.loading = $event,
                                                color: "primary",
                                                label: "Loading",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: cardProperties.value.disabled,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.disabled = $event,
                                                color: "primary",
                                                label: "Disabled",
                                                "hide-details": "",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: cardProperties.value.hoverEffect,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.hoverEffect = $event,
                                                color: "primary",
                                                label: "Hover effect",
                                                "hide-details": "",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Padding"),
                                                createVNode("div", { class: "d-flex align-center" }, [
                                                  createVNode(VIcon, {
                                                    size: "small",
                                                    color: "primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-arrow-collapse")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VSlider, {
                                                    modelValue: cardProperties.value.padding,
                                                    "onUpdate:modelValue": ($event) => cardProperties.value.padding = $event,
                                                    min: "0",
                                                    max: "16",
                                                    step: "4",
                                                    "thumb-label": "",
                                                    class: "mx-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VIcon, {
                                                    size: "small",
                                                    color: "primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-arrow-expand")
                                                    ]),
                                                    _: 1
                                                  })
                                                ])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Border radius"),
                                                createVNode("div", { class: "d-flex align-center" }, [
                                                  createVNode(VIcon, {
                                                    size: "small",
                                                    color: "primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-square-outline")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VSlider, {
                                                    modelValue: roundedIndex.value,
                                                    "onUpdate:modelValue": ($event) => roundedIndex.value = $event,
                                                    min: 0,
                                                    max: roundedLabels.length - 1,
                                                    step: "1",
                                                    "thumb-label": "",
                                                    "thumb-label-text": roundedLabels[roundedIndex.value],
                                                    class: "mx-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue", "max", "thumb-label-text"]),
                                                  createVNode(VIcon, {
                                                    size: "small",
                                                    color: "primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-rectangle-outline")
                                                    ]),
                                                    _: 1
                                                  })
                                                ])
                                              ])
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "actions" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-7998bce9${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: cardProperties.value.showButtons,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.showButtons = $event,
                                            color: "primary",
                                            label: "Show buttons",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          if (cardProperties.value.showButtons) {
                                            _push7(`<!--[-->`);
                                            _push7(ssrRenderComponent(VTextField, {
                                              modelValue: cardProperties.value.buttonText,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.buttonText = $event,
                                              label: "Button text",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "prepend-inner-icon": "mdi-button-cursor",
                                              class: "mb-4"
                                            }, null, _parent7, _scopeId6));
                                            _push7(`<div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-7998bce9${_scopeId6}>Button style</label>`);
                                            _push7(ssrRenderComponent(VChipGroup, {
                                              modelValue: buttonVariantIndex.value,
                                              "onUpdate:modelValue": ($event) => buttonVariantIndex.value = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`<!--[-->`);
                                                  ssrRenderList(buttonVariants, (variant, index) => {
                                                    _push8(ssrRenderComponent(VChip, {
                                                      key: variant,
                                                      size: "small",
                                                      value: index
                                                    }, {
                                                      default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                        if (_push9) {
                                                          _push9(`${ssrInterpolate(variant)}`);
                                                        } else {
                                                          return [
                                                            createTextVNode(toDisplayString(variant), 1)
                                                          ];
                                                        }
                                                      }),
                                                      _: 2
                                                    }, _parent8, _scopeId7));
                                                  });
                                                  _push8(`<!--]-->`);
                                                } else {
                                                  return [
                                                    (openBlock(), createBlock(Fragment, null, renderList(buttonVariants, (variant, index) => {
                                                      return createVNode(VChip, {
                                                        key: variant,
                                                        size: "small",
                                                        value: index
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode(toDisplayString(variant), 1)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value"]);
                                                    }), 64))
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div><div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-7998bce9${_scopeId6}>Button color</label><div class="d-flex overflow-x-auto" data-v-7998bce9${_scopeId6}>`);
                                            _push7(ssrRenderComponent(VBtnToggle, {
                                              modelValue: buttonColorIndex.value,
                                              "onUpdate:modelValue": ($event) => buttonColorIndex.value = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              class: "d-flex"
                                            }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`<!--[-->`);
                                                  ssrRenderList(cardColors, (color, index) => {
                                                    _push8(ssrRenderComponent(VBtn, {
                                                      key: color.value,
                                                      value: index,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                        if (_push9) {
                                                          if (color.value === "default") {
                                                            _push9(ssrRenderComponent(VIcon, null, {
                                                              default: withCtx((_9, _push10, _parent10, _scopeId9) => {
                                                                if (_push10) {
                                                                  _push10(`mdi-palette-outline`);
                                                                } else {
                                                                  return [
                                                                    createTextVNode("mdi-palette-outline")
                                                                  ];
                                                                }
                                                              }),
                                                              _: 2
                                                            }, _parent9, _scopeId8));
                                                          } else {
                                                            _push9(`<!---->`);
                                                          }
                                                        } else {
                                                          return [
                                                            color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                              default: withCtx(() => [
                                                                createTextVNode("mdi-palette-outline")
                                                              ]),
                                                              _: 1
                                                            })) : createCommentVNode("", true)
                                                          ];
                                                        }
                                                      }),
                                                      _: 2
                                                    }, _parent8, _scopeId7));
                                                  });
                                                  _push8(`<!--]-->`);
                                                } else {
                                                  return [
                                                    (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                      return createVNode(VBtn, {
                                                        key: color.value,
                                                        value: index,
                                                        color: color.value !== "default" ? color.value : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: "ma-1"
                                                      }, {
                                                        default: withCtx(() => [
                                                          color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color"]);
                                                    }), 64))
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div></div><div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1 d-block" data-v-7998bce9${_scopeId6}>Button width</label><div class="d-flex align-center" data-v-7998bce9${_scopeId6}>`);
                                            _push7(ssrRenderComponent(VChip, { size: "x-small" }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`Auto`);
                                                } else {
                                                  return [
                                                    createTextVNode("Auto")
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSlider, {
                                              modelValue: cardProperties.value.buttonWidth,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.buttonWidth = $event,
                                              min: "0",
                                              max: "100",
                                              step: "25",
                                              "thumb-label": "",
                                              "thumb-label-text": cardProperties.value.buttonWidth + "%",
                                              class: "mx-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VChip, { size: "x-small" }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`100%`);
                                                } else {
                                                  return [
                                                    createTextVNode("100%")
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div></div><div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-7998bce9${_scopeId6}>Button position</label><div class="d-flex justify-space-between" data-v-7998bce9${_scopeId6}>`);
                                            _push7(ssrRenderComponent(VBtnToggle, {
                                              modelValue: cardProperties.value.buttonPosition,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.buttonPosition = $event,
                                              mandatory: "",
                                              density: "comfortable"
                                            }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(ssrRenderComponent(VBtn, {
                                                    value: "start",
                                                    icon: "mdi-format-align-left"
                                                  }, null, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VBtn, {
                                                    value: "center",
                                                    icon: "mdi-format-align-center"
                                                  }, null, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VBtn, {
                                                    value: "end",
                                                    icon: "mdi-format-align-right"
                                                  }, null, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VBtn, {
                                                    value: "space-between",
                                                    icon: "mdi-format-align-justify"
                                                  }, null, _parent8, _scopeId7));
                                                } else {
                                                  return [
                                                    createVNode(VBtn, {
                                                      value: "start",
                                                      icon: "mdi-format-align-left"
                                                    }),
                                                    createVNode(VBtn, {
                                                      value: "center",
                                                      icon: "mdi-format-align-center"
                                                    }),
                                                    createVNode(VBtn, {
                                                      value: "end",
                                                      icon: "mdi-format-align-right"
                                                    }),
                                                    createVNode(VBtn, {
                                                      value: "space-between",
                                                      icon: "mdi-format-align-justify"
                                                    })
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div></div>`);
                                            _push7(ssrRenderComponent(VAutocomplete, {
                                              modelValue: cardProperties.value.buttonIcon,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.buttonIcon = $event,
                                              items: unref(icons),
                                              label: "Icon",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-2 mt-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VTextField, {
                                              modelValue: cardProperties.value.buttonLink,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.buttonLink = $event,
                                              label: "Link",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(`<!--]-->`);
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: cardProperties.value.showProgress,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.showProgress = $event,
                                            color: "primary",
                                            label: "Show progress circular",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          if (cardProperties.value.showProgress) {
                                            _push7(`<!--[--><div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1 d-block" data-v-7998bce9${_scopeId6}>Progress value</label><div class="d-flex align-center" data-v-7998bce9${_scopeId6}>`);
                                            _push7(ssrRenderComponent(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`mdi-percent`);
                                                } else {
                                                  return [
                                                    createTextVNode("mdi-percent")
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSlider, {
                                              modelValue: cardProperties.value.progressValue,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.progressValue = $event,
                                              min: "0",
                                              max: "100",
                                              step: "5",
                                              "thumb-label": "",
                                              "thumb-label-text": cardProperties.value.progressValue + "%",
                                              class: "mx-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(`</div><div class="d-flex align-center mt-2" data-v-7998bce9${_scopeId6}>`);
                                            _push7(ssrRenderComponent(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`mdi-circle-slice-8`);
                                                } else {
                                                  return [
                                                    createTextVNode("mdi-circle-slice-8")
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSlider, {
                                              modelValue: cardProperties.value.progressWidth,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.progressWidth = $event,
                                              min: "1",
                                              max: "10",
                                              step: "1",
                                              "thumb-label": "",
                                              "thumb-label-text": cardProperties.value.progressWidth,
                                              class: "mx-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(`</div></div>`);
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: cardProperties.value.indeterminate,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.indeterminate = $event,
                                              color: "primary",
                                              "hide-details": "",
                                              class: "mb-2",
                                              label: "Indeterminate"
                                            }, null, _parent7, _scopeId6));
                                            _push7(`<div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-7998bce9${_scopeId6}>Progress color</label><div class="d-flex flex-wrap gap-2" data-v-7998bce9${_scopeId6}>`);
                                            _push7(ssrRenderComponent(VBtnToggle, {
                                              modelValue: progressColorIndex.value,
                                              "onUpdate:modelValue": ($event) => progressColorIndex.value = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              "selected-class": "border-primary"
                                            }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`<!--[-->`);
                                                  ssrRenderList(cardColors, (color, index) => {
                                                    _push8(ssrRenderComponent(VBtn, {
                                                      key: color.value,
                                                      value: index,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                        if (_push9) {
                                                          if (color.value === "default") {
                                                            _push9(ssrRenderComponent(VIcon, null, {
                                                              default: withCtx((_9, _push10, _parent10, _scopeId9) => {
                                                                if (_push10) {
                                                                  _push10(`mdi-palette-outline`);
                                                                } else {
                                                                  return [
                                                                    createTextVNode("mdi-palette-outline")
                                                                  ];
                                                                }
                                                              }),
                                                              _: 2
                                                            }, _parent9, _scopeId8));
                                                          } else {
                                                            _push9(`<!---->`);
                                                          }
                                                        } else {
                                                          return [
                                                            color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                              default: withCtx(() => [
                                                                createTextVNode("mdi-palette-outline")
                                                              ]),
                                                              _: 1
                                                            })) : createCommentVNode("", true)
                                                          ];
                                                        }
                                                      }),
                                                      _: 2
                                                    }, _parent8, _scopeId7));
                                                  });
                                                  _push8(`<!--]-->`);
                                                } else {
                                                  return [
                                                    (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                      return createVNode(VBtn, {
                                                        key: color.value,
                                                        value: index,
                                                        color: color.value !== "default" ? color.value : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: "ma-1"
                                                      }, {
                                                        default: withCtx(() => [
                                                          color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color"]);
                                                    }), 64))
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div></div><div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-7998bce9${_scopeId6}>Progress size</label>`);
                                            _push7(ssrRenderComponent(VChipGroup, {
                                              modelValue: progressSizeIndex.value,
                                              "onUpdate:modelValue": ($event) => progressSizeIndex.value = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`<!--[-->`);
                                                  ssrRenderList(progressSizes, (size, index) => {
                                                    _push8(ssrRenderComponent(VChip, {
                                                      key: size,
                                                      size: "small",
                                                      value: index
                                                    }, {
                                                      default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                        if (_push9) {
                                                          _push9(`${ssrInterpolate(size)}`);
                                                        } else {
                                                          return [
                                                            createTextVNode(toDisplayString(size), 1)
                                                          ];
                                                        }
                                                      }),
                                                      _: 2
                                                    }, _parent8, _scopeId7));
                                                  });
                                                  _push8(`<!--]-->`);
                                                } else {
                                                  return [
                                                    (openBlock(), createBlock(Fragment, null, renderList(progressSizes, (size, index) => {
                                                      return createVNode(VChip, {
                                                        key: size,
                                                        size: "small",
                                                        value: index
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode(toDisplayString(size), 1)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value"]);
                                                    }), 64))
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div><div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-7998bce9${_scopeId6}>Progress position</label>`);
                                            _push7(ssrRenderComponent(VSelect, {
                                              modelValue: cardProperties.value.progressPosition,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.progressPosition = $event,
                                              items: progressPositions,
                                              label: "Position",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(`</div>`);
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: cardProperties.value.showProgressLabel,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.showProgressLabel = $event,
                                              color: "primary",
                                              "hide-details": "",
                                              class: "mb-2",
                                              label: "Show value"
                                            }, null, _parent7, _scopeId6));
                                            if (cardProperties.value.showProgressLabel) {
                                              _push7(`<div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-7998bce9${_scopeId6}>Label style</label>`);
                                              _push7(ssrRenderComponent(VChipGroup, {
                                                modelValue: cardProperties.value.progressLabelStyle,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.progressLabelStyle = $event,
                                                mandatory: "",
                                                "selected-class": "bg-primary text-white"
                                              }, {
                                                default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                  if (_push8) {
                                                    _push8(ssrRenderComponent(VChip, {
                                                      size: "small",
                                                      value: "value"
                                                    }, {
                                                      default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                        if (_push9) {
                                                          _push9(`Value (%)`);
                                                        } else {
                                                          return [
                                                            createTextVNode("Value (%)")
                                                          ];
                                                        }
                                                      }),
                                                      _: 1
                                                    }, _parent8, _scopeId7));
                                                    _push8(ssrRenderComponent(VChip, {
                                                      size: "small",
                                                      value: "custom"
                                                    }, {
                                                      default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                        if (_push9) {
                                                          _push9(`Custom`);
                                                        } else {
                                                          return [
                                                            createTextVNode("Custom")
                                                          ];
                                                        }
                                                      }),
                                                      _: 1
                                                    }, _parent8, _scopeId7));
                                                  } else {
                                                    return [
                                                      createVNode(VChip, {
                                                        size: "small",
                                                        value: "value"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("Value (%)")
                                                        ]),
                                                        _: 1
                                                      }),
                                                      createVNode(VChip, {
                                                        size: "small",
                                                        value: "custom"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("Custom")
                                                        ]),
                                                        _: 1
                                                      })
                                                    ];
                                                  }
                                                }),
                                                _: 1
                                              }, _parent7, _scopeId6));
                                              if (cardProperties.value.progressLabelStyle === "custom") {
                                                _push7(ssrRenderComponent(VTextField, {
                                                  modelValue: cardProperties.value.progressLabelText,
                                                  "onUpdate:modelValue": ($event) => cardProperties.value.progressLabelText = $event,
                                                  label: "Custom label",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mt-2"
                                                }, null, _parent7, _scopeId6));
                                              } else {
                                                _push7(`<!---->`);
                                              }
                                              _push7(`</div>`);
                                            } else {
                                              _push7(`<!---->`);
                                            }
                                            _push7(`<div class="mb-4" data-v-7998bce9${_scopeId6}>`);
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: cardProperties.value.showProgressBg,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.showProgressBg = $event,
                                              color: "primary",
                                              "hide-details": "",
                                              class: "mb-2",
                                              label: "Background color"
                                            }, null, _parent7, _scopeId6));
                                            if (cardProperties.value.showProgressBg) {
                                              _push7(`<div class="d-flex flex-wrap gap-2 mt-2" data-v-7998bce9${_scopeId6}>`);
                                              _push7(ssrRenderComponent(VBtnToggle, {
                                                modelValue: progressBgColorIndex.value,
                                                "onUpdate:modelValue": ($event) => progressBgColorIndex.value = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                "selected-class": "border-primary"
                                              }, {
                                                default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                  if (_push8) {
                                                    _push8(`<!--[-->`);
                                                    ssrRenderList(cardColors, (color, index) => {
                                                      _push8(ssrRenderComponent(VBtn, {
                                                        key: color.value,
                                                        value: index,
                                                        color: color.value !== "default" ? color.value : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: "ma-1"
                                                      }, {
                                                        default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                          if (_push9) {
                                                            if (color.value === "default") {
                                                              _push9(ssrRenderComponent(VIcon, null, {
                                                                default: withCtx((_9, _push10, _parent10, _scopeId9) => {
                                                                  if (_push10) {
                                                                    _push10(`mdi-palette-outline`);
                                                                  } else {
                                                                    return [
                                                                      createTextVNode("mdi-palette-outline")
                                                                    ];
                                                                  }
                                                                }),
                                                                _: 2
                                                              }, _parent9, _scopeId8));
                                                            } else {
                                                              _push9(`<!---->`);
                                                            }
                                                          } else {
                                                            return [
                                                              color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                                default: withCtx(() => [
                                                                  createTextVNode("mdi-palette-outline")
                                                                ]),
                                                                _: 1
                                                              })) : createCommentVNode("", true)
                                                            ];
                                                          }
                                                        }),
                                                        _: 2
                                                      }, _parent8, _scopeId7));
                                                    });
                                                    _push8(`<!--]-->`);
                                                  } else {
                                                    return [
                                                      (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                        return createVNode(VBtn, {
                                                          key: color.value,
                                                          value: index,
                                                          color: color.value !== "default" ? color.value : void 0,
                                                          size: "small",
                                                          variant: "tonal",
                                                          width: "40",
                                                          height: "40",
                                                          class: "ma-1"
                                                        }, {
                                                          default: withCtx(() => [
                                                            color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                              default: withCtx(() => [
                                                                createTextVNode("mdi-palette-outline")
                                                              ]),
                                                              _: 1
                                                            })) : createCommentVNode("", true)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["value", "color"]);
                                                      }), 64))
                                                    ];
                                                  }
                                                }),
                                                _: 1
                                              }, _parent7, _scopeId6));
                                              _push7(`</div>`);
                                            } else {
                                              _push7(`<!---->`);
                                            }
                                            _push7(`</div><!--]-->`);
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode(VSwitch, {
                                                modelValue: cardProperties.value.showButtons,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.showButtons = $event,
                                                color: "primary",
                                                label: "Show buttons",
                                                "hide-details": "",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              cardProperties.value.showButtons ? (openBlock(), createBlock(Fragment, { key: 0 }, [
                                                createVNode(VTextField, {
                                                  modelValue: cardProperties.value.buttonText,
                                                  "onUpdate:modelValue": ($event) => cardProperties.value.buttonText = $event,
                                                  label: "Button text",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  "prepend-inner-icon": "mdi-button-cursor",
                                                  class: "mb-4"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1" }, "Button style"),
                                                  createVNode(VChipGroup, {
                                                    modelValue: buttonVariantIndex.value,
                                                    "onUpdate:modelValue": ($event) => buttonVariantIndex.value = $event,
                                                    mandatory: "",
                                                    "selected-class": "bg-primary text-white"
                                                  }, {
                                                    default: withCtx(() => [
                                                      (openBlock(), createBlock(Fragment, null, renderList(buttonVariants, (variant, index) => {
                                                        return createVNode(VChip, {
                                                          key: variant,
                                                          size: "small",
                                                          value: index
                                                        }, {
                                                          default: withCtx(() => [
                                                            createTextVNode(toDisplayString(variant), 1)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["value"]);
                                                      }), 64))
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1" }, "Button color"),
                                                  createVNode("div", { class: "d-flex overflow-x-auto" }, [
                                                    createVNode(VBtnToggle, {
                                                      modelValue: buttonColorIndex.value,
                                                      "onUpdate:modelValue": ($event) => buttonColorIndex.value = $event,
                                                      mandatory: "",
                                                      density: "comfortable",
                                                      class: "d-flex"
                                                    }, {
                                                      default: withCtx(() => [
                                                        (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                          return createVNode(VBtn, {
                                                            key: color.value,
                                                            value: index,
                                                            color: color.value !== "default" ? color.value : void 0,
                                                            size: "small",
                                                            variant: "tonal",
                                                            width: "40",
                                                            height: "40",
                                                            class: "ma-1"
                                                          }, {
                                                            default: withCtx(() => [
                                                              color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                                default: withCtx(() => [
                                                                  createTextVNode("mdi-palette-outline")
                                                                ]),
                                                                _: 1
                                                              })) : createCommentVNode("", true)
                                                            ]),
                                                            _: 2
                                                          }, 1032, ["value", "color"]);
                                                        }), 64))
                                                      ]),
                                                      _: 1
                                                    }, 8, ["modelValue", "onUpdate:modelValue"])
                                                  ])
                                                ]),
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Button width"),
                                                  createVNode("div", { class: "d-flex align-center" }, [
                                                    createVNode(VChip, { size: "x-small" }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Auto")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VSlider, {
                                                      modelValue: cardProperties.value.buttonWidth,
                                                      "onUpdate:modelValue": ($event) => cardProperties.value.buttonWidth = $event,
                                                      min: "0",
                                                      max: "100",
                                                      step: "25",
                                                      "thumb-label": "",
                                                      "thumb-label-text": cardProperties.value.buttonWidth + "%",
                                                      class: "mx-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue", "thumb-label-text"]),
                                                    createVNode(VChip, { size: "x-small" }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("100%")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ])
                                                ]),
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1" }, "Button position"),
                                                  createVNode("div", { class: "d-flex justify-space-between" }, [
                                                    createVNode(VBtnToggle, {
                                                      modelValue: cardProperties.value.buttonPosition,
                                                      "onUpdate:modelValue": ($event) => cardProperties.value.buttonPosition = $event,
                                                      mandatory: "",
                                                      density: "comfortable"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createVNode(VBtn, {
                                                          value: "start",
                                                          icon: "mdi-format-align-left"
                                                        }),
                                                        createVNode(VBtn, {
                                                          value: "center",
                                                          icon: "mdi-format-align-center"
                                                        }),
                                                        createVNode(VBtn, {
                                                          value: "end",
                                                          icon: "mdi-format-align-right"
                                                        }),
                                                        createVNode(VBtn, {
                                                          value: "space-between",
                                                          icon: "mdi-format-align-justify"
                                                        })
                                                      ]),
                                                      _: 1
                                                    }, 8, ["modelValue", "onUpdate:modelValue"])
                                                  ])
                                                ]),
                                                createVNode(VAutocomplete, {
                                                  modelValue: cardProperties.value.buttonIcon,
                                                  "onUpdate:modelValue": ($event) => cardProperties.value.buttonIcon = $event,
                                                  items: unref(icons),
                                                  label: "Icon",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-2 mt-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                                createVNode(VTextField, {
                                                  modelValue: cardProperties.value.buttonLink,
                                                  "onUpdate:modelValue": ($event) => cardProperties.value.buttonLink = $event,
                                                  label: "Link",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                              ], 64)) : createCommentVNode("", true),
                                              createVNode(VSwitch, {
                                                modelValue: cardProperties.value.showProgress,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.showProgress = $event,
                                                color: "primary",
                                                label: "Show progress circular",
                                                "hide-details": "",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              cardProperties.value.showProgress ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Progress value"),
                                                  createVNode("div", { class: "d-flex align-center" }, [
                                                    createVNode(VIcon, {
                                                      size: "small",
                                                      color: "primary"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-percent")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VSlider, {
                                                      modelValue: cardProperties.value.progressValue,
                                                      "onUpdate:modelValue": ($event) => cardProperties.value.progressValue = $event,
                                                      min: "0",
                                                      max: "100",
                                                      step: "5",
                                                      "thumb-label": "",
                                                      "thumb-label-text": cardProperties.value.progressValue + "%",
                                                      class: "mx-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue", "thumb-label-text"])
                                                  ]),
                                                  createVNode("div", { class: "d-flex align-center mt-2" }, [
                                                    createVNode(VIcon, {
                                                      size: "small",
                                                      color: "primary"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-circle-slice-8")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VSlider, {
                                                      modelValue: cardProperties.value.progressWidth,
                                                      "onUpdate:modelValue": ($event) => cardProperties.value.progressWidth = $event,
                                                      min: "1",
                                                      max: "10",
                                                      step: "1",
                                                      "thumb-label": "",
                                                      "thumb-label-text": cardProperties.value.progressWidth,
                                                      class: "mx-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue", "thumb-label-text"])
                                                  ])
                                                ]),
                                                createVNode(VSwitch, {
                                                  modelValue: cardProperties.value.indeterminate,
                                                  "onUpdate:modelValue": ($event) => cardProperties.value.indeterminate = $event,
                                                  color: "primary",
                                                  "hide-details": "",
                                                  class: "mb-2",
                                                  label: "Indeterminate"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1" }, "Progress color"),
                                                  createVNode("div", { class: "d-flex flex-wrap gap-2" }, [
                                                    createVNode(VBtnToggle, {
                                                      modelValue: progressColorIndex.value,
                                                      "onUpdate:modelValue": ($event) => progressColorIndex.value = $event,
                                                      mandatory: "",
                                                      density: "comfortable",
                                                      "selected-class": "border-primary"
                                                    }, {
                                                      default: withCtx(() => [
                                                        (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                          return createVNode(VBtn, {
                                                            key: color.value,
                                                            value: index,
                                                            color: color.value !== "default" ? color.value : void 0,
                                                            size: "small",
                                                            variant: "tonal",
                                                            width: "40",
                                                            height: "40",
                                                            class: "ma-1"
                                                          }, {
                                                            default: withCtx(() => [
                                                              color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                                default: withCtx(() => [
                                                                  createTextVNode("mdi-palette-outline")
                                                                ]),
                                                                _: 1
                                                              })) : createCommentVNode("", true)
                                                            ]),
                                                            _: 2
                                                          }, 1032, ["value", "color"]);
                                                        }), 64))
                                                      ]),
                                                      _: 1
                                                    }, 8, ["modelValue", "onUpdate:modelValue"])
                                                  ])
                                                ]),
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1" }, "Progress size"),
                                                  createVNode(VChipGroup, {
                                                    modelValue: progressSizeIndex.value,
                                                    "onUpdate:modelValue": ($event) => progressSizeIndex.value = $event,
                                                    mandatory: "",
                                                    "selected-class": "bg-primary text-white"
                                                  }, {
                                                    default: withCtx(() => [
                                                      (openBlock(), createBlock(Fragment, null, renderList(progressSizes, (size, index) => {
                                                        return createVNode(VChip, {
                                                          key: size,
                                                          size: "small",
                                                          value: index
                                                        }, {
                                                          default: withCtx(() => [
                                                            createTextVNode(toDisplayString(size), 1)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["value"]);
                                                      }), 64))
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1" }, "Progress position"),
                                                  createVNode(VSelect, {
                                                    modelValue: cardProperties.value.progressPosition,
                                                    "onUpdate:modelValue": ($event) => cardProperties.value.progressPosition = $event,
                                                    items: progressPositions,
                                                    label: "Position",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                createVNode(VSwitch, {
                                                  modelValue: cardProperties.value.showProgressLabel,
                                                  "onUpdate:modelValue": ($event) => cardProperties.value.showProgressLabel = $event,
                                                  color: "primary",
                                                  "hide-details": "",
                                                  class: "mb-2",
                                                  label: "Show value"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                cardProperties.value.showProgressLabel ? (openBlock(), createBlock("div", {
                                                  key: 0,
                                                  class: "mb-4"
                                                }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1" }, "Label style"),
                                                  createVNode(VChipGroup, {
                                                    modelValue: cardProperties.value.progressLabelStyle,
                                                    "onUpdate:modelValue": ($event) => cardProperties.value.progressLabelStyle = $event,
                                                    mandatory: "",
                                                    "selected-class": "bg-primary text-white"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createVNode(VChip, {
                                                        size: "small",
                                                        value: "value"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("Value (%)")
                                                        ]),
                                                        _: 1
                                                      }),
                                                      createVNode(VChip, {
                                                        size: "small",
                                                        value: "custom"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("Custom")
                                                        ]),
                                                        _: 1
                                                      })
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  cardProperties.value.progressLabelStyle === "custom" ? (openBlock(), createBlock(VTextField, {
                                                    key: 0,
                                                    modelValue: cardProperties.value.progressLabelText,
                                                    "onUpdate:modelValue": ($event) => cardProperties.value.progressLabelText = $event,
                                                    label: "Custom label",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    class: "mt-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                                ])) : createCommentVNode("", true),
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode(VSwitch, {
                                                    modelValue: cardProperties.value.showProgressBg,
                                                    "onUpdate:modelValue": ($event) => cardProperties.value.showProgressBg = $event,
                                                    color: "primary",
                                                    "hide-details": "",
                                                    class: "mb-2",
                                                    label: "Background color"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  cardProperties.value.showProgressBg ? (openBlock(), createBlock("div", {
                                                    key: 0,
                                                    class: "d-flex flex-wrap gap-2 mt-2"
                                                  }, [
                                                    createVNode(VBtnToggle, {
                                                      modelValue: progressBgColorIndex.value,
                                                      "onUpdate:modelValue": ($event) => progressBgColorIndex.value = $event,
                                                      mandatory: "",
                                                      density: "comfortable",
                                                      "selected-class": "border-primary"
                                                    }, {
                                                      default: withCtx(() => [
                                                        (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                          return createVNode(VBtn, {
                                                            key: color.value,
                                                            value: index,
                                                            color: color.value !== "default" ? color.value : void 0,
                                                            size: "small",
                                                            variant: "tonal",
                                                            width: "40",
                                                            height: "40",
                                                            class: "ma-1"
                                                          }, {
                                                            default: withCtx(() => [
                                                              color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                                default: withCtx(() => [
                                                                  createTextVNode("mdi-palette-outline")
                                                                ]),
                                                                _: 1
                                                              })) : createCommentVNode("", true)
                                                            ]),
                                                            _: 2
                                                          }, 1032, ["value", "color"]);
                                                        }), 64))
                                                      ]),
                                                      _: 1
                                                    }, 8, ["modelValue", "onUpdate:modelValue"])
                                                  ])) : createCommentVNode("", true)
                                                ])
                                              ], 64)) : createCommentVNode("", true)
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "data" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-7998bce9${_scopeId6}><div class="section-title d-flex align-center mb-3 justify-space-between" data-v-7998bce9${_scopeId6}><div class="d-flex align-center" data-v-7998bce9${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-chart-line`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-chart-line")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-7998bce9${_scopeId6}>Data Visualization</span></div>`);
                                          _push7(ssrRenderComponent(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props: props2 }, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VBtn, mergeProps({
                                                  icon: "mdi-help-circle-outline",
                                                  variant: "text",
                                                  size: "small"
                                                }, props2), null, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VBtn, mergeProps({
                                                    icon: "mdi-help-circle-outline",
                                                    variant: "text",
                                                    size: "small"
                                                  }, props2), null, 16)
                                                ];
                                              }
                                            }),
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<span data-v-7998bce9${_scopeId7}>Add data visualizations to your card</span>`);
                                              } else {
                                                return [
                                                  createVNode("span", null, "Add data visualizations to your card")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div>`);
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: cardProperties.value.showSparkline,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.showSparkline = $event,
                                            color: "primary",
                                            label: "Show sparkline",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          if (cardProperties.value.showSparkline) {
                                            _push7(`<!--[--><div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-7998bce9${_scopeId6}>Sparkline color</label><div class="color-selector-container" data-v-7998bce9${_scopeId6}>`);
                                            _push7(ssrRenderComponent(VBtnToggle, {
                                              modelValue: sparklineColorIndex.value,
                                              "onUpdate:modelValue": ($event) => sparklineColorIndex.value = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              "selected-class": "border-primary"
                                            }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`<!--[-->`);
                                                  ssrRenderList(cardColors, (color, index) => {
                                                    _push8(ssrRenderComponent(VBtn, {
                                                      key: color.value,
                                                      value: index,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                        if (_push9) {
                                                          if (color.value === "default") {
                                                            _push9(ssrRenderComponent(VIcon, null, {
                                                              default: withCtx((_9, _push10, _parent10, _scopeId9) => {
                                                                if (_push10) {
                                                                  _push10(`mdi-palette-outline`);
                                                                } else {
                                                                  return [
                                                                    createTextVNode("mdi-palette-outline")
                                                                  ];
                                                                }
                                                              }),
                                                              _: 2
                                                            }, _parent9, _scopeId8));
                                                          } else {
                                                            _push9(`<!---->`);
                                                          }
                                                        } else {
                                                          return [
                                                            color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                              default: withCtx(() => [
                                                                createTextVNode("mdi-palette-outline")
                                                              ]),
                                                              _: 1
                                                            })) : createCommentVNode("", true)
                                                          ];
                                                        }
                                                      }),
                                                      _: 2
                                                    }, _parent8, _scopeId7));
                                                  });
                                                  _push8(`<!--]-->`);
                                                } else {
                                                  return [
                                                    (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                      return createVNode(VBtn, {
                                                        key: color.value,
                                                        value: index,
                                                        color: color.value !== "default" ? color.value : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: "ma-1"
                                                      }, {
                                                        default: withCtx(() => [
                                                          color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color"]);
                                                    }), 64))
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div></div><div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-7998bce9${_scopeId6}>Sparkline data</label>`);
                                            _push7(ssrRenderComponent(VTextarea, {
                                              modelValue: sparklineDataText.value,
                                              "onUpdate:modelValue": [($event) => sparklineDataText.value = $event, updateSparklineData],
                                              label: "Enter comma-separated values",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "auto-grow": "",
                                              rows: "2",
                                              "row-height": "20",
                                              class: "mb-2",
                                              hint: "Example: 0,2,5,9,5,10,3,5,0,0,1,8,2,9,0",
                                              "persistent-hint": ""
                                            }, null, _parent7, _scopeId6));
                                            _push7(`</div><div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1 d-block" data-v-7998bce9${_scopeId6}>Line width</label><div class="d-flex align-center" data-v-7998bce9${_scopeId6}>`);
                                            _push7(ssrRenderComponent(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`mdi-minus`);
                                                } else {
                                                  return [
                                                    createTextVNode("mdi-minus")
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSlider, {
                                              modelValue: cardProperties.value.sparklineLineWidth,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.sparklineLineWidth = $event,
                                              min: "1",
                                              max: "5",
                                              step: "1",
                                              "thumb-label": "",
                                              class: "mx-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`mdi-minus-thick`);
                                                } else {
                                                  return [
                                                    createTextVNode("mdi-minus-thick")
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div></div>`);
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: cardProperties.value.sparklineGradient,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.sparklineGradient = $event,
                                              color: "primary",
                                              label: "Show gradient",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: cardProperties.value.sparklineShowLabels,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.sparklineShowLabels = $event,
                                              color: "primary",
                                              label: "Show labels",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, _parent7, _scopeId6));
                                            if (cardProperties.value.sparklineShowLabels) {
                                              _push7(`<div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-7998bce9${_scopeId6}>Labels</label>`);
                                              _push7(ssrRenderComponent(VTextarea, {
                                                modelValue: sparklineLabelsText.value,
                                                "onUpdate:modelValue": [($event) => sparklineLabelsText.value = $event, updateSparklineLabels],
                                                label: "Enter comma-separated labels",
                                                variant: "outlined",
                                                density: "comfortable",
                                                "auto-grow": "",
                                                rows: "2",
                                                "row-height": "20",
                                                class: "mb-2",
                                                hint: "Example: Jan,Fév,Mar,Avr,Mai,Juin",
                                                "persistent-hint": ""
                                              }, null, _parent7, _scopeId6));
                                              _push7(`</div>`);
                                            } else {
                                              _push7(`<!---->`);
                                            }
                                            _push7(`<!--]-->`);
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          _push7(ssrRenderComponent(VDivider, { class: "my-4" }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: cardProperties.value.showTimeline,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.showTimeline = $event,
                                            color: "primary",
                                            label: "Show timeline",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          if (cardProperties.value.showTimeline) {
                                            _push7(`<!--[--><div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-7998bce9${_scopeId6}>Timeline items</label>`);
                                            _push7(ssrRenderComponent(VSelect, {
                                              modelValue: timelineItemsCount.value,
                                              "onUpdate:modelValue": ($event) => timelineItemsCount.value = $event,
                                              items: [1, 2, 3, 4, 5],
                                              label: "Number of items",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(`</div><div class="mb-4" data-v-7998bce9${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-7998bce9${_scopeId6}>Timeline content</label>`);
                                            _push7(ssrRenderComponent(VExpansionPanels, { variant: "accordion" }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`<!--[-->`);
                                                  ssrRenderList(timelineItems.value.slice(0, timelineItemsCount.value), (item, index) => {
                                                    _push8(ssrRenderComponent(VExpansionPanel, { key: index }, {
                                                      default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                        if (_push9) {
                                                          _push9(ssrRenderComponent(VExpansionPanelTitle, null, {
                                                            default: withCtx((_9, _push10, _parent10, _scopeId9) => {
                                                              if (_push10) {
                                                                _push10(` Item ${ssrInterpolate(index + 1)}: ${ssrInterpolate(item.title)}`);
                                                              } else {
                                                                return [
                                                                  createTextVNode(" Item " + toDisplayString(index + 1) + ": " + toDisplayString(item.title), 1)
                                                                ];
                                                              }
                                                            }),
                                                            _: 2
                                                          }, _parent9, _scopeId8));
                                                          _push9(ssrRenderComponent(VExpansionPanelText, null, {
                                                            default: withCtx((_9, _push10, _parent10, _scopeId9) => {
                                                              if (_push10) {
                                                                _push10(ssrRenderComponent(VTextField, {
                                                                  modelValue: timelineItems.value[index].title,
                                                                  "onUpdate:modelValue": ($event) => timelineItems.value[index].title = $event,
                                                                  label: "Title",
                                                                  variant: "outlined",
                                                                  density: "comfortable",
                                                                  class: "mb-2"
                                                                }, null, _parent10, _scopeId9));
                                                                _push10(ssrRenderComponent(VTextField, {
                                                                  modelValue: timelineItems.value[index].message,
                                                                  "onUpdate:modelValue": ($event) => timelineItems.value[index].message = $event,
                                                                  label: "Message",
                                                                  variant: "outlined",
                                                                  density: "comfortable",
                                                                  class: "mb-2"
                                                                }, null, _parent10, _scopeId9));
                                                                _push10(`<div class="mb-2" data-v-7998bce9${_scopeId9}><label class="text-subtitle-2 mb-1" data-v-7998bce9${_scopeId9}>Point color</label><div class="color-selector-container" data-v-7998bce9${_scopeId9}>`);
                                                                _push10(ssrRenderComponent(VBtnToggle, {
                                                                  modelValue: timelineItems.value[index].color,
                                                                  "onUpdate:modelValue": ($event) => timelineItems.value[index].color = $event,
                                                                  mandatory: "",
                                                                  density: "comfortable"
                                                                }, {
                                                                  default: withCtx((_10, _push11, _parent11, _scopeId10) => {
                                                                    if (_push11) {
                                                                      _push11(`<!--[-->`);
                                                                      ssrRenderList(["primary", "secondary", "success", "info", "warning", "error"], (color) => {
                                                                        _push11(ssrRenderComponent(VBtn, {
                                                                          key: color,
                                                                          value: color,
                                                                          color,
                                                                          size: "small",
                                                                          variant: "tonal",
                                                                          width: "40",
                                                                          height: "40",
                                                                          class: "ma-1"
                                                                        }, null, _parent11, _scopeId10));
                                                                      });
                                                                      _push11(`<!--]-->`);
                                                                    } else {
                                                                      return [
                                                                        (openBlock(), createBlock(Fragment, null, renderList(["primary", "secondary", "success", "info", "warning", "error"], (color) => {
                                                                          return createVNode(VBtn, {
                                                                            key: color,
                                                                            value: color,
                                                                            color,
                                                                            size: "small",
                                                                            variant: "tonal",
                                                                            width: "40",
                                                                            height: "40",
                                                                            class: "ma-1"
                                                                          }, null, 8, ["value", "color"]);
                                                                        }), 64))
                                                                      ];
                                                                    }
                                                                  }),
                                                                  _: 2
                                                                }, _parent10, _scopeId9));
                                                                _push10(`</div></div>`);
                                                              } else {
                                                                return [
                                                                  createVNode(VTextField, {
                                                                    modelValue: timelineItems.value[index].title,
                                                                    "onUpdate:modelValue": ($event) => timelineItems.value[index].title = $event,
                                                                    label: "Title",
                                                                    variant: "outlined",
                                                                    density: "comfortable",
                                                                    class: "mb-2"
                                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                                  createVNode(VTextField, {
                                                                    modelValue: timelineItems.value[index].message,
                                                                    "onUpdate:modelValue": ($event) => timelineItems.value[index].message = $event,
                                                                    label: "Message",
                                                                    variant: "outlined",
                                                                    density: "comfortable",
                                                                    class: "mb-2"
                                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                                  createVNode("div", { class: "mb-2" }, [
                                                                    createVNode("label", { class: "text-subtitle-2 mb-1" }, "Point color"),
                                                                    createVNode("div", { class: "color-selector-container" }, [
                                                                      createVNode(VBtnToggle, {
                                                                        modelValue: timelineItems.value[index].color,
                                                                        "onUpdate:modelValue": ($event) => timelineItems.value[index].color = $event,
                                                                        mandatory: "",
                                                                        density: "comfortable"
                                                                      }, {
                                                                        default: withCtx(() => [
                                                                          (openBlock(), createBlock(Fragment, null, renderList(["primary", "secondary", "success", "info", "warning", "error"], (color) => {
                                                                            return createVNode(VBtn, {
                                                                              key: color,
                                                                              value: color,
                                                                              color,
                                                                              size: "small",
                                                                              variant: "tonal",
                                                                              width: "40",
                                                                              height: "40",
                                                                              class: "ma-1"
                                                                            }, null, 8, ["value", "color"]);
                                                                          }), 64))
                                                                        ]),
                                                                        _: 2
                                                                      }, 1032, ["modelValue", "onUpdate:modelValue"])
                                                                    ])
                                                                  ])
                                                                ];
                                                              }
                                                            }),
                                                            _: 2
                                                          }, _parent9, _scopeId8));
                                                        } else {
                                                          return [
                                                            createVNode(VExpansionPanelTitle, null, {
                                                              default: withCtx(() => [
                                                                createTextVNode(" Item " + toDisplayString(index + 1) + ": " + toDisplayString(item.title), 1)
                                                              ]),
                                                              _: 2
                                                            }, 1024),
                                                            createVNode(VExpansionPanelText, null, {
                                                              default: withCtx(() => [
                                                                createVNode(VTextField, {
                                                                  modelValue: timelineItems.value[index].title,
                                                                  "onUpdate:modelValue": ($event) => timelineItems.value[index].title = $event,
                                                                  label: "Title",
                                                                  variant: "outlined",
                                                                  density: "comfortable",
                                                                  class: "mb-2"
                                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                                createVNode(VTextField, {
                                                                  modelValue: timelineItems.value[index].message,
                                                                  "onUpdate:modelValue": ($event) => timelineItems.value[index].message = $event,
                                                                  label: "Message",
                                                                  variant: "outlined",
                                                                  density: "comfortable",
                                                                  class: "mb-2"
                                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                                createVNode("div", { class: "mb-2" }, [
                                                                  createVNode("label", { class: "text-subtitle-2 mb-1" }, "Point color"),
                                                                  createVNode("div", { class: "color-selector-container" }, [
                                                                    createVNode(VBtnToggle, {
                                                                      modelValue: timelineItems.value[index].color,
                                                                      "onUpdate:modelValue": ($event) => timelineItems.value[index].color = $event,
                                                                      mandatory: "",
                                                                      density: "comfortable"
                                                                    }, {
                                                                      default: withCtx(() => [
                                                                        (openBlock(), createBlock(Fragment, null, renderList(["primary", "secondary", "success", "info", "warning", "error"], (color) => {
                                                                          return createVNode(VBtn, {
                                                                            key: color,
                                                                            value: color,
                                                                            color,
                                                                            size: "small",
                                                                            variant: "tonal",
                                                                            width: "40",
                                                                            height: "40",
                                                                            class: "ma-1"
                                                                          }, null, 8, ["value", "color"]);
                                                                        }), 64))
                                                                      ]),
                                                                      _: 2
                                                                    }, 1032, ["modelValue", "onUpdate:modelValue"])
                                                                  ])
                                                                ])
                                                              ]),
                                                              _: 2
                                                            }, 1024)
                                                          ];
                                                        }
                                                      }),
                                                      _: 2
                                                    }, _parent8, _scopeId7));
                                                  });
                                                  _push8(`<!--]-->`);
                                                } else {
                                                  return [
                                                    (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value.slice(0, timelineItemsCount.value), (item, index) => {
                                                      return openBlock(), createBlock(VExpansionPanel, { key: index }, {
                                                        default: withCtx(() => [
                                                          createVNode(VExpansionPanelTitle, null, {
                                                            default: withCtx(() => [
                                                              createTextVNode(" Item " + toDisplayString(index + 1) + ": " + toDisplayString(item.title), 1)
                                                            ]),
                                                            _: 2
                                                          }, 1024),
                                                          createVNode(VExpansionPanelText, null, {
                                                            default: withCtx(() => [
                                                              createVNode(VTextField, {
                                                                modelValue: timelineItems.value[index].title,
                                                                "onUpdate:modelValue": ($event) => timelineItems.value[index].title = $event,
                                                                label: "Title",
                                                                variant: "outlined",
                                                                density: "comfortable",
                                                                class: "mb-2"
                                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                              createVNode(VTextField, {
                                                                modelValue: timelineItems.value[index].message,
                                                                "onUpdate:modelValue": ($event) => timelineItems.value[index].message = $event,
                                                                label: "Message",
                                                                variant: "outlined",
                                                                density: "comfortable",
                                                                class: "mb-2"
                                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                              createVNode("div", { class: "mb-2" }, [
                                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Point color"),
                                                                createVNode("div", { class: "color-selector-container" }, [
                                                                  createVNode(VBtnToggle, {
                                                                    modelValue: timelineItems.value[index].color,
                                                                    "onUpdate:modelValue": ($event) => timelineItems.value[index].color = $event,
                                                                    mandatory: "",
                                                                    density: "comfortable"
                                                                  }, {
                                                                    default: withCtx(() => [
                                                                      (openBlock(), createBlock(Fragment, null, renderList(["primary", "secondary", "success", "info", "warning", "error"], (color) => {
                                                                        return createVNode(VBtn, {
                                                                          key: color,
                                                                          value: color,
                                                                          color,
                                                                          size: "small",
                                                                          variant: "tonal",
                                                                          width: "40",
                                                                          height: "40",
                                                                          class: "ma-1"
                                                                        }, null, 8, ["value", "color"]);
                                                                      }), 64))
                                                                    ]),
                                                                    _: 2
                                                                  }, 1032, ["modelValue", "onUpdate:modelValue"])
                                                                ])
                                                              ])
                                                            ]),
                                                            _: 2
                                                          }, 1024)
                                                        ]),
                                                        _: 2
                                                      }, 1024);
                                                    }), 128))
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div><!--]-->`);
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                                createVNode("div", { class: "d-flex align-center" }, [
                                                  createVNode(VIcon, {
                                                    color: "primary",
                                                    class: "mr-2"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-chart-line")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode("span", { class: "text-h6" }, "Data Visualization")
                                                ]),
                                                createVNode(VTooltip, { location: "bottom" }, {
                                                  activator: withCtx(({ props: props2 }) => [
                                                    createVNode(VBtn, mergeProps({
                                                      icon: "mdi-help-circle-outline",
                                                      variant: "text",
                                                      size: "small"
                                                    }, props2), null, 16)
                                                  ]),
                                                  default: withCtx(() => [
                                                    createVNode("span", null, "Add data visualizations to your card")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              createVNode(VSwitch, {
                                                modelValue: cardProperties.value.showSparkline,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.showSparkline = $event,
                                                color: "primary",
                                                label: "Show sparkline",
                                                "hide-details": "",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              cardProperties.value.showSparkline ? (openBlock(), createBlock(Fragment, { key: 0 }, [
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1" }, "Sparkline color"),
                                                  createVNode("div", { class: "color-selector-container" }, [
                                                    createVNode(VBtnToggle, {
                                                      modelValue: sparklineColorIndex.value,
                                                      "onUpdate:modelValue": ($event) => sparklineColorIndex.value = $event,
                                                      mandatory: "",
                                                      density: "comfortable",
                                                      "selected-class": "border-primary"
                                                    }, {
                                                      default: withCtx(() => [
                                                        (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                          return createVNode(VBtn, {
                                                            key: color.value,
                                                            value: index,
                                                            color: color.value !== "default" ? color.value : void 0,
                                                            size: "small",
                                                            variant: "tonal",
                                                            width: "40",
                                                            height: "40",
                                                            class: "ma-1"
                                                          }, {
                                                            default: withCtx(() => [
                                                              color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                                default: withCtx(() => [
                                                                  createTextVNode("mdi-palette-outline")
                                                                ]),
                                                                _: 1
                                                              })) : createCommentVNode("", true)
                                                            ]),
                                                            _: 2
                                                          }, 1032, ["value", "color"]);
                                                        }), 64))
                                                      ]),
                                                      _: 1
                                                    }, 8, ["modelValue", "onUpdate:modelValue"])
                                                  ])
                                                ]),
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1" }, "Sparkline data"),
                                                  createVNode(VTextarea, {
                                                    modelValue: sparklineDataText.value,
                                                    "onUpdate:modelValue": [($event) => sparklineDataText.value = $event, updateSparklineData],
                                                    label: "Enter comma-separated values",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    "auto-grow": "",
                                                    rows: "2",
                                                    "row-height": "20",
                                                    class: "mb-2",
                                                    hint: "Example: 0,2,5,9,5,10,3,5,0,0,1,8,2,9,0",
                                                    "persistent-hint": ""
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Line width"),
                                                  createVNode("div", { class: "d-flex align-center" }, [
                                                    createVNode(VIcon, {
                                                      size: "small",
                                                      color: "primary"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-minus")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VSlider, {
                                                      modelValue: cardProperties.value.sparklineLineWidth,
                                                      "onUpdate:modelValue": ($event) => cardProperties.value.sparklineLineWidth = $event,
                                                      min: "1",
                                                      max: "5",
                                                      step: "1",
                                                      "thumb-label": "",
                                                      class: "mx-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode(VIcon, {
                                                      size: "small",
                                                      color: "primary"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-minus-thick")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ])
                                                ]),
                                                createVNode(VSwitch, {
                                                  modelValue: cardProperties.value.sparklineGradient,
                                                  "onUpdate:modelValue": ($event) => cardProperties.value.sparklineGradient = $event,
                                                  color: "primary",
                                                  label: "Show gradient",
                                                  "hide-details": "",
                                                  class: "mb-4"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: cardProperties.value.sparklineShowLabels,
                                                  "onUpdate:modelValue": ($event) => cardProperties.value.sparklineShowLabels = $event,
                                                  color: "primary",
                                                  label: "Show labels",
                                                  "hide-details": "",
                                                  class: "mb-4"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                cardProperties.value.sparklineShowLabels ? (openBlock(), createBlock("div", {
                                                  key: 0,
                                                  class: "mb-4"
                                                }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1" }, "Labels"),
                                                  createVNode(VTextarea, {
                                                    modelValue: sparklineLabelsText.value,
                                                    "onUpdate:modelValue": [($event) => sparklineLabelsText.value = $event, updateSparklineLabels],
                                                    label: "Enter comma-separated labels",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    "auto-grow": "",
                                                    rows: "2",
                                                    "row-height": "20",
                                                    class: "mb-2",
                                                    hint: "Example: Jan,Fév,Mar,Avr,Mai,Juin",
                                                    "persistent-hint": ""
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                ])) : createCommentVNode("", true)
                                              ], 64)) : createCommentVNode("", true),
                                              createVNode(VDivider, { class: "my-4" }),
                                              createVNode(VSwitch, {
                                                modelValue: cardProperties.value.showTimeline,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.showTimeline = $event,
                                                color: "primary",
                                                label: "Show timeline",
                                                "hide-details": "",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              cardProperties.value.showTimeline ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1" }, "Timeline items"),
                                                  createVNode(VSelect, {
                                                    modelValue: timelineItemsCount.value,
                                                    "onUpdate:modelValue": ($event) => timelineItemsCount.value = $event,
                                                    items: [1, 2, 3, 4, 5],
                                                    label: "Number of items",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1" }, "Timeline content"),
                                                  createVNode(VExpansionPanels, { variant: "accordion" }, {
                                                    default: withCtx(() => [
                                                      (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value.slice(0, timelineItemsCount.value), (item, index) => {
                                                        return openBlock(), createBlock(VExpansionPanel, { key: index }, {
                                                          default: withCtx(() => [
                                                            createVNode(VExpansionPanelTitle, null, {
                                                              default: withCtx(() => [
                                                                createTextVNode(" Item " + toDisplayString(index + 1) + ": " + toDisplayString(item.title), 1)
                                                              ]),
                                                              _: 2
                                                            }, 1024),
                                                            createVNode(VExpansionPanelText, null, {
                                                              default: withCtx(() => [
                                                                createVNode(VTextField, {
                                                                  modelValue: timelineItems.value[index].title,
                                                                  "onUpdate:modelValue": ($event) => timelineItems.value[index].title = $event,
                                                                  label: "Title",
                                                                  variant: "outlined",
                                                                  density: "comfortable",
                                                                  class: "mb-2"
                                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                                createVNode(VTextField, {
                                                                  modelValue: timelineItems.value[index].message,
                                                                  "onUpdate:modelValue": ($event) => timelineItems.value[index].message = $event,
                                                                  label: "Message",
                                                                  variant: "outlined",
                                                                  density: "comfortable",
                                                                  class: "mb-2"
                                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                                createVNode("div", { class: "mb-2" }, [
                                                                  createVNode("label", { class: "text-subtitle-2 mb-1" }, "Point color"),
                                                                  createVNode("div", { class: "color-selector-container" }, [
                                                                    createVNode(VBtnToggle, {
                                                                      modelValue: timelineItems.value[index].color,
                                                                      "onUpdate:modelValue": ($event) => timelineItems.value[index].color = $event,
                                                                      mandatory: "",
                                                                      density: "comfortable"
                                                                    }, {
                                                                      default: withCtx(() => [
                                                                        (openBlock(), createBlock(Fragment, null, renderList(["primary", "secondary", "success", "info", "warning", "error"], (color) => {
                                                                          return createVNode(VBtn, {
                                                                            key: color,
                                                                            value: color,
                                                                            color,
                                                                            size: "small",
                                                                            variant: "tonal",
                                                                            width: "40",
                                                                            height: "40",
                                                                            class: "ma-1"
                                                                          }, null, 8, ["value", "color"]);
                                                                        }), 64))
                                                                      ]),
                                                                      _: 2
                                                                    }, 1032, ["modelValue", "onUpdate:modelValue"])
                                                                  ])
                                                                ])
                                                              ]),
                                                              _: 2
                                                            }, 1024)
                                                          ]),
                                                          _: 2
                                                        }, 1024);
                                                      }), 128))
                                                    ]),
                                                    _: 1
                                                  })
                                                ])
                                              ], 64)) : createCommentVNode("", true)
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "templates" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-7998bce9${_scopeId6}><div class="section-title d-flex align-center mb-3 justify-space-between" data-v-7998bce9${_scopeId6}><div class="d-flex align-center" data-v-7998bce9${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-file-document-outline`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-file-document-outline")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-7998bce9${_scopeId6}>Card Templates</span></div>`);
                                          _push7(ssrRenderComponent(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props: props2 }, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VBtn, mergeProps({
                                                  icon: "mdi-help-circle-outline",
                                                  variant: "text",
                                                  size: "small"
                                                }, props2), null, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VBtn, mergeProps({
                                                    icon: "mdi-help-circle-outline",
                                                    variant: "text",
                                                    size: "small"
                                                  }, props2), null, 16)
                                                ];
                                              }
                                            }),
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<span data-v-7998bce9${_scopeId7}>Apply pre-defined templates or save your own</span>`);
                                              } else {
                                                return [
                                                  createVNode("span", null, "Apply pre-defined templates or save your own")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div><p class="text-body-2 mb-4" data-v-7998bce9${_scopeId6}>Choose a pre-defined template to quickly create common cards.</p>`);
                                          _push7(ssrRenderComponent(VCard, { class: "mb-4" }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VList, null, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("timeline"),
                                                        "prepend-icon": "mdi-timeline",
                                                        title: "Timeline Card",
                                                        subtitle: "Activity timeline display"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("weather"),
                                                        "prepend-icon": "mdi-weather-partly-cloudy",
                                                        title: "Weather Card",
                                                        subtitle: "Weather forecast display"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("statistics"),
                                                        "prepend-icon": "mdi-currency-usd",
                                                        title: "Statistics Card",
                                                        subtitle: "Financial or metrics display"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("file"),
                                                        "prepend-icon": "mdi-file-document-outline",
                                                        title: "File Card",
                                                        subtitle: "Document or file presentation"
                                                      }, null, _parent9, _scopeId8));
                                                    } else {
                                                      return [
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("timeline"),
                                                          "prepend-icon": "mdi-timeline",
                                                          title: "Timeline Card",
                                                          subtitle: "Activity timeline display"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("weather"),
                                                          "prepend-icon": "mdi-weather-partly-cloudy",
                                                          title: "Weather Card",
                                                          subtitle: "Weather forecast display"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("statistics"),
                                                          "prepend-icon": "mdi-currency-usd",
                                                          title: "Statistics Card",
                                                          subtitle: "Financial or metrics display"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("file"),
                                                          "prepend-icon": "mdi-file-document-outline",
                                                          title: "File Card",
                                                          subtitle: "Document or file presentation"
                                                        }, null, 8, ["onClick"])
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VList, null, {
                                                    default: withCtx(() => [
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("timeline"),
                                                        "prepend-icon": "mdi-timeline",
                                                        title: "Timeline Card",
                                                        subtitle: "Activity timeline display"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("weather"),
                                                        "prepend-icon": "mdi-weather-partly-cloudy",
                                                        title: "Weather Card",
                                                        subtitle: "Weather forecast display"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("statistics"),
                                                        "prepend-icon": "mdi-currency-usd",
                                                        title: "Statistics Card",
                                                        subtitle: "Financial or metrics display"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("file"),
                                                        "prepend-icon": "mdi-file-document-outline",
                                                        title: "File Card",
                                                        subtitle: "Document or file presentation"
                                                      }, null, 8, ["onClick"])
                                                    ]),
                                                    _: 1
                                                  })
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VAlert, {
                                            type: "info",
                                            variant: "tonal",
                                            class: "mb-4"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(` Applying a template will replace your current card settings. `);
                                              } else {
                                                return [
                                                  createTextVNode(" Applying a template will replace your current card settings. ")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VDivider, { class: "my-4" }, null, _parent7, _scopeId6));
                                          _push7(`<div class="section-title d-flex align-center mb-3" data-v-7998bce9${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-content-save`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-content-save")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-7998bce9${_scopeId6}>Save Current Card</span></div>`);
                                          _push7(ssrRenderComponent(VTextField, {
                                            modelValue: customTemplateName.value,
                                            "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                            label: "Template Name",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "prepend-inner-icon": "mdi-tag",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VBtn, {
                                            color: "primary",
                                            variant: "tonal",
                                            onClick: saveCurrentTemplate
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VIcon, { start: "" }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`mdi-content-save`);
                                                    } else {
                                                      return [
                                                        createTextVNode("mdi-content-save")
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                                _push8(` Save Current Card `);
                                              } else {
                                                return [
                                                  createVNode(VIcon, { start: "" }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-content-save")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createTextVNode(" Save Current Card ")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                                createVNode("div", { class: "d-flex align-center" }, [
                                                  createVNode(VIcon, {
                                                    color: "primary",
                                                    class: "mr-2"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-file-document-outline")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode("span", { class: "text-h6" }, "Card Templates")
                                                ]),
                                                createVNode(VTooltip, { location: "bottom" }, {
                                                  activator: withCtx(({ props: props2 }) => [
                                                    createVNode(VBtn, mergeProps({
                                                      icon: "mdi-help-circle-outline",
                                                      variant: "text",
                                                      size: "small"
                                                    }, props2), null, 16)
                                                  ]),
                                                  default: withCtx(() => [
                                                    createVNode("span", null, "Apply pre-defined templates or save your own")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common cards."),
                                              createVNode(VCard, { class: "mb-4" }, {
                                                default: withCtx(() => [
                                                  createVNode(VList, null, {
                                                    default: withCtx(() => [
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("timeline"),
                                                        "prepend-icon": "mdi-timeline",
                                                        title: "Timeline Card",
                                                        subtitle: "Activity timeline display"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("weather"),
                                                        "prepend-icon": "mdi-weather-partly-cloudy",
                                                        title: "Weather Card",
                                                        subtitle: "Weather forecast display"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("statistics"),
                                                        "prepend-icon": "mdi-currency-usd",
                                                        title: "Statistics Card",
                                                        subtitle: "Financial or metrics display"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("file"),
                                                        "prepend-icon": "mdi-file-document-outline",
                                                        title: "File Card",
                                                        subtitle: "Document or file presentation"
                                                      }, null, 8, ["onClick"])
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VAlert, {
                                                type: "info",
                                                variant: "tonal",
                                                class: "mb-4"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Applying a template will replace your current card settings. ")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VDivider, { class: "my-4" }),
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-content-save")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Save Current Card")
                                              ]),
                                              createVNode(VTextField, {
                                                modelValue: customTemplateName.value,
                                                "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                                label: "Template Name",
                                                variant: "outlined",
                                                density: "comfortable",
                                                "prepend-inner-icon": "mdi-tag",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VBtn, {
                                                color: "primary",
                                                variant: "tonal",
                                                onClick: saveCurrentTemplate
                                              }, {
                                                default: withCtx(() => [
                                                  createVNode(VIcon, { start: "" }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-content-save")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createTextVNode(" Save Current Card ")
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                  } else {
                                    return [
                                      createVNode(VWindowItem, { value: "content" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode(VTextField, {
                                              modelValue: cardProperties.value.title,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.title = $event,
                                              label: "Title",
                                              variant: "outlined",
                                              density: "comfortable",
                                              clearable: "",
                                              "prepend-inner-icon": "mdi-format-title",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VTextField, {
                                              modelValue: cardProperties.value.subtitle,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.subtitle = $event,
                                              label: "Subtitle",
                                              variant: "outlined",
                                              density: "comfortable",
                                              clearable: "",
                                              "prepend-inner-icon": "mdi-format-text",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VTextarea, {
                                              modelValue: cardProperties.value.text,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.text = $event,
                                              label: "Text",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "auto-grow": "",
                                              rows: "3",
                                              "row-height": "20",
                                              clearable: "",
                                              "prepend-inner-icon": "mdi-text",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VTextField, {
                                              modelValue: cardProperties.value.image,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.image = $event,
                                              label: "Image URL",
                                              variant: "outlined",
                                              density: "comfortable",
                                              clearable: "",
                                              "prepend-inner-icon": "mdi-image",
                                              class: "mb-1"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode("div", { class: "d-flex flex-wrap mb-4" }, [
                                              createVNode(VChipGroup, {
                                                mandatory: "",
                                                "selected-class": "bg-primary text-white"
                                              }, {
                                                default: withCtx(() => [
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "none",
                                                    onClick: removeImage
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("None")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "mountains",
                                                    onClick: ($event) => setImage("mountains")
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Mountains")
                                                    ]),
                                                    _: 1
                                                  }, 8, ["onClick"]),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "beach",
                                                    onClick: ($event) => setImage("beach")
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Beach")
                                                    ]),
                                                    _: 1
                                                  }, 8, ["onClick"]),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "forest",
                                                    onClick: ($event) => setImage("forest")
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Forest")
                                                    ]),
                                                    _: 1
                                                  }, 8, ["onClick"])
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            createVNode(VSelect, {
                                              modelValue: cardProperties.value.icon,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.icon = $event,
                                              items: unref(icons),
                                              label: "Icon",
                                              variant: "outlined",
                                              density: "comfortable",
                                              clearable: "",
                                              "prepend-inner-icon": "mdi-pencil",
                                              class: "mb-4"
                                            }, {
                                              item: withCtx(({ item, props: props2 }) => [
                                                createVNode(VListItem, props2, {
                                                  prepend: withCtx(() => [
                                                    createVNode(VIcon, {
                                                      icon: item.raw
                                                    }, null, 8, ["icon"])
                                                  ]),
                                                  _: 2
                                                }, 1040)
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                            cardProperties.value.icon ? (openBlock(), createBlock("div", {
                                              key: 0,
                                              class: "mb-4"
                                            }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Icon color"),
                                              createVNode("div", { class: "color-selector-container" }, [
                                                createVNode(VBtnToggle, {
                                                  modelValue: iconColorIndex.value,
                                                  "onUpdate:modelValue": ($event) => iconColorIndex.value = $event,
                                                  mandatory: "",
                                                  density: "comfortable",
                                                  "selected-class": "border-primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                      return createVNode(VBtn, {
                                                        key: color.value,
                                                        value: index,
                                                        color: color.value !== "default" ? color.value : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: "ma-1"
                                                      }, {
                                                        default: withCtx(() => [
                                                          color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ])
                                            ])) : createCommentVNode("", true)
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "style" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Elevation"),
                                              createVNode("div", { class: "d-flex align-center" }, [
                                                createVNode(VIcon, {
                                                  size: "small",
                                                  color: "primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-card-outline")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VSlider, {
                                                  modelValue: cardProperties.value.elevation,
                                                  "onUpdate:modelValue": ($event) => cardProperties.value.elevation = $event,
                                                  min: "0",
                                                  max: "24",
                                                  step: "1",
                                                  "thumb-label": "",
                                                  class: "mx-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VIcon, {
                                                  size: "small",
                                                  color: "primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-layers-triple")
                                                  ]),
                                                  _: 1
                                                })
                                              ])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Variant"),
                                              createVNode(VChipGroup, {
                                                modelValue: cardVariantIndex.value,
                                                "onUpdate:modelValue": ($event) => cardVariantIndex.value = $event,
                                                mandatory: "",
                                                "selected-class": "bg-primary text-white"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(cardVariants, (variant, index) => {
                                                    return createVNode(VChip, {
                                                      key: variant,
                                                      size: "small",
                                                      value: index
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(toDisplayString(variant), 1)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Color"),
                                              createVNode("div", { class: "color-selector-container" }, [
                                                createVNode(VBtnToggle, {
                                                  modelValue: cardColorIndex.value,
                                                  "onUpdate:modelValue": ($event) => cardColorIndex.value = $event,
                                                  mandatory: "",
                                                  density: "comfortable",
                                                  "selected-class": "border-primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                      return createVNode(VBtn, {
                                                        key: color.value,
                                                        value: index,
                                                        color: color.value !== "default" ? color.value : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: "ma-1"
                                                      }, {
                                                        default: withCtx(() => [
                                                          color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ])
                                            ]),
                                            createVNode(VSwitch, {
                                              modelValue: cardProperties.value.loading,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.loading = $event,
                                              color: "primary",
                                              label: "Loading",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: cardProperties.value.disabled,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.disabled = $event,
                                              color: "primary",
                                              label: "Disabled",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: cardProperties.value.hoverEffect,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.hoverEffect = $event,
                                              color: "primary",
                                              label: "Hover effect",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Padding"),
                                              createVNode("div", { class: "d-flex align-center" }, [
                                                createVNode(VIcon, {
                                                  size: "small",
                                                  color: "primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-arrow-collapse")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VSlider, {
                                                  modelValue: cardProperties.value.padding,
                                                  "onUpdate:modelValue": ($event) => cardProperties.value.padding = $event,
                                                  min: "0",
                                                  max: "16",
                                                  step: "4",
                                                  "thumb-label": "",
                                                  class: "mx-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VIcon, {
                                                  size: "small",
                                                  color: "primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-arrow-expand")
                                                  ]),
                                                  _: 1
                                                })
                                              ])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Border radius"),
                                              createVNode("div", { class: "d-flex align-center" }, [
                                                createVNode(VIcon, {
                                                  size: "small",
                                                  color: "primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-square-outline")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VSlider, {
                                                  modelValue: roundedIndex.value,
                                                  "onUpdate:modelValue": ($event) => roundedIndex.value = $event,
                                                  min: 0,
                                                  max: roundedLabels.length - 1,
                                                  step: "1",
                                                  "thumb-label": "",
                                                  "thumb-label-text": roundedLabels[roundedIndex.value],
                                                  class: "mx-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue", "max", "thumb-label-text"]),
                                                createVNode(VIcon, {
                                                  size: "small",
                                                  color: "primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-rectangle-outline")
                                                  ]),
                                                  _: 1
                                                })
                                              ])
                                            ])
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "actions" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode(VSwitch, {
                                              modelValue: cardProperties.value.showButtons,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.showButtons = $event,
                                              color: "primary",
                                              label: "Show buttons",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            cardProperties.value.showButtons ? (openBlock(), createBlock(Fragment, { key: 0 }, [
                                              createVNode(VTextField, {
                                                modelValue: cardProperties.value.buttonText,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.buttonText = $event,
                                                label: "Button text",
                                                variant: "outlined",
                                                density: "comfortable",
                                                "prepend-inner-icon": "mdi-button-cursor",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Button style"),
                                                createVNode(VChipGroup, {
                                                  modelValue: buttonVariantIndex.value,
                                                  "onUpdate:modelValue": ($event) => buttonVariantIndex.value = $event,
                                                  mandatory: "",
                                                  "selected-class": "bg-primary text-white"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(buttonVariants, (variant, index) => {
                                                      return createVNode(VChip, {
                                                        key: variant,
                                                        size: "small",
                                                        value: index
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode(toDisplayString(variant), 1)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Button color"),
                                                createVNode("div", { class: "d-flex overflow-x-auto" }, [
                                                  createVNode(VBtnToggle, {
                                                    modelValue: buttonColorIndex.value,
                                                    "onUpdate:modelValue": ($event) => buttonColorIndex.value = $event,
                                                    mandatory: "",
                                                    density: "comfortable",
                                                    class: "d-flex"
                                                  }, {
                                                    default: withCtx(() => [
                                                      (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                        return createVNode(VBtn, {
                                                          key: color.value,
                                                          value: index,
                                                          color: color.value !== "default" ? color.value : void 0,
                                                          size: "small",
                                                          variant: "tonal",
                                                          width: "40",
                                                          height: "40",
                                                          class: "ma-1"
                                                        }, {
                                                          default: withCtx(() => [
                                                            color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                              default: withCtx(() => [
                                                                createTextVNode("mdi-palette-outline")
                                                              ]),
                                                              _: 1
                                                            })) : createCommentVNode("", true)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["value", "color"]);
                                                      }), 64))
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Button width"),
                                                createVNode("div", { class: "d-flex align-center" }, [
                                                  createVNode(VChip, { size: "x-small" }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Auto")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VSlider, {
                                                    modelValue: cardProperties.value.buttonWidth,
                                                    "onUpdate:modelValue": ($event) => cardProperties.value.buttonWidth = $event,
                                                    min: "0",
                                                    max: "100",
                                                    step: "25",
                                                    "thumb-label": "",
                                                    "thumb-label-text": cardProperties.value.buttonWidth + "%",
                                                    class: "mx-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue", "thumb-label-text"]),
                                                  createVNode(VChip, { size: "x-small" }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("100%")
                                                    ]),
                                                    _: 1
                                                  })
                                                ])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Button position"),
                                                createVNode("div", { class: "d-flex justify-space-between" }, [
                                                  createVNode(VBtnToggle, {
                                                    modelValue: cardProperties.value.buttonPosition,
                                                    "onUpdate:modelValue": ($event) => cardProperties.value.buttonPosition = $event,
                                                    mandatory: "",
                                                    density: "comfortable"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createVNode(VBtn, {
                                                        value: "start",
                                                        icon: "mdi-format-align-left"
                                                      }),
                                                      createVNode(VBtn, {
                                                        value: "center",
                                                        icon: "mdi-format-align-center"
                                                      }),
                                                      createVNode(VBtn, {
                                                        value: "end",
                                                        icon: "mdi-format-align-right"
                                                      }),
                                                      createVNode(VBtn, {
                                                        value: "space-between",
                                                        icon: "mdi-format-align-justify"
                                                      })
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ])
                                              ]),
                                              createVNode(VAutocomplete, {
                                                modelValue: cardProperties.value.buttonIcon,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.buttonIcon = $event,
                                                items: unref(icons),
                                                label: "Icon",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-2 mt-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                              createVNode(VTextField, {
                                                modelValue: cardProperties.value.buttonLink,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.buttonLink = $event,
                                                label: "Link",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                            ], 64)) : createCommentVNode("", true),
                                            createVNode(VSwitch, {
                                              modelValue: cardProperties.value.showProgress,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.showProgress = $event,
                                              color: "primary",
                                              label: "Show progress circular",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            cardProperties.value.showProgress ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Progress value"),
                                                createVNode("div", { class: "d-flex align-center" }, [
                                                  createVNode(VIcon, {
                                                    size: "small",
                                                    color: "primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-percent")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VSlider, {
                                                    modelValue: cardProperties.value.progressValue,
                                                    "onUpdate:modelValue": ($event) => cardProperties.value.progressValue = $event,
                                                    min: "0",
                                                    max: "100",
                                                    step: "5",
                                                    "thumb-label": "",
                                                    "thumb-label-text": cardProperties.value.progressValue + "%",
                                                    class: "mx-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue", "thumb-label-text"])
                                                ]),
                                                createVNode("div", { class: "d-flex align-center mt-2" }, [
                                                  createVNode(VIcon, {
                                                    size: "small",
                                                    color: "primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-circle-slice-8")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VSlider, {
                                                    modelValue: cardProperties.value.progressWidth,
                                                    "onUpdate:modelValue": ($event) => cardProperties.value.progressWidth = $event,
                                                    min: "1",
                                                    max: "10",
                                                    step: "1",
                                                    "thumb-label": "",
                                                    "thumb-label-text": cardProperties.value.progressWidth,
                                                    class: "mx-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue", "thumb-label-text"])
                                                ])
                                              ]),
                                              createVNode(VSwitch, {
                                                modelValue: cardProperties.value.indeterminate,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.indeterminate = $event,
                                                color: "primary",
                                                "hide-details": "",
                                                class: "mb-2",
                                                label: "Indeterminate"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Progress color"),
                                                createVNode("div", { class: "d-flex flex-wrap gap-2" }, [
                                                  createVNode(VBtnToggle, {
                                                    modelValue: progressColorIndex.value,
                                                    "onUpdate:modelValue": ($event) => progressColorIndex.value = $event,
                                                    mandatory: "",
                                                    density: "comfortable",
                                                    "selected-class": "border-primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                        return createVNode(VBtn, {
                                                          key: color.value,
                                                          value: index,
                                                          color: color.value !== "default" ? color.value : void 0,
                                                          size: "small",
                                                          variant: "tonal",
                                                          width: "40",
                                                          height: "40",
                                                          class: "ma-1"
                                                        }, {
                                                          default: withCtx(() => [
                                                            color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                              default: withCtx(() => [
                                                                createTextVNode("mdi-palette-outline")
                                                              ]),
                                                              _: 1
                                                            })) : createCommentVNode("", true)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["value", "color"]);
                                                      }), 64))
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Progress size"),
                                                createVNode(VChipGroup, {
                                                  modelValue: progressSizeIndex.value,
                                                  "onUpdate:modelValue": ($event) => progressSizeIndex.value = $event,
                                                  mandatory: "",
                                                  "selected-class": "bg-primary text-white"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(progressSizes, (size, index) => {
                                                      return createVNode(VChip, {
                                                        key: size,
                                                        size: "small",
                                                        value: index
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode(toDisplayString(size), 1)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Progress position"),
                                                createVNode(VSelect, {
                                                  modelValue: cardProperties.value.progressPosition,
                                                  "onUpdate:modelValue": ($event) => cardProperties.value.progressPosition = $event,
                                                  items: progressPositions,
                                                  label: "Position",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode(VSwitch, {
                                                modelValue: cardProperties.value.showProgressLabel,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.showProgressLabel = $event,
                                                color: "primary",
                                                "hide-details": "",
                                                class: "mb-2",
                                                label: "Show value"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              cardProperties.value.showProgressLabel ? (openBlock(), createBlock("div", {
                                                key: 0,
                                                class: "mb-4"
                                              }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Label style"),
                                                createVNode(VChipGroup, {
                                                  modelValue: cardProperties.value.progressLabelStyle,
                                                  "onUpdate:modelValue": ($event) => cardProperties.value.progressLabelStyle = $event,
                                                  mandatory: "",
                                                  "selected-class": "bg-primary text-white"
                                                }, {
                                                  default: withCtx(() => [
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "value"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Value (%)")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "custom"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Custom")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"]),
                                                cardProperties.value.progressLabelStyle === "custom" ? (openBlock(), createBlock(VTextField, {
                                                  key: 0,
                                                  modelValue: cardProperties.value.progressLabelText,
                                                  "onUpdate:modelValue": ($event) => cardProperties.value.progressLabelText = $event,
                                                  label: "Custom label",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mt-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                              ])) : createCommentVNode("", true),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode(VSwitch, {
                                                  modelValue: cardProperties.value.showProgressBg,
                                                  "onUpdate:modelValue": ($event) => cardProperties.value.showProgressBg = $event,
                                                  color: "primary",
                                                  "hide-details": "",
                                                  class: "mb-2",
                                                  label: "Background color"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                cardProperties.value.showProgressBg ? (openBlock(), createBlock("div", {
                                                  key: 0,
                                                  class: "d-flex flex-wrap gap-2 mt-2"
                                                }, [
                                                  createVNode(VBtnToggle, {
                                                    modelValue: progressBgColorIndex.value,
                                                    "onUpdate:modelValue": ($event) => progressBgColorIndex.value = $event,
                                                    mandatory: "",
                                                    density: "comfortable",
                                                    "selected-class": "border-primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                        return createVNode(VBtn, {
                                                          key: color.value,
                                                          value: index,
                                                          color: color.value !== "default" ? color.value : void 0,
                                                          size: "small",
                                                          variant: "tonal",
                                                          width: "40",
                                                          height: "40",
                                                          class: "ma-1"
                                                        }, {
                                                          default: withCtx(() => [
                                                            color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                              default: withCtx(() => [
                                                                createTextVNode("mdi-palette-outline")
                                                              ]),
                                                              _: 1
                                                            })) : createCommentVNode("", true)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["value", "color"]);
                                                      }), 64))
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ])) : createCommentVNode("", true)
                                              ])
                                            ], 64)) : createCommentVNode("", true)
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "data" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                              createVNode("div", { class: "d-flex align-center" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-chart-line")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Data Visualization")
                                              ]),
                                              createVNode(VTooltip, { location: "bottom" }, {
                                                activator: withCtx(({ props: props2 }) => [
                                                  createVNode(VBtn, mergeProps({
                                                    icon: "mdi-help-circle-outline",
                                                    variant: "text",
                                                    size: "small"
                                                  }, props2), null, 16)
                                                ]),
                                                default: withCtx(() => [
                                                  createVNode("span", null, "Add data visualizations to your card")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            createVNode(VSwitch, {
                                              modelValue: cardProperties.value.showSparkline,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.showSparkline = $event,
                                              color: "primary",
                                              label: "Show sparkline",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            cardProperties.value.showSparkline ? (openBlock(), createBlock(Fragment, { key: 0 }, [
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Sparkline color"),
                                                createVNode("div", { class: "color-selector-container" }, [
                                                  createVNode(VBtnToggle, {
                                                    modelValue: sparklineColorIndex.value,
                                                    "onUpdate:modelValue": ($event) => sparklineColorIndex.value = $event,
                                                    mandatory: "",
                                                    density: "comfortable",
                                                    "selected-class": "border-primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                        return createVNode(VBtn, {
                                                          key: color.value,
                                                          value: index,
                                                          color: color.value !== "default" ? color.value : void 0,
                                                          size: "small",
                                                          variant: "tonal",
                                                          width: "40",
                                                          height: "40",
                                                          class: "ma-1"
                                                        }, {
                                                          default: withCtx(() => [
                                                            color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                              default: withCtx(() => [
                                                                createTextVNode("mdi-palette-outline")
                                                              ]),
                                                              _: 1
                                                            })) : createCommentVNode("", true)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["value", "color"]);
                                                      }), 64))
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Sparkline data"),
                                                createVNode(VTextarea, {
                                                  modelValue: sparklineDataText.value,
                                                  "onUpdate:modelValue": [($event) => sparklineDataText.value = $event, updateSparklineData],
                                                  label: "Enter comma-separated values",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  "auto-grow": "",
                                                  rows: "2",
                                                  "row-height": "20",
                                                  class: "mb-2",
                                                  hint: "Example: 0,2,5,9,5,10,3,5,0,0,1,8,2,9,0",
                                                  "persistent-hint": ""
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Line width"),
                                                createVNode("div", { class: "d-flex align-center" }, [
                                                  createVNode(VIcon, {
                                                    size: "small",
                                                    color: "primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-minus")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VSlider, {
                                                    modelValue: cardProperties.value.sparklineLineWidth,
                                                    "onUpdate:modelValue": ($event) => cardProperties.value.sparklineLineWidth = $event,
                                                    min: "1",
                                                    max: "5",
                                                    step: "1",
                                                    "thumb-label": "",
                                                    class: "mx-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VIcon, {
                                                    size: "small",
                                                    color: "primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-minus-thick")
                                                    ]),
                                                    _: 1
                                                  })
                                                ])
                                              ]),
                                              createVNode(VSwitch, {
                                                modelValue: cardProperties.value.sparklineGradient,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.sparklineGradient = $event,
                                                color: "primary",
                                                label: "Show gradient",
                                                "hide-details": "",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: cardProperties.value.sparklineShowLabels,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.sparklineShowLabels = $event,
                                                color: "primary",
                                                label: "Show labels",
                                                "hide-details": "",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              cardProperties.value.sparklineShowLabels ? (openBlock(), createBlock("div", {
                                                key: 0,
                                                class: "mb-4"
                                              }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Labels"),
                                                createVNode(VTextarea, {
                                                  modelValue: sparklineLabelsText.value,
                                                  "onUpdate:modelValue": [($event) => sparklineLabelsText.value = $event, updateSparklineLabels],
                                                  label: "Enter comma-separated labels",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  "auto-grow": "",
                                                  rows: "2",
                                                  "row-height": "20",
                                                  class: "mb-2",
                                                  hint: "Example: Jan,Fév,Mar,Avr,Mai,Juin",
                                                  "persistent-hint": ""
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                              ])) : createCommentVNode("", true)
                                            ], 64)) : createCommentVNode("", true),
                                            createVNode(VDivider, { class: "my-4" }),
                                            createVNode(VSwitch, {
                                              modelValue: cardProperties.value.showTimeline,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.showTimeline = $event,
                                              color: "primary",
                                              label: "Show timeline",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            cardProperties.value.showTimeline ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Timeline items"),
                                                createVNode(VSelect, {
                                                  modelValue: timelineItemsCount.value,
                                                  "onUpdate:modelValue": ($event) => timelineItemsCount.value = $event,
                                                  items: [1, 2, 3, 4, 5],
                                                  label: "Number of items",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Timeline content"),
                                                createVNode(VExpansionPanels, { variant: "accordion" }, {
                                                  default: withCtx(() => [
                                                    (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value.slice(0, timelineItemsCount.value), (item, index) => {
                                                      return openBlock(), createBlock(VExpansionPanel, { key: index }, {
                                                        default: withCtx(() => [
                                                          createVNode(VExpansionPanelTitle, null, {
                                                            default: withCtx(() => [
                                                              createTextVNode(" Item " + toDisplayString(index + 1) + ": " + toDisplayString(item.title), 1)
                                                            ]),
                                                            _: 2
                                                          }, 1024),
                                                          createVNode(VExpansionPanelText, null, {
                                                            default: withCtx(() => [
                                                              createVNode(VTextField, {
                                                                modelValue: timelineItems.value[index].title,
                                                                "onUpdate:modelValue": ($event) => timelineItems.value[index].title = $event,
                                                                label: "Title",
                                                                variant: "outlined",
                                                                density: "comfortable",
                                                                class: "mb-2"
                                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                              createVNode(VTextField, {
                                                                modelValue: timelineItems.value[index].message,
                                                                "onUpdate:modelValue": ($event) => timelineItems.value[index].message = $event,
                                                                label: "Message",
                                                                variant: "outlined",
                                                                density: "comfortable",
                                                                class: "mb-2"
                                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                              createVNode("div", { class: "mb-2" }, [
                                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Point color"),
                                                                createVNode("div", { class: "color-selector-container" }, [
                                                                  createVNode(VBtnToggle, {
                                                                    modelValue: timelineItems.value[index].color,
                                                                    "onUpdate:modelValue": ($event) => timelineItems.value[index].color = $event,
                                                                    mandatory: "",
                                                                    density: "comfortable"
                                                                  }, {
                                                                    default: withCtx(() => [
                                                                      (openBlock(), createBlock(Fragment, null, renderList(["primary", "secondary", "success", "info", "warning", "error"], (color) => {
                                                                        return createVNode(VBtn, {
                                                                          key: color,
                                                                          value: color,
                                                                          color,
                                                                          size: "small",
                                                                          variant: "tonal",
                                                                          width: "40",
                                                                          height: "40",
                                                                          class: "ma-1"
                                                                        }, null, 8, ["value", "color"]);
                                                                      }), 64))
                                                                    ]),
                                                                    _: 2
                                                                  }, 1032, ["modelValue", "onUpdate:modelValue"])
                                                                ])
                                                              ])
                                                            ]),
                                                            _: 2
                                                          }, 1024)
                                                        ]),
                                                        _: 2
                                                      }, 1024);
                                                    }), 128))
                                                  ]),
                                                  _: 1
                                                })
                                              ])
                                            ], 64)) : createCommentVNode("", true)
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "templates" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                              createVNode("div", { class: "d-flex align-center" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-file-document-outline")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Card Templates")
                                              ]),
                                              createVNode(VTooltip, { location: "bottom" }, {
                                                activator: withCtx(({ props: props2 }) => [
                                                  createVNode(VBtn, mergeProps({
                                                    icon: "mdi-help-circle-outline",
                                                    variant: "text",
                                                    size: "small"
                                                  }, props2), null, 16)
                                                ]),
                                                default: withCtx(() => [
                                                  createVNode("span", null, "Apply pre-defined templates or save your own")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common cards."),
                                            createVNode(VCard, { class: "mb-4" }, {
                                              default: withCtx(() => [
                                                createVNode(VList, null, {
                                                  default: withCtx(() => [
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("timeline"),
                                                      "prepend-icon": "mdi-timeline",
                                                      title: "Timeline Card",
                                                      subtitle: "Activity timeline display"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("weather"),
                                                      "prepend-icon": "mdi-weather-partly-cloudy",
                                                      title: "Weather Card",
                                                      subtitle: "Weather forecast display"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("statistics"),
                                                      "prepend-icon": "mdi-currency-usd",
                                                      title: "Statistics Card",
                                                      subtitle: "Financial or metrics display"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("file"),
                                                      "prepend-icon": "mdi-file-document-outline",
                                                      title: "File Card",
                                                      subtitle: "Document or file presentation"
                                                    }, null, 8, ["onClick"])
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VAlert, {
                                              type: "info",
                                              variant: "tonal",
                                              class: "mb-4"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(" Applying a template will replace your current card settings. ")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VDivider, { class: "my-4" }),
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-content-save")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Save Current Card")
                                            ]),
                                            createVNode(VTextField, {
                                              modelValue: customTemplateName.value,
                                              "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                              label: "Template Name",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "prepend-inner-icon": "mdi-tag",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VBtn, {
                                              color: "primary",
                                              variant: "tonal",
                                              onClick: saveCurrentTemplate
                                            }, {
                                              default: withCtx(() => [
                                                createVNode(VIcon, { start: "" }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-content-save")
                                                  ]),
                                                  _: 1
                                                }),
                                                createTextVNode(" Save Current Card ")
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        _: 1
                                      })
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VWindow, {
                                  modelValue: propertiesTab.value,
                                  "onUpdate:modelValue": ($event) => propertiesTab.value = $event,
                                  class: "fill-height"
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VWindowItem, { value: "content" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode(VTextField, {
                                            modelValue: cardProperties.value.title,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.title = $event,
                                            label: "Title",
                                            variant: "outlined",
                                            density: "comfortable",
                                            clearable: "",
                                            "prepend-inner-icon": "mdi-format-title",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VTextField, {
                                            modelValue: cardProperties.value.subtitle,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.subtitle = $event,
                                            label: "Subtitle",
                                            variant: "outlined",
                                            density: "comfortable",
                                            clearable: "",
                                            "prepend-inner-icon": "mdi-format-text",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VTextarea, {
                                            modelValue: cardProperties.value.text,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.text = $event,
                                            label: "Text",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "auto-grow": "",
                                            rows: "3",
                                            "row-height": "20",
                                            clearable: "",
                                            "prepend-inner-icon": "mdi-text",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VTextField, {
                                            modelValue: cardProperties.value.image,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.image = $event,
                                            label: "Image URL",
                                            variant: "outlined",
                                            density: "comfortable",
                                            clearable: "",
                                            "prepend-inner-icon": "mdi-image",
                                            class: "mb-1"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode("div", { class: "d-flex flex-wrap mb-4" }, [
                                            createVNode(VChipGroup, {
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "none",
                                                  onClick: removeImage
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("None")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "mountains",
                                                  onClick: ($event) => setImage("mountains")
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Mountains")
                                                  ]),
                                                  _: 1
                                                }, 8, ["onClick"]),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "beach",
                                                  onClick: ($event) => setImage("beach")
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Beach")
                                                  ]),
                                                  _: 1
                                                }, 8, ["onClick"]),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "forest",
                                                  onClick: ($event) => setImage("forest")
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Forest")
                                                  ]),
                                                  _: 1
                                                }, 8, ["onClick"])
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          createVNode(VSelect, {
                                            modelValue: cardProperties.value.icon,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.icon = $event,
                                            items: unref(icons),
                                            label: "Icon",
                                            variant: "outlined",
                                            density: "comfortable",
                                            clearable: "",
                                            "prepend-inner-icon": "mdi-pencil",
                                            class: "mb-4"
                                          }, {
                                            item: withCtx(({ item, props: props2 }) => [
                                              createVNode(VListItem, props2, {
                                                prepend: withCtx(() => [
                                                  createVNode(VIcon, {
                                                    icon: item.raw
                                                  }, null, 8, ["icon"])
                                                ]),
                                                _: 2
                                              }, 1040)
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                          cardProperties.value.icon ? (openBlock(), createBlock("div", {
                                            key: 0,
                                            class: "mb-4"
                                          }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Icon color"),
                                            createVNode("div", { class: "color-selector-container" }, [
                                              createVNode(VBtnToggle, {
                                                modelValue: iconColorIndex.value,
                                                "onUpdate:modelValue": ($event) => iconColorIndex.value = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                "selected-class": "border-primary"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: index,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])
                                          ])) : createCommentVNode("", true)
                                        ])
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "style" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Elevation"),
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-card-outline")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: cardProperties.value.elevation,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.elevation = $event,
                                                min: "0",
                                                max: "24",
                                                step: "1",
                                                "thumb-label": "",
                                                class: "mx-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-layers-triple")
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Variant"),
                                            createVNode(VChipGroup, {
                                              modelValue: cardVariantIndex.value,
                                              "onUpdate:modelValue": ($event) => cardVariantIndex.value = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(cardVariants, (variant, index) => {
                                                  return createVNode(VChip, {
                                                    key: variant,
                                                    size: "small",
                                                    value: index
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(toDisplayString(variant), 1)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Color"),
                                            createVNode("div", { class: "color-selector-container" }, [
                                              createVNode(VBtnToggle, {
                                                modelValue: cardColorIndex.value,
                                                "onUpdate:modelValue": ($event) => cardColorIndex.value = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                "selected-class": "border-primary"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: index,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: cardProperties.value.loading,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.loading = $event,
                                            color: "primary",
                                            label: "Loading",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: cardProperties.value.disabled,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.disabled = $event,
                                            color: "primary",
                                            label: "Disabled",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: cardProperties.value.hoverEffect,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.hoverEffect = $event,
                                            color: "primary",
                                            label: "Hover effect",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Padding"),
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-arrow-collapse")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: cardProperties.value.padding,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.padding = $event,
                                                min: "0",
                                                max: "16",
                                                step: "4",
                                                "thumb-label": "",
                                                class: "mx-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-arrow-expand")
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Border radius"),
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-square-outline")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: roundedIndex.value,
                                                "onUpdate:modelValue": ($event) => roundedIndex.value = $event,
                                                min: 0,
                                                max: roundedLabels.length - 1,
                                                step: "1",
                                                "thumb-label": "",
                                                "thumb-label-text": roundedLabels[roundedIndex.value],
                                                class: "mx-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue", "max", "thumb-label-text"]),
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-rectangle-outline")
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ])
                                        ])
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "actions" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode(VSwitch, {
                                            modelValue: cardProperties.value.showButtons,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.showButtons = $event,
                                            color: "primary",
                                            label: "Show buttons",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          cardProperties.value.showButtons ? (openBlock(), createBlock(Fragment, { key: 0 }, [
                                            createVNode(VTextField, {
                                              modelValue: cardProperties.value.buttonText,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.buttonText = $event,
                                              label: "Button text",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "prepend-inner-icon": "mdi-button-cursor",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Button style"),
                                              createVNode(VChipGroup, {
                                                modelValue: buttonVariantIndex.value,
                                                "onUpdate:modelValue": ($event) => buttonVariantIndex.value = $event,
                                                mandatory: "",
                                                "selected-class": "bg-primary text-white"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(buttonVariants, (variant, index) => {
                                                    return createVNode(VChip, {
                                                      key: variant,
                                                      size: "small",
                                                      value: index
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(toDisplayString(variant), 1)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Button color"),
                                              createVNode("div", { class: "d-flex overflow-x-auto" }, [
                                                createVNode(VBtnToggle, {
                                                  modelValue: buttonColorIndex.value,
                                                  "onUpdate:modelValue": ($event) => buttonColorIndex.value = $event,
                                                  mandatory: "",
                                                  density: "comfortable",
                                                  class: "d-flex"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                      return createVNode(VBtn, {
                                                        key: color.value,
                                                        value: index,
                                                        color: color.value !== "default" ? color.value : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: "ma-1"
                                                      }, {
                                                        default: withCtx(() => [
                                                          color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Button width"),
                                              createVNode("div", { class: "d-flex align-center" }, [
                                                createVNode(VChip, { size: "x-small" }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Auto")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VSlider, {
                                                  modelValue: cardProperties.value.buttonWidth,
                                                  "onUpdate:modelValue": ($event) => cardProperties.value.buttonWidth = $event,
                                                  min: "0",
                                                  max: "100",
                                                  step: "25",
                                                  "thumb-label": "",
                                                  "thumb-label-text": cardProperties.value.buttonWidth + "%",
                                                  class: "mx-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue", "thumb-label-text"]),
                                                createVNode(VChip, { size: "x-small" }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("100%")
                                                  ]),
                                                  _: 1
                                                })
                                              ])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Button position"),
                                              createVNode("div", { class: "d-flex justify-space-between" }, [
                                                createVNode(VBtnToggle, {
                                                  modelValue: cardProperties.value.buttonPosition,
                                                  "onUpdate:modelValue": ($event) => cardProperties.value.buttonPosition = $event,
                                                  mandatory: "",
                                                  density: "comfortable"
                                                }, {
                                                  default: withCtx(() => [
                                                    createVNode(VBtn, {
                                                      value: "start",
                                                      icon: "mdi-format-align-left"
                                                    }),
                                                    createVNode(VBtn, {
                                                      value: "center",
                                                      icon: "mdi-format-align-center"
                                                    }),
                                                    createVNode(VBtn, {
                                                      value: "end",
                                                      icon: "mdi-format-align-right"
                                                    }),
                                                    createVNode(VBtn, {
                                                      value: "space-between",
                                                      icon: "mdi-format-align-justify"
                                                    })
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ])
                                            ]),
                                            createVNode(VAutocomplete, {
                                              modelValue: cardProperties.value.buttonIcon,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.buttonIcon = $event,
                                              items: unref(icons),
                                              label: "Icon",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-2 mt-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                            createVNode(VTextField, {
                                              modelValue: cardProperties.value.buttonLink,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.buttonLink = $event,
                                              label: "Link",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ], 64)) : createCommentVNode("", true),
                                          createVNode(VSwitch, {
                                            modelValue: cardProperties.value.showProgress,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.showProgress = $event,
                                            color: "primary",
                                            label: "Show progress circular",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          cardProperties.value.showProgress ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Progress value"),
                                              createVNode("div", { class: "d-flex align-center" }, [
                                                createVNode(VIcon, {
                                                  size: "small",
                                                  color: "primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-percent")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VSlider, {
                                                  modelValue: cardProperties.value.progressValue,
                                                  "onUpdate:modelValue": ($event) => cardProperties.value.progressValue = $event,
                                                  min: "0",
                                                  max: "100",
                                                  step: "5",
                                                  "thumb-label": "",
                                                  "thumb-label-text": cardProperties.value.progressValue + "%",
                                                  class: "mx-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue", "thumb-label-text"])
                                              ]),
                                              createVNode("div", { class: "d-flex align-center mt-2" }, [
                                                createVNode(VIcon, {
                                                  size: "small",
                                                  color: "primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-circle-slice-8")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VSlider, {
                                                  modelValue: cardProperties.value.progressWidth,
                                                  "onUpdate:modelValue": ($event) => cardProperties.value.progressWidth = $event,
                                                  min: "1",
                                                  max: "10",
                                                  step: "1",
                                                  "thumb-label": "",
                                                  "thumb-label-text": cardProperties.value.progressWidth,
                                                  class: "mx-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue", "thumb-label-text"])
                                              ])
                                            ]),
                                            createVNode(VSwitch, {
                                              modelValue: cardProperties.value.indeterminate,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.indeterminate = $event,
                                              color: "primary",
                                              "hide-details": "",
                                              class: "mb-2",
                                              label: "Indeterminate"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Progress color"),
                                              createVNode("div", { class: "d-flex flex-wrap gap-2" }, [
                                                createVNode(VBtnToggle, {
                                                  modelValue: progressColorIndex.value,
                                                  "onUpdate:modelValue": ($event) => progressColorIndex.value = $event,
                                                  mandatory: "",
                                                  density: "comfortable",
                                                  "selected-class": "border-primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                      return createVNode(VBtn, {
                                                        key: color.value,
                                                        value: index,
                                                        color: color.value !== "default" ? color.value : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: "ma-1"
                                                      }, {
                                                        default: withCtx(() => [
                                                          color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Progress size"),
                                              createVNode(VChipGroup, {
                                                modelValue: progressSizeIndex.value,
                                                "onUpdate:modelValue": ($event) => progressSizeIndex.value = $event,
                                                mandatory: "",
                                                "selected-class": "bg-primary text-white"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(progressSizes, (size, index) => {
                                                    return createVNode(VChip, {
                                                      key: size,
                                                      size: "small",
                                                      value: index
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(toDisplayString(size), 1)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Progress position"),
                                              createVNode(VSelect, {
                                                modelValue: cardProperties.value.progressPosition,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.progressPosition = $event,
                                                items: progressPositions,
                                                label: "Position",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode(VSwitch, {
                                              modelValue: cardProperties.value.showProgressLabel,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.showProgressLabel = $event,
                                              color: "primary",
                                              "hide-details": "",
                                              class: "mb-2",
                                              label: "Show value"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            cardProperties.value.showProgressLabel ? (openBlock(), createBlock("div", {
                                              key: 0,
                                              class: "mb-4"
                                            }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Label style"),
                                              createVNode(VChipGroup, {
                                                modelValue: cardProperties.value.progressLabelStyle,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.progressLabelStyle = $event,
                                                mandatory: "",
                                                "selected-class": "bg-primary text-white"
                                              }, {
                                                default: withCtx(() => [
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "value"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Value (%)")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "custom"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Custom")
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"]),
                                              cardProperties.value.progressLabelStyle === "custom" ? (openBlock(), createBlock(VTextField, {
                                                key: 0,
                                                modelValue: cardProperties.value.progressLabelText,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.progressLabelText = $event,
                                                label: "Custom label",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mt-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                            ])) : createCommentVNode("", true),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode(VSwitch, {
                                                modelValue: cardProperties.value.showProgressBg,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.showProgressBg = $event,
                                                color: "primary",
                                                "hide-details": "",
                                                class: "mb-2",
                                                label: "Background color"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              cardProperties.value.showProgressBg ? (openBlock(), createBlock("div", {
                                                key: 0,
                                                class: "d-flex flex-wrap gap-2 mt-2"
                                              }, [
                                                createVNode(VBtnToggle, {
                                                  modelValue: progressBgColorIndex.value,
                                                  "onUpdate:modelValue": ($event) => progressBgColorIndex.value = $event,
                                                  mandatory: "",
                                                  density: "comfortable",
                                                  "selected-class": "border-primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                      return createVNode(VBtn, {
                                                        key: color.value,
                                                        value: index,
                                                        color: color.value !== "default" ? color.value : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: "ma-1"
                                                      }, {
                                                        default: withCtx(() => [
                                                          color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ])) : createCommentVNode("", true)
                                            ])
                                          ], 64)) : createCommentVNode("", true)
                                        ])
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "data" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-chart-line")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Data Visualization")
                                            ]),
                                            createVNode(VTooltip, { location: "bottom" }, {
                                              activator: withCtx(({ props: props2 }) => [
                                                createVNode(VBtn, mergeProps({
                                                  icon: "mdi-help-circle-outline",
                                                  variant: "text",
                                                  size: "small"
                                                }, props2), null, 16)
                                              ]),
                                              default: withCtx(() => [
                                                createVNode("span", null, "Add data visualizations to your card")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: cardProperties.value.showSparkline,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.showSparkline = $event,
                                            color: "primary",
                                            label: "Show sparkline",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          cardProperties.value.showSparkline ? (openBlock(), createBlock(Fragment, { key: 0 }, [
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Sparkline color"),
                                              createVNode("div", { class: "color-selector-container" }, [
                                                createVNode(VBtnToggle, {
                                                  modelValue: sparklineColorIndex.value,
                                                  "onUpdate:modelValue": ($event) => sparklineColorIndex.value = $event,
                                                  mandatory: "",
                                                  density: "comfortable",
                                                  "selected-class": "border-primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                      return createVNode(VBtn, {
                                                        key: color.value,
                                                        value: index,
                                                        color: color.value !== "default" ? color.value : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: "ma-1"
                                                      }, {
                                                        default: withCtx(() => [
                                                          color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Sparkline data"),
                                              createVNode(VTextarea, {
                                                modelValue: sparklineDataText.value,
                                                "onUpdate:modelValue": [($event) => sparklineDataText.value = $event, updateSparklineData],
                                                label: "Enter comma-separated values",
                                                variant: "outlined",
                                                density: "comfortable",
                                                "auto-grow": "",
                                                rows: "2",
                                                "row-height": "20",
                                                class: "mb-2",
                                                hint: "Example: 0,2,5,9,5,10,3,5,0,0,1,8,2,9,0",
                                                "persistent-hint": ""
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Line width"),
                                              createVNode("div", { class: "d-flex align-center" }, [
                                                createVNode(VIcon, {
                                                  size: "small",
                                                  color: "primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-minus")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VSlider, {
                                                  modelValue: cardProperties.value.sparklineLineWidth,
                                                  "onUpdate:modelValue": ($event) => cardProperties.value.sparklineLineWidth = $event,
                                                  min: "1",
                                                  max: "5",
                                                  step: "1",
                                                  "thumb-label": "",
                                                  class: "mx-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VIcon, {
                                                  size: "small",
                                                  color: "primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-minus-thick")
                                                  ]),
                                                  _: 1
                                                })
                                              ])
                                            ]),
                                            createVNode(VSwitch, {
                                              modelValue: cardProperties.value.sparklineGradient,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.sparklineGradient = $event,
                                              color: "primary",
                                              label: "Show gradient",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: cardProperties.value.sparklineShowLabels,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.sparklineShowLabels = $event,
                                              color: "primary",
                                              label: "Show labels",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            cardProperties.value.sparklineShowLabels ? (openBlock(), createBlock("div", {
                                              key: 0,
                                              class: "mb-4"
                                            }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Labels"),
                                              createVNode(VTextarea, {
                                                modelValue: sparklineLabelsText.value,
                                                "onUpdate:modelValue": [($event) => sparklineLabelsText.value = $event, updateSparklineLabels],
                                                label: "Enter comma-separated labels",
                                                variant: "outlined",
                                                density: "comfortable",
                                                "auto-grow": "",
                                                rows: "2",
                                                "row-height": "20",
                                                class: "mb-2",
                                                hint: "Example: Jan,Fév,Mar,Avr,Mai,Juin",
                                                "persistent-hint": ""
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])) : createCommentVNode("", true)
                                          ], 64)) : createCommentVNode("", true),
                                          createVNode(VDivider, { class: "my-4" }),
                                          createVNode(VSwitch, {
                                            modelValue: cardProperties.value.showTimeline,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.showTimeline = $event,
                                            color: "primary",
                                            label: "Show timeline",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          cardProperties.value.showTimeline ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Timeline items"),
                                              createVNode(VSelect, {
                                                modelValue: timelineItemsCount.value,
                                                "onUpdate:modelValue": ($event) => timelineItemsCount.value = $event,
                                                items: [1, 2, 3, 4, 5],
                                                label: "Number of items",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Timeline content"),
                                              createVNode(VExpansionPanels, { variant: "accordion" }, {
                                                default: withCtx(() => [
                                                  (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value.slice(0, timelineItemsCount.value), (item, index) => {
                                                    return openBlock(), createBlock(VExpansionPanel, { key: index }, {
                                                      default: withCtx(() => [
                                                        createVNode(VExpansionPanelTitle, null, {
                                                          default: withCtx(() => [
                                                            createTextVNode(" Item " + toDisplayString(index + 1) + ": " + toDisplayString(item.title), 1)
                                                          ]),
                                                          _: 2
                                                        }, 1024),
                                                        createVNode(VExpansionPanelText, null, {
                                                          default: withCtx(() => [
                                                            createVNode(VTextField, {
                                                              modelValue: timelineItems.value[index].title,
                                                              "onUpdate:modelValue": ($event) => timelineItems.value[index].title = $event,
                                                              label: "Title",
                                                              variant: "outlined",
                                                              density: "comfortable",
                                                              class: "mb-2"
                                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                            createVNode(VTextField, {
                                                              modelValue: timelineItems.value[index].message,
                                                              "onUpdate:modelValue": ($event) => timelineItems.value[index].message = $event,
                                                              label: "Message",
                                                              variant: "outlined",
                                                              density: "comfortable",
                                                              class: "mb-2"
                                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                            createVNode("div", { class: "mb-2" }, [
                                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Point color"),
                                                              createVNode("div", { class: "color-selector-container" }, [
                                                                createVNode(VBtnToggle, {
                                                                  modelValue: timelineItems.value[index].color,
                                                                  "onUpdate:modelValue": ($event) => timelineItems.value[index].color = $event,
                                                                  mandatory: "",
                                                                  density: "comfortable"
                                                                }, {
                                                                  default: withCtx(() => [
                                                                    (openBlock(), createBlock(Fragment, null, renderList(["primary", "secondary", "success", "info", "warning", "error"], (color) => {
                                                                      return createVNode(VBtn, {
                                                                        key: color,
                                                                        value: color,
                                                                        color,
                                                                        size: "small",
                                                                        variant: "tonal",
                                                                        width: "40",
                                                                        height: "40",
                                                                        class: "ma-1"
                                                                      }, null, 8, ["value", "color"]);
                                                                    }), 64))
                                                                  ]),
                                                                  _: 2
                                                                }, 1032, ["modelValue", "onUpdate:modelValue"])
                                                              ])
                                                            ])
                                                          ]),
                                                          _: 2
                                                        }, 1024)
                                                      ]),
                                                      _: 2
                                                    }, 1024);
                                                  }), 128))
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ], 64)) : createCommentVNode("", true)
                                        ])
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "templates" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-file-document-outline")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Card Templates")
                                            ]),
                                            createVNode(VTooltip, { location: "bottom" }, {
                                              activator: withCtx(({ props: props2 }) => [
                                                createVNode(VBtn, mergeProps({
                                                  icon: "mdi-help-circle-outline",
                                                  variant: "text",
                                                  size: "small"
                                                }, props2), null, 16)
                                              ]),
                                              default: withCtx(() => [
                                                createVNode("span", null, "Apply pre-defined templates or save your own")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common cards."),
                                          createVNode(VCard, { class: "mb-4" }, {
                                            default: withCtx(() => [
                                              createVNode(VList, null, {
                                                default: withCtx(() => [
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("timeline"),
                                                    "prepend-icon": "mdi-timeline",
                                                    title: "Timeline Card",
                                                    subtitle: "Activity timeline display"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("weather"),
                                                    "prepend-icon": "mdi-weather-partly-cloudy",
                                                    title: "Weather Card",
                                                    subtitle: "Weather forecast display"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("statistics"),
                                                    "prepend-icon": "mdi-currency-usd",
                                                    title: "Statistics Card",
                                                    subtitle: "Financial or metrics display"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("file"),
                                                    "prepend-icon": "mdi-file-document-outline",
                                                    title: "File Card",
                                                    subtitle: "Document or file presentation"
                                                  }, null, 8, ["onClick"])
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VAlert, {
                                            type: "info",
                                            variant: "tonal",
                                            class: "mb-4"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(" Applying a template will replace your current card settings. ")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VDivider, { class: "my-4" }),
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-content-save")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Save Current Card")
                                          ]),
                                          createVNode(VTextField, {
                                            modelValue: customTemplateName.value,
                                            "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                            label: "Template Name",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "prepend-inner-icon": "mdi-tag",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VBtn, {
                                            color: "primary",
                                            variant: "tonal",
                                            onClick: saveCurrentTemplate
                                          }, {
                                            default: withCtx(() => [
                                              createVNode(VIcon, { start: "" }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-content-save")
                                                ]),
                                                _: 1
                                              }),
                                              createTextVNode(" Save Current Card ")
                                            ]),
                                            _: 1
                                          })
                                        ])
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }, 8, ["modelValue", "onUpdate:modelValue"])
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                      } else {
                        return [
                          createVNode("div", { class: "px-4 py-2 d-flex align-center" }, [
                            createVNode(VChip, {
                              color: "success",
                              "prepend-icon": "mdi-vuejs",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vue.js")
                              ]),
                              _: 1
                            }),
                            createVNode(VChip, {
                              color: "info",
                              "prepend-icon": "mdi-vuetify",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vuetify")
                              ]),
                              _: 1
                            }),
                            createVNode(premiumFeatures, {
                              "premium-link": "/subscribe",
                              title: "Studio components",
                              icon: "mdi-palette",
                              type: "chip",
                              "feature-key": "studioComponents"
                            })
                          ]),
                          createVNode(VTabs, {
                            modelValue: propertiesTab.value,
                            "onUpdate:modelValue": ($event) => propertiesTab.value = $event,
                            color: "primary",
                            "align-tabs": "center",
                            class: "px-4"
                          }, {
                            default: withCtx(() => [
                              createVNode(VTab, { value: "content" }, {
                                default: withCtx(() => [
                                  createTextVNode("Content")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "style" }, {
                                default: withCtx(() => [
                                  createTextVNode("Style")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "actions" }, {
                                default: withCtx(() => [
                                  createTextVNode("Actions")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "data" }, {
                                default: withCtx(() => [
                                  createTextVNode("Data")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "templates" }, {
                                default: withCtx(() => [
                                  createTextVNode("Templates")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue"]),
                          createVNode(VDivider),
                          createVNode(VCardText, {
                            class: "pa-0 fill-height",
                            style: { "overflow-y": "auto" }
                          }, {
                            default: withCtx(() => [
                              createVNode(VWindow, {
                                modelValue: propertiesTab.value,
                                "onUpdate:modelValue": ($event) => propertiesTab.value = $event,
                                class: "fill-height"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VWindowItem, { value: "content" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode(VTextField, {
                                          modelValue: cardProperties.value.title,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.title = $event,
                                          label: "Title",
                                          variant: "outlined",
                                          density: "comfortable",
                                          clearable: "",
                                          "prepend-inner-icon": "mdi-format-title",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VTextField, {
                                          modelValue: cardProperties.value.subtitle,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.subtitle = $event,
                                          label: "Subtitle",
                                          variant: "outlined",
                                          density: "comfortable",
                                          clearable: "",
                                          "prepend-inner-icon": "mdi-format-text",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VTextarea, {
                                          modelValue: cardProperties.value.text,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.text = $event,
                                          label: "Text",
                                          variant: "outlined",
                                          density: "comfortable",
                                          "auto-grow": "",
                                          rows: "3",
                                          "row-height": "20",
                                          clearable: "",
                                          "prepend-inner-icon": "mdi-text",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VTextField, {
                                          modelValue: cardProperties.value.image,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.image = $event,
                                          label: "Image URL",
                                          variant: "outlined",
                                          density: "comfortable",
                                          clearable: "",
                                          "prepend-inner-icon": "mdi-image",
                                          class: "mb-1"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode("div", { class: "d-flex flex-wrap mb-4" }, [
                                          createVNode(VChipGroup, {
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "none",
                                                onClick: removeImage
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("None")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "mountains",
                                                onClick: ($event) => setImage("mountains")
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Mountains")
                                                ]),
                                                _: 1
                                              }, 8, ["onClick"]),
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "beach",
                                                onClick: ($event) => setImage("beach")
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Beach")
                                                ]),
                                                _: 1
                                              }, 8, ["onClick"]),
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "forest",
                                                onClick: ($event) => setImage("forest")
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Forest")
                                                ]),
                                                _: 1
                                              }, 8, ["onClick"])
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode(VSelect, {
                                          modelValue: cardProperties.value.icon,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.icon = $event,
                                          items: unref(icons),
                                          label: "Icon",
                                          variant: "outlined",
                                          density: "comfortable",
                                          clearable: "",
                                          "prepend-inner-icon": "mdi-pencil",
                                          class: "mb-4"
                                        }, {
                                          item: withCtx(({ item, props: props2 }) => [
                                            createVNode(VListItem, props2, {
                                              prepend: withCtx(() => [
                                                createVNode(VIcon, {
                                                  icon: item.raw
                                                }, null, 8, ["icon"])
                                              ]),
                                              _: 2
                                            }, 1040)
                                          ]),
                                          _: 1
                                        }, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                        cardProperties.value.icon ? (openBlock(), createBlock("div", {
                                          key: 0,
                                          class: "mb-4"
                                        }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Icon color"),
                                          createVNode("div", { class: "color-selector-container" }, [
                                            createVNode(VBtnToggle, {
                                              modelValue: iconColorIndex.value,
                                              "onUpdate:modelValue": ($event) => iconColorIndex.value = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              "selected-class": "border-primary"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                  return createVNode(VBtn, {
                                                    key: color.value,
                                                    value: index,
                                                    color: color.value !== "default" ? color.value : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: "ma-1"
                                                  }, {
                                                    default: withCtx(() => [
                                                      color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("mdi-palette-outline")
                                                        ]),
                                                        _: 1
                                                      })) : createCommentVNode("", true)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value", "color"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ])
                                        ])) : createCommentVNode("", true)
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "style" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Elevation"),
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-card-outline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: cardProperties.value.elevation,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.elevation = $event,
                                              min: "0",
                                              max: "24",
                                              step: "1",
                                              "thumb-label": "",
                                              class: "mx-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-layers-triple")
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Variant"),
                                          createVNode(VChipGroup, {
                                            modelValue: cardVariantIndex.value,
                                            "onUpdate:modelValue": ($event) => cardVariantIndex.value = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(cardVariants, (variant, index) => {
                                                return createVNode(VChip, {
                                                  key: variant,
                                                  size: "small",
                                                  value: index
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(toDisplayString(variant), 1)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Color"),
                                          createVNode("div", { class: "color-selector-container" }, [
                                            createVNode(VBtnToggle, {
                                              modelValue: cardColorIndex.value,
                                              "onUpdate:modelValue": ($event) => cardColorIndex.value = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              "selected-class": "border-primary"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                  return createVNode(VBtn, {
                                                    key: color.value,
                                                    value: index,
                                                    color: color.value !== "default" ? color.value : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: "ma-1"
                                                  }, {
                                                    default: withCtx(() => [
                                                      color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("mdi-palette-outline")
                                                        ]),
                                                        _: 1
                                                      })) : createCommentVNode("", true)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value", "color"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ])
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: cardProperties.value.loading,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.loading = $event,
                                          color: "primary",
                                          label: "Loading",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: cardProperties.value.disabled,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.disabled = $event,
                                          color: "primary",
                                          label: "Disabled",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: cardProperties.value.hoverEffect,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.hoverEffect = $event,
                                          color: "primary",
                                          label: "Hover effect",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Padding"),
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-arrow-collapse")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: cardProperties.value.padding,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.padding = $event,
                                              min: "0",
                                              max: "16",
                                              step: "4",
                                              "thumb-label": "",
                                              class: "mx-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-arrow-expand")
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Border radius"),
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-square-outline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: roundedIndex.value,
                                              "onUpdate:modelValue": ($event) => roundedIndex.value = $event,
                                              min: 0,
                                              max: roundedLabels.length - 1,
                                              step: "1",
                                              "thumb-label": "",
                                              "thumb-label-text": roundedLabels[roundedIndex.value],
                                              class: "mx-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue", "max", "thumb-label-text"]),
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-rectangle-outline")
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ])
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "actions" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode(VSwitch, {
                                          modelValue: cardProperties.value.showButtons,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.showButtons = $event,
                                          color: "primary",
                                          label: "Show buttons",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        cardProperties.value.showButtons ? (openBlock(), createBlock(Fragment, { key: 0 }, [
                                          createVNode(VTextField, {
                                            modelValue: cardProperties.value.buttonText,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.buttonText = $event,
                                            label: "Button text",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "prepend-inner-icon": "mdi-button-cursor",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Button style"),
                                            createVNode(VChipGroup, {
                                              modelValue: buttonVariantIndex.value,
                                              "onUpdate:modelValue": ($event) => buttonVariantIndex.value = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(buttonVariants, (variant, index) => {
                                                  return createVNode(VChip, {
                                                    key: variant,
                                                    size: "small",
                                                    value: index
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(toDisplayString(variant), 1)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Button color"),
                                            createVNode("div", { class: "d-flex overflow-x-auto" }, [
                                              createVNode(VBtnToggle, {
                                                modelValue: buttonColorIndex.value,
                                                "onUpdate:modelValue": ($event) => buttonColorIndex.value = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                class: "d-flex"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: index,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Button width"),
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VChip, { size: "x-small" }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Auto")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: cardProperties.value.buttonWidth,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.buttonWidth = $event,
                                                min: "0",
                                                max: "100",
                                                step: "25",
                                                "thumb-label": "",
                                                "thumb-label-text": cardProperties.value.buttonWidth + "%",
                                                class: "mx-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue", "thumb-label-text"]),
                                              createVNode(VChip, { size: "x-small" }, {
                                                default: withCtx(() => [
                                                  createTextVNode("100%")
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Button position"),
                                            createVNode("div", { class: "d-flex justify-space-between" }, [
                                              createVNode(VBtnToggle, {
                                                modelValue: cardProperties.value.buttonPosition,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.buttonPosition = $event,
                                                mandatory: "",
                                                density: "comfortable"
                                              }, {
                                                default: withCtx(() => [
                                                  createVNode(VBtn, {
                                                    value: "start",
                                                    icon: "mdi-format-align-left"
                                                  }),
                                                  createVNode(VBtn, {
                                                    value: "center",
                                                    icon: "mdi-format-align-center"
                                                  }),
                                                  createVNode(VBtn, {
                                                    value: "end",
                                                    icon: "mdi-format-align-right"
                                                  }),
                                                  createVNode(VBtn, {
                                                    value: "space-between",
                                                    icon: "mdi-format-align-justify"
                                                  })
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])
                                          ]),
                                          createVNode(VAutocomplete, {
                                            modelValue: cardProperties.value.buttonIcon,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.buttonIcon = $event,
                                            items: unref(icons),
                                            label: "Icon",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-2 mt-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                          createVNode(VTextField, {
                                            modelValue: cardProperties.value.buttonLink,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.buttonLink = $event,
                                            label: "Link",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ], 64)) : createCommentVNode("", true),
                                        createVNode(VSwitch, {
                                          modelValue: cardProperties.value.showProgress,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.showProgress = $event,
                                          color: "primary",
                                          label: "Show progress circular",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        cardProperties.value.showProgress ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Progress value"),
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-percent")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: cardProperties.value.progressValue,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.progressValue = $event,
                                                min: "0",
                                                max: "100",
                                                step: "5",
                                                "thumb-label": "",
                                                "thumb-label-text": cardProperties.value.progressValue + "%",
                                                class: "mx-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue", "thumb-label-text"])
                                            ]),
                                            createVNode("div", { class: "d-flex align-center mt-2" }, [
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-circle-slice-8")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: cardProperties.value.progressWidth,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.progressWidth = $event,
                                                min: "1",
                                                max: "10",
                                                step: "1",
                                                "thumb-label": "",
                                                "thumb-label-text": cardProperties.value.progressWidth,
                                                class: "mx-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue", "thumb-label-text"])
                                            ])
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: cardProperties.value.indeterminate,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.indeterminate = $event,
                                            color: "primary",
                                            "hide-details": "",
                                            class: "mb-2",
                                            label: "Indeterminate"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Progress color"),
                                            createVNode("div", { class: "d-flex flex-wrap gap-2" }, [
                                              createVNode(VBtnToggle, {
                                                modelValue: progressColorIndex.value,
                                                "onUpdate:modelValue": ($event) => progressColorIndex.value = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                "selected-class": "border-primary"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: index,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Progress size"),
                                            createVNode(VChipGroup, {
                                              modelValue: progressSizeIndex.value,
                                              "onUpdate:modelValue": ($event) => progressSizeIndex.value = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(progressSizes, (size, index) => {
                                                  return createVNode(VChip, {
                                                    key: size,
                                                    size: "small",
                                                    value: index
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(toDisplayString(size), 1)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Progress position"),
                                            createVNode(VSelect, {
                                              modelValue: cardProperties.value.progressPosition,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.progressPosition = $event,
                                              items: progressPositions,
                                              label: "Position",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: cardProperties.value.showProgressLabel,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.showProgressLabel = $event,
                                            color: "primary",
                                            "hide-details": "",
                                            class: "mb-2",
                                            label: "Show value"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          cardProperties.value.showProgressLabel ? (openBlock(), createBlock("div", {
                                            key: 0,
                                            class: "mb-4"
                                          }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Label style"),
                                            createVNode(VChipGroup, {
                                              modelValue: cardProperties.value.progressLabelStyle,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.progressLabelStyle = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "value"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Value (%)")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "custom"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Custom")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"]),
                                            cardProperties.value.progressLabelStyle === "custom" ? (openBlock(), createBlock(VTextField, {
                                              key: 0,
                                              modelValue: cardProperties.value.progressLabelText,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.progressLabelText = $event,
                                              label: "Custom label",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mt-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                          ])) : createCommentVNode("", true),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode(VSwitch, {
                                              modelValue: cardProperties.value.showProgressBg,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.showProgressBg = $event,
                                              color: "primary",
                                              "hide-details": "",
                                              class: "mb-2",
                                              label: "Background color"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            cardProperties.value.showProgressBg ? (openBlock(), createBlock("div", {
                                              key: 0,
                                              class: "d-flex flex-wrap gap-2 mt-2"
                                            }, [
                                              createVNode(VBtnToggle, {
                                                modelValue: progressBgColorIndex.value,
                                                "onUpdate:modelValue": ($event) => progressBgColorIndex.value = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                "selected-class": "border-primary"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: index,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])) : createCommentVNode("", true)
                                          ])
                                        ], 64)) : createCommentVNode("", true)
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "data" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-chart-line")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Data Visualization")
                                          ]),
                                          createVNode(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props: props2 }) => [
                                              createVNode(VBtn, mergeProps({
                                                icon: "mdi-help-circle-outline",
                                                variant: "text",
                                                size: "small"
                                              }, props2), null, 16)
                                            ]),
                                            default: withCtx(() => [
                                              createVNode("span", null, "Add data visualizations to your card")
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: cardProperties.value.showSparkline,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.showSparkline = $event,
                                          color: "primary",
                                          label: "Show sparkline",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        cardProperties.value.showSparkline ? (openBlock(), createBlock(Fragment, { key: 0 }, [
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Sparkline color"),
                                            createVNode("div", { class: "color-selector-container" }, [
                                              createVNode(VBtnToggle, {
                                                modelValue: sparklineColorIndex.value,
                                                "onUpdate:modelValue": ($event) => sparklineColorIndex.value = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                "selected-class": "border-primary"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: index,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Sparkline data"),
                                            createVNode(VTextarea, {
                                              modelValue: sparklineDataText.value,
                                              "onUpdate:modelValue": [($event) => sparklineDataText.value = $event, updateSparklineData],
                                              label: "Enter comma-separated values",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "auto-grow": "",
                                              rows: "2",
                                              "row-height": "20",
                                              class: "mb-2",
                                              hint: "Example: 0,2,5,9,5,10,3,5,0,0,1,8,2,9,0",
                                              "persistent-hint": ""
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Line width"),
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-minus")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: cardProperties.value.sparklineLineWidth,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.sparklineLineWidth = $event,
                                                min: "1",
                                                max: "5",
                                                step: "1",
                                                "thumb-label": "",
                                                class: "mx-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-minus-thick")
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: cardProperties.value.sparklineGradient,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.sparklineGradient = $event,
                                            color: "primary",
                                            label: "Show gradient",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: cardProperties.value.sparklineShowLabels,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.sparklineShowLabels = $event,
                                            color: "primary",
                                            label: "Show labels",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          cardProperties.value.sparklineShowLabels ? (openBlock(), createBlock("div", {
                                            key: 0,
                                            class: "mb-4"
                                          }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Labels"),
                                            createVNode(VTextarea, {
                                              modelValue: sparklineLabelsText.value,
                                              "onUpdate:modelValue": [($event) => sparklineLabelsText.value = $event, updateSparklineLabels],
                                              label: "Enter comma-separated labels",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "auto-grow": "",
                                              rows: "2",
                                              "row-height": "20",
                                              class: "mb-2",
                                              hint: "Example: Jan,Fév,Mar,Avr,Mai,Juin",
                                              "persistent-hint": ""
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ])) : createCommentVNode("", true)
                                        ], 64)) : createCommentVNode("", true),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode(VSwitch, {
                                          modelValue: cardProperties.value.showTimeline,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.showTimeline = $event,
                                          color: "primary",
                                          label: "Show timeline",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        cardProperties.value.showTimeline ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Timeline items"),
                                            createVNode(VSelect, {
                                              modelValue: timelineItemsCount.value,
                                              "onUpdate:modelValue": ($event) => timelineItemsCount.value = $event,
                                              items: [1, 2, 3, 4, 5],
                                              label: "Number of items",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Timeline content"),
                                            createVNode(VExpansionPanels, { variant: "accordion" }, {
                                              default: withCtx(() => [
                                                (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value.slice(0, timelineItemsCount.value), (item, index) => {
                                                  return openBlock(), createBlock(VExpansionPanel, { key: index }, {
                                                    default: withCtx(() => [
                                                      createVNode(VExpansionPanelTitle, null, {
                                                        default: withCtx(() => [
                                                          createTextVNode(" Item " + toDisplayString(index + 1) + ": " + toDisplayString(item.title), 1)
                                                        ]),
                                                        _: 2
                                                      }, 1024),
                                                      createVNode(VExpansionPanelText, null, {
                                                        default: withCtx(() => [
                                                          createVNode(VTextField, {
                                                            modelValue: timelineItems.value[index].title,
                                                            "onUpdate:modelValue": ($event) => timelineItems.value[index].title = $event,
                                                            label: "Title",
                                                            variant: "outlined",
                                                            density: "comfortable",
                                                            class: "mb-2"
                                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                          createVNode(VTextField, {
                                                            modelValue: timelineItems.value[index].message,
                                                            "onUpdate:modelValue": ($event) => timelineItems.value[index].message = $event,
                                                            label: "Message",
                                                            variant: "outlined",
                                                            density: "comfortable",
                                                            class: "mb-2"
                                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                          createVNode("div", { class: "mb-2" }, [
                                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Point color"),
                                                            createVNode("div", { class: "color-selector-container" }, [
                                                              createVNode(VBtnToggle, {
                                                                modelValue: timelineItems.value[index].color,
                                                                "onUpdate:modelValue": ($event) => timelineItems.value[index].color = $event,
                                                                mandatory: "",
                                                                density: "comfortable"
                                                              }, {
                                                                default: withCtx(() => [
                                                                  (openBlock(), createBlock(Fragment, null, renderList(["primary", "secondary", "success", "info", "warning", "error"], (color) => {
                                                                    return createVNode(VBtn, {
                                                                      key: color,
                                                                      value: color,
                                                                      color,
                                                                      size: "small",
                                                                      variant: "tonal",
                                                                      width: "40",
                                                                      height: "40",
                                                                      class: "ma-1"
                                                                    }, null, 8, ["value", "color"]);
                                                                  }), 64))
                                                                ]),
                                                                _: 2
                                                              }, 1032, ["modelValue", "onUpdate:modelValue"])
                                                            ])
                                                          ])
                                                        ]),
                                                        _: 2
                                                      }, 1024)
                                                    ]),
                                                    _: 2
                                                  }, 1024);
                                                }), 128))
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ], 64)) : createCommentVNode("", true)
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "templates" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-file-document-outline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Card Templates")
                                          ]),
                                          createVNode(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props: props2 }) => [
                                              createVNode(VBtn, mergeProps({
                                                icon: "mdi-help-circle-outline",
                                                variant: "text",
                                                size: "small"
                                              }, props2), null, 16)
                                            ]),
                                            default: withCtx(() => [
                                              createVNode("span", null, "Apply pre-defined templates or save your own")
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common cards."),
                                        createVNode(VCard, { class: "mb-4" }, {
                                          default: withCtx(() => [
                                            createVNode(VList, null, {
                                              default: withCtx(() => [
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("timeline"),
                                                  "prepend-icon": "mdi-timeline",
                                                  title: "Timeline Card",
                                                  subtitle: "Activity timeline display"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("weather"),
                                                  "prepend-icon": "mdi-weather-partly-cloudy",
                                                  title: "Weather Card",
                                                  subtitle: "Weather forecast display"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("statistics"),
                                                  "prepend-icon": "mdi-currency-usd",
                                                  title: "Statistics Card",
                                                  subtitle: "Financial or metrics display"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("file"),
                                                  "prepend-icon": "mdi-file-document-outline",
                                                  title: "File Card",
                                                  subtitle: "Document or file presentation"
                                                }, null, 8, ["onClick"])
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VAlert, {
                                          type: "info",
                                          variant: "tonal",
                                          class: "mb-4"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(" Applying a template will replace your current card settings. ")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-content-save")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Save Current Card")
                                        ]),
                                        createVNode(VTextField, {
                                          modelValue: customTemplateName.value,
                                          "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                          label: "Template Name",
                                          variant: "outlined",
                                          density: "comfortable",
                                          "prepend-inner-icon": "mdi-tag",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VBtn, {
                                          color: "primary",
                                          variant: "tonal",
                                          onClick: saveCurrentTemplate
                                        }, {
                                          default: withCtx(() => [
                                            createVNode(VIcon, { start: "" }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-content-save")
                                              ]),
                                              _: 1
                                            }),
                                            createTextVNode(" Save Current Card ")
                                          ]),
                                          _: 1
                                        })
                                      ])
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"])
                            ]),
                            _: 1
                          })
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(`</div><div class="preview-area pa-4 d-flex flex-column" data-v-7998bce9${_scopeId2}><div class="d-flex justify-space-between align-center mb-3" data-v-7998bce9${_scopeId2}><div data-v-7998bce9${_scopeId2}>`);
                  _push3(ssrRenderComponent(VChip, {
                    color: "primary",
                    variant: "flat",
                    size: "small",
                    class: "mr-2"
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(ssrRenderComponent(VIcon, {
                          start: "",
                          size: "small"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(`mdi-eye`);
                            } else {
                              return [
                                createTextVNode("mdi-eye")
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(` Live preview `);
                      } else {
                        return [
                          createVNode(VIcon, {
                            start: "",
                            size: "small"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("mdi-eye")
                            ]),
                            _: 1
                          }),
                          createTextVNode(" Live preview ")
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(`</div></div><div class="preview-canvas flex-grow-1 d-flex align-center justify-center pa-4" data-v-7998bce9${_scopeId2}>`);
                  _push3(ssrRenderComponent(VCard, {
                    elevation: cardProperties.value.elevation,
                    variant: cardVariant.value,
                    color: cardColor.value !== "default" ? cardColor.value : void 0,
                    loading: cardProperties.value.loading,
                    disabled: cardProperties.value.disabled,
                    class: ["mx-auto preview-component", { "hover-effect": cardProperties.value.hoverEffect }],
                    rounded: cardProperties.value.rounded,
                    style: `padding: ${cardProperties.value.padding}px;`
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        if (cardProperties.value.image) {
                          _push4(ssrRenderComponent(VImg, {
                            src: cardProperties.value.image,
                            height: "200",
                            cover: ""
                          }, null, _parent4, _scopeId3));
                        } else {
                          _push4(`<!---->`);
                        }
                        if (cardProperties.value.title) {
                          _push4(ssrRenderComponent(VCardTitle, null, {
                            default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                              if (_push5) {
                                if (cardProperties.value.icon) {
                                  _push5(ssrRenderComponent(VIcon, {
                                    start: "",
                                    color: iconColor.value !== "default" ? iconColor.value : void 0
                                  }, {
                                    default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                      if (_push6) {
                                        _push6(`${ssrInterpolate(cardProperties.value.icon)}`);
                                      } else {
                                        return [
                                          createTextVNode(toDisplayString(cardProperties.value.icon), 1)
                                        ];
                                      }
                                    }),
                                    _: 1
                                  }, _parent5, _scopeId4));
                                } else {
                                  _push5(`<!---->`);
                                }
                                _push5(` ${ssrInterpolate(cardProperties.value.title)}`);
                              } else {
                                return [
                                  cardProperties.value.icon ? (openBlock(), createBlock(VIcon, {
                                    key: 0,
                                    start: "",
                                    color: iconColor.value !== "default" ? iconColor.value : void 0
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString(cardProperties.value.icon), 1)
                                    ]),
                                    _: 1
                                  }, 8, ["color"])) : createCommentVNode("", true),
                                  createTextVNode(" " + toDisplayString(cardProperties.value.title), 1)
                                ];
                              }
                            }),
                            _: 1
                          }, _parent4, _scopeId3));
                        } else {
                          _push4(`<!---->`);
                        }
                        if (cardProperties.value.subtitle) {
                          _push4(ssrRenderComponent(VCardSubtitle, null, {
                            default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                              if (_push5) {
                                _push5(`${ssrInterpolate(cardProperties.value.subtitle)}`);
                              } else {
                                return [
                                  createTextVNode(toDisplayString(cardProperties.value.subtitle), 1)
                                ];
                              }
                            }),
                            _: 1
                          }, _parent4, _scopeId3));
                        } else {
                          _push4(`<!---->`);
                        }
                        if (cardProperties.value.text) {
                          _push4(ssrRenderComponent(VCardText, null, {
                            default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                              if (_push5) {
                                _push5(`${ssrInterpolate(cardProperties.value.text)}`);
                              } else {
                                return [
                                  createTextVNode(toDisplayString(cardProperties.value.text), 1)
                                ];
                              }
                            }),
                            _: 1
                          }, _parent4, _scopeId3));
                        } else {
                          _push4(`<!---->`);
                        }
                        if (cardProperties.value.showSparkline) {
                          _push4(ssrRenderComponent(VCardText, null, {
                            default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                              if (_push5) {
                                _push5(`<div class="d-flex flex-column align-center" data-v-7998bce9${_scopeId4}>`);
                                _push5(ssrRenderComponent(VSparkline, {
                                  "model-value": cardProperties.value.sparklineData,
                                  "line-width": cardProperties.value.sparklineLineWidth,
                                  color: sparklineColor.value !== "default" ? sparklineColor.value : void 0,
                                  gradient: cardProperties.value.sparklineGradient ? [sparklineColor.value !== "default" ? sparklineColor.value : "primary"] : void 0,
                                  labels: cardProperties.value.sparklineShowLabels ? cardProperties.value.sparklineLabels : void 0,
                                  padding: "16",
                                  "auto-draw": "",
                                  smooth: ""
                                }, null, _parent5, _scopeId4));
                                _push5(`</div>`);
                              } else {
                                return [
                                  createVNode("div", { class: "d-flex flex-column align-center" }, [
                                    createVNode(VSparkline, {
                                      "model-value": cardProperties.value.sparklineData,
                                      "line-width": cardProperties.value.sparklineLineWidth,
                                      color: sparklineColor.value !== "default" ? sparklineColor.value : void 0,
                                      gradient: cardProperties.value.sparklineGradient ? [sparklineColor.value !== "default" ? sparklineColor.value : "primary"] : void 0,
                                      labels: cardProperties.value.sparklineShowLabels ? cardProperties.value.sparklineLabels : void 0,
                                      padding: "16",
                                      "auto-draw": "",
                                      smooth: ""
                                    }, null, 8, ["model-value", "line-width", "color", "gradient", "labels"])
                                  ])
                                ];
                              }
                            }),
                            _: 1
                          }, _parent4, _scopeId3));
                        } else {
                          _push4(`<!---->`);
                        }
                        if (cardProperties.value.showTimeline) {
                          _push4(ssrRenderComponent(VCardText, null, {
                            default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                              if (_push5) {
                                _push5(`<div class="font-weight-bold ms-1 mb-2" data-v-7998bce9${_scopeId4}>Today</div>`);
                                _push5(ssrRenderComponent(VTimeline, {
                                  align: "start",
                                  density: "compact"
                                }, {
                                  default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                    if (_push6) {
                                      _push6(`<!--[-->`);
                                      ssrRenderList(timelineItems.value.slice(0, timelineItemsCount.value), (item, i) => {
                                        _push6(ssrRenderComponent(VTimelineItem, {
                                          key: i,
                                          "dot-color": item.color,
                                          size: "x-small"
                                        }, {
                                          default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                            if (_push7) {
                                              _push7(`<div class="mb-4" data-v-7998bce9${_scopeId6}><div class="font-weight-normal" data-v-7998bce9${_scopeId6}><strong data-v-7998bce9${_scopeId6}>${ssrInterpolate(item.title)}</strong> @${ssrInterpolate((/* @__PURE__ */ new Date()).getHours())}:${ssrInterpolate((/* @__PURE__ */ new Date()).getMinutes())}</div><div data-v-7998bce9${_scopeId6}>${ssrInterpolate(item.message)}</div></div>`);
                                            } else {
                                              return [
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("div", { class: "font-weight-normal" }, [
                                                    createVNode("strong", null, toDisplayString(item.title), 1),
                                                    createTextVNode(" @" + toDisplayString((/* @__PURE__ */ new Date()).getHours()) + ":" + toDisplayString((/* @__PURE__ */ new Date()).getMinutes()), 1)
                                                  ]),
                                                  createVNode("div", null, toDisplayString(item.message), 1)
                                                ])
                                              ];
                                            }
                                          }),
                                          _: 2
                                        }, _parent6, _scopeId5));
                                      });
                                      _push6(`<!--]-->`);
                                    } else {
                                      return [
                                        (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value.slice(0, timelineItemsCount.value), (item, i) => {
                                          return openBlock(), createBlock(VTimelineItem, {
                                            key: i,
                                            "dot-color": item.color,
                                            size: "x-small"
                                          }, {
                                            default: withCtx(() => [
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("div", { class: "font-weight-normal" }, [
                                                  createVNode("strong", null, toDisplayString(item.title), 1),
                                                  createTextVNode(" @" + toDisplayString((/* @__PURE__ */ new Date()).getHours()) + ":" + toDisplayString((/* @__PURE__ */ new Date()).getMinutes()), 1)
                                                ]),
                                                createVNode("div", null, toDisplayString(item.message), 1)
                                              ])
                                            ]),
                                            _: 2
                                          }, 1032, ["dot-color"]);
                                        }), 128))
                                      ];
                                    }
                                  }),
                                  _: 1
                                }, _parent5, _scopeId4));
                              } else {
                                return [
                                  createVNode("div", { class: "font-weight-bold ms-1 mb-2" }, "Today"),
                                  createVNode(VTimeline, {
                                    align: "start",
                                    density: "compact"
                                  }, {
                                    default: withCtx(() => [
                                      (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value.slice(0, timelineItemsCount.value), (item, i) => {
                                        return openBlock(), createBlock(VTimelineItem, {
                                          key: i,
                                          "dot-color": item.color,
                                          size: "x-small"
                                        }, {
                                          default: withCtx(() => [
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("div", { class: "font-weight-normal" }, [
                                                createVNode("strong", null, toDisplayString(item.title), 1),
                                                createTextVNode(" @" + toDisplayString((/* @__PURE__ */ new Date()).getHours()) + ":" + toDisplayString((/* @__PURE__ */ new Date()).getMinutes()), 1)
                                              ]),
                                              createVNode("div", null, toDisplayString(item.message), 1)
                                            ])
                                          ]),
                                          _: 2
                                        }, 1032, ["dot-color"]);
                                      }), 128))
                                    ]),
                                    _: 1
                                  })
                                ];
                              }
                            }),
                            _: 1
                          }, _parent4, _scopeId3));
                        } else {
                          _push4(`<!---->`);
                        }
                        _push4(ssrRenderComponent(VCardActions, {
                          class: "justify-" + cardProperties.value.buttonPosition
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              if (cardProperties.value.showButtons) {
                                _push5(ssrRenderComponent(VBtn, {
                                  color: buttonColor.value !== "default" ? buttonColor.value : void 0,
                                  variant: buttonVariant.value,
                                  style: cardProperties.value.buttonWidth > 0 ? `width: ${cardProperties.value.buttonWidth}%` : "",
                                  "prepend-icon": cardProperties.value.buttonIcon,
                                  to: cardProperties.value.buttonLink
                                }, {
                                  default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                    if (_push6) {
                                      _push6(`${ssrInterpolate(cardProperties.value.buttonText || "Action")}`);
                                    } else {
                                      return [
                                        createTextVNode(toDisplayString(cardProperties.value.buttonText || "Action"), 1)
                                      ];
                                    }
                                  }),
                                  _: 1
                                }, _parent5, _scopeId4));
                              } else {
                                _push5(`<!---->`);
                              }
                              if (cardProperties.value.showProgress) {
                                _push5(`<div class="${ssrRenderClass(getProgressPositionClass())}" data-v-7998bce9${_scopeId4}>`);
                                _push5(ssrRenderComponent(VProgressCircular, {
                                  "model-value": cardProperties.value.progressValue,
                                  color: progressColor.value !== "default" ? progressColor.value : void 0,
                                  size: progressSize.value,
                                  indeterminate: cardProperties.value.indeterminate,
                                  width: cardProperties.value.progressWidth,
                                  "bg-color": cardProperties.value.showProgressBg ? progressBgColor.value !== "default" ? progressBgColor.value : "grey-lighten-3" : void 0
                                }, createSlots({ _: 2 }, [
                                  cardProperties.value.showProgressLabel ? {
                                    name: "default",
                                    fn: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                      if (_push6) {
                                        _push6(`<span class="${ssrRenderClass(getProgressLabelClass())}" data-v-7998bce9${_scopeId5}>${ssrInterpolate(getProgressLabelText())}</span>`);
                                      } else {
                                        return [
                                          createVNode("span", {
                                            class: getProgressLabelClass()
                                          }, toDisplayString(getProgressLabelText()), 3)
                                        ];
                                      }
                                    }),
                                    key: "0"
                                  } : void 0
                                ]), _parent5, _scopeId4));
                                _push5(`</div>`);
                              } else {
                                _push5(`<!---->`);
                              }
                            } else {
                              return [
                                cardProperties.value.showButtons ? (openBlock(), createBlock(VBtn, {
                                  key: 0,
                                  color: buttonColor.value !== "default" ? buttonColor.value : void 0,
                                  variant: buttonVariant.value,
                                  style: cardProperties.value.buttonWidth > 0 ? `width: ${cardProperties.value.buttonWidth}%` : "",
                                  "prepend-icon": cardProperties.value.buttonIcon,
                                  to: cardProperties.value.buttonLink
                                }, {
                                  default: withCtx(() => [
                                    createTextVNode(toDisplayString(cardProperties.value.buttonText || "Action"), 1)
                                  ]),
                                  _: 1
                                }, 8, ["color", "variant", "style", "prepend-icon", "to"])) : createCommentVNode("", true),
                                cardProperties.value.showProgress ? (openBlock(), createBlock("div", {
                                  key: 1,
                                  class: getProgressPositionClass()
                                }, [
                                  createVNode(VProgressCircular, {
                                    "model-value": cardProperties.value.progressValue,
                                    color: progressColor.value !== "default" ? progressColor.value : void 0,
                                    size: progressSize.value,
                                    indeterminate: cardProperties.value.indeterminate,
                                    width: cardProperties.value.progressWidth,
                                    "bg-color": cardProperties.value.showProgressBg ? progressBgColor.value !== "default" ? progressBgColor.value : "grey-lighten-3" : void 0
                                  }, createSlots({ _: 2 }, [
                                    cardProperties.value.showProgressLabel ? {
                                      name: "default",
                                      fn: withCtx(() => [
                                        createVNode("span", {
                                          class: getProgressLabelClass()
                                        }, toDisplayString(getProgressLabelText()), 3)
                                      ]),
                                      key: "0"
                                    } : void 0
                                  ]), 1032, ["model-value", "color", "size", "indeterminate", "width", "bg-color"])
                                ], 2)) : createCommentVNode("", true)
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                      } else {
                        return [
                          cardProperties.value.image ? (openBlock(), createBlock(VImg, {
                            key: 0,
                            src: cardProperties.value.image,
                            height: "200",
                            cover: ""
                          }, null, 8, ["src"])) : createCommentVNode("", true),
                          cardProperties.value.title ? (openBlock(), createBlock(VCardTitle, { key: 1 }, {
                            default: withCtx(() => [
                              cardProperties.value.icon ? (openBlock(), createBlock(VIcon, {
                                key: 0,
                                start: "",
                                color: iconColor.value !== "default" ? iconColor.value : void 0
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(toDisplayString(cardProperties.value.icon), 1)
                                ]),
                                _: 1
                              }, 8, ["color"])) : createCommentVNode("", true),
                              createTextVNode(" " + toDisplayString(cardProperties.value.title), 1)
                            ]),
                            _: 1
                          })) : createCommentVNode("", true),
                          cardProperties.value.subtitle ? (openBlock(), createBlock(VCardSubtitle, { key: 2 }, {
                            default: withCtx(() => [
                              createTextVNode(toDisplayString(cardProperties.value.subtitle), 1)
                            ]),
                            _: 1
                          })) : createCommentVNode("", true),
                          cardProperties.value.text ? (openBlock(), createBlock(VCardText, { key: 3 }, {
                            default: withCtx(() => [
                              createTextVNode(toDisplayString(cardProperties.value.text), 1)
                            ]),
                            _: 1
                          })) : createCommentVNode("", true),
                          cardProperties.value.showSparkline ? (openBlock(), createBlock(VCardText, { key: 4 }, {
                            default: withCtx(() => [
                              createVNode("div", { class: "d-flex flex-column align-center" }, [
                                createVNode(VSparkline, {
                                  "model-value": cardProperties.value.sparklineData,
                                  "line-width": cardProperties.value.sparklineLineWidth,
                                  color: sparklineColor.value !== "default" ? sparklineColor.value : void 0,
                                  gradient: cardProperties.value.sparklineGradient ? [sparklineColor.value !== "default" ? sparklineColor.value : "primary"] : void 0,
                                  labels: cardProperties.value.sparklineShowLabels ? cardProperties.value.sparklineLabels : void 0,
                                  padding: "16",
                                  "auto-draw": "",
                                  smooth: ""
                                }, null, 8, ["model-value", "line-width", "color", "gradient", "labels"])
                              ])
                            ]),
                            _: 1
                          })) : createCommentVNode("", true),
                          cardProperties.value.showTimeline ? (openBlock(), createBlock(VCardText, { key: 5 }, {
                            default: withCtx(() => [
                              createVNode("div", { class: "font-weight-bold ms-1 mb-2" }, "Today"),
                              createVNode(VTimeline, {
                                align: "start",
                                density: "compact"
                              }, {
                                default: withCtx(() => [
                                  (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value.slice(0, timelineItemsCount.value), (item, i) => {
                                    return openBlock(), createBlock(VTimelineItem, {
                                      key: i,
                                      "dot-color": item.color,
                                      size: "x-small"
                                    }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("div", { class: "font-weight-normal" }, [
                                            createVNode("strong", null, toDisplayString(item.title), 1),
                                            createTextVNode(" @" + toDisplayString((/* @__PURE__ */ new Date()).getHours()) + ":" + toDisplayString((/* @__PURE__ */ new Date()).getMinutes()), 1)
                                          ]),
                                          createVNode("div", null, toDisplayString(item.message), 1)
                                        ])
                                      ]),
                                      _: 2
                                    }, 1032, ["dot-color"]);
                                  }), 128))
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          })) : createCommentVNode("", true),
                          createVNode(VCardActions, {
                            class: "justify-" + cardProperties.value.buttonPosition
                          }, {
                            default: withCtx(() => [
                              cardProperties.value.showButtons ? (openBlock(), createBlock(VBtn, {
                                key: 0,
                                color: buttonColor.value !== "default" ? buttonColor.value : void 0,
                                variant: buttonVariant.value,
                                style: cardProperties.value.buttonWidth > 0 ? `width: ${cardProperties.value.buttonWidth}%` : "",
                                "prepend-icon": cardProperties.value.buttonIcon,
                                to: cardProperties.value.buttonLink
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(toDisplayString(cardProperties.value.buttonText || "Action"), 1)
                                ]),
                                _: 1
                              }, 8, ["color", "variant", "style", "prepend-icon", "to"])) : createCommentVNode("", true),
                              cardProperties.value.showProgress ? (openBlock(), createBlock("div", {
                                key: 1,
                                class: getProgressPositionClass()
                              }, [
                                createVNode(VProgressCircular, {
                                  "model-value": cardProperties.value.progressValue,
                                  color: progressColor.value !== "default" ? progressColor.value : void 0,
                                  size: progressSize.value,
                                  indeterminate: cardProperties.value.indeterminate,
                                  width: cardProperties.value.progressWidth,
                                  "bg-color": cardProperties.value.showProgressBg ? progressBgColor.value !== "default" ? progressBgColor.value : "grey-lighten-3" : void 0
                                }, createSlots({ _: 2 }, [
                                  cardProperties.value.showProgressLabel ? {
                                    name: "default",
                                    fn: withCtx(() => [
                                      createVNode("span", {
                                        class: getProgressLabelClass()
                                      }, toDisplayString(getProgressLabelText()), 3)
                                    ]),
                                    key: "0"
                                  } : void 0
                                ]), 1032, ["model-value", "color", "size", "indeterminate", "width", "bg-color"])
                              ], 2)) : createCommentVNode("", true)
                            ]),
                            _: 1
                          }, 8, ["class"])
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(`</div>`);
                  if (unref(userStore).user.isPremium) {
                    _push3(`<div class="d-flex justify-end mt-3" data-v-7998bce9${_scopeId2}>`);
                    _push3(ssrRenderComponent(VBtn, {
                      color: "secondary",
                      class: "mr-2",
                      "prepend-icon": "mdi-eye",
                      onClick: previewCode
                    }, {
                      default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                        if (_push4) {
                          _push4(` Preview Code `);
                        } else {
                          return [
                            createTextVNode(" Preview Code ")
                          ];
                        }
                      }),
                      _: 1
                    }, _parent3, _scopeId2));
                    _push3(ssrRenderComponent(VBtn, {
                      color: "primary",
                      "prepend-icon": "mdi-content-copy",
                      onClick: copyCardCode
                    }, {
                      default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                        if (_push4) {
                          _push4(` Copy code `);
                        } else {
                          return [
                            createTextVNode(" Copy code ")
                          ];
                        }
                      }),
                      _: 1
                    }, _parent3, _scopeId2));
                    _push3(`</div>`);
                  } else {
                    _push3(`<div class="d-flex justify-end mt-3" data-v-7998bce9${_scopeId2}>`);
                    _push3(ssrRenderComponent(premiumFeatures, {
                      title: "Preview code",
                      icon: "mdi-eye",
                      featureKey: "studioComponents",
                      variant: "elevated",
                      class: "premium-feature-button mr-2",
                      type: "button"
                    }, null, _parent3, _scopeId2));
                    _push3(ssrRenderComponent(premiumFeatures, {
                      title: "Copy code",
                      icon: "mdi-content-copy",
                      featureKey: "studioComponents",
                      variant: "elevated",
                      class: "premium-feature-button",
                      type: "button"
                    }, null, _parent3, _scopeId2));
                    _push3(`</div>`);
                  }
                  _push3(`</div>`);
                  _push3(ssrRenderComponent(VDialog, {
                    modelValue: showCodeDialog.value,
                    "onUpdate:modelValue": ($event) => showCodeDialog.value = $event,
                    width: "800"
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(ssrRenderComponent(VCard, null, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`<span data-v-7998bce9${_scopeId5}>Generated Code</span>`);
                                    _push6(ssrRenderComponent(VBtn, {
                                      icon: "mdi-close",
                                      variant: "text",
                                      onClick: ($event) => showCodeDialog.value = false
                                    }, null, _parent6, _scopeId5));
                                  } else {
                                    return [
                                      createVNode("span", null, "Generated Code"),
                                      createVNode(VBtn, {
                                        icon: "mdi-close",
                                        variant: "text",
                                        onClick: ($event) => showCodeDialog.value = false
                                      }, null, 8, ["onClick"])
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VCardText, null, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VSheet, {
                                      class: "bg-grey-darken-4 rounded pa-4",
                                      style: { "white-space": "pre-wrap", "font-family": "monospace" }
                                    }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`${ssrInterpolate(generatedCode.value)}`);
                                        } else {
                                          return [
                                            createTextVNode(toDisplayString(generatedCode.value), 1)
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                  } else {
                                    return [
                                      createVNode(VSheet, {
                                        class: "bg-grey-darken-4 rounded pa-4",
                                        style: { "white-space": "pre-wrap", "font-family": "monospace" }
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(generatedCode.value), 1)
                                        ]),
                                        _: 1
                                      })
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VCardActions, { class: "pa-4" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VBtn, {
                                      color: "primary",
                                      "prepend-icon": "mdi-content-copy",
                                      onClick: copyCardCode
                                    }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(` Copy to Clipboard `);
                                        } else {
                                          return [
                                            createTextVNode(" Copy to Clipboard ")
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                  } else {
                                    return [
                                      createVNode(VBtn, {
                                        color: "primary",
                                        "prepend-icon": "mdi-content-copy",
                                        onClick: copyCardCode
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(" Copy to Clipboard ")
                                        ]),
                                        _: 1
                                      })
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                                  default: withCtx(() => [
                                    createVNode("span", null, "Generated Code"),
                                    createVNode(VBtn, {
                                      icon: "mdi-close",
                                      variant: "text",
                                      onClick: ($event) => showCodeDialog.value = false
                                    }, null, 8, ["onClick"])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VCardText, null, {
                                  default: withCtx(() => [
                                    createVNode(VSheet, {
                                      class: "bg-grey-darken-4 rounded pa-4",
                                      style: { "white-space": "pre-wrap", "font-family": "monospace" }
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode(toDisplayString(generatedCode.value), 1)
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }),
                                createVNode(VCardActions, { class: "pa-4" }, {
                                  default: withCtx(() => [
                                    createVNode(VBtn, {
                                      color: "primary",
                                      "prepend-icon": "mdi-content-copy",
                                      onClick: copyCardCode
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode(" Copy to Clipboard ")
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                })
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                      } else {
                        return [
                          createVNode(VCard, null, {
                            default: withCtx(() => [
                              createVNode(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                                default: withCtx(() => [
                                  createVNode("span", null, "Generated Code"),
                                  createVNode(VBtn, {
                                    icon: "mdi-close",
                                    variant: "text",
                                    onClick: ($event) => showCodeDialog.value = false
                                  }, null, 8, ["onClick"])
                                ]),
                                _: 1
                              }),
                              createVNode(VCardText, null, {
                                default: withCtx(() => [
                                  createVNode(VSheet, {
                                    class: "bg-grey-darken-4 rounded pa-4",
                                    style: { "white-space": "pre-wrap", "font-family": "monospace" }
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString(generatedCode.value), 1)
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }),
                              createVNode(VCardActions, { class: "pa-4" }, {
                                default: withCtx(() => [
                                  createVNode(VBtn, {
                                    color: "primary",
                                    "prepend-icon": "mdi-content-copy",
                                    onClick: copyCardCode
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(" Copy to Clipboard ")
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          })
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(ssrRenderComponent(Snackbar, {
                    modelValue: showSnackbarMessage.value,
                    "onUpdate:modelValue": ($event) => showSnackbarMessage.value = $event,
                    text: snackbarText.value,
                    color: snackbarColor.value
                  }, null, _parent3, _scopeId2));
                } else {
                  return [
                    createVNode("div", { class: "control-panel" }, [
                      createVNode(VCard, {
                        flat: "",
                        class: "fill-height"
                      }, {
                        default: withCtx(() => [
                          createVNode("div", { class: "px-4 py-2 d-flex align-center" }, [
                            createVNode(VChip, {
                              color: "success",
                              "prepend-icon": "mdi-vuejs",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vue.js")
                              ]),
                              _: 1
                            }),
                            createVNode(VChip, {
                              color: "info",
                              "prepend-icon": "mdi-vuetify",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vuetify")
                              ]),
                              _: 1
                            }),
                            createVNode(premiumFeatures, {
                              "premium-link": "/subscribe",
                              title: "Studio components",
                              icon: "mdi-palette",
                              type: "chip",
                              "feature-key": "studioComponents"
                            })
                          ]),
                          createVNode(VTabs, {
                            modelValue: propertiesTab.value,
                            "onUpdate:modelValue": ($event) => propertiesTab.value = $event,
                            color: "primary",
                            "align-tabs": "center",
                            class: "px-4"
                          }, {
                            default: withCtx(() => [
                              createVNode(VTab, { value: "content" }, {
                                default: withCtx(() => [
                                  createTextVNode("Content")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "style" }, {
                                default: withCtx(() => [
                                  createTextVNode("Style")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "actions" }, {
                                default: withCtx(() => [
                                  createTextVNode("Actions")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "data" }, {
                                default: withCtx(() => [
                                  createTextVNode("Data")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "templates" }, {
                                default: withCtx(() => [
                                  createTextVNode("Templates")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue"]),
                          createVNode(VDivider),
                          createVNode(VCardText, {
                            class: "pa-0 fill-height",
                            style: { "overflow-y": "auto" }
                          }, {
                            default: withCtx(() => [
                              createVNode(VWindow, {
                                modelValue: propertiesTab.value,
                                "onUpdate:modelValue": ($event) => propertiesTab.value = $event,
                                class: "fill-height"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VWindowItem, { value: "content" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode(VTextField, {
                                          modelValue: cardProperties.value.title,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.title = $event,
                                          label: "Title",
                                          variant: "outlined",
                                          density: "comfortable",
                                          clearable: "",
                                          "prepend-inner-icon": "mdi-format-title",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VTextField, {
                                          modelValue: cardProperties.value.subtitle,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.subtitle = $event,
                                          label: "Subtitle",
                                          variant: "outlined",
                                          density: "comfortable",
                                          clearable: "",
                                          "prepend-inner-icon": "mdi-format-text",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VTextarea, {
                                          modelValue: cardProperties.value.text,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.text = $event,
                                          label: "Text",
                                          variant: "outlined",
                                          density: "comfortable",
                                          "auto-grow": "",
                                          rows: "3",
                                          "row-height": "20",
                                          clearable: "",
                                          "prepend-inner-icon": "mdi-text",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VTextField, {
                                          modelValue: cardProperties.value.image,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.image = $event,
                                          label: "Image URL",
                                          variant: "outlined",
                                          density: "comfortable",
                                          clearable: "",
                                          "prepend-inner-icon": "mdi-image",
                                          class: "mb-1"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode("div", { class: "d-flex flex-wrap mb-4" }, [
                                          createVNode(VChipGroup, {
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "none",
                                                onClick: removeImage
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("None")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "mountains",
                                                onClick: ($event) => setImage("mountains")
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Mountains")
                                                ]),
                                                _: 1
                                              }, 8, ["onClick"]),
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "beach",
                                                onClick: ($event) => setImage("beach")
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Beach")
                                                ]),
                                                _: 1
                                              }, 8, ["onClick"]),
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "forest",
                                                onClick: ($event) => setImage("forest")
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Forest")
                                                ]),
                                                _: 1
                                              }, 8, ["onClick"])
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode(VSelect, {
                                          modelValue: cardProperties.value.icon,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.icon = $event,
                                          items: unref(icons),
                                          label: "Icon",
                                          variant: "outlined",
                                          density: "comfortable",
                                          clearable: "",
                                          "prepend-inner-icon": "mdi-pencil",
                                          class: "mb-4"
                                        }, {
                                          item: withCtx(({ item, props: props2 }) => [
                                            createVNode(VListItem, props2, {
                                              prepend: withCtx(() => [
                                                createVNode(VIcon, {
                                                  icon: item.raw
                                                }, null, 8, ["icon"])
                                              ]),
                                              _: 2
                                            }, 1040)
                                          ]),
                                          _: 1
                                        }, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                        cardProperties.value.icon ? (openBlock(), createBlock("div", {
                                          key: 0,
                                          class: "mb-4"
                                        }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Icon color"),
                                          createVNode("div", { class: "color-selector-container" }, [
                                            createVNode(VBtnToggle, {
                                              modelValue: iconColorIndex.value,
                                              "onUpdate:modelValue": ($event) => iconColorIndex.value = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              "selected-class": "border-primary"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                  return createVNode(VBtn, {
                                                    key: color.value,
                                                    value: index,
                                                    color: color.value !== "default" ? color.value : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: "ma-1"
                                                  }, {
                                                    default: withCtx(() => [
                                                      color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("mdi-palette-outline")
                                                        ]),
                                                        _: 1
                                                      })) : createCommentVNode("", true)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value", "color"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ])
                                        ])) : createCommentVNode("", true)
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "style" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Elevation"),
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-card-outline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: cardProperties.value.elevation,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.elevation = $event,
                                              min: "0",
                                              max: "24",
                                              step: "1",
                                              "thumb-label": "",
                                              class: "mx-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-layers-triple")
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Variant"),
                                          createVNode(VChipGroup, {
                                            modelValue: cardVariantIndex.value,
                                            "onUpdate:modelValue": ($event) => cardVariantIndex.value = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(cardVariants, (variant, index) => {
                                                return createVNode(VChip, {
                                                  key: variant,
                                                  size: "small",
                                                  value: index
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(toDisplayString(variant), 1)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Color"),
                                          createVNode("div", { class: "color-selector-container" }, [
                                            createVNode(VBtnToggle, {
                                              modelValue: cardColorIndex.value,
                                              "onUpdate:modelValue": ($event) => cardColorIndex.value = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              "selected-class": "border-primary"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                  return createVNode(VBtn, {
                                                    key: color.value,
                                                    value: index,
                                                    color: color.value !== "default" ? color.value : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: "ma-1"
                                                  }, {
                                                    default: withCtx(() => [
                                                      color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("mdi-palette-outline")
                                                        ]),
                                                        _: 1
                                                      })) : createCommentVNode("", true)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value", "color"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ])
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: cardProperties.value.loading,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.loading = $event,
                                          color: "primary",
                                          label: "Loading",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: cardProperties.value.disabled,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.disabled = $event,
                                          color: "primary",
                                          label: "Disabled",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: cardProperties.value.hoverEffect,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.hoverEffect = $event,
                                          color: "primary",
                                          label: "Hover effect",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Padding"),
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-arrow-collapse")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: cardProperties.value.padding,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.padding = $event,
                                              min: "0",
                                              max: "16",
                                              step: "4",
                                              "thumb-label": "",
                                              class: "mx-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-arrow-expand")
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Border radius"),
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-square-outline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: roundedIndex.value,
                                              "onUpdate:modelValue": ($event) => roundedIndex.value = $event,
                                              min: 0,
                                              max: roundedLabels.length - 1,
                                              step: "1",
                                              "thumb-label": "",
                                              "thumb-label-text": roundedLabels[roundedIndex.value],
                                              class: "mx-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue", "max", "thumb-label-text"]),
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-rectangle-outline")
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ])
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "actions" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode(VSwitch, {
                                          modelValue: cardProperties.value.showButtons,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.showButtons = $event,
                                          color: "primary",
                                          label: "Show buttons",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        cardProperties.value.showButtons ? (openBlock(), createBlock(Fragment, { key: 0 }, [
                                          createVNode(VTextField, {
                                            modelValue: cardProperties.value.buttonText,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.buttonText = $event,
                                            label: "Button text",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "prepend-inner-icon": "mdi-button-cursor",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Button style"),
                                            createVNode(VChipGroup, {
                                              modelValue: buttonVariantIndex.value,
                                              "onUpdate:modelValue": ($event) => buttonVariantIndex.value = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(buttonVariants, (variant, index) => {
                                                  return createVNode(VChip, {
                                                    key: variant,
                                                    size: "small",
                                                    value: index
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(toDisplayString(variant), 1)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Button color"),
                                            createVNode("div", { class: "d-flex overflow-x-auto" }, [
                                              createVNode(VBtnToggle, {
                                                modelValue: buttonColorIndex.value,
                                                "onUpdate:modelValue": ($event) => buttonColorIndex.value = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                class: "d-flex"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: index,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Button width"),
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VChip, { size: "x-small" }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Auto")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: cardProperties.value.buttonWidth,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.buttonWidth = $event,
                                                min: "0",
                                                max: "100",
                                                step: "25",
                                                "thumb-label": "",
                                                "thumb-label-text": cardProperties.value.buttonWidth + "%",
                                                class: "mx-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue", "thumb-label-text"]),
                                              createVNode(VChip, { size: "x-small" }, {
                                                default: withCtx(() => [
                                                  createTextVNode("100%")
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Button position"),
                                            createVNode("div", { class: "d-flex justify-space-between" }, [
                                              createVNode(VBtnToggle, {
                                                modelValue: cardProperties.value.buttonPosition,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.buttonPosition = $event,
                                                mandatory: "",
                                                density: "comfortable"
                                              }, {
                                                default: withCtx(() => [
                                                  createVNode(VBtn, {
                                                    value: "start",
                                                    icon: "mdi-format-align-left"
                                                  }),
                                                  createVNode(VBtn, {
                                                    value: "center",
                                                    icon: "mdi-format-align-center"
                                                  }),
                                                  createVNode(VBtn, {
                                                    value: "end",
                                                    icon: "mdi-format-align-right"
                                                  }),
                                                  createVNode(VBtn, {
                                                    value: "space-between",
                                                    icon: "mdi-format-align-justify"
                                                  })
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])
                                          ]),
                                          createVNode(VAutocomplete, {
                                            modelValue: cardProperties.value.buttonIcon,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.buttonIcon = $event,
                                            items: unref(icons),
                                            label: "Icon",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-2 mt-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                          createVNode(VTextField, {
                                            modelValue: cardProperties.value.buttonLink,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.buttonLink = $event,
                                            label: "Link",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ], 64)) : createCommentVNode("", true),
                                        createVNode(VSwitch, {
                                          modelValue: cardProperties.value.showProgress,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.showProgress = $event,
                                          color: "primary",
                                          label: "Show progress circular",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        cardProperties.value.showProgress ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Progress value"),
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-percent")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: cardProperties.value.progressValue,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.progressValue = $event,
                                                min: "0",
                                                max: "100",
                                                step: "5",
                                                "thumb-label": "",
                                                "thumb-label-text": cardProperties.value.progressValue + "%",
                                                class: "mx-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue", "thumb-label-text"])
                                            ]),
                                            createVNode("div", { class: "d-flex align-center mt-2" }, [
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-circle-slice-8")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: cardProperties.value.progressWidth,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.progressWidth = $event,
                                                min: "1",
                                                max: "10",
                                                step: "1",
                                                "thumb-label": "",
                                                "thumb-label-text": cardProperties.value.progressWidth,
                                                class: "mx-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue", "thumb-label-text"])
                                            ])
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: cardProperties.value.indeterminate,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.indeterminate = $event,
                                            color: "primary",
                                            "hide-details": "",
                                            class: "mb-2",
                                            label: "Indeterminate"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Progress color"),
                                            createVNode("div", { class: "d-flex flex-wrap gap-2" }, [
                                              createVNode(VBtnToggle, {
                                                modelValue: progressColorIndex.value,
                                                "onUpdate:modelValue": ($event) => progressColorIndex.value = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                "selected-class": "border-primary"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: index,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Progress size"),
                                            createVNode(VChipGroup, {
                                              modelValue: progressSizeIndex.value,
                                              "onUpdate:modelValue": ($event) => progressSizeIndex.value = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(progressSizes, (size, index) => {
                                                  return createVNode(VChip, {
                                                    key: size,
                                                    size: "small",
                                                    value: index
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(toDisplayString(size), 1)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Progress position"),
                                            createVNode(VSelect, {
                                              modelValue: cardProperties.value.progressPosition,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.progressPosition = $event,
                                              items: progressPositions,
                                              label: "Position",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: cardProperties.value.showProgressLabel,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.showProgressLabel = $event,
                                            color: "primary",
                                            "hide-details": "",
                                            class: "mb-2",
                                            label: "Show value"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          cardProperties.value.showProgressLabel ? (openBlock(), createBlock("div", {
                                            key: 0,
                                            class: "mb-4"
                                          }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Label style"),
                                            createVNode(VChipGroup, {
                                              modelValue: cardProperties.value.progressLabelStyle,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.progressLabelStyle = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "value"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Value (%)")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "custom"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Custom")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"]),
                                            cardProperties.value.progressLabelStyle === "custom" ? (openBlock(), createBlock(VTextField, {
                                              key: 0,
                                              modelValue: cardProperties.value.progressLabelText,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.progressLabelText = $event,
                                              label: "Custom label",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mt-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                          ])) : createCommentVNode("", true),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode(VSwitch, {
                                              modelValue: cardProperties.value.showProgressBg,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.showProgressBg = $event,
                                              color: "primary",
                                              "hide-details": "",
                                              class: "mb-2",
                                              label: "Background color"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            cardProperties.value.showProgressBg ? (openBlock(), createBlock("div", {
                                              key: 0,
                                              class: "d-flex flex-wrap gap-2 mt-2"
                                            }, [
                                              createVNode(VBtnToggle, {
                                                modelValue: progressBgColorIndex.value,
                                                "onUpdate:modelValue": ($event) => progressBgColorIndex.value = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                "selected-class": "border-primary"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: index,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])) : createCommentVNode("", true)
                                          ])
                                        ], 64)) : createCommentVNode("", true)
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "data" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-chart-line")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Data Visualization")
                                          ]),
                                          createVNode(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props: props2 }) => [
                                              createVNode(VBtn, mergeProps({
                                                icon: "mdi-help-circle-outline",
                                                variant: "text",
                                                size: "small"
                                              }, props2), null, 16)
                                            ]),
                                            default: withCtx(() => [
                                              createVNode("span", null, "Add data visualizations to your card")
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: cardProperties.value.showSparkline,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.showSparkline = $event,
                                          color: "primary",
                                          label: "Show sparkline",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        cardProperties.value.showSparkline ? (openBlock(), createBlock(Fragment, { key: 0 }, [
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Sparkline color"),
                                            createVNode("div", { class: "color-selector-container" }, [
                                              createVNode(VBtnToggle, {
                                                modelValue: sparklineColorIndex.value,
                                                "onUpdate:modelValue": ($event) => sparklineColorIndex.value = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                "selected-class": "border-primary"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: index,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Sparkline data"),
                                            createVNode(VTextarea, {
                                              modelValue: sparklineDataText.value,
                                              "onUpdate:modelValue": [($event) => sparklineDataText.value = $event, updateSparklineData],
                                              label: "Enter comma-separated values",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "auto-grow": "",
                                              rows: "2",
                                              "row-height": "20",
                                              class: "mb-2",
                                              hint: "Example: 0,2,5,9,5,10,3,5,0,0,1,8,2,9,0",
                                              "persistent-hint": ""
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Line width"),
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-minus")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: cardProperties.value.sparklineLineWidth,
                                                "onUpdate:modelValue": ($event) => cardProperties.value.sparklineLineWidth = $event,
                                                min: "1",
                                                max: "5",
                                                step: "1",
                                                "thumb-label": "",
                                                class: "mx-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-minus-thick")
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: cardProperties.value.sparklineGradient,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.sparklineGradient = $event,
                                            color: "primary",
                                            label: "Show gradient",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: cardProperties.value.sparklineShowLabels,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.sparklineShowLabels = $event,
                                            color: "primary",
                                            label: "Show labels",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          cardProperties.value.sparklineShowLabels ? (openBlock(), createBlock("div", {
                                            key: 0,
                                            class: "mb-4"
                                          }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Labels"),
                                            createVNode(VTextarea, {
                                              modelValue: sparklineLabelsText.value,
                                              "onUpdate:modelValue": [($event) => sparklineLabelsText.value = $event, updateSparklineLabels],
                                              label: "Enter comma-separated labels",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "auto-grow": "",
                                              rows: "2",
                                              "row-height": "20",
                                              class: "mb-2",
                                              hint: "Example: Jan,Fév,Mar,Avr,Mai,Juin",
                                              "persistent-hint": ""
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ])) : createCommentVNode("", true)
                                        ], 64)) : createCommentVNode("", true),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode(VSwitch, {
                                          modelValue: cardProperties.value.showTimeline,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.showTimeline = $event,
                                          color: "primary",
                                          label: "Show timeline",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        cardProperties.value.showTimeline ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Timeline items"),
                                            createVNode(VSelect, {
                                              modelValue: timelineItemsCount.value,
                                              "onUpdate:modelValue": ($event) => timelineItemsCount.value = $event,
                                              items: [1, 2, 3, 4, 5],
                                              label: "Number of items",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Timeline content"),
                                            createVNode(VExpansionPanels, { variant: "accordion" }, {
                                              default: withCtx(() => [
                                                (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value.slice(0, timelineItemsCount.value), (item, index) => {
                                                  return openBlock(), createBlock(VExpansionPanel, { key: index }, {
                                                    default: withCtx(() => [
                                                      createVNode(VExpansionPanelTitle, null, {
                                                        default: withCtx(() => [
                                                          createTextVNode(" Item " + toDisplayString(index + 1) + ": " + toDisplayString(item.title), 1)
                                                        ]),
                                                        _: 2
                                                      }, 1024),
                                                      createVNode(VExpansionPanelText, null, {
                                                        default: withCtx(() => [
                                                          createVNode(VTextField, {
                                                            modelValue: timelineItems.value[index].title,
                                                            "onUpdate:modelValue": ($event) => timelineItems.value[index].title = $event,
                                                            label: "Title",
                                                            variant: "outlined",
                                                            density: "comfortable",
                                                            class: "mb-2"
                                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                          createVNode(VTextField, {
                                                            modelValue: timelineItems.value[index].message,
                                                            "onUpdate:modelValue": ($event) => timelineItems.value[index].message = $event,
                                                            label: "Message",
                                                            variant: "outlined",
                                                            density: "comfortable",
                                                            class: "mb-2"
                                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                          createVNode("div", { class: "mb-2" }, [
                                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Point color"),
                                                            createVNode("div", { class: "color-selector-container" }, [
                                                              createVNode(VBtnToggle, {
                                                                modelValue: timelineItems.value[index].color,
                                                                "onUpdate:modelValue": ($event) => timelineItems.value[index].color = $event,
                                                                mandatory: "",
                                                                density: "comfortable"
                                                              }, {
                                                                default: withCtx(() => [
                                                                  (openBlock(), createBlock(Fragment, null, renderList(["primary", "secondary", "success", "info", "warning", "error"], (color) => {
                                                                    return createVNode(VBtn, {
                                                                      key: color,
                                                                      value: color,
                                                                      color,
                                                                      size: "small",
                                                                      variant: "tonal",
                                                                      width: "40",
                                                                      height: "40",
                                                                      class: "ma-1"
                                                                    }, null, 8, ["value", "color"]);
                                                                  }), 64))
                                                                ]),
                                                                _: 2
                                                              }, 1032, ["modelValue", "onUpdate:modelValue"])
                                                            ])
                                                          ])
                                                        ]),
                                                        _: 2
                                                      }, 1024)
                                                    ]),
                                                    _: 2
                                                  }, 1024);
                                                }), 128))
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ], 64)) : createCommentVNode("", true)
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "templates" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-file-document-outline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Card Templates")
                                          ]),
                                          createVNode(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props: props2 }) => [
                                              createVNode(VBtn, mergeProps({
                                                icon: "mdi-help-circle-outline",
                                                variant: "text",
                                                size: "small"
                                              }, props2), null, 16)
                                            ]),
                                            default: withCtx(() => [
                                              createVNode("span", null, "Apply pre-defined templates or save your own")
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common cards."),
                                        createVNode(VCard, { class: "mb-4" }, {
                                          default: withCtx(() => [
                                            createVNode(VList, null, {
                                              default: withCtx(() => [
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("timeline"),
                                                  "prepend-icon": "mdi-timeline",
                                                  title: "Timeline Card",
                                                  subtitle: "Activity timeline display"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("weather"),
                                                  "prepend-icon": "mdi-weather-partly-cloudy",
                                                  title: "Weather Card",
                                                  subtitle: "Weather forecast display"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("statistics"),
                                                  "prepend-icon": "mdi-currency-usd",
                                                  title: "Statistics Card",
                                                  subtitle: "Financial or metrics display"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("file"),
                                                  "prepend-icon": "mdi-file-document-outline",
                                                  title: "File Card",
                                                  subtitle: "Document or file presentation"
                                                }, null, 8, ["onClick"])
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VAlert, {
                                          type: "info",
                                          variant: "tonal",
                                          class: "mb-4"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(" Applying a template will replace your current card settings. ")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-content-save")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Save Current Card")
                                        ]),
                                        createVNode(VTextField, {
                                          modelValue: customTemplateName.value,
                                          "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                          label: "Template Name",
                                          variant: "outlined",
                                          density: "comfortable",
                                          "prepend-inner-icon": "mdi-tag",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VBtn, {
                                          color: "primary",
                                          variant: "tonal",
                                          onClick: saveCurrentTemplate
                                        }, {
                                          default: withCtx(() => [
                                            createVNode(VIcon, { start: "" }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-content-save")
                                              ]),
                                              _: 1
                                            }),
                                            createTextVNode(" Save Current Card ")
                                          ]),
                                          _: 1
                                        })
                                      ])
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"])
                            ]),
                            _: 1
                          })
                        ]),
                        _: 1
                      })
                    ]),
                    createVNode("div", { class: "preview-area pa-4 d-flex flex-column" }, [
                      createVNode("div", { class: "d-flex justify-space-between align-center mb-3" }, [
                        createVNode("div", null, [
                          createVNode(VChip, {
                            color: "primary",
                            variant: "flat",
                            size: "small",
                            class: "mr-2"
                          }, {
                            default: withCtx(() => [
                              createVNode(VIcon, {
                                start: "",
                                size: "small"
                              }, {
                                default: withCtx(() => [
                                  createTextVNode("mdi-eye")
                                ]),
                                _: 1
                              }),
                              createTextVNode(" Live preview ")
                            ]),
                            _: 1
                          })
                        ])
                      ]),
                      createVNode("div", { class: "preview-canvas flex-grow-1 d-flex align-center justify-center pa-4" }, [
                        createVNode(VCard, {
                          elevation: cardProperties.value.elevation,
                          variant: cardVariant.value,
                          color: cardColor.value !== "default" ? cardColor.value : void 0,
                          loading: cardProperties.value.loading,
                          disabled: cardProperties.value.disabled,
                          class: ["mx-auto preview-component", { "hover-effect": cardProperties.value.hoverEffect }],
                          rounded: cardProperties.value.rounded,
                          style: `padding: ${cardProperties.value.padding}px;`
                        }, {
                          default: withCtx(() => [
                            cardProperties.value.image ? (openBlock(), createBlock(VImg, {
                              key: 0,
                              src: cardProperties.value.image,
                              height: "200",
                              cover: ""
                            }, null, 8, ["src"])) : createCommentVNode("", true),
                            cardProperties.value.title ? (openBlock(), createBlock(VCardTitle, { key: 1 }, {
                              default: withCtx(() => [
                                cardProperties.value.icon ? (openBlock(), createBlock(VIcon, {
                                  key: 0,
                                  start: "",
                                  color: iconColor.value !== "default" ? iconColor.value : void 0
                                }, {
                                  default: withCtx(() => [
                                    createTextVNode(toDisplayString(cardProperties.value.icon), 1)
                                  ]),
                                  _: 1
                                }, 8, ["color"])) : createCommentVNode("", true),
                                createTextVNode(" " + toDisplayString(cardProperties.value.title), 1)
                              ]),
                              _: 1
                            })) : createCommentVNode("", true),
                            cardProperties.value.subtitle ? (openBlock(), createBlock(VCardSubtitle, { key: 2 }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString(cardProperties.value.subtitle), 1)
                              ]),
                              _: 1
                            })) : createCommentVNode("", true),
                            cardProperties.value.text ? (openBlock(), createBlock(VCardText, { key: 3 }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString(cardProperties.value.text), 1)
                              ]),
                              _: 1
                            })) : createCommentVNode("", true),
                            cardProperties.value.showSparkline ? (openBlock(), createBlock(VCardText, { key: 4 }, {
                              default: withCtx(() => [
                                createVNode("div", { class: "d-flex flex-column align-center" }, [
                                  createVNode(VSparkline, {
                                    "model-value": cardProperties.value.sparklineData,
                                    "line-width": cardProperties.value.sparklineLineWidth,
                                    color: sparklineColor.value !== "default" ? sparklineColor.value : void 0,
                                    gradient: cardProperties.value.sparklineGradient ? [sparklineColor.value !== "default" ? sparklineColor.value : "primary"] : void 0,
                                    labels: cardProperties.value.sparklineShowLabels ? cardProperties.value.sparklineLabels : void 0,
                                    padding: "16",
                                    "auto-draw": "",
                                    smooth: ""
                                  }, null, 8, ["model-value", "line-width", "color", "gradient", "labels"])
                                ])
                              ]),
                              _: 1
                            })) : createCommentVNode("", true),
                            cardProperties.value.showTimeline ? (openBlock(), createBlock(VCardText, { key: 5 }, {
                              default: withCtx(() => [
                                createVNode("div", { class: "font-weight-bold ms-1 mb-2" }, "Today"),
                                createVNode(VTimeline, {
                                  align: "start",
                                  density: "compact"
                                }, {
                                  default: withCtx(() => [
                                    (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value.slice(0, timelineItemsCount.value), (item, i) => {
                                      return openBlock(), createBlock(VTimelineItem, {
                                        key: i,
                                        "dot-color": item.color,
                                        size: "x-small"
                                      }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("div", { class: "font-weight-normal" }, [
                                              createVNode("strong", null, toDisplayString(item.title), 1),
                                              createTextVNode(" @" + toDisplayString((/* @__PURE__ */ new Date()).getHours()) + ":" + toDisplayString((/* @__PURE__ */ new Date()).getMinutes()), 1)
                                            ]),
                                            createVNode("div", null, toDisplayString(item.message), 1)
                                          ])
                                        ]),
                                        _: 2
                                      }, 1032, ["dot-color"]);
                                    }), 128))
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            })) : createCommentVNode("", true),
                            createVNode(VCardActions, {
                              class: "justify-" + cardProperties.value.buttonPosition
                            }, {
                              default: withCtx(() => [
                                cardProperties.value.showButtons ? (openBlock(), createBlock(VBtn, {
                                  key: 0,
                                  color: buttonColor.value !== "default" ? buttonColor.value : void 0,
                                  variant: buttonVariant.value,
                                  style: cardProperties.value.buttonWidth > 0 ? `width: ${cardProperties.value.buttonWidth}%` : "",
                                  "prepend-icon": cardProperties.value.buttonIcon,
                                  to: cardProperties.value.buttonLink
                                }, {
                                  default: withCtx(() => [
                                    createTextVNode(toDisplayString(cardProperties.value.buttonText || "Action"), 1)
                                  ]),
                                  _: 1
                                }, 8, ["color", "variant", "style", "prepend-icon", "to"])) : createCommentVNode("", true),
                                cardProperties.value.showProgress ? (openBlock(), createBlock("div", {
                                  key: 1,
                                  class: getProgressPositionClass()
                                }, [
                                  createVNode(VProgressCircular, {
                                    "model-value": cardProperties.value.progressValue,
                                    color: progressColor.value !== "default" ? progressColor.value : void 0,
                                    size: progressSize.value,
                                    indeterminate: cardProperties.value.indeterminate,
                                    width: cardProperties.value.progressWidth,
                                    "bg-color": cardProperties.value.showProgressBg ? progressBgColor.value !== "default" ? progressBgColor.value : "grey-lighten-3" : void 0
                                  }, createSlots({ _: 2 }, [
                                    cardProperties.value.showProgressLabel ? {
                                      name: "default",
                                      fn: withCtx(() => [
                                        createVNode("span", {
                                          class: getProgressLabelClass()
                                        }, toDisplayString(getProgressLabelText()), 3)
                                      ]),
                                      key: "0"
                                    } : void 0
                                  ]), 1032, ["model-value", "color", "size", "indeterminate", "width", "bg-color"])
                                ], 2)) : createCommentVNode("", true)
                              ]),
                              _: 1
                            }, 8, ["class"])
                          ]),
                          _: 1
                        }, 8, ["elevation", "variant", "color", "loading", "disabled", "class", "rounded", "style"])
                      ]),
                      unref(userStore).user.isPremium ? (openBlock(), createBlock("div", {
                        key: 0,
                        class: "d-flex justify-end mt-3"
                      }, [
                        createVNode(VBtn, {
                          color: "secondary",
                          class: "mr-2",
                          "prepend-icon": "mdi-eye",
                          onClick: previewCode
                        }, {
                          default: withCtx(() => [
                            createTextVNode(" Preview Code ")
                          ]),
                          _: 1
                        }),
                        createVNode(VBtn, {
                          color: "primary",
                          "prepend-icon": "mdi-content-copy",
                          onClick: copyCardCode
                        }, {
                          default: withCtx(() => [
                            createTextVNode(" Copy code ")
                          ]),
                          _: 1
                        })
                      ])) : (openBlock(), createBlock("div", {
                        key: 1,
                        class: "d-flex justify-end mt-3"
                      }, [
                        createVNode(premiumFeatures, {
                          title: "Preview code",
                          icon: "mdi-eye",
                          featureKey: "studioComponents",
                          variant: "elevated",
                          class: "premium-feature-button mr-2",
                          type: "button"
                        }),
                        createVNode(premiumFeatures, {
                          title: "Copy code",
                          icon: "mdi-content-copy",
                          featureKey: "studioComponents",
                          variant: "elevated",
                          class: "premium-feature-button",
                          type: "button"
                        })
                      ]))
                    ]),
                    createVNode(VDialog, {
                      modelValue: showCodeDialog.value,
                      "onUpdate:modelValue": ($event) => showCodeDialog.value = $event,
                      width: "800"
                    }, {
                      default: withCtx(() => [
                        createVNode(VCard, null, {
                          default: withCtx(() => [
                            createVNode(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                              default: withCtx(() => [
                                createVNode("span", null, "Generated Code"),
                                createVNode(VBtn, {
                                  icon: "mdi-close",
                                  variant: "text",
                                  onClick: ($event) => showCodeDialog.value = false
                                }, null, 8, ["onClick"])
                              ]),
                              _: 1
                            }),
                            createVNode(VCardText, null, {
                              default: withCtx(() => [
                                createVNode(VSheet, {
                                  class: "bg-grey-darken-4 rounded pa-4",
                                  style: { "white-space": "pre-wrap", "font-family": "monospace" }
                                }, {
                                  default: withCtx(() => [
                                    createTextVNode(toDisplayString(generatedCode.value), 1)
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            }),
                            createVNode(VCardActions, { class: "pa-4" }, {
                              default: withCtx(() => [
                                createVNode(VBtn, {
                                  color: "primary",
                                  "prepend-icon": "mdi-content-copy",
                                  onClick: copyCardCode
                                }, {
                                  default: withCtx(() => [
                                    createTextVNode(" Copy to Clipboard ")
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            })
                          ]),
                          _: 1
                        })
                      ]),
                      _: 1
                    }, 8, ["modelValue", "onUpdate:modelValue"]),
                    createVNode(Snackbar, {
                      modelValue: showSnackbarMessage.value,
                      "onUpdate:modelValue": ($event) => showSnackbarMessage.value = $event,
                      text: snackbarText.value,
                      color: snackbarColor.value
                    }, null, 8, ["modelValue", "onUpdate:modelValue", "text", "color"])
                  ];
                }
              }),
              _: 1
            }, _parent2, _scopeId));
          } else {
            return [
              createVNode(VMain, { class: "w-100 h-100 overflow-hidden d-flex" }, {
                default: withCtx(() => [
                  createVNode("div", { class: "control-panel" }, [
                    createVNode(VCard, {
                      flat: "",
                      class: "fill-height"
                    }, {
                      default: withCtx(() => [
                        createVNode("div", { class: "px-4 py-2 d-flex align-center" }, [
                          createVNode(VChip, {
                            color: "success",
                            "prepend-icon": "mdi-vuejs",
                            size: "small",
                            class: "mr-2 px-4 py-2"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("Vue.js")
                            ]),
                            _: 1
                          }),
                          createVNode(VChip, {
                            color: "info",
                            "prepend-icon": "mdi-vuetify",
                            size: "small",
                            class: "mr-2 px-4 py-2"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("Vuetify")
                            ]),
                            _: 1
                          }),
                          createVNode(premiumFeatures, {
                            "premium-link": "/subscribe",
                            title: "Studio components",
                            icon: "mdi-palette",
                            type: "chip",
                            "feature-key": "studioComponents"
                          })
                        ]),
                        createVNode(VTabs, {
                          modelValue: propertiesTab.value,
                          "onUpdate:modelValue": ($event) => propertiesTab.value = $event,
                          color: "primary",
                          "align-tabs": "center",
                          class: "px-4"
                        }, {
                          default: withCtx(() => [
                            createVNode(VTab, { value: "content" }, {
                              default: withCtx(() => [
                                createTextVNode("Content")
                              ]),
                              _: 1
                            }),
                            createVNode(VTab, { value: "style" }, {
                              default: withCtx(() => [
                                createTextVNode("Style")
                              ]),
                              _: 1
                            }),
                            createVNode(VTab, { value: "actions" }, {
                              default: withCtx(() => [
                                createTextVNode("Actions")
                              ]),
                              _: 1
                            }),
                            createVNode(VTab, { value: "data" }, {
                              default: withCtx(() => [
                                createTextVNode("Data")
                              ]),
                              _: 1
                            }),
                            createVNode(VTab, { value: "templates" }, {
                              default: withCtx(() => [
                                createTextVNode("Templates")
                              ]),
                              _: 1
                            })
                          ]),
                          _: 1
                        }, 8, ["modelValue", "onUpdate:modelValue"]),
                        createVNode(VDivider),
                        createVNode(VCardText, {
                          class: "pa-0 fill-height",
                          style: { "overflow-y": "auto" }
                        }, {
                          default: withCtx(() => [
                            createVNode(VWindow, {
                              modelValue: propertiesTab.value,
                              "onUpdate:modelValue": ($event) => propertiesTab.value = $event,
                              class: "fill-height"
                            }, {
                              default: withCtx(() => [
                                createVNode(VWindowItem, { value: "content" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode(VTextField, {
                                        modelValue: cardProperties.value.title,
                                        "onUpdate:modelValue": ($event) => cardProperties.value.title = $event,
                                        label: "Title",
                                        variant: "outlined",
                                        density: "comfortable",
                                        clearable: "",
                                        "prepend-inner-icon": "mdi-format-title",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VTextField, {
                                        modelValue: cardProperties.value.subtitle,
                                        "onUpdate:modelValue": ($event) => cardProperties.value.subtitle = $event,
                                        label: "Subtitle",
                                        variant: "outlined",
                                        density: "comfortable",
                                        clearable: "",
                                        "prepend-inner-icon": "mdi-format-text",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VTextarea, {
                                        modelValue: cardProperties.value.text,
                                        "onUpdate:modelValue": ($event) => cardProperties.value.text = $event,
                                        label: "Text",
                                        variant: "outlined",
                                        density: "comfortable",
                                        "auto-grow": "",
                                        rows: "3",
                                        "row-height": "20",
                                        clearable: "",
                                        "prepend-inner-icon": "mdi-text",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VTextField, {
                                        modelValue: cardProperties.value.image,
                                        "onUpdate:modelValue": ($event) => cardProperties.value.image = $event,
                                        label: "Image URL",
                                        variant: "outlined",
                                        density: "comfortable",
                                        clearable: "",
                                        "prepend-inner-icon": "mdi-image",
                                        class: "mb-1"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode("div", { class: "d-flex flex-wrap mb-4" }, [
                                        createVNode(VChipGroup, {
                                          mandatory: "",
                                          "selected-class": "bg-primary text-white"
                                        }, {
                                          default: withCtx(() => [
                                            createVNode(VChip, {
                                              size: "small",
                                              value: "none",
                                              onClick: removeImage
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("None")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VChip, {
                                              size: "small",
                                              value: "mountains",
                                              onClick: ($event) => setImage("mountains")
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("Mountains")
                                              ]),
                                              _: 1
                                            }, 8, ["onClick"]),
                                            createVNode(VChip, {
                                              size: "small",
                                              value: "beach",
                                              onClick: ($event) => setImage("beach")
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("Beach")
                                              ]),
                                              _: 1
                                            }, 8, ["onClick"]),
                                            createVNode(VChip, {
                                              size: "small",
                                              value: "forest",
                                              onClick: ($event) => setImage("forest")
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("Forest")
                                              ]),
                                              _: 1
                                            }, 8, ["onClick"])
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      createVNode(VSelect, {
                                        modelValue: cardProperties.value.icon,
                                        "onUpdate:modelValue": ($event) => cardProperties.value.icon = $event,
                                        items: unref(icons),
                                        label: "Icon",
                                        variant: "outlined",
                                        density: "comfortable",
                                        clearable: "",
                                        "prepend-inner-icon": "mdi-pencil",
                                        class: "mb-4"
                                      }, {
                                        item: withCtx(({ item, props: props2 }) => [
                                          createVNode(VListItem, props2, {
                                            prepend: withCtx(() => [
                                              createVNode(VIcon, {
                                                icon: item.raw
                                              }, null, 8, ["icon"])
                                            ]),
                                            _: 2
                                          }, 1040)
                                        ]),
                                        _: 1
                                      }, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                      cardProperties.value.icon ? (openBlock(), createBlock("div", {
                                        key: 0,
                                        class: "mb-4"
                                      }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-1" }, "Icon color"),
                                        createVNode("div", { class: "color-selector-container" }, [
                                          createVNode(VBtnToggle, {
                                            modelValue: iconColorIndex.value,
                                            "onUpdate:modelValue": ($event) => iconColorIndex.value = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            "selected-class": "border-primary"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                return createVNode(VBtn, {
                                                  key: color.value,
                                                  value: index,
                                                  color: color.value !== "default" ? color.value : void 0,
                                                  size: "small",
                                                  variant: "tonal",
                                                  width: "40",
                                                  height: "40",
                                                  class: "ma-1"
                                                }, {
                                                  default: withCtx(() => [
                                                    color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-palette-outline")
                                                      ]),
                                                      _: 1
                                                    })) : createCommentVNode("", true)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value", "color"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ])
                                      ])) : createCommentVNode("", true)
                                    ])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "style" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Elevation"),
                                        createVNode("div", { class: "d-flex align-center" }, [
                                          createVNode(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-card-outline")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VSlider, {
                                            modelValue: cardProperties.value.elevation,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.elevation = $event,
                                            min: "0",
                                            max: "24",
                                            step: "1",
                                            "thumb-label": "",
                                            class: "mx-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-layers-triple")
                                            ]),
                                            _: 1
                                          })
                                        ])
                                      ]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-1" }, "Variant"),
                                        createVNode(VChipGroup, {
                                          modelValue: cardVariantIndex.value,
                                          "onUpdate:modelValue": ($event) => cardVariantIndex.value = $event,
                                          mandatory: "",
                                          "selected-class": "bg-primary text-white"
                                        }, {
                                          default: withCtx(() => [
                                            (openBlock(), createBlock(Fragment, null, renderList(cardVariants, (variant, index) => {
                                              return createVNode(VChip, {
                                                key: variant,
                                                size: "small",
                                                value: index
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(toDisplayString(variant), 1)
                                                ]),
                                                _: 2
                                              }, 1032, ["value"]);
                                            }), 64))
                                          ]),
                                          _: 1
                                        }, 8, ["modelValue", "onUpdate:modelValue"])
                                      ]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-1" }, "Color"),
                                        createVNode("div", { class: "color-selector-container" }, [
                                          createVNode(VBtnToggle, {
                                            modelValue: cardColorIndex.value,
                                            "onUpdate:modelValue": ($event) => cardColorIndex.value = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            "selected-class": "border-primary"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                return createVNode(VBtn, {
                                                  key: color.value,
                                                  value: index,
                                                  color: color.value !== "default" ? color.value : void 0,
                                                  size: "small",
                                                  variant: "tonal",
                                                  width: "40",
                                                  height: "40",
                                                  class: "ma-1"
                                                }, {
                                                  default: withCtx(() => [
                                                    color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-palette-outline")
                                                      ]),
                                                      _: 1
                                                    })) : createCommentVNode("", true)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value", "color"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ])
                                      ]),
                                      createVNode(VSwitch, {
                                        modelValue: cardProperties.value.loading,
                                        "onUpdate:modelValue": ($event) => cardProperties.value.loading = $event,
                                        color: "primary",
                                        label: "Loading",
                                        "hide-details": "",
                                        class: "mb-2"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VSwitch, {
                                        modelValue: cardProperties.value.disabled,
                                        "onUpdate:modelValue": ($event) => cardProperties.value.disabled = $event,
                                        color: "primary",
                                        label: "Disabled",
                                        "hide-details": "",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VSwitch, {
                                        modelValue: cardProperties.value.hoverEffect,
                                        "onUpdate:modelValue": ($event) => cardProperties.value.hoverEffect = $event,
                                        color: "primary",
                                        label: "Hover effect",
                                        "hide-details": "",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Padding"),
                                        createVNode("div", { class: "d-flex align-center" }, [
                                          createVNode(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-arrow-collapse")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VSlider, {
                                            modelValue: cardProperties.value.padding,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.padding = $event,
                                            min: "0",
                                            max: "16",
                                            step: "4",
                                            "thumb-label": "",
                                            class: "mx-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-arrow-expand")
                                            ]),
                                            _: 1
                                          })
                                        ])
                                      ]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Border radius"),
                                        createVNode("div", { class: "d-flex align-center" }, [
                                          createVNode(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-square-outline")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VSlider, {
                                            modelValue: roundedIndex.value,
                                            "onUpdate:modelValue": ($event) => roundedIndex.value = $event,
                                            min: 0,
                                            max: roundedLabels.length - 1,
                                            step: "1",
                                            "thumb-label": "",
                                            "thumb-label-text": roundedLabels[roundedIndex.value],
                                            class: "mx-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue", "max", "thumb-label-text"]),
                                          createVNode(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-rectangle-outline")
                                            ]),
                                            _: 1
                                          })
                                        ])
                                      ])
                                    ])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "actions" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode(VSwitch, {
                                        modelValue: cardProperties.value.showButtons,
                                        "onUpdate:modelValue": ($event) => cardProperties.value.showButtons = $event,
                                        color: "primary",
                                        label: "Show buttons",
                                        "hide-details": "",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      cardProperties.value.showButtons ? (openBlock(), createBlock(Fragment, { key: 0 }, [
                                        createVNode(VTextField, {
                                          modelValue: cardProperties.value.buttonText,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.buttonText = $event,
                                          label: "Button text",
                                          variant: "outlined",
                                          density: "comfortable",
                                          "prepend-inner-icon": "mdi-button-cursor",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Button style"),
                                          createVNode(VChipGroup, {
                                            modelValue: buttonVariantIndex.value,
                                            "onUpdate:modelValue": ($event) => buttonVariantIndex.value = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(buttonVariants, (variant, index) => {
                                                return createVNode(VChip, {
                                                  key: variant,
                                                  size: "small",
                                                  value: index
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(toDisplayString(variant), 1)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Button color"),
                                          createVNode("div", { class: "d-flex overflow-x-auto" }, [
                                            createVNode(VBtnToggle, {
                                              modelValue: buttonColorIndex.value,
                                              "onUpdate:modelValue": ($event) => buttonColorIndex.value = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              class: "d-flex"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                  return createVNode(VBtn, {
                                                    key: color.value,
                                                    value: index,
                                                    color: color.value !== "default" ? color.value : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: "ma-1"
                                                  }, {
                                                    default: withCtx(() => [
                                                      color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("mdi-palette-outline")
                                                        ]),
                                                        _: 1
                                                      })) : createCommentVNode("", true)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value", "color"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Button width"),
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VChip, { size: "x-small" }, {
                                              default: withCtx(() => [
                                                createTextVNode("Auto")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: cardProperties.value.buttonWidth,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.buttonWidth = $event,
                                              min: "0",
                                              max: "100",
                                              step: "25",
                                              "thumb-label": "",
                                              "thumb-label-text": cardProperties.value.buttonWidth + "%",
                                              class: "mx-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue", "thumb-label-text"]),
                                            createVNode(VChip, { size: "x-small" }, {
                                              default: withCtx(() => [
                                                createTextVNode("100%")
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Button position"),
                                          createVNode("div", { class: "d-flex justify-space-between" }, [
                                            createVNode(VBtnToggle, {
                                              modelValue: cardProperties.value.buttonPosition,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.buttonPosition = $event,
                                              mandatory: "",
                                              density: "comfortable"
                                            }, {
                                              default: withCtx(() => [
                                                createVNode(VBtn, {
                                                  value: "start",
                                                  icon: "mdi-format-align-left"
                                                }),
                                                createVNode(VBtn, {
                                                  value: "center",
                                                  icon: "mdi-format-align-center"
                                                }),
                                                createVNode(VBtn, {
                                                  value: "end",
                                                  icon: "mdi-format-align-right"
                                                }),
                                                createVNode(VBtn, {
                                                  value: "space-between",
                                                  icon: "mdi-format-align-justify"
                                                })
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ])
                                        ]),
                                        createVNode(VAutocomplete, {
                                          modelValue: cardProperties.value.buttonIcon,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.buttonIcon = $event,
                                          items: unref(icons),
                                          label: "Icon",
                                          variant: "outlined",
                                          density: "comfortable",
                                          class: "mb-2 mt-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                        createVNode(VTextField, {
                                          modelValue: cardProperties.value.buttonLink,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.buttonLink = $event,
                                          label: "Link",
                                          variant: "outlined",
                                          density: "comfortable",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                      ], 64)) : createCommentVNode("", true),
                                      createVNode(VSwitch, {
                                        modelValue: cardProperties.value.showProgress,
                                        "onUpdate:modelValue": ($event) => cardProperties.value.showProgress = $event,
                                        color: "primary",
                                        label: "Show progress circular",
                                        "hide-details": "",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      cardProperties.value.showProgress ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Progress value"),
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-percent")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: cardProperties.value.progressValue,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.progressValue = $event,
                                              min: "0",
                                              max: "100",
                                              step: "5",
                                              "thumb-label": "",
                                              "thumb-label-text": cardProperties.value.progressValue + "%",
                                              class: "mx-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue", "thumb-label-text"])
                                          ]),
                                          createVNode("div", { class: "d-flex align-center mt-2" }, [
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-circle-slice-8")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: cardProperties.value.progressWidth,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.progressWidth = $event,
                                              min: "1",
                                              max: "10",
                                              step: "1",
                                              "thumb-label": "",
                                              "thumb-label-text": cardProperties.value.progressWidth,
                                              class: "mx-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue", "thumb-label-text"])
                                          ])
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: cardProperties.value.indeterminate,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.indeterminate = $event,
                                          color: "primary",
                                          "hide-details": "",
                                          class: "mb-2",
                                          label: "Indeterminate"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Progress color"),
                                          createVNode("div", { class: "d-flex flex-wrap gap-2" }, [
                                            createVNode(VBtnToggle, {
                                              modelValue: progressColorIndex.value,
                                              "onUpdate:modelValue": ($event) => progressColorIndex.value = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              "selected-class": "border-primary"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                  return createVNode(VBtn, {
                                                    key: color.value,
                                                    value: index,
                                                    color: color.value !== "default" ? color.value : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: "ma-1"
                                                  }, {
                                                    default: withCtx(() => [
                                                      color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("mdi-palette-outline")
                                                        ]),
                                                        _: 1
                                                      })) : createCommentVNode("", true)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value", "color"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Progress size"),
                                          createVNode(VChipGroup, {
                                            modelValue: progressSizeIndex.value,
                                            "onUpdate:modelValue": ($event) => progressSizeIndex.value = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(progressSizes, (size, index) => {
                                                return createVNode(VChip, {
                                                  key: size,
                                                  size: "small",
                                                  value: index
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(toDisplayString(size), 1)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Progress position"),
                                          createVNode(VSelect, {
                                            modelValue: cardProperties.value.progressPosition,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.progressPosition = $event,
                                            items: progressPositions,
                                            label: "Position",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: cardProperties.value.showProgressLabel,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.showProgressLabel = $event,
                                          color: "primary",
                                          "hide-details": "",
                                          class: "mb-2",
                                          label: "Show value"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        cardProperties.value.showProgressLabel ? (openBlock(), createBlock("div", {
                                          key: 0,
                                          class: "mb-4"
                                        }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Label style"),
                                          createVNode(VChipGroup, {
                                            modelValue: cardProperties.value.progressLabelStyle,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.progressLabelStyle = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "value"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Value (%)")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "custom"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Custom")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"]),
                                          cardProperties.value.progressLabelStyle === "custom" ? (openBlock(), createBlock(VTextField, {
                                            key: 0,
                                            modelValue: cardProperties.value.progressLabelText,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.progressLabelText = $event,
                                            label: "Custom label",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mt-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                        ])) : createCommentVNode("", true),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode(VSwitch, {
                                            modelValue: cardProperties.value.showProgressBg,
                                            "onUpdate:modelValue": ($event) => cardProperties.value.showProgressBg = $event,
                                            color: "primary",
                                            "hide-details": "",
                                            class: "mb-2",
                                            label: "Background color"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          cardProperties.value.showProgressBg ? (openBlock(), createBlock("div", {
                                            key: 0,
                                            class: "d-flex flex-wrap gap-2 mt-2"
                                          }, [
                                            createVNode(VBtnToggle, {
                                              modelValue: progressBgColorIndex.value,
                                              "onUpdate:modelValue": ($event) => progressBgColorIndex.value = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              "selected-class": "border-primary"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                  return createVNode(VBtn, {
                                                    key: color.value,
                                                    value: index,
                                                    color: color.value !== "default" ? color.value : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: "ma-1"
                                                  }, {
                                                    default: withCtx(() => [
                                                      color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("mdi-palette-outline")
                                                        ]),
                                                        _: 1
                                                      })) : createCommentVNode("", true)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value", "color"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ])) : createCommentVNode("", true)
                                        ])
                                      ], 64)) : createCommentVNode("", true)
                                    ])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "data" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                        createVNode("div", { class: "d-flex align-center" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-chart-line")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Data Visualization")
                                        ]),
                                        createVNode(VTooltip, { location: "bottom" }, {
                                          activator: withCtx(({ props: props2 }) => [
                                            createVNode(VBtn, mergeProps({
                                              icon: "mdi-help-circle-outline",
                                              variant: "text",
                                              size: "small"
                                            }, props2), null, 16)
                                          ]),
                                          default: withCtx(() => [
                                            createVNode("span", null, "Add data visualizations to your card")
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      createVNode(VSwitch, {
                                        modelValue: cardProperties.value.showSparkline,
                                        "onUpdate:modelValue": ($event) => cardProperties.value.showSparkline = $event,
                                        color: "primary",
                                        label: "Show sparkline",
                                        "hide-details": "",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      cardProperties.value.showSparkline ? (openBlock(), createBlock(Fragment, { key: 0 }, [
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Sparkline color"),
                                          createVNode("div", { class: "color-selector-container" }, [
                                            createVNode(VBtnToggle, {
                                              modelValue: sparklineColorIndex.value,
                                              "onUpdate:modelValue": ($event) => sparklineColorIndex.value = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              "selected-class": "border-primary"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(cardColors, (color, index) => {
                                                  return createVNode(VBtn, {
                                                    key: color.value,
                                                    value: index,
                                                    color: color.value !== "default" ? color.value : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: "ma-1"
                                                  }, {
                                                    default: withCtx(() => [
                                                      color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("mdi-palette-outline")
                                                        ]),
                                                        _: 1
                                                      })) : createCommentVNode("", true)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value", "color"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Sparkline data"),
                                          createVNode(VTextarea, {
                                            modelValue: sparklineDataText.value,
                                            "onUpdate:modelValue": [($event) => sparklineDataText.value = $event, updateSparklineData],
                                            label: "Enter comma-separated values",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "auto-grow": "",
                                            rows: "2",
                                            "row-height": "20",
                                            class: "mb-2",
                                            hint: "Example: 0,2,5,9,5,10,3,5,0,0,1,8,2,9,0",
                                            "persistent-hint": ""
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Line width"),
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-minus")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: cardProperties.value.sparklineLineWidth,
                                              "onUpdate:modelValue": ($event) => cardProperties.value.sparklineLineWidth = $event,
                                              min: "1",
                                              max: "5",
                                              step: "1",
                                              "thumb-label": "",
                                              class: "mx-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-minus-thick")
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: cardProperties.value.sparklineGradient,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.sparklineGradient = $event,
                                          color: "primary",
                                          label: "Show gradient",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: cardProperties.value.sparklineShowLabels,
                                          "onUpdate:modelValue": ($event) => cardProperties.value.sparklineShowLabels = $event,
                                          color: "primary",
                                          label: "Show labels",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        cardProperties.value.sparklineShowLabels ? (openBlock(), createBlock("div", {
                                          key: 0,
                                          class: "mb-4"
                                        }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Labels"),
                                          createVNode(VTextarea, {
                                            modelValue: sparklineLabelsText.value,
                                            "onUpdate:modelValue": [($event) => sparklineLabelsText.value = $event, updateSparklineLabels],
                                            label: "Enter comma-separated labels",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "auto-grow": "",
                                            rows: "2",
                                            "row-height": "20",
                                            class: "mb-2",
                                            hint: "Example: Jan,Fév,Mar,Avr,Mai,Juin",
                                            "persistent-hint": ""
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ])) : createCommentVNode("", true)
                                      ], 64)) : createCommentVNode("", true),
                                      createVNode(VDivider, { class: "my-4" }),
                                      createVNode(VSwitch, {
                                        modelValue: cardProperties.value.showTimeline,
                                        "onUpdate:modelValue": ($event) => cardProperties.value.showTimeline = $event,
                                        color: "primary",
                                        label: "Show timeline",
                                        "hide-details": "",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      cardProperties.value.showTimeline ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Timeline items"),
                                          createVNode(VSelect, {
                                            modelValue: timelineItemsCount.value,
                                            "onUpdate:modelValue": ($event) => timelineItemsCount.value = $event,
                                            items: [1, 2, 3, 4, 5],
                                            label: "Number of items",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Timeline content"),
                                          createVNode(VExpansionPanels, { variant: "accordion" }, {
                                            default: withCtx(() => [
                                              (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value.slice(0, timelineItemsCount.value), (item, index) => {
                                                return openBlock(), createBlock(VExpansionPanel, { key: index }, {
                                                  default: withCtx(() => [
                                                    createVNode(VExpansionPanelTitle, null, {
                                                      default: withCtx(() => [
                                                        createTextVNode(" Item " + toDisplayString(index + 1) + ": " + toDisplayString(item.title), 1)
                                                      ]),
                                                      _: 2
                                                    }, 1024),
                                                    createVNode(VExpansionPanelText, null, {
                                                      default: withCtx(() => [
                                                        createVNode(VTextField, {
                                                          modelValue: timelineItems.value[index].title,
                                                          "onUpdate:modelValue": ($event) => timelineItems.value[index].title = $event,
                                                          label: "Title",
                                                          variant: "outlined",
                                                          density: "comfortable",
                                                          class: "mb-2"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        createVNode(VTextField, {
                                                          modelValue: timelineItems.value[index].message,
                                                          "onUpdate:modelValue": ($event) => timelineItems.value[index].message = $event,
                                                          label: "Message",
                                                          variant: "outlined",
                                                          density: "comfortable",
                                                          class: "mb-2"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        createVNode("div", { class: "mb-2" }, [
                                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Point color"),
                                                          createVNode("div", { class: "color-selector-container" }, [
                                                            createVNode(VBtnToggle, {
                                                              modelValue: timelineItems.value[index].color,
                                                              "onUpdate:modelValue": ($event) => timelineItems.value[index].color = $event,
                                                              mandatory: "",
                                                              density: "comfortable"
                                                            }, {
                                                              default: withCtx(() => [
                                                                (openBlock(), createBlock(Fragment, null, renderList(["primary", "secondary", "success", "info", "warning", "error"], (color) => {
                                                                  return createVNode(VBtn, {
                                                                    key: color,
                                                                    value: color,
                                                                    color,
                                                                    size: "small",
                                                                    variant: "tonal",
                                                                    width: "40",
                                                                    height: "40",
                                                                    class: "ma-1"
                                                                  }, null, 8, ["value", "color"]);
                                                                }), 64))
                                                              ]),
                                                              _: 2
                                                            }, 1032, ["modelValue", "onUpdate:modelValue"])
                                                          ])
                                                        ])
                                                      ]),
                                                      _: 2
                                                    }, 1024)
                                                  ]),
                                                  _: 2
                                                }, 1024);
                                              }), 128))
                                            ]),
                                            _: 1
                                          })
                                        ])
                                      ], 64)) : createCommentVNode("", true)
                                    ])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "templates" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                        createVNode("div", { class: "d-flex align-center" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-file-document-outline")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Card Templates")
                                        ]),
                                        createVNode(VTooltip, { location: "bottom" }, {
                                          activator: withCtx(({ props: props2 }) => [
                                            createVNode(VBtn, mergeProps({
                                              icon: "mdi-help-circle-outline",
                                              variant: "text",
                                              size: "small"
                                            }, props2), null, 16)
                                          ]),
                                          default: withCtx(() => [
                                            createVNode("span", null, "Apply pre-defined templates or save your own")
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common cards."),
                                      createVNode(VCard, { class: "mb-4" }, {
                                        default: withCtx(() => [
                                          createVNode(VList, null, {
                                            default: withCtx(() => [
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("timeline"),
                                                "prepend-icon": "mdi-timeline",
                                                title: "Timeline Card",
                                                subtitle: "Activity timeline display"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("weather"),
                                                "prepend-icon": "mdi-weather-partly-cloudy",
                                                title: "Weather Card",
                                                subtitle: "Weather forecast display"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("statistics"),
                                                "prepend-icon": "mdi-currency-usd",
                                                title: "Statistics Card",
                                                subtitle: "Financial or metrics display"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("file"),
                                                "prepend-icon": "mdi-file-document-outline",
                                                title: "File Card",
                                                subtitle: "Document or file presentation"
                                              }, null, 8, ["onClick"])
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VAlert, {
                                        type: "info",
                                        variant: "tonal",
                                        class: "mb-4"
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(" Applying a template will replace your current card settings. ")
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VDivider, { class: "my-4" }),
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-content-save")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Save Current Card")
                                      ]),
                                      createVNode(VTextField, {
                                        modelValue: customTemplateName.value,
                                        "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                        label: "Template Name",
                                        variant: "outlined",
                                        density: "comfortable",
                                        "prepend-inner-icon": "mdi-tag",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VBtn, {
                                        color: "primary",
                                        variant: "tonal",
                                        onClick: saveCurrentTemplate
                                      }, {
                                        default: withCtx(() => [
                                          createVNode(VIcon, { start: "" }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-content-save")
                                            ]),
                                            _: 1
                                          }),
                                          createTextVNode(" Save Current Card ")
                                        ]),
                                        _: 1
                                      })
                                    ])
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            }, 8, ["modelValue", "onUpdate:modelValue"])
                          ]),
                          _: 1
                        })
                      ]),
                      _: 1
                    })
                  ]),
                  createVNode("div", { class: "preview-area pa-4 d-flex flex-column" }, [
                    createVNode("div", { class: "d-flex justify-space-between align-center mb-3" }, [
                      createVNode("div", null, [
                        createVNode(VChip, {
                          color: "primary",
                          variant: "flat",
                          size: "small",
                          class: "mr-2"
                        }, {
                          default: withCtx(() => [
                            createVNode(VIcon, {
                              start: "",
                              size: "small"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("mdi-eye")
                              ]),
                              _: 1
                            }),
                            createTextVNode(" Live preview ")
                          ]),
                          _: 1
                        })
                      ])
                    ]),
                    createVNode("div", { class: "preview-canvas flex-grow-1 d-flex align-center justify-center pa-4" }, [
                      createVNode(VCard, {
                        elevation: cardProperties.value.elevation,
                        variant: cardVariant.value,
                        color: cardColor.value !== "default" ? cardColor.value : void 0,
                        loading: cardProperties.value.loading,
                        disabled: cardProperties.value.disabled,
                        class: ["mx-auto preview-component", { "hover-effect": cardProperties.value.hoverEffect }],
                        rounded: cardProperties.value.rounded,
                        style: `padding: ${cardProperties.value.padding}px;`
                      }, {
                        default: withCtx(() => [
                          cardProperties.value.image ? (openBlock(), createBlock(VImg, {
                            key: 0,
                            src: cardProperties.value.image,
                            height: "200",
                            cover: ""
                          }, null, 8, ["src"])) : createCommentVNode("", true),
                          cardProperties.value.title ? (openBlock(), createBlock(VCardTitle, { key: 1 }, {
                            default: withCtx(() => [
                              cardProperties.value.icon ? (openBlock(), createBlock(VIcon, {
                                key: 0,
                                start: "",
                                color: iconColor.value !== "default" ? iconColor.value : void 0
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(toDisplayString(cardProperties.value.icon), 1)
                                ]),
                                _: 1
                              }, 8, ["color"])) : createCommentVNode("", true),
                              createTextVNode(" " + toDisplayString(cardProperties.value.title), 1)
                            ]),
                            _: 1
                          })) : createCommentVNode("", true),
                          cardProperties.value.subtitle ? (openBlock(), createBlock(VCardSubtitle, { key: 2 }, {
                            default: withCtx(() => [
                              createTextVNode(toDisplayString(cardProperties.value.subtitle), 1)
                            ]),
                            _: 1
                          })) : createCommentVNode("", true),
                          cardProperties.value.text ? (openBlock(), createBlock(VCardText, { key: 3 }, {
                            default: withCtx(() => [
                              createTextVNode(toDisplayString(cardProperties.value.text), 1)
                            ]),
                            _: 1
                          })) : createCommentVNode("", true),
                          cardProperties.value.showSparkline ? (openBlock(), createBlock(VCardText, { key: 4 }, {
                            default: withCtx(() => [
                              createVNode("div", { class: "d-flex flex-column align-center" }, [
                                createVNode(VSparkline, {
                                  "model-value": cardProperties.value.sparklineData,
                                  "line-width": cardProperties.value.sparklineLineWidth,
                                  color: sparklineColor.value !== "default" ? sparklineColor.value : void 0,
                                  gradient: cardProperties.value.sparklineGradient ? [sparklineColor.value !== "default" ? sparklineColor.value : "primary"] : void 0,
                                  labels: cardProperties.value.sparklineShowLabels ? cardProperties.value.sparklineLabels : void 0,
                                  padding: "16",
                                  "auto-draw": "",
                                  smooth: ""
                                }, null, 8, ["model-value", "line-width", "color", "gradient", "labels"])
                              ])
                            ]),
                            _: 1
                          })) : createCommentVNode("", true),
                          cardProperties.value.showTimeline ? (openBlock(), createBlock(VCardText, { key: 5 }, {
                            default: withCtx(() => [
                              createVNode("div", { class: "font-weight-bold ms-1 mb-2" }, "Today"),
                              createVNode(VTimeline, {
                                align: "start",
                                density: "compact"
                              }, {
                                default: withCtx(() => [
                                  (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value.slice(0, timelineItemsCount.value), (item, i) => {
                                    return openBlock(), createBlock(VTimelineItem, {
                                      key: i,
                                      "dot-color": item.color,
                                      size: "x-small"
                                    }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("div", { class: "font-weight-normal" }, [
                                            createVNode("strong", null, toDisplayString(item.title), 1),
                                            createTextVNode(" @" + toDisplayString((/* @__PURE__ */ new Date()).getHours()) + ":" + toDisplayString((/* @__PURE__ */ new Date()).getMinutes()), 1)
                                          ]),
                                          createVNode("div", null, toDisplayString(item.message), 1)
                                        ])
                                      ]),
                                      _: 2
                                    }, 1032, ["dot-color"]);
                                  }), 128))
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          })) : createCommentVNode("", true),
                          createVNode(VCardActions, {
                            class: "justify-" + cardProperties.value.buttonPosition
                          }, {
                            default: withCtx(() => [
                              cardProperties.value.showButtons ? (openBlock(), createBlock(VBtn, {
                                key: 0,
                                color: buttonColor.value !== "default" ? buttonColor.value : void 0,
                                variant: buttonVariant.value,
                                style: cardProperties.value.buttonWidth > 0 ? `width: ${cardProperties.value.buttonWidth}%` : "",
                                "prepend-icon": cardProperties.value.buttonIcon,
                                to: cardProperties.value.buttonLink
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(toDisplayString(cardProperties.value.buttonText || "Action"), 1)
                                ]),
                                _: 1
                              }, 8, ["color", "variant", "style", "prepend-icon", "to"])) : createCommentVNode("", true),
                              cardProperties.value.showProgress ? (openBlock(), createBlock("div", {
                                key: 1,
                                class: getProgressPositionClass()
                              }, [
                                createVNode(VProgressCircular, {
                                  "model-value": cardProperties.value.progressValue,
                                  color: progressColor.value !== "default" ? progressColor.value : void 0,
                                  size: progressSize.value,
                                  indeterminate: cardProperties.value.indeterminate,
                                  width: cardProperties.value.progressWidth,
                                  "bg-color": cardProperties.value.showProgressBg ? progressBgColor.value !== "default" ? progressBgColor.value : "grey-lighten-3" : void 0
                                }, createSlots({ _: 2 }, [
                                  cardProperties.value.showProgressLabel ? {
                                    name: "default",
                                    fn: withCtx(() => [
                                      createVNode("span", {
                                        class: getProgressLabelClass()
                                      }, toDisplayString(getProgressLabelText()), 3)
                                    ]),
                                    key: "0"
                                  } : void 0
                                ]), 1032, ["model-value", "color", "size", "indeterminate", "width", "bg-color"])
                              ], 2)) : createCommentVNode("", true)
                            ]),
                            _: 1
                          }, 8, ["class"])
                        ]),
                        _: 1
                      }, 8, ["elevation", "variant", "color", "loading", "disabled", "class", "rounded", "style"])
                    ]),
                    unref(userStore).user.isPremium ? (openBlock(), createBlock("div", {
                      key: 0,
                      class: "d-flex justify-end mt-3"
                    }, [
                      createVNode(VBtn, {
                        color: "secondary",
                        class: "mr-2",
                        "prepend-icon": "mdi-eye",
                        onClick: previewCode
                      }, {
                        default: withCtx(() => [
                          createTextVNode(" Preview Code ")
                        ]),
                        _: 1
                      }),
                      createVNode(VBtn, {
                        color: "primary",
                        "prepend-icon": "mdi-content-copy",
                        onClick: copyCardCode
                      }, {
                        default: withCtx(() => [
                          createTextVNode(" Copy code ")
                        ]),
                        _: 1
                      })
                    ])) : (openBlock(), createBlock("div", {
                      key: 1,
                      class: "d-flex justify-end mt-3"
                    }, [
                      createVNode(premiumFeatures, {
                        title: "Preview code",
                        icon: "mdi-eye",
                        featureKey: "studioComponents",
                        variant: "elevated",
                        class: "premium-feature-button mr-2",
                        type: "button"
                      }),
                      createVNode(premiumFeatures, {
                        title: "Copy code",
                        icon: "mdi-content-copy",
                        featureKey: "studioComponents",
                        variant: "elevated",
                        class: "premium-feature-button",
                        type: "button"
                      })
                    ]))
                  ]),
                  createVNode(VDialog, {
                    modelValue: showCodeDialog.value,
                    "onUpdate:modelValue": ($event) => showCodeDialog.value = $event,
                    width: "800"
                  }, {
                    default: withCtx(() => [
                      createVNode(VCard, null, {
                        default: withCtx(() => [
                          createVNode(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                            default: withCtx(() => [
                              createVNode("span", null, "Generated Code"),
                              createVNode(VBtn, {
                                icon: "mdi-close",
                                variant: "text",
                                onClick: ($event) => showCodeDialog.value = false
                              }, null, 8, ["onClick"])
                            ]),
                            _: 1
                          }),
                          createVNode(VCardText, null, {
                            default: withCtx(() => [
                              createVNode(VSheet, {
                                class: "bg-grey-darken-4 rounded pa-4",
                                style: { "white-space": "pre-wrap", "font-family": "monospace" }
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(toDisplayString(generatedCode.value), 1)
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }),
                          createVNode(VCardActions, { class: "pa-4" }, {
                            default: withCtx(() => [
                              createVNode(VBtn, {
                                color: "primary",
                                "prepend-icon": "mdi-content-copy",
                                onClick: copyCardCode
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(" Copy to Clipboard ")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          })
                        ]),
                        _: 1
                      })
                    ]),
                    _: 1
                  }, 8, ["modelValue", "onUpdate:modelValue"]),
                  createVNode(Snackbar, {
                    modelValue: showSnackbarMessage.value,
                    "onUpdate:modelValue": ($event) => showSnackbarMessage.value = $event,
                    text: snackbarText.value,
                    color: snackbarColor.value
                  }, null, 8, ["modelValue", "onUpdate:modelValue", "text", "color"])
                ]),
                _: 1
              })
            ];
          }
        }),
        _: 1
      }, _parent));
    };
  }
});

const _sfc_setup$5 = _sfc_main$5.setup;
_sfc_main$5.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/studioCard.vue");
  return _sfc_setup$5 ? _sfc_setup$5(props, ctx) : void 0;
};
const StudioEditor = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["__scopeId", "data-v-7998bce9"]]);

const formTemplates = {
  contact: [
    {
      type: "text",
      label: "Name",
      placeholder: "Enter your full name",
      value: "",
      required: true,
      icon: "mdi-account"
    },
    {
      type: "email",
      label: "Email",
      placeholder: "Enter your email address",
      value: "",
      required: true,
      icon: "mdi-email"
    },
    {
      type: "select",
      label: "Subject",
      placeholder: "Select a subject",
      value: "",
      options: "General Inquiry, Support Request, Feedback, Other",
      required: true,
      icon: "mdi-help-circle"
    },
    {
      type: "textarea",
      label: "Message",
      placeholder: "Enter your message",
      value: "",
      required: true,
      icon: "mdi-message-text"
    }
  ],
  login: [
    {
      type: "email",
      label: "Email",
      placeholder: "Enter your email address",
      value: "",
      required: true,
      icon: "mdi-email"
    },
    {
      type: "password",
      label: "Password",
      placeholder: "Enter your password",
      value: "",
      required: true,
      icon: "mdi-lock"
    },
    {
      type: "checkbox",
      label: "Remember me",
      placeholder: "",
      value: false,
      required: false
    }
  ],
  register: [
    {
      type: "text",
      label: "First Name",
      placeholder: "Enter your first name",
      value: "",
      required: true,
      icon: "mdi-account"
    },
    {
      type: "text",
      label: "Last Name",
      placeholder: "Enter your last name",
      value: "",
      required: true,
      icon: "mdi-account"
    },
    {
      type: "email",
      label: "Email",
      placeholder: "Enter your email address",
      value: "",
      required: true,
      icon: "mdi-email"
    },
    {
      type: "password",
      label: "Password",
      placeholder: "Create a password",
      value: "",
      required: true,
      icon: "mdi-lock"
    },
    {
      type: "password",
      label: "Confirm Password",
      placeholder: "Confirm your password",
      value: "",
      required: true,
      icon: "mdi-lock-check"
    },
    {
      type: "checkbox",
      label: "I agree to the Terms and Conditions",
      placeholder: "",
      value: false,
      required: true
    }
  ],
  survey: [
    {
      type: "text",
      label: "Name",
      placeholder: "Enter your name (optional)",
      value: "",
      required: false,
      icon: "mdi-account"
    },
    {
      type: "select",
      label: "How did you hear about us?",
      placeholder: "Select an option",
      value: "",
      options: "Social Media, Friend/Colleague, Search Engine, Advertisement, Other",
      required: true,
      icon: "mdi-help-circle"
    },
    {
      type: "radio",
      label: "How would you rate our service?",
      placeholder: "",
      value: "",
      options: "Excellent, Good, Average, Poor, Very Poor",
      required: true,
      icon: "mdi-star"
    },
    {
      type: "textarea",
      label: "Additional Comments",
      placeholder: "Please share any additional feedback",
      value: "",
      required: false,
      icon: "mdi-comment-text-outline"
    }
  ]
};
const getFormTemplate = (templateName) => {
  return JSON.parse(JSON.stringify(formTemplates[templateName] || []));
};

const makeVRadioGroupProps = propsFactory({
  height: {
    type: [Number, String],
    default: "auto"
  },
  ...makeVInputProps(),
  ...omit(makeSelectionControlGroupProps(), ["multiple"]),
  trueIcon: {
    type: IconValue,
    default: "$radioOn"
  },
  falseIcon: {
    type: IconValue,
    default: "$radioOff"
  },
  type: {
    type: String,
    default: "radio"
  }
}, "VRadioGroup");
const VRadioGroup = genericComponent()({
  name: "VRadioGroup",
  inheritAttrs: false,
  props: makeVRadioGroupProps(),
  emits: {
    "update:modelValue": (value) => true
  },
  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const uid = getUid();
    const id = computed(() => props.id || `radio-group-${uid}`);
    const model = useProxiedModel(props, "modelValue");
    useRender(() => {
      const [rootAttrs, controlAttrs] = filterInputAttrs(attrs);
      const inputProps = VInput.filterProps(props);
      const controlProps = VSelectionControl.filterProps(props);
      const label = slots.label ? slots.label({
        label: props.label,
        props: {
          for: id.value
        }
      }) : props.label;
      return createVNode(VInput, mergeProps({
        "class": ["v-radio-group", props.class],
        "style": props.style
      }, rootAttrs, inputProps, {
        "modelValue": model.value,
        "onUpdate:modelValue": ($event) => model.value = $event,
        "id": id.value
      }), {
        ...slots,
        default: (_ref2) => {
          let {
            id: id2,
            messagesId,
            isDisabled,
            isReadonly
          } = _ref2;
          return createVNode(Fragment, null, [label && createVNode(VLabel, {
            "id": id2.value
          }, {
            default: () => [label]
          }), createVNode(VSelectionControlGroup, mergeProps(controlProps, {
            "id": id2.value,
            "aria-describedby": messagesId.value,
            "defaultsTarget": "VRadio",
            "trueIcon": props.trueIcon,
            "falseIcon": props.falseIcon,
            "type": props.type,
            "disabled": isDisabled.value,
            "readonly": isReadonly.value,
            "aria-labelledby": label ? id2.value : void 0,
            "multiple": false
          }, controlAttrs, {
            "modelValue": model.value,
            "onUpdate:modelValue": ($event) => model.value = $event
          }), slots)]);
        }
      });
    });
    return {};
  }
});

const makeVRadioProps = propsFactory({
  ...makeVSelectionControlProps({
    falseIcon: "$radioOff",
    trueIcon: "$radioOn"
  })
}, "VRadio");
const VRadio = genericComponent()({
  name: "VRadio",
  props: makeVRadioProps(),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    useRender(() => {
      const controlProps = VSelectionControl.filterProps(props);
      return createVNode(VSelectionControl, mergeProps(controlProps, {
        "class": ["v-radio", props.class],
        "style": props.style,
        "type": "radio"
      }), slots);
    });
    return {};
  }
});

const _sfc_main$4 = /* @__PURE__ */ defineComponent({
  __name: "studioForm",
  __ssrInlineRender: true,
  emits: ["update:content", "save"],
  setup(__props, { emit: __emit }) {
    const emit = __emit;
    const tab = ref("content");
    const previewMode = ref("desktop");
    const showCodeDialog = ref(false);
    const generatedCode = ref("");
    const snackbarColor = ref("success");
    const formValid = ref(false);
    const showSuccessMessage = ref(false);
    const showSnackbarMessage = ref(false);
    const snackbarText = ref("Code copied to clipboard");
    const form = ref(null);
    const codeTab = ref("template");
    const customTemplateName = ref("");
    ref([]);
    const fieldTypes = [
      "text",
      "password",
      "textarea",
      "select",
      "radio",
      "checkbox",
      "email"
    ];
    const fieldVariants = ["outlined", "filled", "plain", "underlined", "solo"];
    const densityOptions = ["default", "comfortable", "compact"];
    const messageLocations = ["bottom", "top"];
    const buttonVariants = ["elevated", "flat", "tonal", "outlined", "text", "plain"];
    const colors = [
      { text: "Default", value: "default" },
      { text: "Primary", value: "primary" },
      { text: "Secondary", value: "secondary" },
      { text: "Success", value: "success" },
      { text: "Info", value: "info" },
      { text: "Warning", value: "warning" },
      { text: "Error", value: "error" }
    ];
    const formFields = ref([
      {
        type: "text",
        label: "Email",
        placeholder: "Enter your email",
        value: "",
        required: true
      },
      {
        type: "select",
        label: "Subject",
        placeholder: "Select a subject",
        value: "",
        options: "Information, Support, Other",
        required: true
      },
      {
        type: "textarea",
        label: "Message",
        placeholder: "Enter your message",
        value: "",
        required: true
      }
    ]);
    const formProperties = ref({
      variant: "outlined",
      density: "default",
      color: "primary",
      disabled: false,
      readonly: false,
      persistentPlaceholder: false,
      validateOnBlur: true,
      validateOnInput: false,
      successMessage: "Form submitted successfully!",
      errorMessage: "Please correct the errors in the form.",
      messageLocation: "bottom",
      submitButtonText: "Submit",
      cancelButtonText: "Reset",
      submitButtonColor: "primary",
      cancelButtonColor: "secondary",
      buttonVariant: "tonal",
      blockButtons: false
    });
    const addField = () => {
      formFields.value.push({
        type: "text",
        label: "New Field",
        placeholder: "Enter a value",
        value: "",
        required: false,
        counter: false
      });
    };
    const removeField = (index) => {
      formFields.value.splice(index, 1);
    };
    const submitForm = async () => {
      if (form.value) {
        const { valid } = await form.value.validate();
        if (valid) {
          showSuccessMessage.value = true;
          setTimeout(() => {
            showSuccessMessage.value = false;
          }, 3e3);
        }
      }
    };
    const resetForm = () => {
      if (form.value) {
        form.value.reset();
      }
      showSuccessMessage.value = false;
      formFields.value.forEach((field) => {
        field.value = "";
      });
    };
    const applyTemplate = (templateType) => {
      const templateFields = getFormTemplate(templateType);
      if (templateFields && templateFields.length > 0) {
        formFields.value = templateFields;
        snackbarText.value = `${templateType.charAt(0).toUpperCase() + templateType.slice(1)} template applied successfully!`;
        showSnackbarMessage.value = true;
      }
    };
    const generateFormCode = () => {
      const templateCode = generateTemplateCode();
      const scriptCode = generateScriptCode();
      const themeCode = theme;
      switch (codeTab.value) {
        case "template":
          return templateCode;
        case "script":
          return scriptCode;
        case "theme":
          return themeCode;
        default:
          return `${templateCode}

${scriptCode}

${themeCode}`;
      }
    };
    const generateTemplateCode = () => {
      let code = "<v-form\n";
      code += '  v-model="formValid"\n';
      code += '  ref="formRef"\n';
      if (formProperties.value.validateOnBlur) code += "  validate-on-blur\n";
      if (formProperties.value.validateOnInput) code += "  validate-on-input\n";
      code += ">\n";
      code += '  <v-alert v-if="showSuccessMessage" type="success" class="mb-4">\n';
      code += `    ${formProperties.value.successMessage}
`;
      code += "  </v-alert>\n\n";
      formFields.value.forEach((field) => {
        var _a;
        switch (field.type) {
          case "text":
          case "email":
            code += `  <v-text-field
`;
            break;
          case "password":
            code += `  <v-text-field
    type="password"
`;
            break;
          case "textarea":
            code += `  <v-textarea
`;
            break;
          case "select":
            code += `  <v-select
`;
            break;
          case "radio":
            code += `  <v-radio-group
`;
            break;
          case "checkbox":
            code += `  <v-checkbox
`;
            break;
        }
        code += `    v-model="form.${field.label.toLowerCase().replace(/\s+/g, "_")}"
`;
        code += `    label="${field.label}"
`;
        if (field.placeholder) code += `    placeholder="${field.placeholder}"
`;
        if (field.icon) code += `    prepend-icon="${field.icon}"
`;
        if (field.counter) code += `    counter
`;
        if (formProperties.value.variant !== "outlined") code += `    variant="${formProperties.value.variant}"
`;
        if (formProperties.value.density !== "default") code += `    density="${formProperties.value.density}"
`;
        if (formProperties.value.color !== "primary") code += `    color="${formProperties.value.color}"
`;
        if (formProperties.value.disabled) code += `    disabled
`;
        if (formProperties.value.readonly) code += `    readonly
`;
        if (formProperties.value.persistentPlaceholder) code += `    persistent-placeholder
`;
        if (field.required) {
          code += `    :rules="[`;
          code += `v => !!v || 'This field is required'`;
          if (field.type === "email") {
            code += `,
      v => /^[w.-]+@([w-]+.)+[w-]{2,4}$/.test(v) || 'Invalid email format'`;
          } else if (field.type === "password") {
            code += `,
      v => v.length >= 8 || 'Password must be at least 8 characters',
      v => /[A-Z]/.test(v) || 'Password must contain at least one uppercase letter',
      v => /[a-z]/.test(v) || 'Password must contain at least one lowercase letter',
      v => /[0-9]/.test(v) || 'Password must contain at least one number',
      v => /[^A-Za-z0-9]/.test(v) || 'Password must contain at least one special character'`;
          }
          code += `]"
`;
        }
        if (field.type === "select" || field.type === "radio") {
          code += `    :items="[${(_a = field.options) == null ? void 0 : _a.split(",").map((o) => `'${o.trim()}'`).join(", ")}]"
`;
        }
        if (field.type === "textarea") {
          code += `    auto-grow
`;
          code += `    rows="3"
`;
        }
        code += `    class="mb-4"
`;
        code += `  ></${field.type === "text" || field.type === "email" || field.type === "password" ? "v-text-field" : field.type === "textarea" ? "v-textarea" : field.type === "select" ? "v-select" : field.type === "radio" ? "v-radio-group" : "v-checkbox"}>
`;
      });
      code += '\n  <div class="d-flex';
      if (formProperties.value.blockButtons) {
        code += " flex-column";
      } else {
        code += " justify-end";
      }
      code += ' mt-4">\n';
      code += `    <v-btn color="${formProperties.value.cancelButtonColor}"`;
      if (formProperties.value.blockButtons) {
        code += ' class="mb-2"';
      } else {
        code += ' class="mr-2"';
      }
      code += ` variant="${formProperties.value.buttonVariant}"`;
      if (formProperties.value.blockButtons) code += " block";
      code += ` @click="resetForm">${formProperties.value.cancelButtonText}</v-btn>
`;
      code += `    <v-btn color="${formProperties.value.submitButtonColor}" :disabled="!formValid"`;
      code += ` variant="${formProperties.value.buttonVariant}"`;
      if (formProperties.value.blockButtons) code += " block";
      code += ` @click="submitForm">${formProperties.value.submitButtonText}</v-btn>
`;
      code += "  </div>\n";
      code += "</v-form>";
      return code;
    };
    const generateScriptCode = () => {
      let code = `
import { ref } from 'vue';

const form = ref({`;
      formFields.value.forEach((field, index) => {
        const fieldName = field.label.toLowerCase().replace(/\s+/g, "_");
        code += `
  ${fieldName}: ${field.type === "checkbox" ? "false" : '""'}`;
        if (index < formFields.value.length - 1) {
          code += ",";
        }
      });
      code += `
});

const formValid = ref(false);
const showSuccessMessage = ref(false);
const formRef = ref(null);

const submitForm = () => {
  console.log('Form submitted:', form.value);
  showSuccessMessage.value = true;
  setTimeout(() => {
    showSuccessMessage.value = false;
  }, 3000);
};

const resetForm = () => {
  if (formRef.value) {
    formRef.value.reset();
  }
  showSuccessMessage.value = false;
};`;
      return code;
    };
    const previewCode = () => {
      generatedCode.value = generateFormCode();
      showCodeDialog.value = true;
    };
    const copyFormCode = () => {
      const templateCode = generateTemplateCode();
      const scriptCode = generateScriptCode();
      const fullCode = `${templateCode}

${scriptCode}`;
      (void 0).clipboard.writeText(fullCode).then(() => {
        snackbarText.value = "Code copied to clipboard!";
        showSnackbarMessage.value = true;
      }).catch((err) => {
        console.error("Error copying:", err);
      });
    };
    const copyCurrentTab = () => {
      let code;
      switch (codeTab.value) {
        case "template":
          code = generateTemplateCode();
          break;
        case "script":
          code = generateScriptCode();
          break;
        case "theme":
          code = theme;
          break;
        default:
          code = "";
      }
      (void 0).navigator.clipboard.writeText(code).catch((err) => {
        console.error("Error copying:", err);
      });
    };
    const generateFormCodeSilently = () => {
      const code = generateFormCode();
      emit("update:content", code);
    };
    const previewWidth = computed(() => {
      switch (previewMode.value) {
        case "mobile":
          return 320;
        case "tablet":
          return 600;
        default:
          return 900;
      }
    });
    const resetAllFields = () => {
      if (confirm("Are you sure you want to reset all form fields? This action cannot be undone.")) {
        formFields.value = [];
        snackbarText.value = "All form fields have been reset";
        showSnackbarMessage.value = true;
      }
    };
    const saveCurrentTemplate = async () => {
      if (!customTemplateName.value) {
        snackbarText.value = "Please enter a template name";
        showSnackbarMessage.value = true;
        return;
      }
      const templateData = {
        ...JSON.parse(JSON.stringify(formProperties.value)),
        fields: [...formFields.value]
      };
      const response = await userStore.saveTemplate(customTemplateName.value, templateData, "form");
      if (response) {
        snackbarText.value = `Template "${customTemplateName.value}" saved successfully`;
        showSnackbarMessage.value = true;
        customTemplateName.value = "";
        await userStore.loadData();
      } else {
        snackbarText.value = `Failed to save template "${customTemplateName.value}"`;
        showSnackbarMessage.value = true;
      }
    };
    const userStore = useUserStore();
    watch(() => {
      return "";
    }, () => {
    }, { immediate: true });
    watch([formFields, formProperties], () => {
      generateFormCodeSilently();
    }, { deep: true });
    watch(previewMode, () => {
      generateFormCodeSilently();
    });
    return (_ctx, _push, _parent, _attrs) => {
      _push(ssrRenderComponent(VApp, _attrs, {
        default: withCtx((_, _push2, _parent2, _scopeId) => {
          if (_push2) {
            _push2(ssrRenderComponent(VMain, { class: "w-100 h-100 overflow-hidden d-flex" }, {
              default: withCtx((_2, _push3, _parent3, _scopeId2) => {
                if (_push3) {
                  _push3(`<div class="control-panel" style="${ssrRenderStyle({ "width": "350px" })}" data-v-bbd8fce9${_scopeId2}>`);
                  _push3(ssrRenderComponent(VCard, {
                    flat: "",
                    class: "fill-height"
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(`<div class="px-4 py-2 d-flex align-center" data-v-bbd8fce9${_scopeId3}>`);
                        _push4(ssrRenderComponent(VChip, {
                          color: "success",
                          "prepend-icon": "mdi-vuejs",
                          size: "small",
                          class: "mr-2 px-4 py-2"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(`Vue.js`);
                            } else {
                              return [
                                createTextVNode("Vue.js")
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VChip, {
                          color: "info",
                          "prepend-icon": "mdi-vuetify",
                          size: "small",
                          class: "mr-2 px-4 py-2"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(`Vuetify`);
                            } else {
                              return [
                                createTextVNode("Vuetify")
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(`</div><div class="px-4 py-2 d-flex align-center justify-space-between" data-v-bbd8fce9${_scopeId3}><div data-v-bbd8fce9${_scopeId3}>`);
                        _push4(ssrRenderComponent(VChipGroup, {
                          modelValue: previewMode.value,
                          "onUpdate:modelValue": ($event) => previewMode.value = $event,
                          mandatory: "",
                          "selected-class": "bg-primary text-white"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VChip, {
                                size: "small",
                                value: "desktop"
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VIcon, {
                                      start: "",
                                      size: "small"
                                    }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`mdi-monitor`);
                                        } else {
                                          return [
                                            createTextVNode("mdi-monitor")
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(` Desktop `);
                                  } else {
                                    return [
                                      createVNode(VIcon, {
                                        start: "",
                                        size: "small"
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode("mdi-monitor")
                                        ]),
                                        _: 1
                                      }),
                                      createTextVNode(" Desktop ")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VChip, {
                                size: "small",
                                value: "tablet"
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VIcon, {
                                      start: "",
                                      size: "small"
                                    }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`mdi-tablet`);
                                        } else {
                                          return [
                                            createTextVNode("mdi-tablet")
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(` Tablet `);
                                  } else {
                                    return [
                                      createVNode(VIcon, {
                                        start: "",
                                        size: "small"
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode("mdi-tablet")
                                        ]),
                                        _: 1
                                      }),
                                      createTextVNode(" Tablet ")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VChip, {
                                size: "small",
                                value: "mobile"
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VIcon, {
                                      start: "",
                                      size: "small"
                                    }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`mdi-cellphone`);
                                        } else {
                                          return [
                                            createTextVNode("mdi-cellphone")
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(` Mobile `);
                                  } else {
                                    return [
                                      createVNode(VIcon, {
                                        start: "",
                                        size: "small"
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode("mdi-cellphone")
                                        ]),
                                        _: 1
                                      }),
                                      createTextVNode(" Mobile ")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VChip, {
                                  size: "small",
                                  value: "desktop"
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VIcon, {
                                      start: "",
                                      size: "small"
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode("mdi-monitor")
                                      ]),
                                      _: 1
                                    }),
                                    createTextVNode(" Desktop ")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VChip, {
                                  size: "small",
                                  value: "tablet"
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VIcon, {
                                      start: "",
                                      size: "small"
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode("mdi-tablet")
                                      ]),
                                      _: 1
                                    }),
                                    createTextVNode(" Tablet ")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VChip, {
                                  size: "small",
                                  value: "mobile"
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VIcon, {
                                      start: "",
                                      size: "small"
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode("mdi-cellphone")
                                      ]),
                                      _: 1
                                    }),
                                    createTextVNode(" Mobile ")
                                  ]),
                                  _: 1
                                })
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(`</div></div>`);
                        _push4(ssrRenderComponent(VTabs, {
                          modelValue: tab.value,
                          "onUpdate:modelValue": ($event) => tab.value = $event,
                          color: "primary",
                          "align-tabs": "center",
                          class: "px-4"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VTab, { value: "content" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Content`);
                                  } else {
                                    return [
                                      createTextVNode("Content")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VTab, { value: "style" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Style`);
                                  } else {
                                    return [
                                      createTextVNode("Style")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VTab, { value: "validation" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Validation`);
                                  } else {
                                    return [
                                      createTextVNode("Validation")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VTab, { value: "templates" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Templates`);
                                  } else {
                                    return [
                                      createTextVNode("Templates")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VTab, { value: "buttons" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Buttons`);
                                  } else {
                                    return [
                                      createTextVNode("Buttons")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VTab, { value: "content" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Content")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "style" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Style")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "validation" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Validation")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "templates" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Templates")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "buttons" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Buttons")
                                  ]),
                                  _: 1
                                })
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VDivider, null, null, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VCardText, {
                          class: "pa-0 fill-height",
                          style: { "overflow-y": "auto" }
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VWindow, {
                                modelValue: tab.value,
                                "onUpdate:modelValue": ($event) => tab.value = $event,
                                class: "fill-height"
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VWindowItem, { value: "content" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-bbd8fce9${_scopeId6}><div class="section-title d-flex align-center mb-3 justify-space-between" data-v-bbd8fce9${_scopeId6}><div class="d-flex align-center" data-v-bbd8fce9${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-form-select`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-form-select")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-bbd8fce9${_scopeId6}>Form Fields</span></div>`);
                                          _push7(ssrRenderComponent(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props }, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VBtn, mergeProps({
                                                  icon: "mdi-help-circle-outline",
                                                  variant: "text",
                                                  size: "small"
                                                }, props), null, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VBtn, mergeProps({
                                                    icon: "mdi-help-circle-outline",
                                                    variant: "text",
                                                    size: "small"
                                                  }, props), null, 16)
                                                ];
                                              }
                                            }),
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<span data-v-bbd8fce9${_scopeId7}>Add, remove and configure form fields</span>`);
                                              } else {
                                                return [
                                                  createVNode("span", null, "Add, remove and configure form fields")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div>`);
                                          _push7(ssrRenderComponent(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<!--[-->`);
                                                ssrRenderList(formFields.value, (field, index) => {
                                                  _push8(`<div class="mb-4" data-v-bbd8fce9${_scopeId7}><div class="d-flex align-center justify-space-between mb-2" data-v-bbd8fce9${_scopeId7}><span class="text-subtitle-2" data-v-bbd8fce9${_scopeId7}>Field ${ssrInterpolate(index + 1)}</span>`);
                                                  _push8(ssrRenderComponent(VBtn, {
                                                    icon: "mdi-delete",
                                                    color: "error",
                                                    variant: "text",
                                                    density: "compact",
                                                    onClick: ($event) => removeField(index)
                                                  }, null, _parent8, _scopeId7));
                                                  _push8(`</div>`);
                                                  _push8(ssrRenderComponent(VSelect, {
                                                    modelValue: field.type,
                                                    "onUpdate:modelValue": ($event) => field.type = $event,
                                                    items: fieldTypes,
                                                    label: "Type",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-form-dropdown",
                                                    class: "mb-2"
                                                  }, null, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VTextField, {
                                                    modelValue: field.label,
                                                    "onUpdate:modelValue": ($event) => field.label = $event,
                                                    label: "Label",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-label",
                                                    class: "mb-2"
                                                  }, null, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VTextField, {
                                                    modelValue: field.placeholder,
                                                    "onUpdate:modelValue": ($event) => field.placeholder = $event,
                                                    label: "Placeholder",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-text-box",
                                                    class: "mb-2"
                                                  }, null, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VSelect, {
                                                    modelValue: field.icon,
                                                    "onUpdate:modelValue": ($event) => field.icon = $event,
                                                    items: unref(icons),
                                                    label: "Icon (optional)",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-emoticon",
                                                    class: "mb-2",
                                                    clearable: ""
                                                  }, {
                                                    item: withCtx(({ item, props }, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(ssrRenderComponent(VListItem, mergeProps({ ref_for: true }, props), {
                                                          prepend: withCtx((_8, _push10, _parent10, _scopeId9) => {
                                                            if (_push10) {
                                                              _push10(ssrRenderComponent(VIcon, {
                                                                icon: item.raw
                                                              }, null, _parent10, _scopeId9));
                                                            } else {
                                                              return [
                                                                createVNode(VIcon, {
                                                                  icon: item.raw
                                                                }, null, 8, ["icon"])
                                                              ];
                                                            }
                                                          }),
                                                          default: withCtx((_8, _push10, _parent10, _scopeId9) => {
                                                            if (_push10) {
                                                              _push10(ssrRenderComponent(VListItemTitle, null, {
                                                                default: withCtx((_9, _push11, _parent11, _scopeId10) => {
                                                                  if (_push11) {
                                                                    _push11(`${ssrInterpolate(item.raw.replace("mdi-", ""))}`);
                                                                  } else {
                                                                    return [
                                                                      createTextVNode(toDisplayString(item.raw.replace("mdi-", "")), 1)
                                                                    ];
                                                                  }
                                                                }),
                                                                _: 2
                                                              }, _parent10, _scopeId9));
                                                            } else {
                                                              return [
                                                                createVNode(VListItemTitle, null, {
                                                                  default: withCtx(() => [
                                                                    createTextVNode(toDisplayString(item.raw.replace("mdi-", "")), 1)
                                                                  ]),
                                                                  _: 2
                                                                }, 1024)
                                                              ];
                                                            }
                                                          }),
                                                          _: 2
                                                        }, _parent9, _scopeId8));
                                                      } else {
                                                        return [
                                                          createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                            prepend: withCtx(() => [
                                                              createVNode(VIcon, {
                                                                icon: item.raw
                                                              }, null, 8, ["icon"])
                                                            ]),
                                                            default: withCtx(() => [
                                                              createVNode(VListItemTitle, null, {
                                                                default: withCtx(() => [
                                                                  createTextVNode(toDisplayString(item.raw.replace("mdi-", "")), 1)
                                                                ]),
                                                                _: 2
                                                              }, 1024)
                                                            ]),
                                                            _: 2
                                                          }, 1040)
                                                        ];
                                                      }
                                                    }),
                                                    _: 2
                                                  }, _parent8, _scopeId7));
                                                  if (field.type === "select" || field.type === "radio" || field.type === "checkbox") {
                                                    _push8(ssrRenderComponent(VTextField, {
                                                      modelValue: field.options,
                                                      "onUpdate:modelValue": ($event) => field.options = $event,
                                                      label: "Options (comma separated)",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-format-list-bulleted",
                                                      class: "mb-2"
                                                    }, null, _parent8, _scopeId7));
                                                  } else {
                                                    _push8(`<!---->`);
                                                  }
                                                  _push8(`<div class="d-flex gap-2" data-v-bbd8fce9${_scopeId7}>`);
                                                  _push8(ssrRenderComponent(VSwitch, {
                                                    modelValue: field.required,
                                                    "onUpdate:modelValue": ($event) => field.required = $event,
                                                    color: "primary",
                                                    label: "Required",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, _parent8, _scopeId7));
                                                  if (field.type === "text") {
                                                    _push8(ssrRenderComponent(VSwitch, {
                                                      modelValue: field.counter,
                                                      "onUpdate:modelValue": ($event) => field.counter = $event,
                                                      color: "primary",
                                                      label: "Counter",
                                                      "hide-details": "",
                                                      class: "mb-2"
                                                    }, null, _parent8, _scopeId7));
                                                  } else {
                                                    _push8(`<!---->`);
                                                  }
                                                  _push8(`</div></div>`);
                                                });
                                                _push8(`<!--]-->`);
                                                _push8(ssrRenderComponent(VBtn, {
                                                  color: "primary",
                                                  "prepend-icon": "mdi-plus",
                                                  variant: "tonal",
                                                  block: "",
                                                  onClick: addField
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(` Add Field `);
                                                    } else {
                                                      return [
                                                        createTextVNode(" Add Field ")
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  (openBlock(true), createBlock(Fragment, null, renderList(formFields.value, (field, index) => {
                                                    return openBlock(), createBlock("div", {
                                                      key: index,
                                                      class: "mb-4"
                                                    }, [
                                                      createVNode("div", { class: "d-flex align-center justify-space-between mb-2" }, [
                                                        createVNode("span", { class: "text-subtitle-2" }, "Field " + toDisplayString(index + 1), 1),
                                                        createVNode(VBtn, {
                                                          icon: "mdi-delete",
                                                          color: "error",
                                                          variant: "text",
                                                          density: "compact",
                                                          onClick: ($event) => removeField(index)
                                                        }, null, 8, ["onClick"])
                                                      ]),
                                                      createVNode(VSelect, {
                                                        modelValue: field.type,
                                                        "onUpdate:modelValue": ($event) => field.type = $event,
                                                        items: fieldTypes,
                                                        label: "Type",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-form-dropdown",
                                                        class: "mb-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode(VTextField, {
                                                        modelValue: field.label,
                                                        "onUpdate:modelValue": ($event) => field.label = $event,
                                                        label: "Label",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-label",
                                                        class: "mb-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode(VTextField, {
                                                        modelValue: field.placeholder,
                                                        "onUpdate:modelValue": ($event) => field.placeholder = $event,
                                                        label: "Placeholder",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-text-box",
                                                        class: "mb-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode(VSelect, {
                                                        modelValue: field.icon,
                                                        "onUpdate:modelValue": ($event) => field.icon = $event,
                                                        items: unref(icons),
                                                        label: "Icon (optional)",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-emoticon",
                                                        class: "mb-2",
                                                        clearable: ""
                                                      }, {
                                                        item: withCtx(({ item, props }) => [
                                                          createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                            prepend: withCtx(() => [
                                                              createVNode(VIcon, {
                                                                icon: item.raw
                                                              }, null, 8, ["icon"])
                                                            ]),
                                                            default: withCtx(() => [
                                                              createVNode(VListItemTitle, null, {
                                                                default: withCtx(() => [
                                                                  createTextVNode(toDisplayString(item.raw.replace("mdi-", "")), 1)
                                                                ]),
                                                                _: 2
                                                              }, 1024)
                                                            ]),
                                                            _: 2
                                                          }, 1040)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                      field.type === "select" || field.type === "radio" || field.type === "checkbox" ? (openBlock(), createBlock(VTextField, {
                                                        key: 0,
                                                        modelValue: field.options,
                                                        "onUpdate:modelValue": ($event) => field.options = $event,
                                                        label: "Options (comma separated)",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-format-list-bulleted",
                                                        class: "mb-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                                      createVNode("div", { class: "d-flex gap-2" }, [
                                                        createVNode(VSwitch, {
                                                          modelValue: field.required,
                                                          "onUpdate:modelValue": ($event) => field.required = $event,
                                                          color: "primary",
                                                          label: "Required",
                                                          "hide-details": "",
                                                          class: "mb-2"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        field.type === "text" ? (openBlock(), createBlock(VSwitch, {
                                                          key: 0,
                                                          modelValue: field.counter,
                                                          "onUpdate:modelValue": ($event) => field.counter = $event,
                                                          color: "primary",
                                                          label: "Counter",
                                                          "hide-details": "",
                                                          class: "mb-2"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                                      ])
                                                    ]);
                                                  }), 128)),
                                                  createVNode(VBtn, {
                                                    color: "primary",
                                                    "prepend-icon": "mdi-plus",
                                                    variant: "tonal",
                                                    block: "",
                                                    onClick: addField
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(" Add Field ")
                                                    ]),
                                                    _: 1
                                                  })
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                                createVNode("div", { class: "d-flex align-center" }, [
                                                  createVNode(VIcon, {
                                                    color: "primary",
                                                    class: "mr-2"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-form-select")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode("span", { class: "text-h6" }, "Form Fields")
                                                ]),
                                                createVNode(VTooltip, { location: "bottom" }, {
                                                  activator: withCtx(({ props }) => [
                                                    createVNode(VBtn, mergeProps({
                                                      icon: "mdi-help-circle-outline",
                                                      variant: "text",
                                                      size: "small"
                                                    }, props), null, 16)
                                                  ]),
                                                  default: withCtx(() => [
                                                    createVNode("span", null, "Add, remove and configure form fields")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              createVNode(VCard, { class: "mb-4 pa-3" }, {
                                                default: withCtx(() => [
                                                  (openBlock(true), createBlock(Fragment, null, renderList(formFields.value, (field, index) => {
                                                    return openBlock(), createBlock("div", {
                                                      key: index,
                                                      class: "mb-4"
                                                    }, [
                                                      createVNode("div", { class: "d-flex align-center justify-space-between mb-2" }, [
                                                        createVNode("span", { class: "text-subtitle-2" }, "Field " + toDisplayString(index + 1), 1),
                                                        createVNode(VBtn, {
                                                          icon: "mdi-delete",
                                                          color: "error",
                                                          variant: "text",
                                                          density: "compact",
                                                          onClick: ($event) => removeField(index)
                                                        }, null, 8, ["onClick"])
                                                      ]),
                                                      createVNode(VSelect, {
                                                        modelValue: field.type,
                                                        "onUpdate:modelValue": ($event) => field.type = $event,
                                                        items: fieldTypes,
                                                        label: "Type",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-form-dropdown",
                                                        class: "mb-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode(VTextField, {
                                                        modelValue: field.label,
                                                        "onUpdate:modelValue": ($event) => field.label = $event,
                                                        label: "Label",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-label",
                                                        class: "mb-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode(VTextField, {
                                                        modelValue: field.placeholder,
                                                        "onUpdate:modelValue": ($event) => field.placeholder = $event,
                                                        label: "Placeholder",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-text-box",
                                                        class: "mb-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode(VSelect, {
                                                        modelValue: field.icon,
                                                        "onUpdate:modelValue": ($event) => field.icon = $event,
                                                        items: unref(icons),
                                                        label: "Icon (optional)",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-emoticon",
                                                        class: "mb-2",
                                                        clearable: ""
                                                      }, {
                                                        item: withCtx(({ item, props }) => [
                                                          createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                            prepend: withCtx(() => [
                                                              createVNode(VIcon, {
                                                                icon: item.raw
                                                              }, null, 8, ["icon"])
                                                            ]),
                                                            default: withCtx(() => [
                                                              createVNode(VListItemTitle, null, {
                                                                default: withCtx(() => [
                                                                  createTextVNode(toDisplayString(item.raw.replace("mdi-", "")), 1)
                                                                ]),
                                                                _: 2
                                                              }, 1024)
                                                            ]),
                                                            _: 2
                                                          }, 1040)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                      field.type === "select" || field.type === "radio" || field.type === "checkbox" ? (openBlock(), createBlock(VTextField, {
                                                        key: 0,
                                                        modelValue: field.options,
                                                        "onUpdate:modelValue": ($event) => field.options = $event,
                                                        label: "Options (comma separated)",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-format-list-bulleted",
                                                        class: "mb-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                                      createVNode("div", { class: "d-flex gap-2" }, [
                                                        createVNode(VSwitch, {
                                                          modelValue: field.required,
                                                          "onUpdate:modelValue": ($event) => field.required = $event,
                                                          color: "primary",
                                                          label: "Required",
                                                          "hide-details": "",
                                                          class: "mb-2"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        field.type === "text" ? (openBlock(), createBlock(VSwitch, {
                                                          key: 0,
                                                          modelValue: field.counter,
                                                          "onUpdate:modelValue": ($event) => field.counter = $event,
                                                          color: "primary",
                                                          label: "Counter",
                                                          "hide-details": "",
                                                          class: "mb-2"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                                      ])
                                                    ]);
                                                  }), 128)),
                                                  createVNode(VBtn, {
                                                    color: "primary",
                                                    "prepend-icon": "mdi-plus",
                                                    variant: "tonal",
                                                    block: "",
                                                    onClick: addField
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(" Add Field ")
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "style" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-bbd8fce9${_scopeId6}><div class="section-title d-flex align-center mb-3 justify-space-between" data-v-bbd8fce9${_scopeId6}><div class="d-flex align-center" data-v-bbd8fce9${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-palette`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-palette")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-bbd8fce9${_scopeId6}>Appearance</span></div>`);
                                          _push7(ssrRenderComponent(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props }, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VBtn, mergeProps({
                                                  icon: "mdi-help-circle-outline",
                                                  variant: "text",
                                                  size: "small"
                                                }, props), null, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VBtn, mergeProps({
                                                    icon: "mdi-help-circle-outline",
                                                    variant: "text",
                                                    size: "small"
                                                  }, props), null, 16)
                                                ];
                                              }
                                            }),
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<span data-v-bbd8fce9${_scopeId7}>Customize the visual appearance of form fields</span>`);
                                              } else {
                                                return [
                                                  createVNode("span", null, "Customize the visual appearance of form fields")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div><div class="mb-4" data-v-bbd8fce9${_scopeId6}><label class="text-subtitle-2 mb-2" data-v-bbd8fce9${_scopeId6}>Field Variant</label>`);
                                          _push7(ssrRenderComponent(VChipGroup, {
                                            modelValue: formProperties.value.variant,
                                            "onUpdate:modelValue": ($event) => formProperties.value.variant = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<!--[-->`);
                                                ssrRenderList(fieldVariants, (variant) => {
                                                  _push8(ssrRenderComponent(VChip, {
                                                    key: variant,
                                                    size: "small",
                                                    value: variant
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`${ssrInterpolate(variant)}`);
                                                      } else {
                                                        return [
                                                          createTextVNode(toDisplayString(variant), 1)
                                                        ];
                                                      }
                                                    }),
                                                    _: 2
                                                  }, _parent8, _scopeId7));
                                                });
                                                _push8(`<!--]-->`);
                                              } else {
                                                return [
                                                  (openBlock(), createBlock(Fragment, null, renderList(fieldVariants, (variant) => {
                                                    return createVNode(VChip, {
                                                      key: variant,
                                                      size: "small",
                                                      value: variant
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(toDisplayString(variant), 1)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value"]);
                                                  }), 64))
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div><div class="mb-4" data-v-bbd8fce9${_scopeId6}><label class="text-subtitle-2 mb-2" data-v-bbd8fce9${_scopeId6}>Density</label>`);
                                          _push7(ssrRenderComponent(VChipGroup, {
                                            modelValue: formProperties.value.density,
                                            "onUpdate:modelValue": ($event) => formProperties.value.density = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<!--[-->`);
                                                ssrRenderList(densityOptions, (density) => {
                                                  _push8(ssrRenderComponent(VChip, {
                                                    key: density,
                                                    size: "small",
                                                    value: density
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`${ssrInterpolate(density)}`);
                                                      } else {
                                                        return [
                                                          createTextVNode(toDisplayString(density), 1)
                                                        ];
                                                      }
                                                    }),
                                                    _: 2
                                                  }, _parent8, _scopeId7));
                                                });
                                                _push8(`<!--]-->`);
                                              } else {
                                                return [
                                                  (openBlock(), createBlock(Fragment, null, renderList(densityOptions, (density) => {
                                                    return createVNode(VChip, {
                                                      key: density,
                                                      size: "small",
                                                      value: density
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(toDisplayString(density), 1)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value"]);
                                                  }), 64))
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div>`);
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: formProperties.value.disabled,
                                            "onUpdate:modelValue": ($event) => formProperties.value.disabled = $event,
                                            color: "primary",
                                            label: "Disabled",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: formProperties.value.readonly,
                                            "onUpdate:modelValue": ($event) => formProperties.value.readonly = $event,
                                            color: "primary",
                                            label: "Read Only",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: formProperties.value.persistentPlaceholder,
                                            "onUpdate:modelValue": ($event) => formProperties.value.persistentPlaceholder = $event,
                                            color: "primary",
                                            label: "Persistent Placeholder",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          _push7(`<div class="mb-4" data-v-bbd8fce9${_scopeId6}><label class="text-subtitle-2 mb-2" data-v-bbd8fce9${_scopeId6}>Focus color</label>`);
                                          _push7(ssrRenderComponent(VBtnToggle, {
                                            modelValue: formProperties.value.color,
                                            "onUpdate:modelValue": ($event) => formProperties.value.color = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            "selected-class": "border-primary"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<!--[-->`);
                                                ssrRenderList(colors, (color) => {
                                                  _push8(ssrRenderComponent(VBtn, {
                                                    key: color.value,
                                                    value: color.value,
                                                    color: color.value !== "default" ? color.value : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        if (color.value === "default") {
                                                          _push9(ssrRenderComponent(VIcon, null, {
                                                            default: withCtx((_9, _push10, _parent10, _scopeId9) => {
                                                              if (_push10) {
                                                                _push10(`mdi-palette-outline`);
                                                              } else {
                                                                return [
                                                                  createTextVNode("mdi-palette-outline")
                                                                ];
                                                              }
                                                            }),
                                                            _: 2
                                                          }, _parent9, _scopeId8));
                                                        } else {
                                                          _push9(`<!---->`);
                                                        }
                                                      } else {
                                                        return [
                                                          color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ];
                                                      }
                                                    }),
                                                    _: 2
                                                  }, _parent8, _scopeId7));
                                                });
                                                _push8(`<!--]-->`);
                                              } else {
                                                return [
                                                  (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: color.value,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color", "class"]);
                                                  }), 64))
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div></div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                                createVNode("div", { class: "d-flex align-center" }, [
                                                  createVNode(VIcon, {
                                                    color: "primary",
                                                    class: "mr-2"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-palette")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode("span", { class: "text-h6" }, "Appearance")
                                                ]),
                                                createVNode(VTooltip, { location: "bottom" }, {
                                                  activator: withCtx(({ props }) => [
                                                    createVNode(VBtn, mergeProps({
                                                      icon: "mdi-help-circle-outline",
                                                      variant: "text",
                                                      size: "small"
                                                    }, props), null, 16)
                                                  ]),
                                                  default: withCtx(() => [
                                                    createVNode("span", null, "Customize the visual appearance of form fields")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-2" }, "Field Variant"),
                                                createVNode(VChipGroup, {
                                                  modelValue: formProperties.value.variant,
                                                  "onUpdate:modelValue": ($event) => formProperties.value.variant = $event,
                                                  mandatory: "",
                                                  "selected-class": "bg-primary text-white"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(fieldVariants, (variant) => {
                                                      return createVNode(VChip, {
                                                        key: variant,
                                                        size: "small",
                                                        value: variant
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode(toDisplayString(variant), 1)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-2" }, "Density"),
                                                createVNode(VChipGroup, {
                                                  modelValue: formProperties.value.density,
                                                  "onUpdate:modelValue": ($event) => formProperties.value.density = $event,
                                                  mandatory: "",
                                                  "selected-class": "bg-primary text-white"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(densityOptions, (density) => {
                                                      return createVNode(VChip, {
                                                        key: density,
                                                        size: "small",
                                                        value: density
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode(toDisplayString(density), 1)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode(VSwitch, {
                                                modelValue: formProperties.value.disabled,
                                                "onUpdate:modelValue": ($event) => formProperties.value.disabled = $event,
                                                color: "primary",
                                                label: "Disabled",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: formProperties.value.readonly,
                                                "onUpdate:modelValue": ($event) => formProperties.value.readonly = $event,
                                                color: "primary",
                                                label: "Read Only",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: formProperties.value.persistentPlaceholder,
                                                "onUpdate:modelValue": ($event) => formProperties.value.persistentPlaceholder = $event,
                                                color: "primary",
                                                label: "Persistent Placeholder",
                                                "hide-details": "",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-2" }, "Focus color"),
                                                createVNode(VBtnToggle, {
                                                  modelValue: formProperties.value.color,
                                                  "onUpdate:modelValue": ($event) => formProperties.value.color = $event,
                                                  mandatory: "",
                                                  density: "comfortable",
                                                  "selected-class": "border-primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                      return createVNode(VBtn, {
                                                        key: color.value,
                                                        value: color.value,
                                                        color: color.value !== "default" ? color.value : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                      }, {
                                                        default: withCtx(() => [
                                                          color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color", "class"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ])
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "validation" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-bbd8fce9${_scopeId6}><div class="section-title d-flex align-center mb-3" data-v-bbd8fce9${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-check-circle`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-check-circle")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-bbd8fce9${_scopeId6}>Validation</span></div>`);
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: formProperties.value.validateOnBlur,
                                            "onUpdate:modelValue": ($event) => formProperties.value.validateOnBlur = $event,
                                            color: "primary",
                                            label: "Validate on Blur",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: formProperties.value.validateOnInput,
                                            "onUpdate:modelValue": ($event) => formProperties.value.validateOnInput = $event,
                                            color: "primary",
                                            label: "Validate on Input",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VTextField, {
                                            modelValue: formProperties.value.successMessage,
                                            "onUpdate:modelValue": ($event) => formProperties.value.successMessage = $event,
                                            label: "Success Message",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "prepend-inner-icon": "mdi-check",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VTextField, {
                                            modelValue: formProperties.value.errorMessage,
                                            "onUpdate:modelValue": ($event) => formProperties.value.errorMessage = $event,
                                            label: "Error Message",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "prepend-inner-icon": "mdi-alert",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          _push7(`<div class="mb-4" data-v-bbd8fce9${_scopeId6}><label class="text-subtitle-2 mb-2" data-v-bbd8fce9${_scopeId6}>Message Position</label>`);
                                          _push7(ssrRenderComponent(VChipGroup, {
                                            modelValue: formProperties.value.messageLocation,
                                            "onUpdate:modelValue": ($event) => formProperties.value.messageLocation = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<!--[-->`);
                                                ssrRenderList(messageLocations, (location) => {
                                                  _push8(ssrRenderComponent(VChip, {
                                                    key: location,
                                                    size: "small",
                                                    value: location
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`${ssrInterpolate(location)}`);
                                                      } else {
                                                        return [
                                                          createTextVNode(toDisplayString(location), 1)
                                                        ];
                                                      }
                                                    }),
                                                    _: 2
                                                  }, _parent8, _scopeId7));
                                                });
                                                _push8(`<!--]-->`);
                                              } else {
                                                return [
                                                  (openBlock(), createBlock(Fragment, null, renderList(messageLocations, (location) => {
                                                    return createVNode(VChip, {
                                                      key: location,
                                                      size: "small",
                                                      value: location
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(toDisplayString(location), 1)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value"]);
                                                  }), 64))
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div></div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-check-circle")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Validation")
                                              ]),
                                              createVNode(VSwitch, {
                                                modelValue: formProperties.value.validateOnBlur,
                                                "onUpdate:modelValue": ($event) => formProperties.value.validateOnBlur = $event,
                                                color: "primary",
                                                label: "Validate on Blur",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: formProperties.value.validateOnInput,
                                                "onUpdate:modelValue": ($event) => formProperties.value.validateOnInput = $event,
                                                color: "primary",
                                                label: "Validate on Input",
                                                "hide-details": "",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VTextField, {
                                                modelValue: formProperties.value.successMessage,
                                                "onUpdate:modelValue": ($event) => formProperties.value.successMessage = $event,
                                                label: "Success Message",
                                                variant: "outlined",
                                                density: "comfortable",
                                                "prepend-inner-icon": "mdi-check",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VTextField, {
                                                modelValue: formProperties.value.errorMessage,
                                                "onUpdate:modelValue": ($event) => formProperties.value.errorMessage = $event,
                                                label: "Error Message",
                                                variant: "outlined",
                                                density: "comfortable",
                                                "prepend-inner-icon": "mdi-alert",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-2" }, "Message Position"),
                                                createVNode(VChipGroup, {
                                                  modelValue: formProperties.value.messageLocation,
                                                  "onUpdate:modelValue": ($event) => formProperties.value.messageLocation = $event,
                                                  mandatory: "",
                                                  "selected-class": "bg-primary text-white"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(messageLocations, (location) => {
                                                      return createVNode(VChip, {
                                                        key: location,
                                                        size: "small",
                                                        value: location
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode(toDisplayString(location), 1)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ])
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "buttons" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-bbd8fce9${_scopeId6}><div class="section-title d-flex align-center mb-3" data-v-bbd8fce9${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-gesture-tap-button`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-gesture-tap-button")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-bbd8fce9${_scopeId6}>Form Buttons</span></div>`);
                                          _push7(ssrRenderComponent(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VTextField, {
                                                  modelValue: formProperties.value.submitButtonText,
                                                  "onUpdate:modelValue": ($event) => formProperties.value.submitButtonText = $event,
                                                  label: "Submit Button Text",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  "prepend-inner-icon": "mdi-check-circle",
                                                  class: "mb-4"
                                                }, null, _parent8, _scopeId7));
                                                _push8(ssrRenderComponent(VTextField, {
                                                  modelValue: formProperties.value.cancelButtonText,
                                                  "onUpdate:modelValue": ($event) => formProperties.value.cancelButtonText = $event,
                                                  label: "Cancel Button Text",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  "prepend-inner-icon": "mdi-cancel",
                                                  class: "mb-4"
                                                }, null, _parent8, _scopeId7));
                                                _push8(`<div class="mb-4" data-v-bbd8fce9${_scopeId7}><label class="text-subtitle-2 mb-2" data-v-bbd8fce9${_scopeId7}>Submit Button Color</label>`);
                                                _push8(ssrRenderComponent(VBtnToggle, {
                                                  modelValue: formProperties.value.submitButtonColor,
                                                  "onUpdate:modelValue": ($event) => formProperties.value.submitButtonColor = $event,
                                                  mandatory: "",
                                                  density: "comfortable",
                                                  "selected-class": "border-primary"
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`<!--[-->`);
                                                      ssrRenderList(colors, (color) => {
                                                        _push9(ssrRenderComponent(VBtn, {
                                                          key: color.value,
                                                          value: color.value,
                                                          color: color.value !== "default" ? color.value : void 0,
                                                          size: "small",
                                                          variant: "tonal",
                                                          width: "40",
                                                          height: "40",
                                                          class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                        }, {
                                                          default: withCtx((_9, _push10, _parent10, _scopeId9) => {
                                                            if (_push10) {
                                                              if (color.value === "default") {
                                                                _push10(ssrRenderComponent(VIcon, null, {
                                                                  default: withCtx((_10, _push11, _parent11, _scopeId10) => {
                                                                    if (_push11) {
                                                                      _push11(`mdi-palette-outline`);
                                                                    } else {
                                                                      return [
                                                                        createTextVNode("mdi-palette-outline")
                                                                      ];
                                                                    }
                                                                  }),
                                                                  _: 2
                                                                }, _parent10, _scopeId9));
                                                              } else {
                                                                _push10(`<!---->`);
                                                              }
                                                            } else {
                                                              return [
                                                                color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                                  default: withCtx(() => [
                                                                    createTextVNode("mdi-palette-outline")
                                                                  ]),
                                                                  _: 1
                                                                })) : createCommentVNode("", true)
                                                              ];
                                                            }
                                                          }),
                                                          _: 2
                                                        }, _parent9, _scopeId8));
                                                      });
                                                      _push9(`<!--]-->`);
                                                    } else {
                                                      return [
                                                        (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                          return createVNode(VBtn, {
                                                            key: color.value,
                                                            value: color.value,
                                                            color: color.value !== "default" ? color.value : void 0,
                                                            size: "small",
                                                            variant: "tonal",
                                                            width: "40",
                                                            height: "40",
                                                            class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                          }, {
                                                            default: withCtx(() => [
                                                              color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                                default: withCtx(() => [
                                                                  createTextVNode("mdi-palette-outline")
                                                                ]),
                                                                _: 1
                                                              })) : createCommentVNode("", true)
                                                            ]),
                                                            _: 2
                                                          }, 1032, ["value", "color", "class"]);
                                                        }), 64))
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                                _push8(`</div><div class="mb-4" data-v-bbd8fce9${_scopeId7}><label class="text-subtitle-2 mb-2" data-v-bbd8fce9${_scopeId7}>Reset Button Color</label>`);
                                                _push8(ssrRenderComponent(VBtnToggle, {
                                                  modelValue: formProperties.value.cancelButtonColor,
                                                  "onUpdate:modelValue": ($event) => formProperties.value.cancelButtonColor = $event,
                                                  mandatory: "",
                                                  density: "comfortable",
                                                  "selected-class": "border-primary"
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`<!--[-->`);
                                                      ssrRenderList(colors, (color) => {
                                                        _push9(ssrRenderComponent(VBtn, {
                                                          key: color.value,
                                                          value: color.value,
                                                          color: color.value !== "default" ? color.value : void 0,
                                                          size: "small",
                                                          variant: "tonal",
                                                          width: "40",
                                                          height: "40",
                                                          class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                        }, {
                                                          default: withCtx((_9, _push10, _parent10, _scopeId9) => {
                                                            if (_push10) {
                                                              if (color.value === "default") {
                                                                _push10(ssrRenderComponent(VIcon, null, {
                                                                  default: withCtx((_10, _push11, _parent11, _scopeId10) => {
                                                                    if (_push11) {
                                                                      _push11(`mdi-palette-outline`);
                                                                    } else {
                                                                      return [
                                                                        createTextVNode("mdi-palette-outline")
                                                                      ];
                                                                    }
                                                                  }),
                                                                  _: 2
                                                                }, _parent10, _scopeId9));
                                                              } else {
                                                                _push10(`<!---->`);
                                                              }
                                                            } else {
                                                              return [
                                                                color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                                  default: withCtx(() => [
                                                                    createTextVNode("mdi-palette-outline")
                                                                  ]),
                                                                  _: 1
                                                                })) : createCommentVNode("", true)
                                                              ];
                                                            }
                                                          }),
                                                          _: 2
                                                        }, _parent9, _scopeId8));
                                                      });
                                                      _push9(`<!--]-->`);
                                                    } else {
                                                      return [
                                                        (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                          return createVNode(VBtn, {
                                                            key: color.value,
                                                            value: color.value,
                                                            color: color.value !== "default" ? color.value : void 0,
                                                            size: "small",
                                                            variant: "tonal",
                                                            width: "40",
                                                            height: "40",
                                                            class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                          }, {
                                                            default: withCtx(() => [
                                                              color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                                default: withCtx(() => [
                                                                  createTextVNode("mdi-palette-outline")
                                                                ]),
                                                                _: 1
                                                              })) : createCommentVNode("", true)
                                                            ]),
                                                            _: 2
                                                          }, 1032, ["value", "color", "class"]);
                                                        }), 64))
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                                _push8(`</div><div class="mb-4" data-v-bbd8fce9${_scopeId7}><label class="text-subtitle-2 mb-2" data-v-bbd8fce9${_scopeId7}>Button Variant</label>`);
                                                _push8(ssrRenderComponent(VChipGroup, {
                                                  modelValue: formProperties.value.buttonVariant,
                                                  "onUpdate:modelValue": ($event) => formProperties.value.buttonVariant = $event,
                                                  mandatory: "",
                                                  "selected-class": "bg-primary text-white"
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`<!--[-->`);
                                                      ssrRenderList(buttonVariants, (variant) => {
                                                        _push9(ssrRenderComponent(VChip, {
                                                          key: variant,
                                                          size: "small",
                                                          value: variant
                                                        }, {
                                                          default: withCtx((_9, _push10, _parent10, _scopeId9) => {
                                                            if (_push10) {
                                                              _push10(`${ssrInterpolate(variant)}`);
                                                            } else {
                                                              return [
                                                                createTextVNode(toDisplayString(variant), 1)
                                                              ];
                                                            }
                                                          }),
                                                          _: 2
                                                        }, _parent9, _scopeId8));
                                                      });
                                                      _push9(`<!--]-->`);
                                                    } else {
                                                      return [
                                                        (openBlock(), createBlock(Fragment, null, renderList(buttonVariants, (variant) => {
                                                          return createVNode(VChip, {
                                                            key: variant,
                                                            size: "small",
                                                            value: variant
                                                          }, {
                                                            default: withCtx(() => [
                                                              createTextVNode(toDisplayString(variant), 1)
                                                            ]),
                                                            _: 2
                                                          }, 1032, ["value"]);
                                                        }), 64))
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                                _push8(`</div>`);
                                                _push8(ssrRenderComponent(VSwitch, {
                                                  modelValue: formProperties.value.blockButtons,
                                                  "onUpdate:modelValue": ($event) => formProperties.value.blockButtons = $event,
                                                  color: "primary",
                                                  label: "Full Width Buttons",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VTextField, {
                                                    modelValue: formProperties.value.submitButtonText,
                                                    "onUpdate:modelValue": ($event) => formProperties.value.submitButtonText = $event,
                                                    label: "Submit Button Text",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    "prepend-inner-icon": "mdi-check-circle",
                                                    class: "mb-4"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VTextField, {
                                                    modelValue: formProperties.value.cancelButtonText,
                                                    "onUpdate:modelValue": ($event) => formProperties.value.cancelButtonText = $event,
                                                    label: "Cancel Button Text",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    "prepend-inner-icon": "mdi-cancel",
                                                    class: "mb-4"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode("div", { class: "mb-4" }, [
                                                    createVNode("label", { class: "text-subtitle-2 mb-2" }, "Submit Button Color"),
                                                    createVNode(VBtnToggle, {
                                                      modelValue: formProperties.value.submitButtonColor,
                                                      "onUpdate:modelValue": ($event) => formProperties.value.submitButtonColor = $event,
                                                      mandatory: "",
                                                      density: "comfortable",
                                                      "selected-class": "border-primary"
                                                    }, {
                                                      default: withCtx(() => [
                                                        (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                          return createVNode(VBtn, {
                                                            key: color.value,
                                                            value: color.value,
                                                            color: color.value !== "default" ? color.value : void 0,
                                                            size: "small",
                                                            variant: "tonal",
                                                            width: "40",
                                                            height: "40",
                                                            class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                          }, {
                                                            default: withCtx(() => [
                                                              color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                                default: withCtx(() => [
                                                                  createTextVNode("mdi-palette-outline")
                                                                ]),
                                                                _: 1
                                                              })) : createCommentVNode("", true)
                                                            ]),
                                                            _: 2
                                                          }, 1032, ["value", "color", "class"]);
                                                        }), 64))
                                                      ]),
                                                      _: 1
                                                    }, 8, ["modelValue", "onUpdate:modelValue"])
                                                  ]),
                                                  createVNode("div", { class: "mb-4" }, [
                                                    createVNode("label", { class: "text-subtitle-2 mb-2" }, "Reset Button Color"),
                                                    createVNode(VBtnToggle, {
                                                      modelValue: formProperties.value.cancelButtonColor,
                                                      "onUpdate:modelValue": ($event) => formProperties.value.cancelButtonColor = $event,
                                                      mandatory: "",
                                                      density: "comfortable",
                                                      "selected-class": "border-primary"
                                                    }, {
                                                      default: withCtx(() => [
                                                        (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                          return createVNode(VBtn, {
                                                            key: color.value,
                                                            value: color.value,
                                                            color: color.value !== "default" ? color.value : void 0,
                                                            size: "small",
                                                            variant: "tonal",
                                                            width: "40",
                                                            height: "40",
                                                            class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                          }, {
                                                            default: withCtx(() => [
                                                              color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                                default: withCtx(() => [
                                                                  createTextVNode("mdi-palette-outline")
                                                                ]),
                                                                _: 1
                                                              })) : createCommentVNode("", true)
                                                            ]),
                                                            _: 2
                                                          }, 1032, ["value", "color", "class"]);
                                                        }), 64))
                                                      ]),
                                                      _: 1
                                                    }, 8, ["modelValue", "onUpdate:modelValue"])
                                                  ]),
                                                  createVNode("div", { class: "mb-4" }, [
                                                    createVNode("label", { class: "text-subtitle-2 mb-2" }, "Button Variant"),
                                                    createVNode(VChipGroup, {
                                                      modelValue: formProperties.value.buttonVariant,
                                                      "onUpdate:modelValue": ($event) => formProperties.value.buttonVariant = $event,
                                                      mandatory: "",
                                                      "selected-class": "bg-primary text-white"
                                                    }, {
                                                      default: withCtx(() => [
                                                        (openBlock(), createBlock(Fragment, null, renderList(buttonVariants, (variant) => {
                                                          return createVNode(VChip, {
                                                            key: variant,
                                                            size: "small",
                                                            value: variant
                                                          }, {
                                                            default: withCtx(() => [
                                                              createTextVNode(toDisplayString(variant), 1)
                                                            ]),
                                                            _: 2
                                                          }, 1032, ["value"]);
                                                        }), 64))
                                                      ]),
                                                      _: 1
                                                    }, 8, ["modelValue", "onUpdate:modelValue"])
                                                  ]),
                                                  createVNode(VSwitch, {
                                                    modelValue: formProperties.value.blockButtons,
                                                    "onUpdate:modelValue": ($event) => formProperties.value.blockButtons = $event,
                                                    color: "primary",
                                                    label: "Full Width Buttons",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-gesture-tap-button")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Form Buttons")
                                              ]),
                                              createVNode(VCard, { class: "mb-4 pa-3" }, {
                                                default: withCtx(() => [
                                                  createVNode(VTextField, {
                                                    modelValue: formProperties.value.submitButtonText,
                                                    "onUpdate:modelValue": ($event) => formProperties.value.submitButtonText = $event,
                                                    label: "Submit Button Text",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    "prepend-inner-icon": "mdi-check-circle",
                                                    class: "mb-4"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VTextField, {
                                                    modelValue: formProperties.value.cancelButtonText,
                                                    "onUpdate:modelValue": ($event) => formProperties.value.cancelButtonText = $event,
                                                    label: "Cancel Button Text",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    "prepend-inner-icon": "mdi-cancel",
                                                    class: "mb-4"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode("div", { class: "mb-4" }, [
                                                    createVNode("label", { class: "text-subtitle-2 mb-2" }, "Submit Button Color"),
                                                    createVNode(VBtnToggle, {
                                                      modelValue: formProperties.value.submitButtonColor,
                                                      "onUpdate:modelValue": ($event) => formProperties.value.submitButtonColor = $event,
                                                      mandatory: "",
                                                      density: "comfortable",
                                                      "selected-class": "border-primary"
                                                    }, {
                                                      default: withCtx(() => [
                                                        (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                          return createVNode(VBtn, {
                                                            key: color.value,
                                                            value: color.value,
                                                            color: color.value !== "default" ? color.value : void 0,
                                                            size: "small",
                                                            variant: "tonal",
                                                            width: "40",
                                                            height: "40",
                                                            class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                          }, {
                                                            default: withCtx(() => [
                                                              color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                                default: withCtx(() => [
                                                                  createTextVNode("mdi-palette-outline")
                                                                ]),
                                                                _: 1
                                                              })) : createCommentVNode("", true)
                                                            ]),
                                                            _: 2
                                                          }, 1032, ["value", "color", "class"]);
                                                        }), 64))
                                                      ]),
                                                      _: 1
                                                    }, 8, ["modelValue", "onUpdate:modelValue"])
                                                  ]),
                                                  createVNode("div", { class: "mb-4" }, [
                                                    createVNode("label", { class: "text-subtitle-2 mb-2" }, "Reset Button Color"),
                                                    createVNode(VBtnToggle, {
                                                      modelValue: formProperties.value.cancelButtonColor,
                                                      "onUpdate:modelValue": ($event) => formProperties.value.cancelButtonColor = $event,
                                                      mandatory: "",
                                                      density: "comfortable",
                                                      "selected-class": "border-primary"
                                                    }, {
                                                      default: withCtx(() => [
                                                        (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                          return createVNode(VBtn, {
                                                            key: color.value,
                                                            value: color.value,
                                                            color: color.value !== "default" ? color.value : void 0,
                                                            size: "small",
                                                            variant: "tonal",
                                                            width: "40",
                                                            height: "40",
                                                            class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                          }, {
                                                            default: withCtx(() => [
                                                              color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                                default: withCtx(() => [
                                                                  createTextVNode("mdi-palette-outline")
                                                                ]),
                                                                _: 1
                                                              })) : createCommentVNode("", true)
                                                            ]),
                                                            _: 2
                                                          }, 1032, ["value", "color", "class"]);
                                                        }), 64))
                                                      ]),
                                                      _: 1
                                                    }, 8, ["modelValue", "onUpdate:modelValue"])
                                                  ]),
                                                  createVNode("div", { class: "mb-4" }, [
                                                    createVNode("label", { class: "text-subtitle-2 mb-2" }, "Button Variant"),
                                                    createVNode(VChipGroup, {
                                                      modelValue: formProperties.value.buttonVariant,
                                                      "onUpdate:modelValue": ($event) => formProperties.value.buttonVariant = $event,
                                                      mandatory: "",
                                                      "selected-class": "bg-primary text-white"
                                                    }, {
                                                      default: withCtx(() => [
                                                        (openBlock(), createBlock(Fragment, null, renderList(buttonVariants, (variant) => {
                                                          return createVNode(VChip, {
                                                            key: variant,
                                                            size: "small",
                                                            value: variant
                                                          }, {
                                                            default: withCtx(() => [
                                                              createTextVNode(toDisplayString(variant), 1)
                                                            ]),
                                                            _: 2
                                                          }, 1032, ["value"]);
                                                        }), 64))
                                                      ]),
                                                      _: 1
                                                    }, 8, ["modelValue", "onUpdate:modelValue"])
                                                  ]),
                                                  createVNode(VSwitch, {
                                                    modelValue: formProperties.value.blockButtons,
                                                    "onUpdate:modelValue": ($event) => formProperties.value.blockButtons = $event,
                                                    color: "primary",
                                                    label: "Full Width Buttons",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "templates" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-bbd8fce9${_scopeId6}><div class="section-title d-flex align-center mb-3 justify-space-between" data-v-bbd8fce9${_scopeId6}><div class="d-flex align-center" data-v-bbd8fce9${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-file-document-outline`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-file-document-outline")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-bbd8fce9${_scopeId6}>Form Templates</span></div>`);
                                          _push7(ssrRenderComponent(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props }, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VBtn, mergeProps({
                                                  icon: "mdi-help-circle-outline",
                                                  variant: "text",
                                                  size: "small"
                                                }, props), null, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VBtn, mergeProps({
                                                    icon: "mdi-help-circle-outline",
                                                    variant: "text",
                                                    size: "small"
                                                  }, props), null, 16)
                                                ];
                                              }
                                            }),
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<span data-v-bbd8fce9${_scopeId7}>Apply pre-defined templates or save your own</span>`);
                                              } else {
                                                return [
                                                  createVNode("span", null, "Apply pre-defined templates or save your own")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div><p class="text-body-2 mb-4" data-v-bbd8fce9${_scopeId6}>Choose a pre-defined template to quickly create common forms.</p>`);
                                          _push7(ssrRenderComponent(VCard, { class: "mb-4" }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VList, null, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("contact"),
                                                        "prepend-icon": "mdi-email-outline",
                                                        title: "Contact Form",
                                                        subtitle: "Name, email, subject and message fields"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("login"),
                                                        "prepend-icon": "mdi-login",
                                                        title: "Login Form",
                                                        subtitle: "Email/username and password with validation"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("register"),
                                                        "prepend-icon": "mdi-account-plus",
                                                        title: "Registration Form",
                                                        subtitle: "Complete user registration form"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("survey"),
                                                        "prepend-icon": "mdi-poll",
                                                        title: "Survey Form",
                                                        subtitle: "Various question types for feedback"
                                                      }, null, _parent9, _scopeId8));
                                                    } else {
                                                      return [
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("contact"),
                                                          "prepend-icon": "mdi-email-outline",
                                                          title: "Contact Form",
                                                          subtitle: "Name, email, subject and message fields"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("login"),
                                                          "prepend-icon": "mdi-login",
                                                          title: "Login Form",
                                                          subtitle: "Email/username and password with validation"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("register"),
                                                          "prepend-icon": "mdi-account-plus",
                                                          title: "Registration Form",
                                                          subtitle: "Complete user registration form"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("survey"),
                                                          "prepend-icon": "mdi-poll",
                                                          title: "Survey Form",
                                                          subtitle: "Various question types for feedback"
                                                        }, null, 8, ["onClick"])
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VList, null, {
                                                    default: withCtx(() => [
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("contact"),
                                                        "prepend-icon": "mdi-email-outline",
                                                        title: "Contact Form",
                                                        subtitle: "Name, email, subject and message fields"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("login"),
                                                        "prepend-icon": "mdi-login",
                                                        title: "Login Form",
                                                        subtitle: "Email/username and password with validation"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("register"),
                                                        "prepend-icon": "mdi-account-plus",
                                                        title: "Registration Form",
                                                        subtitle: "Complete user registration form"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("survey"),
                                                        "prepend-icon": "mdi-poll",
                                                        title: "Survey Form",
                                                        subtitle: "Various question types for feedback"
                                                      }, null, 8, ["onClick"])
                                                    ]),
                                                    _: 1
                                                  })
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VAlert, {
                                            type: "info",
                                            variant: "tonal",
                                            class: "mb-4"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(` Applying a template will replace your current form fields. `);
                                              } else {
                                                return [
                                                  createTextVNode(" Applying a template will replace your current form fields. ")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VDivider, { class: "my-4" }, null, _parent7, _scopeId6));
                                          _push7(`<div class="section-title d-flex align-center mb-3" data-v-bbd8fce9${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-content-save`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-content-save")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-bbd8fce9${_scopeId6}>Save Current Form</span></div>`);
                                          _push7(ssrRenderComponent(VTextField, {
                                            modelValue: customTemplateName.value,
                                            "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                            label: "Template Name",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "prepend-inner-icon": "mdi-tag",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VBtn, {
                                            color: "primary",
                                            "prepend-icon": "mdi-content-save",
                                            block: "",
                                            onClick: saveCurrentTemplate
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(` Save Current Form as Template `);
                                              } else {
                                                return [
                                                  createTextVNode(" Save Current Form as Template ")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                                createVNode("div", { class: "d-flex align-center" }, [
                                                  createVNode(VIcon, {
                                                    color: "primary",
                                                    class: "mr-2"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-file-document-outline")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode("span", { class: "text-h6" }, "Form Templates")
                                                ]),
                                                createVNode(VTooltip, { location: "bottom" }, {
                                                  activator: withCtx(({ props }) => [
                                                    createVNode(VBtn, mergeProps({
                                                      icon: "mdi-help-circle-outline",
                                                      variant: "text",
                                                      size: "small"
                                                    }, props), null, 16)
                                                  ]),
                                                  default: withCtx(() => [
                                                    createVNode("span", null, "Apply pre-defined templates or save your own")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common forms."),
                                              createVNode(VCard, { class: "mb-4" }, {
                                                default: withCtx(() => [
                                                  createVNode(VList, null, {
                                                    default: withCtx(() => [
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("contact"),
                                                        "prepend-icon": "mdi-email-outline",
                                                        title: "Contact Form",
                                                        subtitle: "Name, email, subject and message fields"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("login"),
                                                        "prepend-icon": "mdi-login",
                                                        title: "Login Form",
                                                        subtitle: "Email/username and password with validation"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("register"),
                                                        "prepend-icon": "mdi-account-plus",
                                                        title: "Registration Form",
                                                        subtitle: "Complete user registration form"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("survey"),
                                                        "prepend-icon": "mdi-poll",
                                                        title: "Survey Form",
                                                        subtitle: "Various question types for feedback"
                                                      }, null, 8, ["onClick"])
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VAlert, {
                                                type: "info",
                                                variant: "tonal",
                                                class: "mb-4"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Applying a template will replace your current form fields. ")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VDivider, { class: "my-4" }),
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-content-save")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Save Current Form")
                                              ]),
                                              createVNode(VTextField, {
                                                modelValue: customTemplateName.value,
                                                "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                                label: "Template Name",
                                                variant: "outlined",
                                                density: "comfortable",
                                                "prepend-inner-icon": "mdi-tag",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VBtn, {
                                                color: "primary",
                                                "prepend-icon": "mdi-content-save",
                                                block: "",
                                                onClick: saveCurrentTemplate
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Save Current Form as Template ")
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                  } else {
                                    return [
                                      createVNode(VWindowItem, { value: "content" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                              createVNode("div", { class: "d-flex align-center" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-form-select")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Form Fields")
                                              ]),
                                              createVNode(VTooltip, { location: "bottom" }, {
                                                activator: withCtx(({ props }) => [
                                                  createVNode(VBtn, mergeProps({
                                                    icon: "mdi-help-circle-outline",
                                                    variant: "text",
                                                    size: "small"
                                                  }, props), null, 16)
                                                ]),
                                                default: withCtx(() => [
                                                  createVNode("span", null, "Add, remove and configure form fields")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            createVNode(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx(() => [
                                                (openBlock(true), createBlock(Fragment, null, renderList(formFields.value, (field, index) => {
                                                  return openBlock(), createBlock("div", {
                                                    key: index,
                                                    class: "mb-4"
                                                  }, [
                                                    createVNode("div", { class: "d-flex align-center justify-space-between mb-2" }, [
                                                      createVNode("span", { class: "text-subtitle-2" }, "Field " + toDisplayString(index + 1), 1),
                                                      createVNode(VBtn, {
                                                        icon: "mdi-delete",
                                                        color: "error",
                                                        variant: "text",
                                                        density: "compact",
                                                        onClick: ($event) => removeField(index)
                                                      }, null, 8, ["onClick"])
                                                    ]),
                                                    createVNode(VSelect, {
                                                      modelValue: field.type,
                                                      "onUpdate:modelValue": ($event) => field.type = $event,
                                                      items: fieldTypes,
                                                      label: "Type",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-form-dropdown",
                                                      class: "mb-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode(VTextField, {
                                                      modelValue: field.label,
                                                      "onUpdate:modelValue": ($event) => field.label = $event,
                                                      label: "Label",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-label",
                                                      class: "mb-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode(VTextField, {
                                                      modelValue: field.placeholder,
                                                      "onUpdate:modelValue": ($event) => field.placeholder = $event,
                                                      label: "Placeholder",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-text-box",
                                                      class: "mb-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode(VSelect, {
                                                      modelValue: field.icon,
                                                      "onUpdate:modelValue": ($event) => field.icon = $event,
                                                      items: unref(icons),
                                                      label: "Icon (optional)",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-emoticon",
                                                      class: "mb-2",
                                                      clearable: ""
                                                    }, {
                                                      item: withCtx(({ item, props }) => [
                                                        createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                          prepend: withCtx(() => [
                                                            createVNode(VIcon, {
                                                              icon: item.raw
                                                            }, null, 8, ["icon"])
                                                          ]),
                                                          default: withCtx(() => [
                                                            createVNode(VListItemTitle, null, {
                                                              default: withCtx(() => [
                                                                createTextVNode(toDisplayString(item.raw.replace("mdi-", "")), 1)
                                                              ]),
                                                              _: 2
                                                            }, 1024)
                                                          ]),
                                                          _: 2
                                                        }, 1040)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                    field.type === "select" || field.type === "radio" || field.type === "checkbox" ? (openBlock(), createBlock(VTextField, {
                                                      key: 0,
                                                      modelValue: field.options,
                                                      "onUpdate:modelValue": ($event) => field.options = $event,
                                                      label: "Options (comma separated)",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-format-list-bulleted",
                                                      class: "mb-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                                    createVNode("div", { class: "d-flex gap-2" }, [
                                                      createVNode(VSwitch, {
                                                        modelValue: field.required,
                                                        "onUpdate:modelValue": ($event) => field.required = $event,
                                                        color: "primary",
                                                        label: "Required",
                                                        "hide-details": "",
                                                        class: "mb-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      field.type === "text" ? (openBlock(), createBlock(VSwitch, {
                                                        key: 0,
                                                        modelValue: field.counter,
                                                        "onUpdate:modelValue": ($event) => field.counter = $event,
                                                        color: "primary",
                                                        label: "Counter",
                                                        "hide-details": "",
                                                        class: "mb-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                                    ])
                                                  ]);
                                                }), 128)),
                                                createVNode(VBtn, {
                                                  color: "primary",
                                                  "prepend-icon": "mdi-plus",
                                                  variant: "tonal",
                                                  block: "",
                                                  onClick: addField
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(" Add Field ")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "style" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                              createVNode("div", { class: "d-flex align-center" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-palette")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Appearance")
                                              ]),
                                              createVNode(VTooltip, { location: "bottom" }, {
                                                activator: withCtx(({ props }) => [
                                                  createVNode(VBtn, mergeProps({
                                                    icon: "mdi-help-circle-outline",
                                                    variant: "text",
                                                    size: "small"
                                                  }, props), null, 16)
                                                ]),
                                                default: withCtx(() => [
                                                  createVNode("span", null, "Customize the visual appearance of form fields")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-2" }, "Field Variant"),
                                              createVNode(VChipGroup, {
                                                modelValue: formProperties.value.variant,
                                                "onUpdate:modelValue": ($event) => formProperties.value.variant = $event,
                                                mandatory: "",
                                                "selected-class": "bg-primary text-white"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(fieldVariants, (variant) => {
                                                    return createVNode(VChip, {
                                                      key: variant,
                                                      size: "small",
                                                      value: variant
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(toDisplayString(variant), 1)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-2" }, "Density"),
                                              createVNode(VChipGroup, {
                                                modelValue: formProperties.value.density,
                                                "onUpdate:modelValue": ($event) => formProperties.value.density = $event,
                                                mandatory: "",
                                                "selected-class": "bg-primary text-white"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(densityOptions, (density) => {
                                                    return createVNode(VChip, {
                                                      key: density,
                                                      size: "small",
                                                      value: density
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(toDisplayString(density), 1)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode(VSwitch, {
                                              modelValue: formProperties.value.disabled,
                                              "onUpdate:modelValue": ($event) => formProperties.value.disabled = $event,
                                              color: "primary",
                                              label: "Disabled",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: formProperties.value.readonly,
                                              "onUpdate:modelValue": ($event) => formProperties.value.readonly = $event,
                                              color: "primary",
                                              label: "Read Only",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: formProperties.value.persistentPlaceholder,
                                              "onUpdate:modelValue": ($event) => formProperties.value.persistentPlaceholder = $event,
                                              color: "primary",
                                              label: "Persistent Placeholder",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-2" }, "Focus color"),
                                              createVNode(VBtnToggle, {
                                                modelValue: formProperties.value.color,
                                                "onUpdate:modelValue": ($event) => formProperties.value.color = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                "selected-class": "border-primary"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: color.value,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color", "class"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "validation" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-check-circle")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Validation")
                                            ]),
                                            createVNode(VSwitch, {
                                              modelValue: formProperties.value.validateOnBlur,
                                              "onUpdate:modelValue": ($event) => formProperties.value.validateOnBlur = $event,
                                              color: "primary",
                                              label: "Validate on Blur",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: formProperties.value.validateOnInput,
                                              "onUpdate:modelValue": ($event) => formProperties.value.validateOnInput = $event,
                                              color: "primary",
                                              label: "Validate on Input",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VTextField, {
                                              modelValue: formProperties.value.successMessage,
                                              "onUpdate:modelValue": ($event) => formProperties.value.successMessage = $event,
                                              label: "Success Message",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "prepend-inner-icon": "mdi-check",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VTextField, {
                                              modelValue: formProperties.value.errorMessage,
                                              "onUpdate:modelValue": ($event) => formProperties.value.errorMessage = $event,
                                              label: "Error Message",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "prepend-inner-icon": "mdi-alert",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-2" }, "Message Position"),
                                              createVNode(VChipGroup, {
                                                modelValue: formProperties.value.messageLocation,
                                                "onUpdate:modelValue": ($event) => formProperties.value.messageLocation = $event,
                                                mandatory: "",
                                                "selected-class": "bg-primary text-white"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(messageLocations, (location) => {
                                                    return createVNode(VChip, {
                                                      key: location,
                                                      size: "small",
                                                      value: location
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(toDisplayString(location), 1)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "buttons" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-gesture-tap-button")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Form Buttons")
                                            ]),
                                            createVNode(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx(() => [
                                                createVNode(VTextField, {
                                                  modelValue: formProperties.value.submitButtonText,
                                                  "onUpdate:modelValue": ($event) => formProperties.value.submitButtonText = $event,
                                                  label: "Submit Button Text",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  "prepend-inner-icon": "mdi-check-circle",
                                                  class: "mb-4"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VTextField, {
                                                  modelValue: formProperties.value.cancelButtonText,
                                                  "onUpdate:modelValue": ($event) => formProperties.value.cancelButtonText = $event,
                                                  label: "Cancel Button Text",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  "prepend-inner-icon": "mdi-cancel",
                                                  class: "mb-4"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-2" }, "Submit Button Color"),
                                                  createVNode(VBtnToggle, {
                                                    modelValue: formProperties.value.submitButtonColor,
                                                    "onUpdate:modelValue": ($event) => formProperties.value.submitButtonColor = $event,
                                                    mandatory: "",
                                                    density: "comfortable",
                                                    "selected-class": "border-primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                        return createVNode(VBtn, {
                                                          key: color.value,
                                                          value: color.value,
                                                          color: color.value !== "default" ? color.value : void 0,
                                                          size: "small",
                                                          variant: "tonal",
                                                          width: "40",
                                                          height: "40",
                                                          class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                        }, {
                                                          default: withCtx(() => [
                                                            color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                              default: withCtx(() => [
                                                                createTextVNode("mdi-palette-outline")
                                                              ]),
                                                              _: 1
                                                            })) : createCommentVNode("", true)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["value", "color", "class"]);
                                                      }), 64))
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-2" }, "Reset Button Color"),
                                                  createVNode(VBtnToggle, {
                                                    modelValue: formProperties.value.cancelButtonColor,
                                                    "onUpdate:modelValue": ($event) => formProperties.value.cancelButtonColor = $event,
                                                    mandatory: "",
                                                    density: "comfortable",
                                                    "selected-class": "border-primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                        return createVNode(VBtn, {
                                                          key: color.value,
                                                          value: color.value,
                                                          color: color.value !== "default" ? color.value : void 0,
                                                          size: "small",
                                                          variant: "tonal",
                                                          width: "40",
                                                          height: "40",
                                                          class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                        }, {
                                                          default: withCtx(() => [
                                                            color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                              default: withCtx(() => [
                                                                createTextVNode("mdi-palette-outline")
                                                              ]),
                                                              _: 1
                                                            })) : createCommentVNode("", true)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["value", "color", "class"]);
                                                      }), 64))
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-2" }, "Button Variant"),
                                                  createVNode(VChipGroup, {
                                                    modelValue: formProperties.value.buttonVariant,
                                                    "onUpdate:modelValue": ($event) => formProperties.value.buttonVariant = $event,
                                                    mandatory: "",
                                                    "selected-class": "bg-primary text-white"
                                                  }, {
                                                    default: withCtx(() => [
                                                      (openBlock(), createBlock(Fragment, null, renderList(buttonVariants, (variant) => {
                                                        return createVNode(VChip, {
                                                          key: variant,
                                                          size: "small",
                                                          value: variant
                                                        }, {
                                                          default: withCtx(() => [
                                                            createTextVNode(toDisplayString(variant), 1)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["value"]);
                                                      }), 64))
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                createVNode(VSwitch, {
                                                  modelValue: formProperties.value.blockButtons,
                                                  "onUpdate:modelValue": ($event) => formProperties.value.blockButtons = $event,
                                                  color: "primary",
                                                  label: "Full Width Buttons",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "templates" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                              createVNode("div", { class: "d-flex align-center" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-file-document-outline")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Form Templates")
                                              ]),
                                              createVNode(VTooltip, { location: "bottom" }, {
                                                activator: withCtx(({ props }) => [
                                                  createVNode(VBtn, mergeProps({
                                                    icon: "mdi-help-circle-outline",
                                                    variant: "text",
                                                    size: "small"
                                                  }, props), null, 16)
                                                ]),
                                                default: withCtx(() => [
                                                  createVNode("span", null, "Apply pre-defined templates or save your own")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common forms."),
                                            createVNode(VCard, { class: "mb-4" }, {
                                              default: withCtx(() => [
                                                createVNode(VList, null, {
                                                  default: withCtx(() => [
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("contact"),
                                                      "prepend-icon": "mdi-email-outline",
                                                      title: "Contact Form",
                                                      subtitle: "Name, email, subject and message fields"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("login"),
                                                      "prepend-icon": "mdi-login",
                                                      title: "Login Form",
                                                      subtitle: "Email/username and password with validation"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("register"),
                                                      "prepend-icon": "mdi-account-plus",
                                                      title: "Registration Form",
                                                      subtitle: "Complete user registration form"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("survey"),
                                                      "prepend-icon": "mdi-poll",
                                                      title: "Survey Form",
                                                      subtitle: "Various question types for feedback"
                                                    }, null, 8, ["onClick"])
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VAlert, {
                                              type: "info",
                                              variant: "tonal",
                                              class: "mb-4"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(" Applying a template will replace your current form fields. ")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VDivider, { class: "my-4" }),
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-content-save")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Save Current Form")
                                            ]),
                                            createVNode(VTextField, {
                                              modelValue: customTemplateName.value,
                                              "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                              label: "Template Name",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "prepend-inner-icon": "mdi-tag",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VBtn, {
                                              color: "primary",
                                              "prepend-icon": "mdi-content-save",
                                              block: "",
                                              onClick: saveCurrentTemplate
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(" Save Current Form as Template ")
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        _: 1
                                      })
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VWindow, {
                                  modelValue: tab.value,
                                  "onUpdate:modelValue": ($event) => tab.value = $event,
                                  class: "fill-height"
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VWindowItem, { value: "content" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-form-select")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Form Fields")
                                            ]),
                                            createVNode(VTooltip, { location: "bottom" }, {
                                              activator: withCtx(({ props }) => [
                                                createVNode(VBtn, mergeProps({
                                                  icon: "mdi-help-circle-outline",
                                                  variant: "text",
                                                  size: "small"
                                                }, props), null, 16)
                                              ]),
                                              default: withCtx(() => [
                                                createVNode("span", null, "Add, remove and configure form fields")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          createVNode(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx(() => [
                                              (openBlock(true), createBlock(Fragment, null, renderList(formFields.value, (field, index) => {
                                                return openBlock(), createBlock("div", {
                                                  key: index,
                                                  class: "mb-4"
                                                }, [
                                                  createVNode("div", { class: "d-flex align-center justify-space-between mb-2" }, [
                                                    createVNode("span", { class: "text-subtitle-2" }, "Field " + toDisplayString(index + 1), 1),
                                                    createVNode(VBtn, {
                                                      icon: "mdi-delete",
                                                      color: "error",
                                                      variant: "text",
                                                      density: "compact",
                                                      onClick: ($event) => removeField(index)
                                                    }, null, 8, ["onClick"])
                                                  ]),
                                                  createVNode(VSelect, {
                                                    modelValue: field.type,
                                                    "onUpdate:modelValue": ($event) => field.type = $event,
                                                    items: fieldTypes,
                                                    label: "Type",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-form-dropdown",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VTextField, {
                                                    modelValue: field.label,
                                                    "onUpdate:modelValue": ($event) => field.label = $event,
                                                    label: "Label",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-label",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VTextField, {
                                                    modelValue: field.placeholder,
                                                    "onUpdate:modelValue": ($event) => field.placeholder = $event,
                                                    label: "Placeholder",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-text-box",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VSelect, {
                                                    modelValue: field.icon,
                                                    "onUpdate:modelValue": ($event) => field.icon = $event,
                                                    items: unref(icons),
                                                    label: "Icon (optional)",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-emoticon",
                                                    class: "mb-2",
                                                    clearable: ""
                                                  }, {
                                                    item: withCtx(({ item, props }) => [
                                                      createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                        prepend: withCtx(() => [
                                                          createVNode(VIcon, {
                                                            icon: item.raw
                                                          }, null, 8, ["icon"])
                                                        ]),
                                                        default: withCtx(() => [
                                                          createVNode(VListItemTitle, null, {
                                                            default: withCtx(() => [
                                                              createTextVNode(toDisplayString(item.raw.replace("mdi-", "")), 1)
                                                            ]),
                                                            _: 2
                                                          }, 1024)
                                                        ]),
                                                        _: 2
                                                      }, 1040)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                  field.type === "select" || field.type === "radio" || field.type === "checkbox" ? (openBlock(), createBlock(VTextField, {
                                                    key: 0,
                                                    modelValue: field.options,
                                                    "onUpdate:modelValue": ($event) => field.options = $event,
                                                    label: "Options (comma separated)",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-format-list-bulleted",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                                  createVNode("div", { class: "d-flex gap-2" }, [
                                                    createVNode(VSwitch, {
                                                      modelValue: field.required,
                                                      "onUpdate:modelValue": ($event) => field.required = $event,
                                                      color: "primary",
                                                      label: "Required",
                                                      "hide-details": "",
                                                      class: "mb-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    field.type === "text" ? (openBlock(), createBlock(VSwitch, {
                                                      key: 0,
                                                      modelValue: field.counter,
                                                      "onUpdate:modelValue": ($event) => field.counter = $event,
                                                      color: "primary",
                                                      label: "Counter",
                                                      "hide-details": "",
                                                      class: "mb-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                                  ])
                                                ]);
                                              }), 128)),
                                              createVNode(VBtn, {
                                                color: "primary",
                                                "prepend-icon": "mdi-plus",
                                                variant: "tonal",
                                                block: "",
                                                onClick: addField
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Add Field ")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          })
                                        ])
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "style" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-palette")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Appearance")
                                            ]),
                                            createVNode(VTooltip, { location: "bottom" }, {
                                              activator: withCtx(({ props }) => [
                                                createVNode(VBtn, mergeProps({
                                                  icon: "mdi-help-circle-outline",
                                                  variant: "text",
                                                  size: "small"
                                                }, props), null, 16)
                                              ]),
                                              default: withCtx(() => [
                                                createVNode("span", null, "Customize the visual appearance of form fields")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-2" }, "Field Variant"),
                                            createVNode(VChipGroup, {
                                              modelValue: formProperties.value.variant,
                                              "onUpdate:modelValue": ($event) => formProperties.value.variant = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(fieldVariants, (variant) => {
                                                  return createVNode(VChip, {
                                                    key: variant,
                                                    size: "small",
                                                    value: variant
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(toDisplayString(variant), 1)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-2" }, "Density"),
                                            createVNode(VChipGroup, {
                                              modelValue: formProperties.value.density,
                                              "onUpdate:modelValue": ($event) => formProperties.value.density = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(densityOptions, (density) => {
                                                  return createVNode(VChip, {
                                                    key: density,
                                                    size: "small",
                                                    value: density
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(toDisplayString(density), 1)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: formProperties.value.disabled,
                                            "onUpdate:modelValue": ($event) => formProperties.value.disabled = $event,
                                            color: "primary",
                                            label: "Disabled",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: formProperties.value.readonly,
                                            "onUpdate:modelValue": ($event) => formProperties.value.readonly = $event,
                                            color: "primary",
                                            label: "Read Only",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: formProperties.value.persistentPlaceholder,
                                            "onUpdate:modelValue": ($event) => formProperties.value.persistentPlaceholder = $event,
                                            color: "primary",
                                            label: "Persistent Placeholder",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-2" }, "Focus color"),
                                            createVNode(VBtnToggle, {
                                              modelValue: formProperties.value.color,
                                              "onUpdate:modelValue": ($event) => formProperties.value.color = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              "selected-class": "border-primary"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                  return createVNode(VBtn, {
                                                    key: color.value,
                                                    value: color.value,
                                                    color: color.value !== "default" ? color.value : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                  }, {
                                                    default: withCtx(() => [
                                                      color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("mdi-palette-outline")
                                                        ]),
                                                        _: 1
                                                      })) : createCommentVNode("", true)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value", "color", "class"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ])
                                        ])
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "validation" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-check-circle")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Validation")
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: formProperties.value.validateOnBlur,
                                            "onUpdate:modelValue": ($event) => formProperties.value.validateOnBlur = $event,
                                            color: "primary",
                                            label: "Validate on Blur",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: formProperties.value.validateOnInput,
                                            "onUpdate:modelValue": ($event) => formProperties.value.validateOnInput = $event,
                                            color: "primary",
                                            label: "Validate on Input",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VTextField, {
                                            modelValue: formProperties.value.successMessage,
                                            "onUpdate:modelValue": ($event) => formProperties.value.successMessage = $event,
                                            label: "Success Message",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "prepend-inner-icon": "mdi-check",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VTextField, {
                                            modelValue: formProperties.value.errorMessage,
                                            "onUpdate:modelValue": ($event) => formProperties.value.errorMessage = $event,
                                            label: "Error Message",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "prepend-inner-icon": "mdi-alert",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-2" }, "Message Position"),
                                            createVNode(VChipGroup, {
                                              modelValue: formProperties.value.messageLocation,
                                              "onUpdate:modelValue": ($event) => formProperties.value.messageLocation = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(messageLocations, (location) => {
                                                  return createVNode(VChip, {
                                                    key: location,
                                                    size: "small",
                                                    value: location
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(toDisplayString(location), 1)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ])
                                        ])
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "buttons" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-gesture-tap-button")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Form Buttons")
                                          ]),
                                          createVNode(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx(() => [
                                              createVNode(VTextField, {
                                                modelValue: formProperties.value.submitButtonText,
                                                "onUpdate:modelValue": ($event) => formProperties.value.submitButtonText = $event,
                                                label: "Submit Button Text",
                                                variant: "outlined",
                                                density: "comfortable",
                                                "prepend-inner-icon": "mdi-check-circle",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VTextField, {
                                                modelValue: formProperties.value.cancelButtonText,
                                                "onUpdate:modelValue": ($event) => formProperties.value.cancelButtonText = $event,
                                                label: "Cancel Button Text",
                                                variant: "outlined",
                                                density: "comfortable",
                                                "prepend-inner-icon": "mdi-cancel",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-2" }, "Submit Button Color"),
                                                createVNode(VBtnToggle, {
                                                  modelValue: formProperties.value.submitButtonColor,
                                                  "onUpdate:modelValue": ($event) => formProperties.value.submitButtonColor = $event,
                                                  mandatory: "",
                                                  density: "comfortable",
                                                  "selected-class": "border-primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                      return createVNode(VBtn, {
                                                        key: color.value,
                                                        value: color.value,
                                                        color: color.value !== "default" ? color.value : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                      }, {
                                                        default: withCtx(() => [
                                                          color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color", "class"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-2" }, "Reset Button Color"),
                                                createVNode(VBtnToggle, {
                                                  modelValue: formProperties.value.cancelButtonColor,
                                                  "onUpdate:modelValue": ($event) => formProperties.value.cancelButtonColor = $event,
                                                  mandatory: "",
                                                  density: "comfortable",
                                                  "selected-class": "border-primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                      return createVNode(VBtn, {
                                                        key: color.value,
                                                        value: color.value,
                                                        color: color.value !== "default" ? color.value : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                      }, {
                                                        default: withCtx(() => [
                                                          color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color", "class"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-2" }, "Button Variant"),
                                                createVNode(VChipGroup, {
                                                  modelValue: formProperties.value.buttonVariant,
                                                  "onUpdate:modelValue": ($event) => formProperties.value.buttonVariant = $event,
                                                  mandatory: "",
                                                  "selected-class": "bg-primary text-white"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(buttonVariants, (variant) => {
                                                      return createVNode(VChip, {
                                                        key: variant,
                                                        size: "small",
                                                        value: variant
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode(toDisplayString(variant), 1)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode(VSwitch, {
                                                modelValue: formProperties.value.blockButtons,
                                                "onUpdate:modelValue": ($event) => formProperties.value.blockButtons = $event,
                                                color: "primary",
                                                label: "Full Width Buttons",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            _: 1
                                          })
                                        ])
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "templates" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-file-document-outline")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Form Templates")
                                            ]),
                                            createVNode(VTooltip, { location: "bottom" }, {
                                              activator: withCtx(({ props }) => [
                                                createVNode(VBtn, mergeProps({
                                                  icon: "mdi-help-circle-outline",
                                                  variant: "text",
                                                  size: "small"
                                                }, props), null, 16)
                                              ]),
                                              default: withCtx(() => [
                                                createVNode("span", null, "Apply pre-defined templates or save your own")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common forms."),
                                          createVNode(VCard, { class: "mb-4" }, {
                                            default: withCtx(() => [
                                              createVNode(VList, null, {
                                                default: withCtx(() => [
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("contact"),
                                                    "prepend-icon": "mdi-email-outline",
                                                    title: "Contact Form",
                                                    subtitle: "Name, email, subject and message fields"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("login"),
                                                    "prepend-icon": "mdi-login",
                                                    title: "Login Form",
                                                    subtitle: "Email/username and password with validation"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("register"),
                                                    "prepend-icon": "mdi-account-plus",
                                                    title: "Registration Form",
                                                    subtitle: "Complete user registration form"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("survey"),
                                                    "prepend-icon": "mdi-poll",
                                                    title: "Survey Form",
                                                    subtitle: "Various question types for feedback"
                                                  }, null, 8, ["onClick"])
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VAlert, {
                                            type: "info",
                                            variant: "tonal",
                                            class: "mb-4"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(" Applying a template will replace your current form fields. ")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VDivider, { class: "my-4" }),
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-content-save")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Save Current Form")
                                          ]),
                                          createVNode(VTextField, {
                                            modelValue: customTemplateName.value,
                                            "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                            label: "Template Name",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "prepend-inner-icon": "mdi-tag",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VBtn, {
                                            color: "primary",
                                            "prepend-icon": "mdi-content-save",
                                            block: "",
                                            onClick: saveCurrentTemplate
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(" Save Current Form as Template ")
                                            ]),
                                            _: 1
                                          })
                                        ])
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }, 8, ["modelValue", "onUpdate:modelValue"])
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                      } else {
                        return [
                          createVNode("div", { class: "px-4 py-2 d-flex align-center" }, [
                            createVNode(VChip, {
                              color: "success",
                              "prepend-icon": "mdi-vuejs",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vue.js")
                              ]),
                              _: 1
                            }),
                            createVNode(VChip, {
                              color: "info",
                              "prepend-icon": "mdi-vuetify",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vuetify")
                              ]),
                              _: 1
                            })
                          ]),
                          createVNode("div", { class: "px-4 py-2 d-flex align-center justify-space-between" }, [
                            createVNode("div", null, [
                              createVNode(VChipGroup, {
                                modelValue: previewMode.value,
                                "onUpdate:modelValue": ($event) => previewMode.value = $event,
                                mandatory: "",
                                "selected-class": "bg-primary text-white"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VChip, {
                                    size: "small",
                                    value: "desktop"
                                  }, {
                                    default: withCtx(() => [
                                      createVNode(VIcon, {
                                        start: "",
                                        size: "small"
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode("mdi-monitor")
                                        ]),
                                        _: 1
                                      }),
                                      createTextVNode(" Desktop ")
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VChip, {
                                    size: "small",
                                    value: "tablet"
                                  }, {
                                    default: withCtx(() => [
                                      createVNode(VIcon, {
                                        start: "",
                                        size: "small"
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode("mdi-tablet")
                                        ]),
                                        _: 1
                                      }),
                                      createTextVNode(" Tablet ")
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VChip, {
                                    size: "small",
                                    value: "mobile"
                                  }, {
                                    default: withCtx(() => [
                                      createVNode(VIcon, {
                                        start: "",
                                        size: "small"
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode("mdi-cellphone")
                                        ]),
                                        _: 1
                                      }),
                                      createTextVNode(" Mobile ")
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"])
                            ])
                          ]),
                          createVNode(VTabs, {
                            modelValue: tab.value,
                            "onUpdate:modelValue": ($event) => tab.value = $event,
                            color: "primary",
                            "align-tabs": "center",
                            class: "px-4"
                          }, {
                            default: withCtx(() => [
                              createVNode(VTab, { value: "content" }, {
                                default: withCtx(() => [
                                  createTextVNode("Content")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "style" }, {
                                default: withCtx(() => [
                                  createTextVNode("Style")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "validation" }, {
                                default: withCtx(() => [
                                  createTextVNode("Validation")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "templates" }, {
                                default: withCtx(() => [
                                  createTextVNode("Templates")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "buttons" }, {
                                default: withCtx(() => [
                                  createTextVNode("Buttons")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue"]),
                          createVNode(VDivider),
                          createVNode(VCardText, {
                            class: "pa-0 fill-height",
                            style: { "overflow-y": "auto" }
                          }, {
                            default: withCtx(() => [
                              createVNode(VWindow, {
                                modelValue: tab.value,
                                "onUpdate:modelValue": ($event) => tab.value = $event,
                                class: "fill-height"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VWindowItem, { value: "content" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-form-select")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Form Fields")
                                          ]),
                                          createVNode(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props }) => [
                                              createVNode(VBtn, mergeProps({
                                                icon: "mdi-help-circle-outline",
                                                variant: "text",
                                                size: "small"
                                              }, props), null, 16)
                                            ]),
                                            default: withCtx(() => [
                                              createVNode("span", null, "Add, remove and configure form fields")
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            (openBlock(true), createBlock(Fragment, null, renderList(formFields.value, (field, index) => {
                                              return openBlock(), createBlock("div", {
                                                key: index,
                                                class: "mb-4"
                                              }, [
                                                createVNode("div", { class: "d-flex align-center justify-space-between mb-2" }, [
                                                  createVNode("span", { class: "text-subtitle-2" }, "Field " + toDisplayString(index + 1), 1),
                                                  createVNode(VBtn, {
                                                    icon: "mdi-delete",
                                                    color: "error",
                                                    variant: "text",
                                                    density: "compact",
                                                    onClick: ($event) => removeField(index)
                                                  }, null, 8, ["onClick"])
                                                ]),
                                                createVNode(VSelect, {
                                                  modelValue: field.type,
                                                  "onUpdate:modelValue": ($event) => field.type = $event,
                                                  items: fieldTypes,
                                                  label: "Type",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-form-dropdown",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VTextField, {
                                                  modelValue: field.label,
                                                  "onUpdate:modelValue": ($event) => field.label = $event,
                                                  label: "Label",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-label",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VTextField, {
                                                  modelValue: field.placeholder,
                                                  "onUpdate:modelValue": ($event) => field.placeholder = $event,
                                                  label: "Placeholder",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-text-box",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSelect, {
                                                  modelValue: field.icon,
                                                  "onUpdate:modelValue": ($event) => field.icon = $event,
                                                  items: unref(icons),
                                                  label: "Icon (optional)",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-emoticon",
                                                  class: "mb-2",
                                                  clearable: ""
                                                }, {
                                                  item: withCtx(({ item, props }) => [
                                                    createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                      prepend: withCtx(() => [
                                                        createVNode(VIcon, {
                                                          icon: item.raw
                                                        }, null, 8, ["icon"])
                                                      ]),
                                                      default: withCtx(() => [
                                                        createVNode(VListItemTitle, null, {
                                                          default: withCtx(() => [
                                                            createTextVNode(toDisplayString(item.raw.replace("mdi-", "")), 1)
                                                          ]),
                                                          _: 2
                                                        }, 1024)
                                                      ]),
                                                      _: 2
                                                    }, 1040)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                field.type === "select" || field.type === "radio" || field.type === "checkbox" ? (openBlock(), createBlock(VTextField, {
                                                  key: 0,
                                                  modelValue: field.options,
                                                  "onUpdate:modelValue": ($event) => field.options = $event,
                                                  label: "Options (comma separated)",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-format-list-bulleted",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                                createVNode("div", { class: "d-flex gap-2" }, [
                                                  createVNode(VSwitch, {
                                                    modelValue: field.required,
                                                    "onUpdate:modelValue": ($event) => field.required = $event,
                                                    color: "primary",
                                                    label: "Required",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  field.type === "text" ? (openBlock(), createBlock(VSwitch, {
                                                    key: 0,
                                                    modelValue: field.counter,
                                                    "onUpdate:modelValue": ($event) => field.counter = $event,
                                                    color: "primary",
                                                    label: "Counter",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                                ])
                                              ]);
                                            }), 128)),
                                            createVNode(VBtn, {
                                              color: "primary",
                                              "prepend-icon": "mdi-plus",
                                              variant: "tonal",
                                              block: "",
                                              onClick: addField
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(" Add Field ")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        })
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "style" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-palette")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Appearance")
                                          ]),
                                          createVNode(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props }) => [
                                              createVNode(VBtn, mergeProps({
                                                icon: "mdi-help-circle-outline",
                                                variant: "text",
                                                size: "small"
                                              }, props), null, 16)
                                            ]),
                                            default: withCtx(() => [
                                              createVNode("span", null, "Customize the visual appearance of form fields")
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2" }, "Field Variant"),
                                          createVNode(VChipGroup, {
                                            modelValue: formProperties.value.variant,
                                            "onUpdate:modelValue": ($event) => formProperties.value.variant = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(fieldVariants, (variant) => {
                                                return createVNode(VChip, {
                                                  key: variant,
                                                  size: "small",
                                                  value: variant
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(toDisplayString(variant), 1)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2" }, "Density"),
                                          createVNode(VChipGroup, {
                                            modelValue: formProperties.value.density,
                                            "onUpdate:modelValue": ($event) => formProperties.value.density = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(densityOptions, (density) => {
                                                return createVNode(VChip, {
                                                  key: density,
                                                  size: "small",
                                                  value: density
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(toDisplayString(density), 1)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: formProperties.value.disabled,
                                          "onUpdate:modelValue": ($event) => formProperties.value.disabled = $event,
                                          color: "primary",
                                          label: "Disabled",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: formProperties.value.readonly,
                                          "onUpdate:modelValue": ($event) => formProperties.value.readonly = $event,
                                          color: "primary",
                                          label: "Read Only",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: formProperties.value.persistentPlaceholder,
                                          "onUpdate:modelValue": ($event) => formProperties.value.persistentPlaceholder = $event,
                                          color: "primary",
                                          label: "Persistent Placeholder",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2" }, "Focus color"),
                                          createVNode(VBtnToggle, {
                                            modelValue: formProperties.value.color,
                                            "onUpdate:modelValue": ($event) => formProperties.value.color = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            "selected-class": "border-primary"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                return createVNode(VBtn, {
                                                  key: color.value,
                                                  value: color.value,
                                                  color: color.value !== "default" ? color.value : void 0,
                                                  size: "small",
                                                  variant: "tonal",
                                                  width: "40",
                                                  height: "40",
                                                  class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                }, {
                                                  default: withCtx(() => [
                                                    color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-palette-outline")
                                                      ]),
                                                      _: 1
                                                    })) : createCommentVNode("", true)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value", "color", "class"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ])
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "validation" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-check-circle")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Validation")
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: formProperties.value.validateOnBlur,
                                          "onUpdate:modelValue": ($event) => formProperties.value.validateOnBlur = $event,
                                          color: "primary",
                                          label: "Validate on Blur",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: formProperties.value.validateOnInput,
                                          "onUpdate:modelValue": ($event) => formProperties.value.validateOnInput = $event,
                                          color: "primary",
                                          label: "Validate on Input",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VTextField, {
                                          modelValue: formProperties.value.successMessage,
                                          "onUpdate:modelValue": ($event) => formProperties.value.successMessage = $event,
                                          label: "Success Message",
                                          variant: "outlined",
                                          density: "comfortable",
                                          "prepend-inner-icon": "mdi-check",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VTextField, {
                                          modelValue: formProperties.value.errorMessage,
                                          "onUpdate:modelValue": ($event) => formProperties.value.errorMessage = $event,
                                          label: "Error Message",
                                          variant: "outlined",
                                          density: "comfortable",
                                          "prepend-inner-icon": "mdi-alert",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2" }, "Message Position"),
                                          createVNode(VChipGroup, {
                                            modelValue: formProperties.value.messageLocation,
                                            "onUpdate:modelValue": ($event) => formProperties.value.messageLocation = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(messageLocations, (location) => {
                                                return createVNode(VChip, {
                                                  key: location,
                                                  size: "small",
                                                  value: location
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(toDisplayString(location), 1)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ])
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "buttons" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-gesture-tap-button")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Form Buttons")
                                        ]),
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            createVNode(VTextField, {
                                              modelValue: formProperties.value.submitButtonText,
                                              "onUpdate:modelValue": ($event) => formProperties.value.submitButtonText = $event,
                                              label: "Submit Button Text",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "prepend-inner-icon": "mdi-check-circle",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VTextField, {
                                              modelValue: formProperties.value.cancelButtonText,
                                              "onUpdate:modelValue": ($event) => formProperties.value.cancelButtonText = $event,
                                              label: "Cancel Button Text",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "prepend-inner-icon": "mdi-cancel",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-2" }, "Submit Button Color"),
                                              createVNode(VBtnToggle, {
                                                modelValue: formProperties.value.submitButtonColor,
                                                "onUpdate:modelValue": ($event) => formProperties.value.submitButtonColor = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                "selected-class": "border-primary"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: color.value,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color", "class"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-2" }, "Reset Button Color"),
                                              createVNode(VBtnToggle, {
                                                modelValue: formProperties.value.cancelButtonColor,
                                                "onUpdate:modelValue": ($event) => formProperties.value.cancelButtonColor = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                "selected-class": "border-primary"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: color.value,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color", "class"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-2" }, "Button Variant"),
                                              createVNode(VChipGroup, {
                                                modelValue: formProperties.value.buttonVariant,
                                                "onUpdate:modelValue": ($event) => formProperties.value.buttonVariant = $event,
                                                mandatory: "",
                                                "selected-class": "bg-primary text-white"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(buttonVariants, (variant) => {
                                                    return createVNode(VChip, {
                                                      key: variant,
                                                      size: "small",
                                                      value: variant
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(toDisplayString(variant), 1)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode(VSwitch, {
                                              modelValue: formProperties.value.blockButtons,
                                              "onUpdate:modelValue": ($event) => formProperties.value.blockButtons = $event,
                                              color: "primary",
                                              label: "Full Width Buttons",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          _: 1
                                        })
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "templates" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-file-document-outline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Form Templates")
                                          ]),
                                          createVNode(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props }) => [
                                              createVNode(VBtn, mergeProps({
                                                icon: "mdi-help-circle-outline",
                                                variant: "text",
                                                size: "small"
                                              }, props), null, 16)
                                            ]),
                                            default: withCtx(() => [
                                              createVNode("span", null, "Apply pre-defined templates or save your own")
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common forms."),
                                        createVNode(VCard, { class: "mb-4" }, {
                                          default: withCtx(() => [
                                            createVNode(VList, null, {
                                              default: withCtx(() => [
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("contact"),
                                                  "prepend-icon": "mdi-email-outline",
                                                  title: "Contact Form",
                                                  subtitle: "Name, email, subject and message fields"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("login"),
                                                  "prepend-icon": "mdi-login",
                                                  title: "Login Form",
                                                  subtitle: "Email/username and password with validation"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("register"),
                                                  "prepend-icon": "mdi-account-plus",
                                                  title: "Registration Form",
                                                  subtitle: "Complete user registration form"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("survey"),
                                                  "prepend-icon": "mdi-poll",
                                                  title: "Survey Form",
                                                  subtitle: "Various question types for feedback"
                                                }, null, 8, ["onClick"])
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VAlert, {
                                          type: "info",
                                          variant: "tonal",
                                          class: "mb-4"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(" Applying a template will replace your current form fields. ")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-content-save")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Save Current Form")
                                        ]),
                                        createVNode(VTextField, {
                                          modelValue: customTemplateName.value,
                                          "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                          label: "Template Name",
                                          variant: "outlined",
                                          density: "comfortable",
                                          "prepend-inner-icon": "mdi-tag",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VBtn, {
                                          color: "primary",
                                          "prepend-icon": "mdi-content-save",
                                          block: "",
                                          onClick: saveCurrentTemplate
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(" Save Current Form as Template ")
                                          ]),
                                          _: 1
                                        })
                                      ])
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"])
                            ]),
                            _: 1
                          })
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(`</div><div class="preview-area pa-4 d-flex flex-column" data-v-bbd8fce9${_scopeId2}><div class="d-flex justify-space-between align-center mb-3" data-v-bbd8fce9${_scopeId2}>`);
                  _push3(ssrRenderComponent(VChip, {
                    color: "primary",
                    variant: "flat",
                    size: "small",
                    class: "mr-2"
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(ssrRenderComponent(VIcon, {
                          start: "",
                          size: "small"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(`mdi-eye`);
                            } else {
                              return [
                                createTextVNode("mdi-eye")
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(` Live Preview `);
                      } else {
                        return [
                          createVNode(VIcon, {
                            start: "",
                            size: "small"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("mdi-eye")
                            ]),
                            _: 1
                          }),
                          createTextVNode(" Live Preview ")
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(`<div data-v-bbd8fce9${_scopeId2}>`);
                  if (previewMode.value === "desktop") {
                    _push3(ssrRenderComponent(VChip, {
                      color: "grey",
                      size: "small"
                    }, {
                      default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                        if (_push4) {
                          _push4(ssrRenderComponent(VIcon, {
                            start: "",
                            size: "small"
                          }, {
                            default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                              if (_push5) {
                                _push5(`mdi-monitor`);
                              } else {
                                return [
                                  createTextVNode("mdi-monitor")
                                ];
                              }
                            }),
                            _: 1
                          }, _parent4, _scopeId3));
                          _push4(` Desktop View `);
                        } else {
                          return [
                            createVNode(VIcon, {
                              start: "",
                              size: "small"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("mdi-monitor")
                              ]),
                              _: 1
                            }),
                            createTextVNode(" Desktop View ")
                          ];
                        }
                      }),
                      _: 1
                    }, _parent3, _scopeId2));
                  } else if (previewMode.value === "tablet") {
                    _push3(ssrRenderComponent(VChip, {
                      color: "grey",
                      size: "small"
                    }, {
                      default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                        if (_push4) {
                          _push4(ssrRenderComponent(VIcon, {
                            start: "",
                            size: "small"
                          }, {
                            default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                              if (_push5) {
                                _push5(`mdi-tablet`);
                              } else {
                                return [
                                  createTextVNode("mdi-tablet")
                                ];
                              }
                            }),
                            _: 1
                          }, _parent4, _scopeId3));
                          _push4(` Tablet View (${ssrInterpolate(previewWidth.value)}px) `);
                        } else {
                          return [
                            createVNode(VIcon, {
                              start: "",
                              size: "small"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("mdi-tablet")
                              ]),
                              _: 1
                            }),
                            createTextVNode(" Tablet View (" + toDisplayString(previewWidth.value) + "px) ", 1)
                          ];
                        }
                      }),
                      _: 1
                    }, _parent3, _scopeId2));
                  } else if (previewMode.value === "mobile") {
                    _push3(ssrRenderComponent(VChip, {
                      color: "grey",
                      size: "small"
                    }, {
                      default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                        if (_push4) {
                          _push4(ssrRenderComponent(VIcon, {
                            start: "",
                            size: "small"
                          }, {
                            default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                              if (_push5) {
                                _push5(`mdi-cellphone`);
                              } else {
                                return [
                                  createTextVNode("mdi-cellphone")
                                ];
                              }
                            }),
                            _: 1
                          }, _parent4, _scopeId3));
                          _push4(` Mobile View (${ssrInterpolate(previewWidth.value)}px) `);
                        } else {
                          return [
                            createVNode(VIcon, {
                              start: "",
                              size: "small"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("mdi-cellphone")
                              ]),
                              _: 1
                            }),
                            createTextVNode(" Mobile View (" + toDisplayString(previewWidth.value) + "px) ", 1)
                          ];
                        }
                      }),
                      _: 1
                    }, _parent3, _scopeId2));
                  } else {
                    _push3(`<!---->`);
                  }
                  _push3(`</div></div><div class="${ssrRenderClass([[
                    "preview-" + previewMode.value
                  ], "preview-canvas flex-grow-1 pa-4 bg-grey-darken-4"])}" style="${ssrRenderStyle({ maxWidth: previewWidth.value + "px" })}" data-v-bbd8fce9${_scopeId2}>`);
                  _push3(ssrRenderComponent(VForm, {
                    modelValue: formValid.value,
                    "onUpdate:modelValue": ($event) => formValid.value = $event,
                    "validate-on-blur": formProperties.value.validateOnBlur,
                    "validate-on-input": formProperties.value.validateOnInput,
                    class: "w-100",
                    color: formProperties.value.color,
                    style: { "max-width": "600px" },
                    ref_key: "form",
                    ref: form
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        if (showSuccessMessage.value) {
                          _push4(ssrRenderComponent(VAlert, {
                            type: "success",
                            class: "mb-4"
                          }, {
                            default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                              if (_push5) {
                                _push5(`${ssrInterpolate(formProperties.value.successMessage)}`);
                              } else {
                                return [
                                  createTextVNode(toDisplayString(formProperties.value.successMessage), 1)
                                ];
                              }
                            }),
                            _: 1
                          }, _parent4, _scopeId3));
                        } else {
                          _push4(`<!---->`);
                        }
                        _push4(`<!--[-->`);
                        ssrRenderList(formFields.value, (field, index) => {
                          _push4(`<!--[-->`);
                          if (field.type === "email") {
                            _push4(ssrRenderComponent(VTextField, {
                              modelValue: field.value,
                              "onUpdate:modelValue": ($event) => field.value = $event,
                              label: field.label,
                              placeholder: field.placeholder,
                              variant: formProperties.value.variant,
                              density: formProperties.value.density,
                              color: formProperties.value.color,
                              disabled: formProperties.value.disabled,
                              readonly: formProperties.value.readonly,
                              "persistent-placeholder": formProperties.value.persistentPlaceholder,
                              "prepend-icon": field.icon,
                              "base-color": "primary",
                              rules: field.required ? [
                                (v) => !!v || "This field is required",
                                (v) => /^[\w.-]+@([\w-]+\.)+[\w-]{2,4}$/.test(v) || "Invalid email format"
                              ] : [],
                              class: "mb-4"
                            }, null, _parent4, _scopeId3));
                          } else if (field.type === "text") {
                            _push4(ssrRenderComponent(VTextField, {
                              modelValue: field.value,
                              "onUpdate:modelValue": ($event) => field.value = $event,
                              label: field.label,
                              placeholder: field.placeholder,
                              variant: formProperties.value.variant,
                              density: formProperties.value.density,
                              color: formProperties.value.color,
                              disabled: formProperties.value.disabled,
                              readonly: formProperties.value.readonly,
                              "persistent-placeholder": formProperties.value.persistentPlaceholder,
                              "prepend-icon": field.icon,
                              counter: field.counter,
                              "base-color": "primary",
                              rules: field.required ? [(v) => !!v || "This field is required"] : [],
                              class: "mb-4"
                            }, null, _parent4, _scopeId3));
                          } else if (field.type === "password") {
                            _push4(ssrRenderComponent(VTextField, {
                              modelValue: field.value,
                              "onUpdate:modelValue": ($event) => field.value = $event,
                              type: "password",
                              label: field.label,
                              placeholder: field.placeholder,
                              variant: formProperties.value.variant,
                              density: formProperties.value.density,
                              color: formProperties.value.color,
                              disabled: formProperties.value.disabled,
                              readonly: formProperties.value.readonly,
                              "persistent-placeholder": formProperties.value.persistentPlaceholder,
                              "prepend-icon": field.icon,
                              "base-color": "primary",
                              rules: field.required ? [
                                (v) => !!v || "This field is required",
                                (v) => v.length >= 8 || "Password must be at least 8 characters",
                                (v) => /[A-Z]/.test(v) || "Password must contain at least one uppercase letter",
                                (v) => /[a-z]/.test(v) || "Password must contain at least one lowercase letter",
                                (v) => /[0-9]/.test(v) || "Password must contain at least one number",
                                (v) => /[^A-Za-z0-9]/.test(v) || "Password must contain at least one special character"
                              ] : [],
                              class: "mb-4"
                            }, null, _parent4, _scopeId3));
                          } else if (field.type === "textarea") {
                            _push4(ssrRenderComponent(VTextarea, {
                              modelValue: field.value,
                              "onUpdate:modelValue": ($event) => field.value = $event,
                              label: field.label,
                              placeholder: field.placeholder,
                              variant: formProperties.value.variant,
                              density: formProperties.value.density,
                              color: formProperties.value.color,
                              disabled: formProperties.value.disabled,
                              readonly: formProperties.value.readonly,
                              "persistent-placeholder": formProperties.value.persistentPlaceholder,
                              "prepend-icon": field.icon,
                              "base-color": "primary",
                              rules: field.required ? [(v) => !!v || "This field is required"] : [],
                              "auto-grow": "",
                              rows: "3",
                              class: "mb-4"
                            }, null, _parent4, _scopeId3));
                          } else if (field.type === "select") {
                            _push4(ssrRenderComponent(VSelect, {
                              modelValue: field.value,
                              "onUpdate:modelValue": ($event) => field.value = $event,
                              label: field.label,
                              items: field.options ? field.options.split(",").map((o) => o.trim()) : [],
                              placeholder: field.placeholder,
                              variant: formProperties.value.variant,
                              density: formProperties.value.density,
                              color: formProperties.value.color,
                              disabled: formProperties.value.disabled,
                              readonly: formProperties.value.readonly,
                              "persistent-placeholder": formProperties.value.persistentPlaceholder,
                              "prepend-icon": field.icon,
                              "base-color": "primary",
                              rules: field.required ? [(v) => !!v || "This field is required"] : [],
                              class: "mb-4"
                            }, null, _parent4, _scopeId3));
                          } else if (field.type === "radio") {
                            _push4(ssrRenderComponent(VRadioGroup, {
                              modelValue: field.value,
                              "onUpdate:modelValue": ($event) => field.value = $event,
                              label: field.label,
                              rules: field.required ? [(v) => !!v || "This field is required"] : [],
                              "prepend-icon": field.icon,
                              class: "mb-4"
                            }, {
                              default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                                if (_push5) {
                                  _push5(`<!--[-->`);
                                  ssrRenderList(field.options ? field.options.split(",").map((o) => o.trim()) : [], (option, optionIndex) => {
                                    _push5(ssrRenderComponent(VRadio, {
                                      key: index + "-" + optionIndex,
                                      label: option,
                                      value: option,
                                      color: formProperties.value.color,
                                      disabled: formProperties.value.disabled,
                                      readonly: formProperties.value.readonly
                                    }, null, _parent5, _scopeId4));
                                  });
                                  _push5(`<!--]-->`);
                                } else {
                                  return [
                                    (openBlock(true), createBlock(Fragment, null, renderList(field.options ? field.options.split(",").map((o) => o.trim()) : [], (option, optionIndex) => {
                                      return openBlock(), createBlock(VRadio, {
                                        key: index + "-" + optionIndex,
                                        label: option,
                                        value: option,
                                        color: formProperties.value.color,
                                        disabled: formProperties.value.disabled,
                                        readonly: formProperties.value.readonly
                                      }, null, 8, ["label", "value", "color", "disabled", "readonly"]);
                                    }), 128))
                                  ];
                                }
                              }),
                              _: 2
                            }, _parent4, _scopeId3));
                          } else if (field.type === "checkbox") {
                            _push4(ssrRenderComponent(VCheckbox, {
                              modelValue: field.value,
                              "onUpdate:modelValue": ($event) => field.value = $event,
                              label: field.label,
                              color: formProperties.value.color,
                              disabled: formProperties.value.disabled,
                              readonly: formProperties.value.readonly,
                              "prepend-icon": field.icon,
                              rules: field.required ? [(v) => !!v || "This field is required"] : [],
                              class: "mb-4"
                            }, null, _parent4, _scopeId3));
                          } else {
                            _push4(`<!---->`);
                          }
                          _push4(`<!--]-->`);
                        });
                        _push4(`<!--]--><div class="${ssrRenderClass([formProperties.value.blockButtons ? "flex-column mt-4" : "justify-end mt-4", "d-flex"])}" data-v-bbd8fce9${_scopeId3}>`);
                        _push4(ssrRenderComponent(VBtn, {
                          color: formProperties.value.cancelButtonColor,
                          class: formProperties.value.blockButtons ? "mb-2" : "mr-2",
                          variant: formProperties.value.buttonVariant,
                          block: formProperties.value.blockButtons,
                          onClick: resetForm
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(`${ssrInterpolate(formProperties.value.cancelButtonText)}`);
                            } else {
                              return [
                                createTextVNode(toDisplayString(formProperties.value.cancelButtonText), 1)
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VBtn, {
                          color: formProperties.value.submitButtonColor,
                          disabled: !formValid.value,
                          variant: formProperties.value.buttonVariant,
                          block: formProperties.value.blockButtons,
                          onClick: submitForm
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(`${ssrInterpolate(formProperties.value.submitButtonText)}`);
                            } else {
                              return [
                                createTextVNode(toDisplayString(formProperties.value.submitButtonText), 1)
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(`</div>`);
                      } else {
                        return [
                          showSuccessMessage.value ? (openBlock(), createBlock(VAlert, {
                            key: 0,
                            type: "success",
                            class: "mb-4"
                          }, {
                            default: withCtx(() => [
                              createTextVNode(toDisplayString(formProperties.value.successMessage), 1)
                            ]),
                            _: 1
                          })) : createCommentVNode("", true),
                          (openBlock(true), createBlock(Fragment, null, renderList(formFields.value, (field, index) => {
                            return openBlock(), createBlock(Fragment, { key: index }, [
                              field.type === "email" ? (openBlock(), createBlock(VTextField, {
                                key: 0,
                                modelValue: field.value,
                                "onUpdate:modelValue": ($event) => field.value = $event,
                                label: field.label,
                                placeholder: field.placeholder,
                                variant: formProperties.value.variant,
                                density: formProperties.value.density,
                                color: formProperties.value.color,
                                disabled: formProperties.value.disabled,
                                readonly: formProperties.value.readonly,
                                "persistent-placeholder": formProperties.value.persistentPlaceholder,
                                "prepend-icon": field.icon,
                                "base-color": "primary",
                                rules: field.required ? [
                                  (v) => !!v || "This field is required",
                                  (v) => /^[\w.-]+@([\w-]+\.)+[\w-]{2,4}$/.test(v) || "Invalid email format"
                                ] : [],
                                class: "mb-4"
                              }, null, 8, ["modelValue", "onUpdate:modelValue", "label", "placeholder", "variant", "density", "color", "disabled", "readonly", "persistent-placeholder", "prepend-icon", "rules"])) : field.type === "text" ? (openBlock(), createBlock(VTextField, {
                                key: 1,
                                modelValue: field.value,
                                "onUpdate:modelValue": ($event) => field.value = $event,
                                label: field.label,
                                placeholder: field.placeholder,
                                variant: formProperties.value.variant,
                                density: formProperties.value.density,
                                color: formProperties.value.color,
                                disabled: formProperties.value.disabled,
                                readonly: formProperties.value.readonly,
                                "persistent-placeholder": formProperties.value.persistentPlaceholder,
                                "prepend-icon": field.icon,
                                counter: field.counter,
                                "base-color": "primary",
                                rules: field.required ? [(v) => !!v || "This field is required"] : [],
                                class: "mb-4"
                              }, null, 8, ["modelValue", "onUpdate:modelValue", "label", "placeholder", "variant", "density", "color", "disabled", "readonly", "persistent-placeholder", "prepend-icon", "counter", "rules"])) : field.type === "password" ? (openBlock(), createBlock(VTextField, {
                                key: 2,
                                modelValue: field.value,
                                "onUpdate:modelValue": ($event) => field.value = $event,
                                type: "password",
                                label: field.label,
                                placeholder: field.placeholder,
                                variant: formProperties.value.variant,
                                density: formProperties.value.density,
                                color: formProperties.value.color,
                                disabled: formProperties.value.disabled,
                                readonly: formProperties.value.readonly,
                                "persistent-placeholder": formProperties.value.persistentPlaceholder,
                                "prepend-icon": field.icon,
                                "base-color": "primary",
                                rules: field.required ? [
                                  (v) => !!v || "This field is required",
                                  (v) => v.length >= 8 || "Password must be at least 8 characters",
                                  (v) => /[A-Z]/.test(v) || "Password must contain at least one uppercase letter",
                                  (v) => /[a-z]/.test(v) || "Password must contain at least one lowercase letter",
                                  (v) => /[0-9]/.test(v) || "Password must contain at least one number",
                                  (v) => /[^A-Za-z0-9]/.test(v) || "Password must contain at least one special character"
                                ] : [],
                                class: "mb-4"
                              }, null, 8, ["modelValue", "onUpdate:modelValue", "label", "placeholder", "variant", "density", "color", "disabled", "readonly", "persistent-placeholder", "prepend-icon", "rules"])) : field.type === "textarea" ? (openBlock(), createBlock(VTextarea, {
                                key: 3,
                                modelValue: field.value,
                                "onUpdate:modelValue": ($event) => field.value = $event,
                                label: field.label,
                                placeholder: field.placeholder,
                                variant: formProperties.value.variant,
                                density: formProperties.value.density,
                                color: formProperties.value.color,
                                disabled: formProperties.value.disabled,
                                readonly: formProperties.value.readonly,
                                "persistent-placeholder": formProperties.value.persistentPlaceholder,
                                "prepend-icon": field.icon,
                                "base-color": "primary",
                                rules: field.required ? [(v) => !!v || "This field is required"] : [],
                                "auto-grow": "",
                                rows: "3",
                                class: "mb-4"
                              }, null, 8, ["modelValue", "onUpdate:modelValue", "label", "placeholder", "variant", "density", "color", "disabled", "readonly", "persistent-placeholder", "prepend-icon", "rules"])) : field.type === "select" ? (openBlock(), createBlock(VSelect, {
                                key: 4,
                                modelValue: field.value,
                                "onUpdate:modelValue": ($event) => field.value = $event,
                                label: field.label,
                                items: field.options ? field.options.split(",").map((o) => o.trim()) : [],
                                placeholder: field.placeholder,
                                variant: formProperties.value.variant,
                                density: formProperties.value.density,
                                color: formProperties.value.color,
                                disabled: formProperties.value.disabled,
                                readonly: formProperties.value.readonly,
                                "persistent-placeholder": formProperties.value.persistentPlaceholder,
                                "prepend-icon": field.icon,
                                "base-color": "primary",
                                rules: field.required ? [(v) => !!v || "This field is required"] : [],
                                class: "mb-4"
                              }, null, 8, ["modelValue", "onUpdate:modelValue", "label", "items", "placeholder", "variant", "density", "color", "disabled", "readonly", "persistent-placeholder", "prepend-icon", "rules"])) : field.type === "radio" ? (openBlock(), createBlock(VRadioGroup, {
                                key: 5,
                                modelValue: field.value,
                                "onUpdate:modelValue": ($event) => field.value = $event,
                                label: field.label,
                                rules: field.required ? [(v) => !!v || "This field is required"] : [],
                                "prepend-icon": field.icon,
                                class: "mb-4"
                              }, {
                                default: withCtx(() => [
                                  (openBlock(true), createBlock(Fragment, null, renderList(field.options ? field.options.split(",").map((o) => o.trim()) : [], (option, optionIndex) => {
                                    return openBlock(), createBlock(VRadio, {
                                      key: index + "-" + optionIndex,
                                      label: option,
                                      value: option,
                                      color: formProperties.value.color,
                                      disabled: formProperties.value.disabled,
                                      readonly: formProperties.value.readonly
                                    }, null, 8, ["label", "value", "color", "disabled", "readonly"]);
                                  }), 128))
                                ]),
                                _: 2
                              }, 1032, ["modelValue", "onUpdate:modelValue", "label", "rules", "prepend-icon"])) : field.type === "checkbox" ? (openBlock(), createBlock(VCheckbox, {
                                key: 6,
                                modelValue: field.value,
                                "onUpdate:modelValue": ($event) => field.value = $event,
                                label: field.label,
                                color: formProperties.value.color,
                                disabled: formProperties.value.disabled,
                                readonly: formProperties.value.readonly,
                                "prepend-icon": field.icon,
                                rules: field.required ? [(v) => !!v || "This field is required"] : [],
                                class: "mb-4"
                              }, null, 8, ["modelValue", "onUpdate:modelValue", "label", "color", "disabled", "readonly", "prepend-icon", "rules"])) : createCommentVNode("", true)
                            ], 64);
                          }), 128)),
                          createVNode("div", {
                            class: ["d-flex", formProperties.value.blockButtons ? "flex-column mt-4" : "justify-end mt-4"]
                          }, [
                            createVNode(VBtn, {
                              color: formProperties.value.cancelButtonColor,
                              class: formProperties.value.blockButtons ? "mb-2" : "mr-2",
                              variant: formProperties.value.buttonVariant,
                              block: formProperties.value.blockButtons,
                              onClick: resetForm
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString(formProperties.value.cancelButtonText), 1)
                              ]),
                              _: 1
                            }, 8, ["color", "class", "variant", "block"]),
                            createVNode(VBtn, {
                              color: formProperties.value.submitButtonColor,
                              disabled: !formValid.value,
                              variant: formProperties.value.buttonVariant,
                              block: formProperties.value.blockButtons,
                              onClick: submitForm
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString(formProperties.value.submitButtonText), 1)
                              ]),
                              _: 1
                            }, 8, ["color", "disabled", "variant", "block"])
                          ], 2)
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(`</div><div class="d-flex justify-end mt-3" data-v-bbd8fce9${_scopeId2}>`);
                  _push3(ssrRenderComponent(VBtn, {
                    color: "error",
                    class: "mr-2",
                    "prepend-icon": "mdi-refresh",
                    variant: "tonal",
                    onClick: resetAllFields
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(` Reset All Fields `);
                      } else {
                        return [
                          createTextVNode(" Reset All Fields ")
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(ssrRenderComponent(VBtn, {
                    color: "secondary",
                    class: "mr-2",
                    "prepend-icon": "mdi-eye",
                    onClick: previewCode
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(` Preview Code `);
                      } else {
                        return [
                          createTextVNode(" Preview Code ")
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(ssrRenderComponent(VBtn, {
                    color: "primary",
                    "prepend-icon": "mdi-content-copy",
                    onClick: copyFormCode
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(` Copy Code `);
                      } else {
                        return [
                          createTextVNode(" Copy Code ")
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(`</div></div>`);
                } else {
                  return [
                    createVNode("div", {
                      class: "control-panel",
                      style: { "width": "350px" }
                    }, [
                      createVNode(VCard, {
                        flat: "",
                        class: "fill-height"
                      }, {
                        default: withCtx(() => [
                          createVNode("div", { class: "px-4 py-2 d-flex align-center" }, [
                            createVNode(VChip, {
                              color: "success",
                              "prepend-icon": "mdi-vuejs",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vue.js")
                              ]),
                              _: 1
                            }),
                            createVNode(VChip, {
                              color: "info",
                              "prepend-icon": "mdi-vuetify",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vuetify")
                              ]),
                              _: 1
                            })
                          ]),
                          createVNode("div", { class: "px-4 py-2 d-flex align-center justify-space-between" }, [
                            createVNode("div", null, [
                              createVNode(VChipGroup, {
                                modelValue: previewMode.value,
                                "onUpdate:modelValue": ($event) => previewMode.value = $event,
                                mandatory: "",
                                "selected-class": "bg-primary text-white"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VChip, {
                                    size: "small",
                                    value: "desktop"
                                  }, {
                                    default: withCtx(() => [
                                      createVNode(VIcon, {
                                        start: "",
                                        size: "small"
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode("mdi-monitor")
                                        ]),
                                        _: 1
                                      }),
                                      createTextVNode(" Desktop ")
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VChip, {
                                    size: "small",
                                    value: "tablet"
                                  }, {
                                    default: withCtx(() => [
                                      createVNode(VIcon, {
                                        start: "",
                                        size: "small"
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode("mdi-tablet")
                                        ]),
                                        _: 1
                                      }),
                                      createTextVNode(" Tablet ")
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VChip, {
                                    size: "small",
                                    value: "mobile"
                                  }, {
                                    default: withCtx(() => [
                                      createVNode(VIcon, {
                                        start: "",
                                        size: "small"
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode("mdi-cellphone")
                                        ]),
                                        _: 1
                                      }),
                                      createTextVNode(" Mobile ")
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"])
                            ])
                          ]),
                          createVNode(VTabs, {
                            modelValue: tab.value,
                            "onUpdate:modelValue": ($event) => tab.value = $event,
                            color: "primary",
                            "align-tabs": "center",
                            class: "px-4"
                          }, {
                            default: withCtx(() => [
                              createVNode(VTab, { value: "content" }, {
                                default: withCtx(() => [
                                  createTextVNode("Content")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "style" }, {
                                default: withCtx(() => [
                                  createTextVNode("Style")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "validation" }, {
                                default: withCtx(() => [
                                  createTextVNode("Validation")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "templates" }, {
                                default: withCtx(() => [
                                  createTextVNode("Templates")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "buttons" }, {
                                default: withCtx(() => [
                                  createTextVNode("Buttons")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue"]),
                          createVNode(VDivider),
                          createVNode(VCardText, {
                            class: "pa-0 fill-height",
                            style: { "overflow-y": "auto" }
                          }, {
                            default: withCtx(() => [
                              createVNode(VWindow, {
                                modelValue: tab.value,
                                "onUpdate:modelValue": ($event) => tab.value = $event,
                                class: "fill-height"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VWindowItem, { value: "content" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-form-select")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Form Fields")
                                          ]),
                                          createVNode(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props }) => [
                                              createVNode(VBtn, mergeProps({
                                                icon: "mdi-help-circle-outline",
                                                variant: "text",
                                                size: "small"
                                              }, props), null, 16)
                                            ]),
                                            default: withCtx(() => [
                                              createVNode("span", null, "Add, remove and configure form fields")
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            (openBlock(true), createBlock(Fragment, null, renderList(formFields.value, (field, index) => {
                                              return openBlock(), createBlock("div", {
                                                key: index,
                                                class: "mb-4"
                                              }, [
                                                createVNode("div", { class: "d-flex align-center justify-space-between mb-2" }, [
                                                  createVNode("span", { class: "text-subtitle-2" }, "Field " + toDisplayString(index + 1), 1),
                                                  createVNode(VBtn, {
                                                    icon: "mdi-delete",
                                                    color: "error",
                                                    variant: "text",
                                                    density: "compact",
                                                    onClick: ($event) => removeField(index)
                                                  }, null, 8, ["onClick"])
                                                ]),
                                                createVNode(VSelect, {
                                                  modelValue: field.type,
                                                  "onUpdate:modelValue": ($event) => field.type = $event,
                                                  items: fieldTypes,
                                                  label: "Type",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-form-dropdown",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VTextField, {
                                                  modelValue: field.label,
                                                  "onUpdate:modelValue": ($event) => field.label = $event,
                                                  label: "Label",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-label",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VTextField, {
                                                  modelValue: field.placeholder,
                                                  "onUpdate:modelValue": ($event) => field.placeholder = $event,
                                                  label: "Placeholder",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-text-box",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSelect, {
                                                  modelValue: field.icon,
                                                  "onUpdate:modelValue": ($event) => field.icon = $event,
                                                  items: unref(icons),
                                                  label: "Icon (optional)",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-emoticon",
                                                  class: "mb-2",
                                                  clearable: ""
                                                }, {
                                                  item: withCtx(({ item, props }) => [
                                                    createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                      prepend: withCtx(() => [
                                                        createVNode(VIcon, {
                                                          icon: item.raw
                                                        }, null, 8, ["icon"])
                                                      ]),
                                                      default: withCtx(() => [
                                                        createVNode(VListItemTitle, null, {
                                                          default: withCtx(() => [
                                                            createTextVNode(toDisplayString(item.raw.replace("mdi-", "")), 1)
                                                          ]),
                                                          _: 2
                                                        }, 1024)
                                                      ]),
                                                      _: 2
                                                    }, 1040)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                field.type === "select" || field.type === "radio" || field.type === "checkbox" ? (openBlock(), createBlock(VTextField, {
                                                  key: 0,
                                                  modelValue: field.options,
                                                  "onUpdate:modelValue": ($event) => field.options = $event,
                                                  label: "Options (comma separated)",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-format-list-bulleted",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                                createVNode("div", { class: "d-flex gap-2" }, [
                                                  createVNode(VSwitch, {
                                                    modelValue: field.required,
                                                    "onUpdate:modelValue": ($event) => field.required = $event,
                                                    color: "primary",
                                                    label: "Required",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  field.type === "text" ? (openBlock(), createBlock(VSwitch, {
                                                    key: 0,
                                                    modelValue: field.counter,
                                                    "onUpdate:modelValue": ($event) => field.counter = $event,
                                                    color: "primary",
                                                    label: "Counter",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                                ])
                                              ]);
                                            }), 128)),
                                            createVNode(VBtn, {
                                              color: "primary",
                                              "prepend-icon": "mdi-plus",
                                              variant: "tonal",
                                              block: "",
                                              onClick: addField
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(" Add Field ")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        })
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "style" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-palette")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Appearance")
                                          ]),
                                          createVNode(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props }) => [
                                              createVNode(VBtn, mergeProps({
                                                icon: "mdi-help-circle-outline",
                                                variant: "text",
                                                size: "small"
                                              }, props), null, 16)
                                            ]),
                                            default: withCtx(() => [
                                              createVNode("span", null, "Customize the visual appearance of form fields")
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2" }, "Field Variant"),
                                          createVNode(VChipGroup, {
                                            modelValue: formProperties.value.variant,
                                            "onUpdate:modelValue": ($event) => formProperties.value.variant = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(fieldVariants, (variant) => {
                                                return createVNode(VChip, {
                                                  key: variant,
                                                  size: "small",
                                                  value: variant
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(toDisplayString(variant), 1)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2" }, "Density"),
                                          createVNode(VChipGroup, {
                                            modelValue: formProperties.value.density,
                                            "onUpdate:modelValue": ($event) => formProperties.value.density = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(densityOptions, (density) => {
                                                return createVNode(VChip, {
                                                  key: density,
                                                  size: "small",
                                                  value: density
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(toDisplayString(density), 1)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: formProperties.value.disabled,
                                          "onUpdate:modelValue": ($event) => formProperties.value.disabled = $event,
                                          color: "primary",
                                          label: "Disabled",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: formProperties.value.readonly,
                                          "onUpdate:modelValue": ($event) => formProperties.value.readonly = $event,
                                          color: "primary",
                                          label: "Read Only",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: formProperties.value.persistentPlaceholder,
                                          "onUpdate:modelValue": ($event) => formProperties.value.persistentPlaceholder = $event,
                                          color: "primary",
                                          label: "Persistent Placeholder",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2" }, "Focus color"),
                                          createVNode(VBtnToggle, {
                                            modelValue: formProperties.value.color,
                                            "onUpdate:modelValue": ($event) => formProperties.value.color = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            "selected-class": "border-primary"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                return createVNode(VBtn, {
                                                  key: color.value,
                                                  value: color.value,
                                                  color: color.value !== "default" ? color.value : void 0,
                                                  size: "small",
                                                  variant: "tonal",
                                                  width: "40",
                                                  height: "40",
                                                  class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                }, {
                                                  default: withCtx(() => [
                                                    color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-palette-outline")
                                                      ]),
                                                      _: 1
                                                    })) : createCommentVNode("", true)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value", "color", "class"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ])
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "validation" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-check-circle")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Validation")
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: formProperties.value.validateOnBlur,
                                          "onUpdate:modelValue": ($event) => formProperties.value.validateOnBlur = $event,
                                          color: "primary",
                                          label: "Validate on Blur",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: formProperties.value.validateOnInput,
                                          "onUpdate:modelValue": ($event) => formProperties.value.validateOnInput = $event,
                                          color: "primary",
                                          label: "Validate on Input",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VTextField, {
                                          modelValue: formProperties.value.successMessage,
                                          "onUpdate:modelValue": ($event) => formProperties.value.successMessage = $event,
                                          label: "Success Message",
                                          variant: "outlined",
                                          density: "comfortable",
                                          "prepend-inner-icon": "mdi-check",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VTextField, {
                                          modelValue: formProperties.value.errorMessage,
                                          "onUpdate:modelValue": ($event) => formProperties.value.errorMessage = $event,
                                          label: "Error Message",
                                          variant: "outlined",
                                          density: "comfortable",
                                          "prepend-inner-icon": "mdi-alert",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2" }, "Message Position"),
                                          createVNode(VChipGroup, {
                                            modelValue: formProperties.value.messageLocation,
                                            "onUpdate:modelValue": ($event) => formProperties.value.messageLocation = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(messageLocations, (location) => {
                                                return createVNode(VChip, {
                                                  key: location,
                                                  size: "small",
                                                  value: location
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(toDisplayString(location), 1)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ])
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "buttons" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-gesture-tap-button")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Form Buttons")
                                        ]),
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            createVNode(VTextField, {
                                              modelValue: formProperties.value.submitButtonText,
                                              "onUpdate:modelValue": ($event) => formProperties.value.submitButtonText = $event,
                                              label: "Submit Button Text",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "prepend-inner-icon": "mdi-check-circle",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VTextField, {
                                              modelValue: formProperties.value.cancelButtonText,
                                              "onUpdate:modelValue": ($event) => formProperties.value.cancelButtonText = $event,
                                              label: "Cancel Button Text",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "prepend-inner-icon": "mdi-cancel",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-2" }, "Submit Button Color"),
                                              createVNode(VBtnToggle, {
                                                modelValue: formProperties.value.submitButtonColor,
                                                "onUpdate:modelValue": ($event) => formProperties.value.submitButtonColor = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                "selected-class": "border-primary"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: color.value,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color", "class"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-2" }, "Reset Button Color"),
                                              createVNode(VBtnToggle, {
                                                modelValue: formProperties.value.cancelButtonColor,
                                                "onUpdate:modelValue": ($event) => formProperties.value.cancelButtonColor = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                "selected-class": "border-primary"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: color.value,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color", "class"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-2" }, "Button Variant"),
                                              createVNode(VChipGroup, {
                                                modelValue: formProperties.value.buttonVariant,
                                                "onUpdate:modelValue": ($event) => formProperties.value.buttonVariant = $event,
                                                mandatory: "",
                                                "selected-class": "bg-primary text-white"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(buttonVariants, (variant) => {
                                                    return createVNode(VChip, {
                                                      key: variant,
                                                      size: "small",
                                                      value: variant
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(toDisplayString(variant), 1)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode(VSwitch, {
                                              modelValue: formProperties.value.blockButtons,
                                              "onUpdate:modelValue": ($event) => formProperties.value.blockButtons = $event,
                                              color: "primary",
                                              label: "Full Width Buttons",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          _: 1
                                        })
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "templates" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-file-document-outline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Form Templates")
                                          ]),
                                          createVNode(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props }) => [
                                              createVNode(VBtn, mergeProps({
                                                icon: "mdi-help-circle-outline",
                                                variant: "text",
                                                size: "small"
                                              }, props), null, 16)
                                            ]),
                                            default: withCtx(() => [
                                              createVNode("span", null, "Apply pre-defined templates or save your own")
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common forms."),
                                        createVNode(VCard, { class: "mb-4" }, {
                                          default: withCtx(() => [
                                            createVNode(VList, null, {
                                              default: withCtx(() => [
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("contact"),
                                                  "prepend-icon": "mdi-email-outline",
                                                  title: "Contact Form",
                                                  subtitle: "Name, email, subject and message fields"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("login"),
                                                  "prepend-icon": "mdi-login",
                                                  title: "Login Form",
                                                  subtitle: "Email/username and password with validation"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("register"),
                                                  "prepend-icon": "mdi-account-plus",
                                                  title: "Registration Form",
                                                  subtitle: "Complete user registration form"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("survey"),
                                                  "prepend-icon": "mdi-poll",
                                                  title: "Survey Form",
                                                  subtitle: "Various question types for feedback"
                                                }, null, 8, ["onClick"])
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VAlert, {
                                          type: "info",
                                          variant: "tonal",
                                          class: "mb-4"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(" Applying a template will replace your current form fields. ")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-content-save")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Save Current Form")
                                        ]),
                                        createVNode(VTextField, {
                                          modelValue: customTemplateName.value,
                                          "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                          label: "Template Name",
                                          variant: "outlined",
                                          density: "comfortable",
                                          "prepend-inner-icon": "mdi-tag",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VBtn, {
                                          color: "primary",
                                          "prepend-icon": "mdi-content-save",
                                          block: "",
                                          onClick: saveCurrentTemplate
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(" Save Current Form as Template ")
                                          ]),
                                          _: 1
                                        })
                                      ])
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"])
                            ]),
                            _: 1
                          })
                        ]),
                        _: 1
                      })
                    ]),
                    createVNode("div", { class: "preview-area pa-4 d-flex flex-column" }, [
                      createVNode("div", { class: "d-flex justify-space-between align-center mb-3" }, [
                        createVNode(VChip, {
                          color: "primary",
                          variant: "flat",
                          size: "small",
                          class: "mr-2"
                        }, {
                          default: withCtx(() => [
                            createVNode(VIcon, {
                              start: "",
                              size: "small"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("mdi-eye")
                              ]),
                              _: 1
                            }),
                            createTextVNode(" Live Preview ")
                          ]),
                          _: 1
                        }),
                        createVNode("div", null, [
                          previewMode.value === "desktop" ? (openBlock(), createBlock(VChip, {
                            key: 0,
                            color: "grey",
                            size: "small"
                          }, {
                            default: withCtx(() => [
                              createVNode(VIcon, {
                                start: "",
                                size: "small"
                              }, {
                                default: withCtx(() => [
                                  createTextVNode("mdi-monitor")
                                ]),
                                _: 1
                              }),
                              createTextVNode(" Desktop View ")
                            ]),
                            _: 1
                          })) : previewMode.value === "tablet" ? (openBlock(), createBlock(VChip, {
                            key: 1,
                            color: "grey",
                            size: "small"
                          }, {
                            default: withCtx(() => [
                              createVNode(VIcon, {
                                start: "",
                                size: "small"
                              }, {
                                default: withCtx(() => [
                                  createTextVNode("mdi-tablet")
                                ]),
                                _: 1
                              }),
                              createTextVNode(" Tablet View (" + toDisplayString(previewWidth.value) + "px) ", 1)
                            ]),
                            _: 1
                          })) : previewMode.value === "mobile" ? (openBlock(), createBlock(VChip, {
                            key: 2,
                            color: "grey",
                            size: "small"
                          }, {
                            default: withCtx(() => [
                              createVNode(VIcon, {
                                start: "",
                                size: "small"
                              }, {
                                default: withCtx(() => [
                                  createTextVNode("mdi-cellphone")
                                ]),
                                _: 1
                              }),
                              createTextVNode(" Mobile View (" + toDisplayString(previewWidth.value) + "px) ", 1)
                            ]),
                            _: 1
                          })) : createCommentVNode("", true)
                        ])
                      ]),
                      createVNode("div", {
                        class: ["preview-canvas flex-grow-1 pa-4 bg-grey-darken-4", [
                          "preview-" + previewMode.value
                        ]],
                        style: { maxWidth: previewWidth.value + "px" }
                      }, [
                        createVNode(VForm, {
                          modelValue: formValid.value,
                          "onUpdate:modelValue": ($event) => formValid.value = $event,
                          "validate-on-blur": formProperties.value.validateOnBlur,
                          "validate-on-input": formProperties.value.validateOnInput,
                          class: "w-100",
                          color: formProperties.value.color,
                          style: { "max-width": "600px" },
                          ref_key: "form",
                          ref: form
                        }, {
                          default: withCtx(() => [
                            showSuccessMessage.value ? (openBlock(), createBlock(VAlert, {
                              key: 0,
                              type: "success",
                              class: "mb-4"
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString(formProperties.value.successMessage), 1)
                              ]),
                              _: 1
                            })) : createCommentVNode("", true),
                            (openBlock(true), createBlock(Fragment, null, renderList(formFields.value, (field, index) => {
                              return openBlock(), createBlock(Fragment, { key: index }, [
                                field.type === "email" ? (openBlock(), createBlock(VTextField, {
                                  key: 0,
                                  modelValue: field.value,
                                  "onUpdate:modelValue": ($event) => field.value = $event,
                                  label: field.label,
                                  placeholder: field.placeholder,
                                  variant: formProperties.value.variant,
                                  density: formProperties.value.density,
                                  color: formProperties.value.color,
                                  disabled: formProperties.value.disabled,
                                  readonly: formProperties.value.readonly,
                                  "persistent-placeholder": formProperties.value.persistentPlaceholder,
                                  "prepend-icon": field.icon,
                                  "base-color": "primary",
                                  rules: field.required ? [
                                    (v) => !!v || "This field is required",
                                    (v) => /^[\w.-]+@([\w-]+\.)+[\w-]{2,4}$/.test(v) || "Invalid email format"
                                  ] : [],
                                  class: "mb-4"
                                }, null, 8, ["modelValue", "onUpdate:modelValue", "label", "placeholder", "variant", "density", "color", "disabled", "readonly", "persistent-placeholder", "prepend-icon", "rules"])) : field.type === "text" ? (openBlock(), createBlock(VTextField, {
                                  key: 1,
                                  modelValue: field.value,
                                  "onUpdate:modelValue": ($event) => field.value = $event,
                                  label: field.label,
                                  placeholder: field.placeholder,
                                  variant: formProperties.value.variant,
                                  density: formProperties.value.density,
                                  color: formProperties.value.color,
                                  disabled: formProperties.value.disabled,
                                  readonly: formProperties.value.readonly,
                                  "persistent-placeholder": formProperties.value.persistentPlaceholder,
                                  "prepend-icon": field.icon,
                                  counter: field.counter,
                                  "base-color": "primary",
                                  rules: field.required ? [(v) => !!v || "This field is required"] : [],
                                  class: "mb-4"
                                }, null, 8, ["modelValue", "onUpdate:modelValue", "label", "placeholder", "variant", "density", "color", "disabled", "readonly", "persistent-placeholder", "prepend-icon", "counter", "rules"])) : field.type === "password" ? (openBlock(), createBlock(VTextField, {
                                  key: 2,
                                  modelValue: field.value,
                                  "onUpdate:modelValue": ($event) => field.value = $event,
                                  type: "password",
                                  label: field.label,
                                  placeholder: field.placeholder,
                                  variant: formProperties.value.variant,
                                  density: formProperties.value.density,
                                  color: formProperties.value.color,
                                  disabled: formProperties.value.disabled,
                                  readonly: formProperties.value.readonly,
                                  "persistent-placeholder": formProperties.value.persistentPlaceholder,
                                  "prepend-icon": field.icon,
                                  "base-color": "primary",
                                  rules: field.required ? [
                                    (v) => !!v || "This field is required",
                                    (v) => v.length >= 8 || "Password must be at least 8 characters",
                                    (v) => /[A-Z]/.test(v) || "Password must contain at least one uppercase letter",
                                    (v) => /[a-z]/.test(v) || "Password must contain at least one lowercase letter",
                                    (v) => /[0-9]/.test(v) || "Password must contain at least one number",
                                    (v) => /[^A-Za-z0-9]/.test(v) || "Password must contain at least one special character"
                                  ] : [],
                                  class: "mb-4"
                                }, null, 8, ["modelValue", "onUpdate:modelValue", "label", "placeholder", "variant", "density", "color", "disabled", "readonly", "persistent-placeholder", "prepend-icon", "rules"])) : field.type === "textarea" ? (openBlock(), createBlock(VTextarea, {
                                  key: 3,
                                  modelValue: field.value,
                                  "onUpdate:modelValue": ($event) => field.value = $event,
                                  label: field.label,
                                  placeholder: field.placeholder,
                                  variant: formProperties.value.variant,
                                  density: formProperties.value.density,
                                  color: formProperties.value.color,
                                  disabled: formProperties.value.disabled,
                                  readonly: formProperties.value.readonly,
                                  "persistent-placeholder": formProperties.value.persistentPlaceholder,
                                  "prepend-icon": field.icon,
                                  "base-color": "primary",
                                  rules: field.required ? [(v) => !!v || "This field is required"] : [],
                                  "auto-grow": "",
                                  rows: "3",
                                  class: "mb-4"
                                }, null, 8, ["modelValue", "onUpdate:modelValue", "label", "placeholder", "variant", "density", "color", "disabled", "readonly", "persistent-placeholder", "prepend-icon", "rules"])) : field.type === "select" ? (openBlock(), createBlock(VSelect, {
                                  key: 4,
                                  modelValue: field.value,
                                  "onUpdate:modelValue": ($event) => field.value = $event,
                                  label: field.label,
                                  items: field.options ? field.options.split(",").map((o) => o.trim()) : [],
                                  placeholder: field.placeholder,
                                  variant: formProperties.value.variant,
                                  density: formProperties.value.density,
                                  color: formProperties.value.color,
                                  disabled: formProperties.value.disabled,
                                  readonly: formProperties.value.readonly,
                                  "persistent-placeholder": formProperties.value.persistentPlaceholder,
                                  "prepend-icon": field.icon,
                                  "base-color": "primary",
                                  rules: field.required ? [(v) => !!v || "This field is required"] : [],
                                  class: "mb-4"
                                }, null, 8, ["modelValue", "onUpdate:modelValue", "label", "items", "placeholder", "variant", "density", "color", "disabled", "readonly", "persistent-placeholder", "prepend-icon", "rules"])) : field.type === "radio" ? (openBlock(), createBlock(VRadioGroup, {
                                  key: 5,
                                  modelValue: field.value,
                                  "onUpdate:modelValue": ($event) => field.value = $event,
                                  label: field.label,
                                  rules: field.required ? [(v) => !!v || "This field is required"] : [],
                                  "prepend-icon": field.icon,
                                  class: "mb-4"
                                }, {
                                  default: withCtx(() => [
                                    (openBlock(true), createBlock(Fragment, null, renderList(field.options ? field.options.split(",").map((o) => o.trim()) : [], (option, optionIndex) => {
                                      return openBlock(), createBlock(VRadio, {
                                        key: index + "-" + optionIndex,
                                        label: option,
                                        value: option,
                                        color: formProperties.value.color,
                                        disabled: formProperties.value.disabled,
                                        readonly: formProperties.value.readonly
                                      }, null, 8, ["label", "value", "color", "disabled", "readonly"]);
                                    }), 128))
                                  ]),
                                  _: 2
                                }, 1032, ["modelValue", "onUpdate:modelValue", "label", "rules", "prepend-icon"])) : field.type === "checkbox" ? (openBlock(), createBlock(VCheckbox, {
                                  key: 6,
                                  modelValue: field.value,
                                  "onUpdate:modelValue": ($event) => field.value = $event,
                                  label: field.label,
                                  color: formProperties.value.color,
                                  disabled: formProperties.value.disabled,
                                  readonly: formProperties.value.readonly,
                                  "prepend-icon": field.icon,
                                  rules: field.required ? [(v) => !!v || "This field is required"] : [],
                                  class: "mb-4"
                                }, null, 8, ["modelValue", "onUpdate:modelValue", "label", "color", "disabled", "readonly", "prepend-icon", "rules"])) : createCommentVNode("", true)
                              ], 64);
                            }), 128)),
                            createVNode("div", {
                              class: ["d-flex", formProperties.value.blockButtons ? "flex-column mt-4" : "justify-end mt-4"]
                            }, [
                              createVNode(VBtn, {
                                color: formProperties.value.cancelButtonColor,
                                class: formProperties.value.blockButtons ? "mb-2" : "mr-2",
                                variant: formProperties.value.buttonVariant,
                                block: formProperties.value.blockButtons,
                                onClick: resetForm
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(toDisplayString(formProperties.value.cancelButtonText), 1)
                                ]),
                                _: 1
                              }, 8, ["color", "class", "variant", "block"]),
                              createVNode(VBtn, {
                                color: formProperties.value.submitButtonColor,
                                disabled: !formValid.value,
                                variant: formProperties.value.buttonVariant,
                                block: formProperties.value.blockButtons,
                                onClick: submitForm
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(toDisplayString(formProperties.value.submitButtonText), 1)
                                ]),
                                _: 1
                              }, 8, ["color", "disabled", "variant", "block"])
                            ], 2)
                          ]),
                          _: 1
                        }, 8, ["modelValue", "onUpdate:modelValue", "validate-on-blur", "validate-on-input", "color"])
                      ], 6),
                      createVNode("div", { class: "d-flex justify-end mt-3" }, [
                        createVNode(VBtn, {
                          color: "error",
                          class: "mr-2",
                          "prepend-icon": "mdi-refresh",
                          variant: "tonal",
                          onClick: resetAllFields
                        }, {
                          default: withCtx(() => [
                            createTextVNode(" Reset All Fields ")
                          ]),
                          _: 1
                        }),
                        createVNode(VBtn, {
                          color: "secondary",
                          class: "mr-2",
                          "prepend-icon": "mdi-eye",
                          onClick: previewCode
                        }, {
                          default: withCtx(() => [
                            createTextVNode(" Preview Code ")
                          ]),
                          _: 1
                        }),
                        createVNode(VBtn, {
                          color: "primary",
                          "prepend-icon": "mdi-content-copy",
                          onClick: copyFormCode
                        }, {
                          default: withCtx(() => [
                            createTextVNode(" Copy Code ")
                          ]),
                          _: 1
                        })
                      ])
                    ])
                  ];
                }
              }),
              _: 1
            }, _parent2, _scopeId));
            _push2(ssrRenderComponent(VDialog, {
              modelValue: showCodeDialog.value,
              "onUpdate:modelValue": ($event) => showCodeDialog.value = $event,
              width: "800"
            }, {
              default: withCtx((_2, _push3, _parent3, _scopeId2) => {
                if (_push3) {
                  _push3(ssrRenderComponent(VCard, { class: "bg-grey-darken-4" }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(ssrRenderComponent(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VTabs, {
                                modelValue: codeTab.value,
                                "onUpdate:modelValue": ($event) => codeTab.value = $event,
                                color: "primary"
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VTab, { value: "template" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`Template`);
                                        } else {
                                          return [
                                            createTextVNode("Template")
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VTab, { value: "script" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`Script`);
                                        } else {
                                          return [
                                            createTextVNode("Script")
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VTab, { value: "theme" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`Theme`);
                                        } else {
                                          return [
                                            createTextVNode("Theme")
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                  } else {
                                    return [
                                      createVNode(VTab, { value: "template" }, {
                                        default: withCtx(() => [
                                          createTextVNode("Template")
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VTab, { value: "script" }, {
                                        default: withCtx(() => [
                                          createTextVNode("Script")
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VTab, { value: "theme" }, {
                                        default: withCtx(() => [
                                          createTextVNode("Theme")
                                        ]),
                                        _: 1
                                      })
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VBtn, {
                                icon: "mdi-close",
                                variant: "text",
                                onClick: ($event) => showCodeDialog.value = false
                              }, null, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VTabs, {
                                  modelValue: codeTab.value,
                                  "onUpdate:modelValue": ($event) => codeTab.value = $event,
                                  color: "primary"
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VTab, { value: "template" }, {
                                      default: withCtx(() => [
                                        createTextVNode("Template")
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VTab, { value: "script" }, {
                                      default: withCtx(() => [
                                        createTextVNode("Script")
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VTab, { value: "theme" }, {
                                      default: withCtx(() => [
                                        createTextVNode("Theme")
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }, 8, ["modelValue", "onUpdate:modelValue"]),
                                createVNode(VBtn, {
                                  icon: "mdi-close",
                                  variant: "text",
                                  onClick: ($event) => showCodeDialog.value = false
                                }, null, 8, ["onClick"])
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VCardText, null, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VWindow, {
                                modelValue: codeTab.value,
                                "onUpdate:modelValue": ($event) => codeTab.value = $event
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VWindowItem, { value: "template" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(ssrRenderComponent(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`${ssrInterpolate(generateTemplateCode())}`);
                                              } else {
                                                return [
                                                  createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                        } else {
                                          return [
                                            createVNode(VSheet, {
                                              class: "bg-grey-darken-4 rounded pa-4",
                                              style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                              ]),
                                              _: 1
                                            })
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "script" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(ssrRenderComponent(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`${ssrInterpolate(generateScriptCode())}`);
                                              } else {
                                                return [
                                                  createTextVNode(toDisplayString(generateScriptCode()), 1)
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                        } else {
                                          return [
                                            createVNode(VSheet, {
                                              class: "bg-grey-darken-4 rounded pa-4",
                                              style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(generateScriptCode()), 1)
                                              ]),
                                              _: 1
                                            })
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "theme" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(ssrRenderComponent(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`${ssrInterpolate(unref(theme))}`);
                                              } else {
                                                return [
                                                  createTextVNode(toDisplayString(unref(theme)), 1)
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                        } else {
                                          return [
                                            createVNode(VSheet, {
                                              class: "bg-grey-darken-4 rounded pa-4",
                                              style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(unref(theme)), 1)
                                              ]),
                                              _: 1
                                            })
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                  } else {
                                    return [
                                      createVNode(VWindowItem, { value: "template" }, {
                                        default: withCtx(() => [
                                          createVNode(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "script" }, {
                                        default: withCtx(() => [
                                          createVNode(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString(generateScriptCode()), 1)
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "theme" }, {
                                        default: withCtx(() => [
                                          createVNode(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString(unref(theme)), 1)
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        _: 1
                                      })
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VWindow, {
                                  modelValue: codeTab.value,
                                  "onUpdate:modelValue": ($event) => codeTab.value = $event
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VWindowItem, { value: "template" }, {
                                      default: withCtx(() => [
                                        createVNode(VSheet, {
                                          class: "bg-grey-darken-4 rounded pa-4",
                                          style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "script" }, {
                                      default: withCtx(() => [
                                        createVNode(VSheet, {
                                          class: "bg-grey-darken-4 rounded pa-4",
                                          style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(generateScriptCode()), 1)
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "theme" }, {
                                      default: withCtx(() => [
                                        createVNode(VSheet, {
                                          class: "bg-grey-darken-4 rounded pa-4",
                                          style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(unref(theme)), 1)
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }, 8, ["modelValue", "onUpdate:modelValue"])
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VCardActions, { class: "pa-4" }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VBtn, {
                                color: "secondary",
                                "prepend-icon": "mdi-content-copy",
                                onClick: copyCurrentTab
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(` Copy Current Tab `);
                                  } else {
                                    return [
                                      createTextVNode(" Copy Current Tab ")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VBtn, {
                                  color: "secondary",
                                  "prepend-icon": "mdi-content-copy",
                                  onClick: copyCurrentTab
                                }, {
                                  default: withCtx(() => [
                                    createTextVNode(" Copy Current Tab ")
                                  ]),
                                  _: 1
                                })
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                      } else {
                        return [
                          createVNode(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                            default: withCtx(() => [
                              createVNode(VTabs, {
                                modelValue: codeTab.value,
                                "onUpdate:modelValue": ($event) => codeTab.value = $event,
                                color: "primary"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VTab, { value: "template" }, {
                                    default: withCtx(() => [
                                      createTextVNode("Template")
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VTab, { value: "script" }, {
                                    default: withCtx(() => [
                                      createTextVNode("Script")
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VTab, { value: "theme" }, {
                                    default: withCtx(() => [
                                      createTextVNode("Theme")
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"]),
                              createVNode(VBtn, {
                                icon: "mdi-close",
                                variant: "text",
                                onClick: ($event) => showCodeDialog.value = false
                              }, null, 8, ["onClick"])
                            ]),
                            _: 1
                          }),
                          createVNode(VCardText, null, {
                            default: withCtx(() => [
                              createVNode(VWindow, {
                                modelValue: codeTab.value,
                                "onUpdate:modelValue": ($event) => codeTab.value = $event
                              }, {
                                default: withCtx(() => [
                                  createVNode(VWindowItem, { value: "template" }, {
                                    default: withCtx(() => [
                                      createVNode(VSheet, {
                                        class: "bg-grey-darken-4 rounded pa-4",
                                        style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                        ]),
                                        _: 1
                                      })
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "script" }, {
                                    default: withCtx(() => [
                                      createVNode(VSheet, {
                                        class: "bg-grey-darken-4 rounded pa-4",
                                        style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(generateScriptCode()), 1)
                                        ]),
                                        _: 1
                                      })
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "theme" }, {
                                    default: withCtx(() => [
                                      createVNode(VSheet, {
                                        class: "bg-grey-darken-4 rounded pa-4",
                                        style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(unref(theme)), 1)
                                        ]),
                                        _: 1
                                      })
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"])
                            ]),
                            _: 1
                          }),
                          createVNode(VCardActions, { class: "pa-4" }, {
                            default: withCtx(() => [
                              createVNode(VBtn, {
                                color: "secondary",
                                "prepend-icon": "mdi-content-copy",
                                onClick: copyCurrentTab
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(" Copy Current Tab ")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          })
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                } else {
                  return [
                    createVNode(VCard, { class: "bg-grey-darken-4" }, {
                      default: withCtx(() => [
                        createVNode(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                          default: withCtx(() => [
                            createVNode(VTabs, {
                              modelValue: codeTab.value,
                              "onUpdate:modelValue": ($event) => codeTab.value = $event,
                              color: "primary"
                            }, {
                              default: withCtx(() => [
                                createVNode(VTab, { value: "template" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Template")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "script" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Script")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "theme" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Theme")
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            }, 8, ["modelValue", "onUpdate:modelValue"]),
                            createVNode(VBtn, {
                              icon: "mdi-close",
                              variant: "text",
                              onClick: ($event) => showCodeDialog.value = false
                            }, null, 8, ["onClick"])
                          ]),
                          _: 1
                        }),
                        createVNode(VCardText, null, {
                          default: withCtx(() => [
                            createVNode(VWindow, {
                              modelValue: codeTab.value,
                              "onUpdate:modelValue": ($event) => codeTab.value = $event
                            }, {
                              default: withCtx(() => [
                                createVNode(VWindowItem, { value: "template" }, {
                                  default: withCtx(() => [
                                    createVNode(VSheet, {
                                      class: "bg-grey-darken-4 rounded pa-4",
                                      style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "script" }, {
                                  default: withCtx(() => [
                                    createVNode(VSheet, {
                                      class: "bg-grey-darken-4 rounded pa-4",
                                      style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode(toDisplayString(generateScriptCode()), 1)
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "theme" }, {
                                  default: withCtx(() => [
                                    createVNode(VSheet, {
                                      class: "bg-grey-darken-4 rounded pa-4",
                                      style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode(toDisplayString(unref(theme)), 1)
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            }, 8, ["modelValue", "onUpdate:modelValue"])
                          ]),
                          _: 1
                        }),
                        createVNode(VCardActions, { class: "pa-4" }, {
                          default: withCtx(() => [
                            createVNode(VBtn, {
                              color: "secondary",
                              "prepend-icon": "mdi-content-copy",
                              onClick: copyCurrentTab
                            }, {
                              default: withCtx(() => [
                                createTextVNode(" Copy Current Tab ")
                              ]),
                              _: 1
                            })
                          ]),
                          _: 1
                        })
                      ]),
                      _: 1
                    })
                  ];
                }
              }),
              _: 1
            }, _parent2, _scopeId));
            _push2(ssrRenderComponent(Snackbar, {
              modelValue: showSnackbarMessage.value,
              "onUpdate:modelValue": ($event) => showSnackbarMessage.value = $event,
              text: snackbarText.value,
              color: snackbarColor.value
            }, null, _parent2, _scopeId));
          } else {
            return [
              createVNode(VMain, { class: "w-100 h-100 overflow-hidden d-flex" }, {
                default: withCtx(() => [
                  createVNode("div", {
                    class: "control-panel",
                    style: { "width": "350px" }
                  }, [
                    createVNode(VCard, {
                      flat: "",
                      class: "fill-height"
                    }, {
                      default: withCtx(() => [
                        createVNode("div", { class: "px-4 py-2 d-flex align-center" }, [
                          createVNode(VChip, {
                            color: "success",
                            "prepend-icon": "mdi-vuejs",
                            size: "small",
                            class: "mr-2 px-4 py-2"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("Vue.js")
                            ]),
                            _: 1
                          }),
                          createVNode(VChip, {
                            color: "info",
                            "prepend-icon": "mdi-vuetify",
                            size: "small",
                            class: "mr-2 px-4 py-2"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("Vuetify")
                            ]),
                            _: 1
                          })
                        ]),
                        createVNode("div", { class: "px-4 py-2 d-flex align-center justify-space-between" }, [
                          createVNode("div", null, [
                            createVNode(VChipGroup, {
                              modelValue: previewMode.value,
                              "onUpdate:modelValue": ($event) => previewMode.value = $event,
                              mandatory: "",
                              "selected-class": "bg-primary text-white"
                            }, {
                              default: withCtx(() => [
                                createVNode(VChip, {
                                  size: "small",
                                  value: "desktop"
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VIcon, {
                                      start: "",
                                      size: "small"
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode("mdi-monitor")
                                      ]),
                                      _: 1
                                    }),
                                    createTextVNode(" Desktop ")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VChip, {
                                  size: "small",
                                  value: "tablet"
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VIcon, {
                                      start: "",
                                      size: "small"
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode("mdi-tablet")
                                      ]),
                                      _: 1
                                    }),
                                    createTextVNode(" Tablet ")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VChip, {
                                  size: "small",
                                  value: "mobile"
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VIcon, {
                                      start: "",
                                      size: "small"
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode("mdi-cellphone")
                                      ]),
                                      _: 1
                                    }),
                                    createTextVNode(" Mobile ")
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            }, 8, ["modelValue", "onUpdate:modelValue"])
                          ])
                        ]),
                        createVNode(VTabs, {
                          modelValue: tab.value,
                          "onUpdate:modelValue": ($event) => tab.value = $event,
                          color: "primary",
                          "align-tabs": "center",
                          class: "px-4"
                        }, {
                          default: withCtx(() => [
                            createVNode(VTab, { value: "content" }, {
                              default: withCtx(() => [
                                createTextVNode("Content")
                              ]),
                              _: 1
                            }),
                            createVNode(VTab, { value: "style" }, {
                              default: withCtx(() => [
                                createTextVNode("Style")
                              ]),
                              _: 1
                            }),
                            createVNode(VTab, { value: "validation" }, {
                              default: withCtx(() => [
                                createTextVNode("Validation")
                              ]),
                              _: 1
                            }),
                            createVNode(VTab, { value: "templates" }, {
                              default: withCtx(() => [
                                createTextVNode("Templates")
                              ]),
                              _: 1
                            }),
                            createVNode(VTab, { value: "buttons" }, {
                              default: withCtx(() => [
                                createTextVNode("Buttons")
                              ]),
                              _: 1
                            })
                          ]),
                          _: 1
                        }, 8, ["modelValue", "onUpdate:modelValue"]),
                        createVNode(VDivider),
                        createVNode(VCardText, {
                          class: "pa-0 fill-height",
                          style: { "overflow-y": "auto" }
                        }, {
                          default: withCtx(() => [
                            createVNode(VWindow, {
                              modelValue: tab.value,
                              "onUpdate:modelValue": ($event) => tab.value = $event,
                              class: "fill-height"
                            }, {
                              default: withCtx(() => [
                                createVNode(VWindowItem, { value: "content" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                        createVNode("div", { class: "d-flex align-center" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-form-select")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Form Fields")
                                        ]),
                                        createVNode(VTooltip, { location: "bottom" }, {
                                          activator: withCtx(({ props }) => [
                                            createVNode(VBtn, mergeProps({
                                              icon: "mdi-help-circle-outline",
                                              variant: "text",
                                              size: "small"
                                            }, props), null, 16)
                                          ]),
                                          default: withCtx(() => [
                                            createVNode("span", null, "Add, remove and configure form fields")
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      createVNode(VCard, { class: "mb-4 pa-3" }, {
                                        default: withCtx(() => [
                                          (openBlock(true), createBlock(Fragment, null, renderList(formFields.value, (field, index) => {
                                            return openBlock(), createBlock("div", {
                                              key: index,
                                              class: "mb-4"
                                            }, [
                                              createVNode("div", { class: "d-flex align-center justify-space-between mb-2" }, [
                                                createVNode("span", { class: "text-subtitle-2" }, "Field " + toDisplayString(index + 1), 1),
                                                createVNode(VBtn, {
                                                  icon: "mdi-delete",
                                                  color: "error",
                                                  variant: "text",
                                                  density: "compact",
                                                  onClick: ($event) => removeField(index)
                                                }, null, 8, ["onClick"])
                                              ]),
                                              createVNode(VSelect, {
                                                modelValue: field.type,
                                                "onUpdate:modelValue": ($event) => field.type = $event,
                                                items: fieldTypes,
                                                label: "Type",
                                                variant: "outlined",
                                                density: "compact",
                                                "prepend-inner-icon": "mdi-form-dropdown",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VTextField, {
                                                modelValue: field.label,
                                                "onUpdate:modelValue": ($event) => field.label = $event,
                                                label: "Label",
                                                variant: "outlined",
                                                density: "compact",
                                                "prepend-inner-icon": "mdi-label",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VTextField, {
                                                modelValue: field.placeholder,
                                                "onUpdate:modelValue": ($event) => field.placeholder = $event,
                                                label: "Placeholder",
                                                variant: "outlined",
                                                density: "compact",
                                                "prepend-inner-icon": "mdi-text-box",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSelect, {
                                                modelValue: field.icon,
                                                "onUpdate:modelValue": ($event) => field.icon = $event,
                                                items: unref(icons),
                                                label: "Icon (optional)",
                                                variant: "outlined",
                                                density: "compact",
                                                "prepend-inner-icon": "mdi-emoticon",
                                                class: "mb-2",
                                                clearable: ""
                                              }, {
                                                item: withCtx(({ item, props }) => [
                                                  createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                    prepend: withCtx(() => [
                                                      createVNode(VIcon, {
                                                        icon: item.raw
                                                      }, null, 8, ["icon"])
                                                    ]),
                                                    default: withCtx(() => [
                                                      createVNode(VListItemTitle, null, {
                                                        default: withCtx(() => [
                                                          createTextVNode(toDisplayString(item.raw.replace("mdi-", "")), 1)
                                                        ]),
                                                        _: 2
                                                      }, 1024)
                                                    ]),
                                                    _: 2
                                                  }, 1040)
                                                ]),
                                                _: 2
                                              }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                              field.type === "select" || field.type === "radio" || field.type === "checkbox" ? (openBlock(), createBlock(VTextField, {
                                                key: 0,
                                                modelValue: field.options,
                                                "onUpdate:modelValue": ($event) => field.options = $event,
                                                label: "Options (comma separated)",
                                                variant: "outlined",
                                                density: "compact",
                                                "prepend-inner-icon": "mdi-format-list-bulleted",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                              createVNode("div", { class: "d-flex gap-2" }, [
                                                createVNode(VSwitch, {
                                                  modelValue: field.required,
                                                  "onUpdate:modelValue": ($event) => field.required = $event,
                                                  color: "primary",
                                                  label: "Required",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                field.type === "text" ? (openBlock(), createBlock(VSwitch, {
                                                  key: 0,
                                                  modelValue: field.counter,
                                                  "onUpdate:modelValue": ($event) => field.counter = $event,
                                                  color: "primary",
                                                  label: "Counter",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                              ])
                                            ]);
                                          }), 128)),
                                          createVNode(VBtn, {
                                            color: "primary",
                                            "prepend-icon": "mdi-plus",
                                            variant: "tonal",
                                            block: "",
                                            onClick: addField
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(" Add Field ")
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        _: 1
                                      })
                                    ])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "style" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                        createVNode("div", { class: "d-flex align-center" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-palette")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Appearance")
                                        ]),
                                        createVNode(VTooltip, { location: "bottom" }, {
                                          activator: withCtx(({ props }) => [
                                            createVNode(VBtn, mergeProps({
                                              icon: "mdi-help-circle-outline",
                                              variant: "text",
                                              size: "small"
                                            }, props), null, 16)
                                          ]),
                                          default: withCtx(() => [
                                            createVNode("span", null, "Customize the visual appearance of form fields")
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-2" }, "Field Variant"),
                                        createVNode(VChipGroup, {
                                          modelValue: formProperties.value.variant,
                                          "onUpdate:modelValue": ($event) => formProperties.value.variant = $event,
                                          mandatory: "",
                                          "selected-class": "bg-primary text-white"
                                        }, {
                                          default: withCtx(() => [
                                            (openBlock(), createBlock(Fragment, null, renderList(fieldVariants, (variant) => {
                                              return createVNode(VChip, {
                                                key: variant,
                                                size: "small",
                                                value: variant
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(toDisplayString(variant), 1)
                                                ]),
                                                _: 2
                                              }, 1032, ["value"]);
                                            }), 64))
                                          ]),
                                          _: 1
                                        }, 8, ["modelValue", "onUpdate:modelValue"])
                                      ]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-2" }, "Density"),
                                        createVNode(VChipGroup, {
                                          modelValue: formProperties.value.density,
                                          "onUpdate:modelValue": ($event) => formProperties.value.density = $event,
                                          mandatory: "",
                                          "selected-class": "bg-primary text-white"
                                        }, {
                                          default: withCtx(() => [
                                            (openBlock(), createBlock(Fragment, null, renderList(densityOptions, (density) => {
                                              return createVNode(VChip, {
                                                key: density,
                                                size: "small",
                                                value: density
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(toDisplayString(density), 1)
                                                ]),
                                                _: 2
                                              }, 1032, ["value"]);
                                            }), 64))
                                          ]),
                                          _: 1
                                        }, 8, ["modelValue", "onUpdate:modelValue"])
                                      ]),
                                      createVNode(VSwitch, {
                                        modelValue: formProperties.value.disabled,
                                        "onUpdate:modelValue": ($event) => formProperties.value.disabled = $event,
                                        color: "primary",
                                        label: "Disabled",
                                        "hide-details": "",
                                        class: "mb-2"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VSwitch, {
                                        modelValue: formProperties.value.readonly,
                                        "onUpdate:modelValue": ($event) => formProperties.value.readonly = $event,
                                        color: "primary",
                                        label: "Read Only",
                                        "hide-details": "",
                                        class: "mb-2"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VSwitch, {
                                        modelValue: formProperties.value.persistentPlaceholder,
                                        "onUpdate:modelValue": ($event) => formProperties.value.persistentPlaceholder = $event,
                                        color: "primary",
                                        label: "Persistent Placeholder",
                                        "hide-details": "",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-2" }, "Focus color"),
                                        createVNode(VBtnToggle, {
                                          modelValue: formProperties.value.color,
                                          "onUpdate:modelValue": ($event) => formProperties.value.color = $event,
                                          mandatory: "",
                                          density: "comfortable",
                                          "selected-class": "border-primary"
                                        }, {
                                          default: withCtx(() => [
                                            (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                              return createVNode(VBtn, {
                                                key: color.value,
                                                value: color.value,
                                                color: color.value !== "default" ? color.value : void 0,
                                                size: "small",
                                                variant: "tonal",
                                                width: "40",
                                                height: "40",
                                                class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                              }, {
                                                default: withCtx(() => [
                                                  color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-palette-outline")
                                                    ]),
                                                    _: 1
                                                  })) : createCommentVNode("", true)
                                                ]),
                                                _: 2
                                              }, 1032, ["value", "color", "class"]);
                                            }), 64))
                                          ]),
                                          _: 1
                                        }, 8, ["modelValue", "onUpdate:modelValue"])
                                      ])
                                    ])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "validation" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-check-circle")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Validation")
                                      ]),
                                      createVNode(VSwitch, {
                                        modelValue: formProperties.value.validateOnBlur,
                                        "onUpdate:modelValue": ($event) => formProperties.value.validateOnBlur = $event,
                                        color: "primary",
                                        label: "Validate on Blur",
                                        "hide-details": "",
                                        class: "mb-2"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VSwitch, {
                                        modelValue: formProperties.value.validateOnInput,
                                        "onUpdate:modelValue": ($event) => formProperties.value.validateOnInput = $event,
                                        color: "primary",
                                        label: "Validate on Input",
                                        "hide-details": "",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VTextField, {
                                        modelValue: formProperties.value.successMessage,
                                        "onUpdate:modelValue": ($event) => formProperties.value.successMessage = $event,
                                        label: "Success Message",
                                        variant: "outlined",
                                        density: "comfortable",
                                        "prepend-inner-icon": "mdi-check",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VTextField, {
                                        modelValue: formProperties.value.errorMessage,
                                        "onUpdate:modelValue": ($event) => formProperties.value.errorMessage = $event,
                                        label: "Error Message",
                                        variant: "outlined",
                                        density: "comfortable",
                                        "prepend-inner-icon": "mdi-alert",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-2" }, "Message Position"),
                                        createVNode(VChipGroup, {
                                          modelValue: formProperties.value.messageLocation,
                                          "onUpdate:modelValue": ($event) => formProperties.value.messageLocation = $event,
                                          mandatory: "",
                                          "selected-class": "bg-primary text-white"
                                        }, {
                                          default: withCtx(() => [
                                            (openBlock(), createBlock(Fragment, null, renderList(messageLocations, (location) => {
                                              return createVNode(VChip, {
                                                key: location,
                                                size: "small",
                                                value: location
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(toDisplayString(location), 1)
                                                ]),
                                                _: 2
                                              }, 1032, ["value"]);
                                            }), 64))
                                          ]),
                                          _: 1
                                        }, 8, ["modelValue", "onUpdate:modelValue"])
                                      ])
                                    ])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "buttons" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-gesture-tap-button")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Form Buttons")
                                      ]),
                                      createVNode(VCard, { class: "mb-4 pa-3" }, {
                                        default: withCtx(() => [
                                          createVNode(VTextField, {
                                            modelValue: formProperties.value.submitButtonText,
                                            "onUpdate:modelValue": ($event) => formProperties.value.submitButtonText = $event,
                                            label: "Submit Button Text",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "prepend-inner-icon": "mdi-check-circle",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VTextField, {
                                            modelValue: formProperties.value.cancelButtonText,
                                            "onUpdate:modelValue": ($event) => formProperties.value.cancelButtonText = $event,
                                            label: "Cancel Button Text",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "prepend-inner-icon": "mdi-cancel",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-2" }, "Submit Button Color"),
                                            createVNode(VBtnToggle, {
                                              modelValue: formProperties.value.submitButtonColor,
                                              "onUpdate:modelValue": ($event) => formProperties.value.submitButtonColor = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              "selected-class": "border-primary"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                  return createVNode(VBtn, {
                                                    key: color.value,
                                                    value: color.value,
                                                    color: color.value !== "default" ? color.value : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                  }, {
                                                    default: withCtx(() => [
                                                      color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("mdi-palette-outline")
                                                        ]),
                                                        _: 1
                                                      })) : createCommentVNode("", true)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value", "color", "class"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-2" }, "Reset Button Color"),
                                            createVNode(VBtnToggle, {
                                              modelValue: formProperties.value.cancelButtonColor,
                                              "onUpdate:modelValue": ($event) => formProperties.value.cancelButtonColor = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              "selected-class": "border-primary"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                  return createVNode(VBtn, {
                                                    key: color.value,
                                                    value: color.value,
                                                    color: color.value !== "default" ? color.value : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                  }, {
                                                    default: withCtx(() => [
                                                      color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("mdi-palette-outline")
                                                        ]),
                                                        _: 1
                                                      })) : createCommentVNode("", true)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value", "color", "class"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-2" }, "Button Variant"),
                                            createVNode(VChipGroup, {
                                              modelValue: formProperties.value.buttonVariant,
                                              "onUpdate:modelValue": ($event) => formProperties.value.buttonVariant = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(buttonVariants, (variant) => {
                                                  return createVNode(VChip, {
                                                    key: variant,
                                                    size: "small",
                                                    value: variant
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(toDisplayString(variant), 1)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: formProperties.value.blockButtons,
                                            "onUpdate:modelValue": ($event) => formProperties.value.blockButtons = $event,
                                            color: "primary",
                                            label: "Full Width Buttons",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        _: 1
                                      })
                                    ])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "templates" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                        createVNode("div", { class: "d-flex align-center" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-file-document-outline")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Form Templates")
                                        ]),
                                        createVNode(VTooltip, { location: "bottom" }, {
                                          activator: withCtx(({ props }) => [
                                            createVNode(VBtn, mergeProps({
                                              icon: "mdi-help-circle-outline",
                                              variant: "text",
                                              size: "small"
                                            }, props), null, 16)
                                          ]),
                                          default: withCtx(() => [
                                            createVNode("span", null, "Apply pre-defined templates or save your own")
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common forms."),
                                      createVNode(VCard, { class: "mb-4" }, {
                                        default: withCtx(() => [
                                          createVNode(VList, null, {
                                            default: withCtx(() => [
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("contact"),
                                                "prepend-icon": "mdi-email-outline",
                                                title: "Contact Form",
                                                subtitle: "Name, email, subject and message fields"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("login"),
                                                "prepend-icon": "mdi-login",
                                                title: "Login Form",
                                                subtitle: "Email/username and password with validation"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("register"),
                                                "prepend-icon": "mdi-account-plus",
                                                title: "Registration Form",
                                                subtitle: "Complete user registration form"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("survey"),
                                                "prepend-icon": "mdi-poll",
                                                title: "Survey Form",
                                                subtitle: "Various question types for feedback"
                                              }, null, 8, ["onClick"])
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VAlert, {
                                        type: "info",
                                        variant: "tonal",
                                        class: "mb-4"
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(" Applying a template will replace your current form fields. ")
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VDivider, { class: "my-4" }),
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-content-save")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Save Current Form")
                                      ]),
                                      createVNode(VTextField, {
                                        modelValue: customTemplateName.value,
                                        "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                        label: "Template Name",
                                        variant: "outlined",
                                        density: "comfortable",
                                        "prepend-inner-icon": "mdi-tag",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VBtn, {
                                        color: "primary",
                                        "prepend-icon": "mdi-content-save",
                                        block: "",
                                        onClick: saveCurrentTemplate
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(" Save Current Form as Template ")
                                        ]),
                                        _: 1
                                      })
                                    ])
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            }, 8, ["modelValue", "onUpdate:modelValue"])
                          ]),
                          _: 1
                        })
                      ]),
                      _: 1
                    })
                  ]),
                  createVNode("div", { class: "preview-area pa-4 d-flex flex-column" }, [
                    createVNode("div", { class: "d-flex justify-space-between align-center mb-3" }, [
                      createVNode(VChip, {
                        color: "primary",
                        variant: "flat",
                        size: "small",
                        class: "mr-2"
                      }, {
                        default: withCtx(() => [
                          createVNode(VIcon, {
                            start: "",
                            size: "small"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("mdi-eye")
                            ]),
                            _: 1
                          }),
                          createTextVNode(" Live Preview ")
                        ]),
                        _: 1
                      }),
                      createVNode("div", null, [
                        previewMode.value === "desktop" ? (openBlock(), createBlock(VChip, {
                          key: 0,
                          color: "grey",
                          size: "small"
                        }, {
                          default: withCtx(() => [
                            createVNode(VIcon, {
                              start: "",
                              size: "small"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("mdi-monitor")
                              ]),
                              _: 1
                            }),
                            createTextVNode(" Desktop View ")
                          ]),
                          _: 1
                        })) : previewMode.value === "tablet" ? (openBlock(), createBlock(VChip, {
                          key: 1,
                          color: "grey",
                          size: "small"
                        }, {
                          default: withCtx(() => [
                            createVNode(VIcon, {
                              start: "",
                              size: "small"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("mdi-tablet")
                              ]),
                              _: 1
                            }),
                            createTextVNode(" Tablet View (" + toDisplayString(previewWidth.value) + "px) ", 1)
                          ]),
                          _: 1
                        })) : previewMode.value === "mobile" ? (openBlock(), createBlock(VChip, {
                          key: 2,
                          color: "grey",
                          size: "small"
                        }, {
                          default: withCtx(() => [
                            createVNode(VIcon, {
                              start: "",
                              size: "small"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("mdi-cellphone")
                              ]),
                              _: 1
                            }),
                            createTextVNode(" Mobile View (" + toDisplayString(previewWidth.value) + "px) ", 1)
                          ]),
                          _: 1
                        })) : createCommentVNode("", true)
                      ])
                    ]),
                    createVNode("div", {
                      class: ["preview-canvas flex-grow-1 pa-4 bg-grey-darken-4", [
                        "preview-" + previewMode.value
                      ]],
                      style: { maxWidth: previewWidth.value + "px" }
                    }, [
                      createVNode(VForm, {
                        modelValue: formValid.value,
                        "onUpdate:modelValue": ($event) => formValid.value = $event,
                        "validate-on-blur": formProperties.value.validateOnBlur,
                        "validate-on-input": formProperties.value.validateOnInput,
                        class: "w-100",
                        color: formProperties.value.color,
                        style: { "max-width": "600px" },
                        ref_key: "form",
                        ref: form
                      }, {
                        default: withCtx(() => [
                          showSuccessMessage.value ? (openBlock(), createBlock(VAlert, {
                            key: 0,
                            type: "success",
                            class: "mb-4"
                          }, {
                            default: withCtx(() => [
                              createTextVNode(toDisplayString(formProperties.value.successMessage), 1)
                            ]),
                            _: 1
                          })) : createCommentVNode("", true),
                          (openBlock(true), createBlock(Fragment, null, renderList(formFields.value, (field, index) => {
                            return openBlock(), createBlock(Fragment, { key: index }, [
                              field.type === "email" ? (openBlock(), createBlock(VTextField, {
                                key: 0,
                                modelValue: field.value,
                                "onUpdate:modelValue": ($event) => field.value = $event,
                                label: field.label,
                                placeholder: field.placeholder,
                                variant: formProperties.value.variant,
                                density: formProperties.value.density,
                                color: formProperties.value.color,
                                disabled: formProperties.value.disabled,
                                readonly: formProperties.value.readonly,
                                "persistent-placeholder": formProperties.value.persistentPlaceholder,
                                "prepend-icon": field.icon,
                                "base-color": "primary",
                                rules: field.required ? [
                                  (v) => !!v || "This field is required",
                                  (v) => /^[\w.-]+@([\w-]+\.)+[\w-]{2,4}$/.test(v) || "Invalid email format"
                                ] : [],
                                class: "mb-4"
                              }, null, 8, ["modelValue", "onUpdate:modelValue", "label", "placeholder", "variant", "density", "color", "disabled", "readonly", "persistent-placeholder", "prepend-icon", "rules"])) : field.type === "text" ? (openBlock(), createBlock(VTextField, {
                                key: 1,
                                modelValue: field.value,
                                "onUpdate:modelValue": ($event) => field.value = $event,
                                label: field.label,
                                placeholder: field.placeholder,
                                variant: formProperties.value.variant,
                                density: formProperties.value.density,
                                color: formProperties.value.color,
                                disabled: formProperties.value.disabled,
                                readonly: formProperties.value.readonly,
                                "persistent-placeholder": formProperties.value.persistentPlaceholder,
                                "prepend-icon": field.icon,
                                counter: field.counter,
                                "base-color": "primary",
                                rules: field.required ? [(v) => !!v || "This field is required"] : [],
                                class: "mb-4"
                              }, null, 8, ["modelValue", "onUpdate:modelValue", "label", "placeholder", "variant", "density", "color", "disabled", "readonly", "persistent-placeholder", "prepend-icon", "counter", "rules"])) : field.type === "password" ? (openBlock(), createBlock(VTextField, {
                                key: 2,
                                modelValue: field.value,
                                "onUpdate:modelValue": ($event) => field.value = $event,
                                type: "password",
                                label: field.label,
                                placeholder: field.placeholder,
                                variant: formProperties.value.variant,
                                density: formProperties.value.density,
                                color: formProperties.value.color,
                                disabled: formProperties.value.disabled,
                                readonly: formProperties.value.readonly,
                                "persistent-placeholder": formProperties.value.persistentPlaceholder,
                                "prepend-icon": field.icon,
                                "base-color": "primary",
                                rules: field.required ? [
                                  (v) => !!v || "This field is required",
                                  (v) => v.length >= 8 || "Password must be at least 8 characters",
                                  (v) => /[A-Z]/.test(v) || "Password must contain at least one uppercase letter",
                                  (v) => /[a-z]/.test(v) || "Password must contain at least one lowercase letter",
                                  (v) => /[0-9]/.test(v) || "Password must contain at least one number",
                                  (v) => /[^A-Za-z0-9]/.test(v) || "Password must contain at least one special character"
                                ] : [],
                                class: "mb-4"
                              }, null, 8, ["modelValue", "onUpdate:modelValue", "label", "placeholder", "variant", "density", "color", "disabled", "readonly", "persistent-placeholder", "prepend-icon", "rules"])) : field.type === "textarea" ? (openBlock(), createBlock(VTextarea, {
                                key: 3,
                                modelValue: field.value,
                                "onUpdate:modelValue": ($event) => field.value = $event,
                                label: field.label,
                                placeholder: field.placeholder,
                                variant: formProperties.value.variant,
                                density: formProperties.value.density,
                                color: formProperties.value.color,
                                disabled: formProperties.value.disabled,
                                readonly: formProperties.value.readonly,
                                "persistent-placeholder": formProperties.value.persistentPlaceholder,
                                "prepend-icon": field.icon,
                                "base-color": "primary",
                                rules: field.required ? [(v) => !!v || "This field is required"] : [],
                                "auto-grow": "",
                                rows: "3",
                                class: "mb-4"
                              }, null, 8, ["modelValue", "onUpdate:modelValue", "label", "placeholder", "variant", "density", "color", "disabled", "readonly", "persistent-placeholder", "prepend-icon", "rules"])) : field.type === "select" ? (openBlock(), createBlock(VSelect, {
                                key: 4,
                                modelValue: field.value,
                                "onUpdate:modelValue": ($event) => field.value = $event,
                                label: field.label,
                                items: field.options ? field.options.split(",").map((o) => o.trim()) : [],
                                placeholder: field.placeholder,
                                variant: formProperties.value.variant,
                                density: formProperties.value.density,
                                color: formProperties.value.color,
                                disabled: formProperties.value.disabled,
                                readonly: formProperties.value.readonly,
                                "persistent-placeholder": formProperties.value.persistentPlaceholder,
                                "prepend-icon": field.icon,
                                "base-color": "primary",
                                rules: field.required ? [(v) => !!v || "This field is required"] : [],
                                class: "mb-4"
                              }, null, 8, ["modelValue", "onUpdate:modelValue", "label", "items", "placeholder", "variant", "density", "color", "disabled", "readonly", "persistent-placeholder", "prepend-icon", "rules"])) : field.type === "radio" ? (openBlock(), createBlock(VRadioGroup, {
                                key: 5,
                                modelValue: field.value,
                                "onUpdate:modelValue": ($event) => field.value = $event,
                                label: field.label,
                                rules: field.required ? [(v) => !!v || "This field is required"] : [],
                                "prepend-icon": field.icon,
                                class: "mb-4"
                              }, {
                                default: withCtx(() => [
                                  (openBlock(true), createBlock(Fragment, null, renderList(field.options ? field.options.split(",").map((o) => o.trim()) : [], (option, optionIndex) => {
                                    return openBlock(), createBlock(VRadio, {
                                      key: index + "-" + optionIndex,
                                      label: option,
                                      value: option,
                                      color: formProperties.value.color,
                                      disabled: formProperties.value.disabled,
                                      readonly: formProperties.value.readonly
                                    }, null, 8, ["label", "value", "color", "disabled", "readonly"]);
                                  }), 128))
                                ]),
                                _: 2
                              }, 1032, ["modelValue", "onUpdate:modelValue", "label", "rules", "prepend-icon"])) : field.type === "checkbox" ? (openBlock(), createBlock(VCheckbox, {
                                key: 6,
                                modelValue: field.value,
                                "onUpdate:modelValue": ($event) => field.value = $event,
                                label: field.label,
                                color: formProperties.value.color,
                                disabled: formProperties.value.disabled,
                                readonly: formProperties.value.readonly,
                                "prepend-icon": field.icon,
                                rules: field.required ? [(v) => !!v || "This field is required"] : [],
                                class: "mb-4"
                              }, null, 8, ["modelValue", "onUpdate:modelValue", "label", "color", "disabled", "readonly", "prepend-icon", "rules"])) : createCommentVNode("", true)
                            ], 64);
                          }), 128)),
                          createVNode("div", {
                            class: ["d-flex", formProperties.value.blockButtons ? "flex-column mt-4" : "justify-end mt-4"]
                          }, [
                            createVNode(VBtn, {
                              color: formProperties.value.cancelButtonColor,
                              class: formProperties.value.blockButtons ? "mb-2" : "mr-2",
                              variant: formProperties.value.buttonVariant,
                              block: formProperties.value.blockButtons,
                              onClick: resetForm
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString(formProperties.value.cancelButtonText), 1)
                              ]),
                              _: 1
                            }, 8, ["color", "class", "variant", "block"]),
                            createVNode(VBtn, {
                              color: formProperties.value.submitButtonColor,
                              disabled: !formValid.value,
                              variant: formProperties.value.buttonVariant,
                              block: formProperties.value.blockButtons,
                              onClick: submitForm
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString(formProperties.value.submitButtonText), 1)
                              ]),
                              _: 1
                            }, 8, ["color", "disabled", "variant", "block"])
                          ], 2)
                        ]),
                        _: 1
                      }, 8, ["modelValue", "onUpdate:modelValue", "validate-on-blur", "validate-on-input", "color"])
                    ], 6),
                    createVNode("div", { class: "d-flex justify-end mt-3" }, [
                      createVNode(VBtn, {
                        color: "error",
                        class: "mr-2",
                        "prepend-icon": "mdi-refresh",
                        variant: "tonal",
                        onClick: resetAllFields
                      }, {
                        default: withCtx(() => [
                          createTextVNode(" Reset All Fields ")
                        ]),
                        _: 1
                      }),
                      createVNode(VBtn, {
                        color: "secondary",
                        class: "mr-2",
                        "prepend-icon": "mdi-eye",
                        onClick: previewCode
                      }, {
                        default: withCtx(() => [
                          createTextVNode(" Preview Code ")
                        ]),
                        _: 1
                      }),
                      createVNode(VBtn, {
                        color: "primary",
                        "prepend-icon": "mdi-content-copy",
                        onClick: copyFormCode
                      }, {
                        default: withCtx(() => [
                          createTextVNode(" Copy Code ")
                        ]),
                        _: 1
                      })
                    ])
                  ])
                ]),
                _: 1
              }),
              createVNode(VDialog, {
                modelValue: showCodeDialog.value,
                "onUpdate:modelValue": ($event) => showCodeDialog.value = $event,
                width: "800"
              }, {
                default: withCtx(() => [
                  createVNode(VCard, { class: "bg-grey-darken-4" }, {
                    default: withCtx(() => [
                      createVNode(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                        default: withCtx(() => [
                          createVNode(VTabs, {
                            modelValue: codeTab.value,
                            "onUpdate:modelValue": ($event) => codeTab.value = $event,
                            color: "primary"
                          }, {
                            default: withCtx(() => [
                              createVNode(VTab, { value: "template" }, {
                                default: withCtx(() => [
                                  createTextVNode("Template")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "script" }, {
                                default: withCtx(() => [
                                  createTextVNode("Script")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "theme" }, {
                                default: withCtx(() => [
                                  createTextVNode("Theme")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue"]),
                          createVNode(VBtn, {
                            icon: "mdi-close",
                            variant: "text",
                            onClick: ($event) => showCodeDialog.value = false
                          }, null, 8, ["onClick"])
                        ]),
                        _: 1
                      }),
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VWindow, {
                            modelValue: codeTab.value,
                            "onUpdate:modelValue": ($event) => codeTab.value = $event
                          }, {
                            default: withCtx(() => [
                              createVNode(VWindowItem, { value: "template" }, {
                                default: withCtx(() => [
                                  createVNode(VSheet, {
                                    class: "bg-grey-darken-4 rounded pa-4",
                                    style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }),
                              createVNode(VWindowItem, { value: "script" }, {
                                default: withCtx(() => [
                                  createVNode(VSheet, {
                                    class: "bg-grey-darken-4 rounded pa-4",
                                    style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString(generateScriptCode()), 1)
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }),
                              createVNode(VWindowItem, { value: "theme" }, {
                                default: withCtx(() => [
                                  createVNode(VSheet, {
                                    class: "bg-grey-darken-4 rounded pa-4",
                                    style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString(unref(theme)), 1)
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue"])
                        ]),
                        _: 1
                      }),
                      createVNode(VCardActions, { class: "pa-4" }, {
                        default: withCtx(() => [
                          createVNode(VBtn, {
                            color: "secondary",
                            "prepend-icon": "mdi-content-copy",
                            onClick: copyCurrentTab
                          }, {
                            default: withCtx(() => [
                              createTextVNode(" Copy Current Tab ")
                            ]),
                            _: 1
                          })
                        ]),
                        _: 1
                      })
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }, 8, ["modelValue", "onUpdate:modelValue"]),
              createVNode(Snackbar, {
                modelValue: showSnackbarMessage.value,
                "onUpdate:modelValue": ($event) => showSnackbarMessage.value = $event,
                text: snackbarText.value,
                color: snackbarColor.value
              }, null, 8, ["modelValue", "onUpdate:modelValue", "text", "color"])
            ];
          }
        }),
        _: 1
      }, _parent));
    };
  }
});

const _sfc_setup$4 = _sfc_main$4.setup;
_sfc_main$4.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/studioForm.vue");
  return _sfc_setup$4 ? _sfc_setup$4(props, ctx) : void 0;
};
const StudioForm = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["__scopeId", "data-v-bbd8fce9"]]);

const navTemplates = {
  dashboard: {
    addAppBar: true,
    appBarColor: 1,
    // primary
    appBar: [
      { title: "Dashboard", icon: "mdi-view-dashboard" }
    ],
    location: "left",
    width: 256,
    color: "indigo",
    elevation: 4,
    rounded: false,
    floating: false,
    rail: false,
    clipped: false,
    mobile: false,
    temporary: false,
    image: "",
    navItems: [
      { id: "1", type: "subheader", title: "Main" },
      { id: "2", type: "item", icon: "mdi-home", title: "Home" },
      { id: "3", type: "item", icon: "mdi-chart-bar", title: "Analytics" },
      { id: "4", type: "item", icon: "mdi-account-group", title: "Users" },
      { id: "5", type: "subheader", title: "Management" },
      { id: "6", type: "item", icon: "mdi-cog", title: "Settings" },
      { id: "7", type: "item", icon: "mdi-help-circle", title: "Help" }
    ],
    showLinkItem: true,
    linkIcon: "mdi-github",
    linkTitle: "GitHub Repository",
    linkUrl: "https://github.com",
    linkExternal: true
  },
  ecommerce: {
    addAppBar: true,
    appBarColor: 5,
    // warning
    appBar: [
      { title: "E-commerce", icon: "mdi-shopping" }
    ],
    location: "left",
    width: 280,
    color: "amber-darken-2",
    elevation: 2,
    rounded: true,
    floating: false,
    rail: false,
    clipped: true,
    mobile: false,
    temporary: false,
    image: "",
    navItems: [
      { id: "1", type: "subheader", title: "Shop" },
      { id: "2", type: "item", icon: "mdi-store", title: "Products" },
      { id: "3", type: "item", icon: "mdi-tag", title: "Categories" },
      { id: "4", type: "item", icon: "mdi-cart", title: "Orders" },
      { id: "5", type: "subheader", title: "Account" },
      { id: "6", type: "item", icon: "mdi-account", title: "Profile" },
      { id: "7", type: "item", icon: "mdi-heart", title: "Wishlist" }
    ],
    showLinkItem: false
  },
  social: {
    addAppBar: true,
    appBarColor: 4,
    // info
    appBar: [
      { title: "Social Network", icon: "mdi-account-group" }
    ],
    location: "left",
    width: 256,
    color: "blue-lighten-1",
    elevation: 0,
    rounded: false,
    floating: true,
    rail: true,
    expandOnHover: true,
    clipped: false,
    mobile: false,
    temporary: false,
    image: "https://images.unsplash.com/photo-1470770841072-f978cf4d019e",
    navItems: [
      { id: "1", type: "item", icon: "mdi-home", title: "Feed" },
      { id: "2", type: "item", icon: "mdi-bell", title: "Notifications" },
      { id: "3", type: "item", icon: "mdi-message", title: "Messages" },
      { id: "4", type: "subheader", title: "Connections" },
      { id: "5", type: "item", icon: "mdi-account-multiple", title: "Friends" },
      { id: "6", type: "item", icon: "mdi-account-group", title: "Groups" },
      { id: "7", type: "item", icon: "mdi-calendar", title: "Events" }
    ],
    showLinkItem: false
  },
  admin: {
    addAppBar: true,
    appBarColor: 3,
    // success
    appBar: [
      { title: "Admin Panel", icon: "mdi-shield-account" }
    ],
    location: "left",
    width: 300,
    color: "teal-darken-1",
    elevation: 4,
    rounded: false,
    floating: false,
    rail: false,
    clipped: true,
    mobile: true,
    temporary: true,
    image: "",
    navItems: [
      { id: "1", type: "subheader", title: "Administration" },
      { id: "2", type: "item", icon: "mdi-view-dashboard", title: "Dashboard" },
      { id: "3", type: "item", icon: "mdi-account-multiple", title: "Users" },
      { id: "4", type: "item", icon: "mdi-file-document", title: "Reports" },
      { id: "5", type: "subheader", title: "System" },
      { id: "6", type: "item", icon: "mdi-cog", title: "Settings" },
      { id: "7", type: "item", icon: "mdi-lock", title: "Permissions" },
      { id: "8", type: "item", icon: "mdi-backup-restore", title: "Backup" }
    ],
    showLinkItem: true,
    linkIcon: "mdi-help-circle",
    linkTitle: "Documentation",
    linkUrl: "/docs",
    linkExternal: false
  }
};
const getNavTemplate = (templateName) => {
  return JSON.parse(JSON.stringify(navTemplates[templateName] || {}));
};

const makeVLayoutProps = propsFactory({
  ...makeComponentProps(),
  ...makeDimensionProps(),
  ...makeLayoutProps()
}, "VLayout");
const VLayout = genericComponent()({
  name: "VLayout",
  props: makeVLayoutProps(),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      layoutClasses,
      layoutStyles,
      getLayoutItem,
      items,
      layoutRef
    } = createLayout(props);
    const {
      dimensionStyles
    } = useDimension(props);
    useRender(() => {
      var _a;
      return createVNode("div", {
        "ref": layoutRef,
        "class": [layoutClasses.value, props.class],
        "style": [dimensionStyles.value, layoutStyles.value, props.style]
      }, [(_a = slots.default) == null ? void 0 : _a.call(slots)]);
    });
    return {
      getLayoutItem,
      items
    };
  }
});

const makeVAppBarNavIconProps = propsFactory({
  ...makeVBtnProps({
    icon: "$menu",
    variant: "text"
  })
}, "VAppBarNavIcon");
const VAppBarNavIcon = genericComponent()({
  name: "VAppBarNavIcon",
  props: makeVAppBarNavIconProps(),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    useRender(() => createVNode(VBtn, mergeProps(props, {
      "class": ["v-app-bar-nav-icon"]
    }), slots));
    return {};
  }
});

const VAppBarTitle = genericComponent()({
  name: "VAppBarTitle",
  props: makeVToolbarTitleProps(),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    useRender(() => createVNode(VToolbarTitle, mergeProps(props, {
      "class": "v-app-bar-title"
    }), slots));
    return {};
  }
});

const _sfc_main$3 = /* @__PURE__ */ defineComponent({
  __name: "studioNav",
  __ssrInlineRender: true,
  emits: ["update:content", "save"],
  setup(__props, { emit: __emit }) {
    const emit = __emit;
    const userStore = useUserStore();
    const tab = ref("content");
    const previewMode = ref("desktop");
    const showCodeDialog = ref(false);
    const codeTab = ref("template");
    const generatedCode = ref("");
    const showSnackbarMessage = ref(false);
    const snackbarText = ref("");
    const snackbarColor = ref("success");
    const navItems = ref([]);
    const navHeader = ref([]);
    const appBar = ref([]);
    const navIcons = ref(icons);
    const appBarColors = [
      { value: "default", color: "default" },
      { value: "primary", color: "primary" },
      { value: "secondary", color: "secondary" },
      { value: "success", color: "success" },
      { value: "info", color: "info" },
      { value: "warning", color: "warning" },
      { value: "error", color: "error" }
    ];
    const colors = [
      "default",
      "primary",
      "secondary",
      "success",
      "info",
      "warning",
      "error"
    ];
    const previewWidth = computed(() => {
      switch (previewMode.value) {
        case "mobile":
          return "320px";
        case "tablet":
          return "600px";
        default:
          return "900px";
      }
    });
    const navProperties = ref({
      model: true,
      addAppBar: false,
      appBarColor: 1,
      permanent: false,
      expandOnHover: false,
      location: "left",
      width: 256,
      color: "default",
      elevation: 4,
      rounded: false,
      floating: false,
      rail: false,
      clipped: false,
      mobile: false,
      temporary: false,
      image: "",
      showSubheader: false,
      subheaderText: "",
      showIconItems: false,
      showLinkItem: false,
      linkIcon: "",
      linkTitle: "",
      linkUrl: "",
      linkExternal: false,
      transition: "fade",
      transitionDuration: 250
    });
    const customTemplateName = ref("");
    const addIconItem = () => {
      navItems.value.push({ icon: "mdi-account", title: "New item" });
    };
    const removeItem = (index) => {
      navItems.value.splice(index, 1);
    };
    const addHeader = () => {
      navHeader.value.push({ title: "New subheader" });
    };
    const removeHeader = (index) => {
      navHeader.value.splice(index, 1);
    };
    const addAppBar = () => {
      appBar.value.push({ title: "App bar", icon: "mdi-home" });
    };
    const removeAppBar = (index) => {
      appBar.value.splice(index, 1);
    };
    const applyTemplate = (template) => {
      const templateData = getNavTemplate(template);
      if (!templateData) {
        showSnackbarMessage.value = true;
        return;
      }
      Object.assign(navProperties.value, templateData);
      if (templateData.appBar) {
        appBar.value = [...templateData.appBar];
      }
      if (templateData.navItems) {
        navItems.value = templateData.navItems.filter((item) => item.type === "item").map((item) => ({ icon: item.icon || "mdi-account", title: item.title }));
        navHeader.value = templateData.navItems.filter((item) => item.type === "subheader").map((item) => ({ title: item.title }));
        navProperties.value.showIconItems = navItems.value.length > 0;
        navProperties.value.showSubheader = navHeader.value.length > 0;
      }
      snackbarText.value = `${template} template applied successfully`;
      showSnackbarMessage.value = true;
      generateNavCodeSilently();
    };
    const saveCurrentTemplate = async () => {
      if (!customTemplateName.value) {
        snackbarText.value = "Please enter a template name";
        snackbarColor.value = "error";
        showSnackbarMessage.value = true;
        return;
      }
      const templateData = {
        ...JSON.parse(JSON.stringify(navProperties.value)),
        appBar: [...appBar.value],
        navItems: [
          ...navHeader.value.map((header) => ({ id: Math.random().toString(36).substring(7), type: "subheader", title: header.title })),
          ...navItems.value.map((item) => ({ id: Math.random().toString(36).substring(7), type: "item", icon: item.icon, title: item.title }))
        ]
      };
      const response = await userStore.saveTemplate(customTemplateName.value, templateData, "nav");
      if (response) {
        snackbarText.value = `Template "${customTemplateName.value}" saved successfully`;
        showSnackbarMessage.value = true;
        customTemplateName.value = "";
        await userStore.loadData();
      } else {
        snackbarText.value = `Failed to save template "${customTemplateName.value}"`;
        showSnackbarMessage.value = true;
      }
    };
    const generateNavCode = () => {
      const templateCode = generateTemplateCode();
      const scriptCode = generateScriptCode();
      const themeCode = theme;
      switch (codeTab.value) {
        case "template":
          return templateCode;
        case "script":
          return scriptCode;
        case "style":
          return themeCode;
        default:
          return `${templateCode}

${scriptCode}

${themeCode}`;
      }
    };
    const generateTemplateCode = () => {
      let code = "";
      if (navProperties.value.addAppBar && appBar.value.length > 0) {
        appBar.value.forEach((item) => {
          code += "<v-app-bar";
          code += ` color="${appBarColors[navProperties.value.appBarColor].value !== "default" ? appBarColors[navProperties.value.appBarColor].value : void 0}"`;
          code += " flat";
          code += ">\n";
          code += `  <v-app-bar-nav-icon :icon="${item.icon}"></v-app-bar-nav-icon>
`;
          code += `  <v-app-bar-title>${item.title}</v-app-bar-title>
`;
          code += "</v-app-bar>\n\n";
        });
      }
      code += "<v-navigation-drawer";
      if (navProperties.value.permanent) code += "  permanent";
      if (navProperties.value.expandOnHover) code += "  expand-on-hover";
      if (navProperties.value.location !== "left") code += `  location="${navProperties.value.location}"`;
      if (navProperties.value.width !== 256) code += `  width="${navProperties.value.width}"`;
      if (navProperties.value.color !== "default") code += `  color="${navProperties.value.color}"`;
      if (navProperties.value.elevation !== 4) code += `  :elevation="${navProperties.value.elevation}"`;
      if (navProperties.value.rounded) code += "  rounded";
      if (navProperties.value.floating) code += "  floating";
      if (navProperties.value.rail) code += "  rail";
      if (navProperties.value.clipped) code += "  clipped";
      if (navProperties.value.mobile) code += "  mobile";
      if (navProperties.value.temporary) code += "  temporary";
      if (navProperties.value.image) code += `  image="${navProperties.value.image}"`;
      code += ">\n";
      code += "  <v-list>\n";
      if (navProperties.value.showSubheader && navHeader.value.length > 0 && navProperties.value.showIconItems && navItems.value.length > 0) {
        const combinedItems = [];
        navHeader.value.forEach((header, index) => {
          combinedItems.push({
            type: "subheader",
            title: header.title,
            index: index * 100
          });
        });
        const itemsPerSubheader = Math.ceil(navItems.value.length / Math.max(1, navHeader.value.length));
        navItems.value.forEach((item, index) => {
          const subheaderIndex = Math.min(Math.floor(index / itemsPerSubheader), navHeader.value.length - 1);
          combinedItems.push({
            type: "item",
            icon: item.icon,
            title: item.title,
            index: subheaderIndex * 100 + index % itemsPerSubheader + 1
          });
        });
        combinedItems.sort((a, b) => a.index - b.index);
        code += '    <template v-for="(item, index) in navItems" :key="index">\n';
        code += `      <v-list-subheader v-if="item.type === 'subheader'">{{ item.title }}</v-list-subheader>
`;
        code += '      <v-list-item v-else :prepend-icon="item.icon" :title="item.title" />\n';
        code += "    </template>\n";
      } else if (navProperties.value.showSubheader && navHeader.value.length > 0) {
        code += '    <template v-for="(header, index) in navHeader" :key="index">\n';
        code += "      <v-list-subheader>{{ header.title }}</v-list-subheader>\n";
        code += "    </template>\n";
        code += '    <v-list-item prepend-icon="mdi-home" title="Home" />\n';
        code += '    <v-list-item prepend-icon="mdi-account" title="Profile" />\n';
        code += '    <v-list-item prepend-icon="mdi-cog" title="Settings" />\n';
      } else if (navProperties.value.showIconItems && navItems.value.length > 0) {
        code += '    <v-list-item v-for="(item, index) in navItems" :key="index" :prepend-icon="item.icon" :title="item.title" />\n';
      } else {
        code += '    <v-list-item prepend-icon="mdi-home" title="Home" />\n';
        code += '    <v-list-item prepend-icon="mdi-account" title="Profile" />\n';
        code += '    <v-list-item prepend-icon="mdi-cog" title="Settings" />\n';
      }
      if (navProperties.value.showLinkItem) {
        code += `    <v-list-item prepend-icon="${navProperties.value.linkIcon || "mdi-link-variant"}" `;
        code += `title="${navProperties.value.linkTitle || "Link"}" `;
        if (navProperties.value.linkUrl) {
          if (navProperties.value.linkExternal) {
            code += `href="${navProperties.value.linkUrl}" target="_blank" />
`;
          } else {
            code += `to="${navProperties.value.linkUrl}" />
`;
          }
        } else {
          code += "/>\n";
        }
      }
      code += "  </v-list>\n";
      code += "</v-navigation-drawer>";
      return code;
    };
    const previewCode = () => {
      generatedCode.value = generateNavCode();
      showCodeDialog.value = true;
    };
    const generateScriptCode = () => {
      let code = `
import { ref, computed } from 'vue';

const navItems = ref([`;
      let combinedItems = [];
      for (let i = 0; i < navHeader.value.length; i++) {
        combinedItems.push(`{ type: 'subheader', title: '${navHeader.value[i].title}' }`);
        const itemsPerHeader = Math.ceil(navItems.value.length / Math.max(1, navHeader.value.length));
        const startIndex = i * itemsPerHeader;
        const endIndex = Math.min(startIndex + itemsPerHeader, navItems.value.length);
        for (let j = startIndex; j < endIndex; j++) {
          if (j < navItems.value.length) {
            combinedItems.push(`{ type: 'item', icon: '${navItems.value[j].icon}', title: '${navItems.value[j].title}' }`);
          }
        }
      }
      if (navHeader.value.length === 0 && navItems.value.length > 0) {
        for (let i = 0; i < navItems.value.length; i++) {
          combinedItems.push(`{ type: 'item', icon: '${navItems.value[i].icon}', title: '${navItems.value[i].title}' }`);
        }
      }
      code += "\n  " + combinedItems.join(",\n  ");
      code += `
]);`;
      return code;
    };
    const copyNavCode = () => {
      const templateCode = generateTemplateCode();
      const scriptCode = generateScriptCode();
      const fullCode = `${templateCode}

${scriptCode}`;
      (void 0).clipboard.writeText(fullCode).then(() => {
        snackbarText.value = "Code copied to clipboard!";
        showSnackbarMessage.value = true;
      }).catch((err) => {
        console.error("Error copying:", err);
      });
    };
    const copyCurrentTab = () => {
      let code;
      switch (codeTab.value) {
        case "template":
          code = generateTemplateCode();
          break;
        case "script":
          code = generateScriptCode();
          break;
        case "style":
          code = theme;
          break;
        default:
          code = "";
      }
      (void 0).navigator.clipboard.writeText(code).catch((err) => {
        console.error("Error copying:", err);
      });
    };
    const generateNavCodeSilently = () => {
      const code = generateNavCode();
      emit("update:content", code);
    };
    watch(navProperties, () => {
      generateNavCodeSilently();
    }, { deep: true });
    watch(previewMode, () => {
      generateNavCodeSilently();
    });
    watch(() => {
      return "";
    }, () => {
    }, { immediate: true });
    return (_ctx, _push, _parent, _attrs) => {
      _push(ssrRenderComponent(VApp, _attrs, {
        default: withCtx((_, _push2, _parent2, _scopeId) => {
          if (_push2) {
            _push2(ssrRenderComponent(VMain, { class: "w-100 h-100 overflow-hidden d-flex" }, {
              default: withCtx((_2, _push3, _parent3, _scopeId2) => {
                if (_push3) {
                  _push3(`<div class="control-panel" style="${ssrRenderStyle({ "width": "350px" })}" data-v-42de9f80${_scopeId2}>`);
                  _push3(ssrRenderComponent(VCard, {
                    flat: "",
                    class: "fill-height"
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(`<div class="px-4 py-2 d-flex align-center" data-v-42de9f80${_scopeId3}>`);
                        _push4(ssrRenderComponent(VChip, {
                          color: "success",
                          "prepend-icon": "mdi-vuejs",
                          size: "small",
                          class: "mr-2 px-4 py-2"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(`Vue.js`);
                            } else {
                              return [
                                createTextVNode("Vue.js")
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VChip, {
                          color: "info",
                          "prepend-icon": "mdi-vuetify",
                          size: "small",
                          class: "mr-2 px-4 py-2"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(`Vuetify`);
                            } else {
                              return [
                                createTextVNode("Vuetify")
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(`</div>`);
                        _push4(ssrRenderComponent(VTabs, {
                          modelValue: tab.value,
                          "onUpdate:modelValue": ($event) => tab.value = $event,
                          color: "primary",
                          "align-tabs": "center",
                          class: "px-4"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VTab, { value: "content" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Content`);
                                  } else {
                                    return [
                                      createTextVNode("Content")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VTab, { value: "style" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Style`);
                                  } else {
                                    return [
                                      createTextVNode("Style")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VTab, { value: "actions" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Actions`);
                                  } else {
                                    return [
                                      createTextVNode("Actions")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VTab, { value: "templates" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Template`);
                                  } else {
                                    return [
                                      createTextVNode("Template")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VTab, { value: "content" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Content")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "style" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Style")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "actions" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Actions")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "templates" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Template")
                                  ]),
                                  _: 1
                                })
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VDivider, null, null, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VCardText, {
                          class: "pa-0 fill-height",
                          style: { "overflow-y": "auto" }
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VWindow, {
                                modelValue: tab.value,
                                "onUpdate:modelValue": ($event) => tab.value = $event
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VWindowItem, { value: "content" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-42de9f80${_scopeId6}><div class="section-title d-flex align-center mb-3" data-v-42de9f80${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-view-dashboard-outline`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-view-dashboard-outline")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-42de9f80${_scopeId6}>App Bar</span></div>`);
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: navProperties.value.addAppBar,
                                            "onUpdate:modelValue": ($event) => navProperties.value.addAppBar = $event,
                                            color: "primary",
                                            label: "Add app bar",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          if (navProperties.value.addAppBar) {
                                            _push7(`<div data-v-42de9f80${_scopeId6}><div class="mb-4" data-v-42de9f80${_scopeId6}><label class="text-subtitle-2 mb-2 d-block" data-v-42de9f80${_scopeId6}>App Bar Color</label>`);
                                            _push7(ssrRenderComponent(VBtnToggle, {
                                              modelValue: navProperties.value.appBarColor,
                                              "onUpdate:modelValue": ($event) => navProperties.value.appBarColor = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`<!--[-->`);
                                                  ssrRenderList(appBarColors, (color, index) => {
                                                    _push8(ssrRenderComponent(VBtn, {
                                                      key: color.value,
                                                      value: index,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                        if (_push9) {
                                                          if (color.value === "default") {
                                                            _push9(ssrRenderComponent(VIcon, null, {
                                                              default: withCtx((_9, _push10, _parent10, _scopeId9) => {
                                                                if (_push10) {
                                                                  _push10(`mdi-palette-outline`);
                                                                } else {
                                                                  return [
                                                                    createTextVNode("mdi-palette-outline")
                                                                  ];
                                                                }
                                                              }),
                                                              _: 2
                                                            }, _parent9, _scopeId8));
                                                          } else {
                                                            _push9(`<!---->`);
                                                          }
                                                        } else {
                                                          return [
                                                            color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                              default: withCtx(() => [
                                                                createTextVNode("mdi-palette-outline")
                                                              ]),
                                                              _: 1
                                                            })) : createCommentVNode("", true)
                                                          ];
                                                        }
                                                      }),
                                                      _: 2
                                                    }, _parent8, _scopeId7));
                                                  });
                                                  _push8(`<!--]-->`);
                                                } else {
                                                  return [
                                                    (openBlock(), createBlock(Fragment, null, renderList(appBarColors, (color, index) => {
                                                      return createVNode(VBtn, {
                                                        key: color.value,
                                                        value: index,
                                                        color: color.value !== "default" ? color.value : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: "ma-1"
                                                      }, {
                                                        default: withCtx(() => [
                                                          color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color"]);
                                                    }), 64))
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div>`);
                                            _push7(ssrRenderComponent(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`<!--[-->`);
                                                  ssrRenderList(appBar.value, (item, index) => {
                                                    _push8(`<div class="d-flex align-center mb-2" data-v-42de9f80${_scopeId7}>`);
                                                    _push8(ssrRenderComponent(VTextField, {
                                                      modelValue: item.title,
                                                      "onUpdate:modelValue": ($event) => item.title = $event,
                                                      label: "Title",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-format-title",
                                                      class: "mr-2",
                                                      placeholder: "Home"
                                                    }, null, _parent8, _scopeId7));
                                                    _push8(ssrRenderComponent(VSelect, {
                                                      modelValue: item.icon,
                                                      "onUpdate:modelValue": ($event) => item.icon = $event,
                                                      items: navIcons.value,
                                                      label: "Icon",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-pencil",
                                                      class: "mr-2",
                                                      placeholder: "mdi-home"
                                                    }, {
                                                      item: withCtx(({ item: item2, props }, _push9, _parent9, _scopeId8) => {
                                                        if (_push9) {
                                                          _push9(ssrRenderComponent(VListItem, mergeProps({ ref_for: true }, props), {
                                                            prepend: withCtx((_8, _push10, _parent10, _scopeId9) => {
                                                              if (_push10) {
                                                                _push10(ssrRenderComponent(VIcon, {
                                                                  icon: item2.raw
                                                                }, null, _parent10, _scopeId9));
                                                              } else {
                                                                return [
                                                                  createVNode(VIcon, {
                                                                    icon: item2.raw
                                                                  }, null, 8, ["icon"])
                                                                ];
                                                              }
                                                            }),
                                                            _: 2
                                                          }, _parent9, _scopeId8));
                                                        } else {
                                                          return [
                                                            createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                              prepend: withCtx(() => [
                                                                createVNode(VIcon, {
                                                                  icon: item2.raw
                                                                }, null, 8, ["icon"])
                                                              ]),
                                                              _: 2
                                                            }, 1040)
                                                          ];
                                                        }
                                                      }),
                                                      _: 2
                                                    }, _parent8, _scopeId7));
                                                    _push8(ssrRenderComponent(VBtn, {
                                                      icon: "mdi-delete",
                                                      color: "error",
                                                      variant: "text",
                                                      density: "compact",
                                                      onClick: ($event) => removeAppBar(index)
                                                    }, null, _parent8, _scopeId7));
                                                    _push8(`</div>`);
                                                  });
                                                  _push8(`<!--]-->`);
                                                  _push8(ssrRenderComponent(VBtn, {
                                                    color: "primary",
                                                    "prepend-icon": "mdi-plus",
                                                    variant: "tonal",
                                                    block: "",
                                                    onClick: addAppBar,
                                                    class: "mt-2"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(` Add app bar item `);
                                                      } else {
                                                        return [
                                                          createTextVNode(" Add app bar item ")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                } else {
                                                  return [
                                                    (openBlock(true), createBlock(Fragment, null, renderList(appBar.value, (item, index) => {
                                                      return openBlock(), createBlock("div", {
                                                        key: index,
                                                        class: "d-flex align-center mb-2"
                                                      }, [
                                                        createVNode(VTextField, {
                                                          modelValue: item.title,
                                                          "onUpdate:modelValue": ($event) => item.title = $event,
                                                          label: "Title",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          "prepend-inner-icon": "mdi-format-title",
                                                          class: "mr-2",
                                                          placeholder: "Home"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        createVNode(VSelect, {
                                                          modelValue: item.icon,
                                                          "onUpdate:modelValue": ($event) => item.icon = $event,
                                                          items: navIcons.value,
                                                          label: "Icon",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          "prepend-inner-icon": "mdi-pencil",
                                                          class: "mr-2",
                                                          placeholder: "mdi-home"
                                                        }, {
                                                          item: withCtx(({ item: item2, props }) => [
                                                            createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                              prepend: withCtx(() => [
                                                                createVNode(VIcon, {
                                                                  icon: item2.raw
                                                                }, null, 8, ["icon"])
                                                              ]),
                                                              _: 2
                                                            }, 1040)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                        createVNode(VBtn, {
                                                          icon: "mdi-delete",
                                                          color: "error",
                                                          variant: "text",
                                                          density: "compact",
                                                          onClick: ($event) => removeAppBar(index)
                                                        }, null, 8, ["onClick"])
                                                      ]);
                                                    }), 128)),
                                                    createVNode(VBtn, {
                                                      color: "primary",
                                                      "prepend-icon": "mdi-plus",
                                                      variant: "tonal",
                                                      block: "",
                                                      onClick: addAppBar,
                                                      class: "mt-2"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(" Add app bar item ")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div>`);
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          _push7(ssrRenderComponent(VDivider, { class: "my-4" }, null, _parent7, _scopeId6));
                                          _push7(`<div class="section-title d-flex align-center mb-3" data-v-42de9f80${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-format-list-bulleted`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-format-list-bulleted")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-42de9f80${_scopeId6}>Navigation Items</span></div>`);
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: navProperties.value.showSubheader,
                                            "onUpdate:modelValue": ($event) => navProperties.value.showSubheader = $event,
                                            color: "primary",
                                            label: "Add subheaders",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          if (navProperties.value.showSubheader) {
                                            _push7(`<div data-v-42de9f80${_scopeId6}>`);
                                            _push7(ssrRenderComponent(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`<!--[-->`);
                                                  ssrRenderList(navHeader.value, (item, index) => {
                                                    _push8(`<div class="d-flex align-center mb-2" data-v-42de9f80${_scopeId7}>`);
                                                    _push8(ssrRenderComponent(VTextField, {
                                                      modelValue: item.title,
                                                      "onUpdate:modelValue": ($event) => item.title = $event,
                                                      label: "Subheader text",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-format-header-3",
                                                      class: "mr-2",
                                                      placeholder: "Section"
                                                    }, null, _parent8, _scopeId7));
                                                    _push8(ssrRenderComponent(VBtn, {
                                                      icon: "mdi-delete",
                                                      color: "error",
                                                      variant: "text",
                                                      density: "compact",
                                                      onClick: ($event) => removeHeader(index)
                                                    }, null, _parent8, _scopeId7));
                                                    _push8(`</div>`);
                                                  });
                                                  _push8(`<!--]-->`);
                                                  _push8(ssrRenderComponent(VBtn, {
                                                    color: "primary",
                                                    "prepend-icon": "mdi-plus",
                                                    variant: "tonal",
                                                    block: "",
                                                    onClick: addHeader,
                                                    class: "mt-2"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(` Add subheader `);
                                                      } else {
                                                        return [
                                                          createTextVNode(" Add subheader ")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                } else {
                                                  return [
                                                    (openBlock(true), createBlock(Fragment, null, renderList(navHeader.value, (item, index) => {
                                                      return openBlock(), createBlock("div", {
                                                        key: index,
                                                        class: "d-flex align-center mb-2"
                                                      }, [
                                                        createVNode(VTextField, {
                                                          modelValue: item.title,
                                                          "onUpdate:modelValue": ($event) => item.title = $event,
                                                          label: "Subheader text",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          "prepend-inner-icon": "mdi-format-header-3",
                                                          class: "mr-2",
                                                          placeholder: "Section"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        createVNode(VBtn, {
                                                          icon: "mdi-delete",
                                                          color: "error",
                                                          variant: "text",
                                                          density: "compact",
                                                          onClick: ($event) => removeHeader(index)
                                                        }, null, 8, ["onClick"])
                                                      ]);
                                                    }), 128)),
                                                    createVNode(VBtn, {
                                                      color: "primary",
                                                      "prepend-icon": "mdi-plus",
                                                      variant: "tonal",
                                                      block: "",
                                                      onClick: addHeader,
                                                      class: "mt-2"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(" Add subheader ")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div>`);
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: navProperties.value.showIconItems,
                                            "onUpdate:modelValue": ($event) => navProperties.value.showIconItems = $event,
                                            color: "primary",
                                            label: "Add navigation items",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          if (navProperties.value.showIconItems) {
                                            _push7(`<div data-v-42de9f80${_scopeId6}>`);
                                            _push7(ssrRenderComponent(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`<!--[-->`);
                                                  ssrRenderList(navItems.value, (item, index) => {
                                                    _push8(`<div class="d-flex align-center mb-2" data-v-42de9f80${_scopeId7}>`);
                                                    _push8(ssrRenderComponent(VSelect, {
                                                      modelValue: item.icon,
                                                      "onUpdate:modelValue": ($event) => item.icon = $event,
                                                      items: navIcons.value,
                                                      label: "Icon",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-emoticon",
                                                      class: "mr-2",
                                                      placeholder: "mdi-home"
                                                    }, {
                                                      item: withCtx(({ item: item2, props }, _push9, _parent9, _scopeId8) => {
                                                        if (_push9) {
                                                          _push9(ssrRenderComponent(VListItem, mergeProps({ ref_for: true }, props), {
                                                            prepend: withCtx((_8, _push10, _parent10, _scopeId9) => {
                                                              if (_push10) {
                                                                _push10(ssrRenderComponent(VIcon, {
                                                                  icon: item2.raw
                                                                }, null, _parent10, _scopeId9));
                                                              } else {
                                                                return [
                                                                  createVNode(VIcon, {
                                                                    icon: item2.raw
                                                                  }, null, 8, ["icon"])
                                                                ];
                                                              }
                                                            }),
                                                            default: withCtx((_8, _push10, _parent10, _scopeId9) => {
                                                              if (_push10) {
                                                                _push10(ssrRenderComponent(VListItemTitle, null, {
                                                                  default: withCtx((_9, _push11, _parent11, _scopeId10) => {
                                                                    if (_push11) {
                                                                      _push11(`${ssrInterpolate(item2.raw.replace("mdi-", ""))}`);
                                                                    } else {
                                                                      return [
                                                                        createTextVNode(toDisplayString(item2.raw.replace("mdi-", "")), 1)
                                                                      ];
                                                                    }
                                                                  }),
                                                                  _: 2
                                                                }, _parent10, _scopeId9));
                                                              } else {
                                                                return [
                                                                  createVNode(VListItemTitle, null, {
                                                                    default: withCtx(() => [
                                                                      createTextVNode(toDisplayString(item2.raw.replace("mdi-", "")), 1)
                                                                    ]),
                                                                    _: 2
                                                                  }, 1024)
                                                                ];
                                                              }
                                                            }),
                                                            _: 2
                                                          }, _parent9, _scopeId8));
                                                        } else {
                                                          return [
                                                            createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                              prepend: withCtx(() => [
                                                                createVNode(VIcon, {
                                                                  icon: item2.raw
                                                                }, null, 8, ["icon"])
                                                              ]),
                                                              default: withCtx(() => [
                                                                createVNode(VListItemTitle, null, {
                                                                  default: withCtx(() => [
                                                                    createTextVNode(toDisplayString(item2.raw.replace("mdi-", "")), 1)
                                                                  ]),
                                                                  _: 2
                                                                }, 1024)
                                                              ]),
                                                              _: 2
                                                            }, 1040)
                                                          ];
                                                        }
                                                      }),
                                                      _: 2
                                                    }, _parent8, _scopeId7));
                                                    _push8(ssrRenderComponent(VTextField, {
                                                      modelValue: item.title,
                                                      "onUpdate:modelValue": ($event) => item.title = $event,
                                                      label: "Title",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-format-title",
                                                      class: "mr-2",
                                                      placeholder: "Home"
                                                    }, null, _parent8, _scopeId7));
                                                    _push8(ssrRenderComponent(VBtn, {
                                                      icon: "mdi-delete",
                                                      color: "error",
                                                      variant: "text",
                                                      density: "compact",
                                                      onClick: ($event) => removeItem(index)
                                                    }, null, _parent8, _scopeId7));
                                                    _push8(`</div>`);
                                                  });
                                                  _push8(`<!--]-->`);
                                                  _push8(ssrRenderComponent(VBtn, {
                                                    color: "primary",
                                                    "prepend-icon": "mdi-plus",
                                                    variant: "tonal",
                                                    block: "",
                                                    onClick: addIconItem,
                                                    class: "mt-2"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(` Add navigation item `);
                                                      } else {
                                                        return [
                                                          createTextVNode(" Add navigation item ")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                } else {
                                                  return [
                                                    (openBlock(true), createBlock(Fragment, null, renderList(navItems.value, (item, index) => {
                                                      return openBlock(), createBlock("div", {
                                                        key: index,
                                                        class: "d-flex align-center mb-2"
                                                      }, [
                                                        createVNode(VSelect, {
                                                          modelValue: item.icon,
                                                          "onUpdate:modelValue": ($event) => item.icon = $event,
                                                          items: navIcons.value,
                                                          label: "Icon",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          "prepend-inner-icon": "mdi-emoticon",
                                                          class: "mr-2",
                                                          placeholder: "mdi-home"
                                                        }, {
                                                          item: withCtx(({ item: item2, props }) => [
                                                            createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                              prepend: withCtx(() => [
                                                                createVNode(VIcon, {
                                                                  icon: item2.raw
                                                                }, null, 8, ["icon"])
                                                              ]),
                                                              default: withCtx(() => [
                                                                createVNode(VListItemTitle, null, {
                                                                  default: withCtx(() => [
                                                                    createTextVNode(toDisplayString(item2.raw.replace("mdi-", "")), 1)
                                                                  ]),
                                                                  _: 2
                                                                }, 1024)
                                                              ]),
                                                              _: 2
                                                            }, 1040)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                        createVNode(VTextField, {
                                                          modelValue: item.title,
                                                          "onUpdate:modelValue": ($event) => item.title = $event,
                                                          label: "Title",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          "prepend-inner-icon": "mdi-format-title",
                                                          class: "mr-2",
                                                          placeholder: "Home"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        createVNode(VBtn, {
                                                          icon: "mdi-delete",
                                                          color: "error",
                                                          variant: "text",
                                                          density: "compact",
                                                          onClick: ($event) => removeItem(index)
                                                        }, null, 8, ["onClick"])
                                                      ]);
                                                    }), 128)),
                                                    createVNode(VBtn, {
                                                      color: "primary",
                                                      "prepend-icon": "mdi-plus",
                                                      variant: "tonal",
                                                      block: "",
                                                      onClick: addIconItem,
                                                      class: "mt-2"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(" Add navigation item ")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div>`);
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          _push7(ssrRenderComponent(VTextField, {
                                            modelValue: navProperties.value.image,
                                            "onUpdate:modelValue": ($event) => navProperties.value.image = $event,
                                            label: "Background image URL",
                                            variant: "outlined",
                                            density: "comfortable",
                                            clearable: "",
                                            "prepend-inner-icon": "mdi-image",
                                            class: "mb-4"
                                          }, {
                                            "append-inner": withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VBtn, {
                                                  icon: "mdi-refresh",
                                                  variant: "text",
                                                  size: "small",
                                                  onClick: ($event) => navProperties.value.image = ""
                                                }, null, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VBtn, {
                                                    icon: "mdi-refresh",
                                                    variant: "text",
                                                    size: "small",
                                                    onClick: ($event) => navProperties.value.image = ""
                                                  }, null, 8, ["onClick"])
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<div class="d-flex flex-wrap mb-4" data-v-42de9f80${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VChipGroup, null, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VChip, {
                                                  size: "small",
                                                  onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1506744038136-46273834b3fb"
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`Nature`);
                                                    } else {
                                                      return [
                                                        createTextVNode("Nature")
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                                _push8(ssrRenderComponent(VChip, {
                                                  size: "small",
                                                  onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1507525428034-b723cf961d3e"
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`Ocean`);
                                                    } else {
                                                      return [
                                                        createTextVNode("Ocean")
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                                _push8(ssrRenderComponent(VChip, {
                                                  size: "small",
                                                  onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1519681393784-d120267933ba"
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`Mountain`);
                                                    } else {
                                                      return [
                                                        createTextVNode("Mountain")
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1506744038136-46273834b3fb"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Nature")
                                                    ]),
                                                    _: 1
                                                  }, 8, ["onClick"]),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1507525428034-b723cf961d3e"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Ocean")
                                                    ]),
                                                    _: 1
                                                  }, 8, ["onClick"]),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1519681393784-d120267933ba"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Mountain")
                                                    ]),
                                                    _: 1
                                                  }, 8, ["onClick"])
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div></div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-view-dashboard-outline")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "App Bar")
                                              ]),
                                              createVNode(VSwitch, {
                                                modelValue: navProperties.value.addAppBar,
                                                "onUpdate:modelValue": ($event) => navProperties.value.addAppBar = $event,
                                                color: "primary",
                                                label: "Add app bar",
                                                "hide-details": "",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              navProperties.value.addAppBar ? (openBlock(), createBlock("div", { key: 0 }, [
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-2 d-block" }, "App Bar Color"),
                                                  createVNode(VBtnToggle, {
                                                    modelValue: navProperties.value.appBarColor,
                                                    "onUpdate:modelValue": ($event) => navProperties.value.appBarColor = $event,
                                                    mandatory: "",
                                                    density: "comfortable",
                                                    class: "mb-4"
                                                  }, {
                                                    default: withCtx(() => [
                                                      (openBlock(), createBlock(Fragment, null, renderList(appBarColors, (color, index) => {
                                                        return createVNode(VBtn, {
                                                          key: color.value,
                                                          value: index,
                                                          color: color.value !== "default" ? color.value : void 0,
                                                          size: "small",
                                                          variant: "tonal",
                                                          width: "40",
                                                          height: "40",
                                                          class: "ma-1"
                                                        }, {
                                                          default: withCtx(() => [
                                                            color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                              default: withCtx(() => [
                                                                createTextVNode("mdi-palette-outline")
                                                              ]),
                                                              _: 1
                                                            })) : createCommentVNode("", true)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["value", "color"]);
                                                      }), 64))
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                createVNode(VCard, { class: "mb-4 pa-3" }, {
                                                  default: withCtx(() => [
                                                    (openBlock(true), createBlock(Fragment, null, renderList(appBar.value, (item, index) => {
                                                      return openBlock(), createBlock("div", {
                                                        key: index,
                                                        class: "d-flex align-center mb-2"
                                                      }, [
                                                        createVNode(VTextField, {
                                                          modelValue: item.title,
                                                          "onUpdate:modelValue": ($event) => item.title = $event,
                                                          label: "Title",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          "prepend-inner-icon": "mdi-format-title",
                                                          class: "mr-2",
                                                          placeholder: "Home"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        createVNode(VSelect, {
                                                          modelValue: item.icon,
                                                          "onUpdate:modelValue": ($event) => item.icon = $event,
                                                          items: navIcons.value,
                                                          label: "Icon",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          "prepend-inner-icon": "mdi-pencil",
                                                          class: "mr-2",
                                                          placeholder: "mdi-home"
                                                        }, {
                                                          item: withCtx(({ item: item2, props }) => [
                                                            createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                              prepend: withCtx(() => [
                                                                createVNode(VIcon, {
                                                                  icon: item2.raw
                                                                }, null, 8, ["icon"])
                                                              ]),
                                                              _: 2
                                                            }, 1040)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                        createVNode(VBtn, {
                                                          icon: "mdi-delete",
                                                          color: "error",
                                                          variant: "text",
                                                          density: "compact",
                                                          onClick: ($event) => removeAppBar(index)
                                                        }, null, 8, ["onClick"])
                                                      ]);
                                                    }), 128)),
                                                    createVNode(VBtn, {
                                                      color: "primary",
                                                      "prepend-icon": "mdi-plus",
                                                      variant: "tonal",
                                                      block: "",
                                                      onClick: addAppBar,
                                                      class: "mt-2"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(" Add app bar item ")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ]),
                                                  _: 1
                                                })
                                              ])) : createCommentVNode("", true),
                                              createVNode(VDivider, { class: "my-4" }),
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-format-list-bulleted")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Navigation Items")
                                              ]),
                                              createVNode(VSwitch, {
                                                modelValue: navProperties.value.showSubheader,
                                                "onUpdate:modelValue": ($event) => navProperties.value.showSubheader = $event,
                                                color: "primary",
                                                label: "Add subheaders",
                                                "hide-details": "",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              navProperties.value.showSubheader ? (openBlock(), createBlock("div", { key: 1 }, [
                                                createVNode(VCard, { class: "mb-4 pa-3" }, {
                                                  default: withCtx(() => [
                                                    (openBlock(true), createBlock(Fragment, null, renderList(navHeader.value, (item, index) => {
                                                      return openBlock(), createBlock("div", {
                                                        key: index,
                                                        class: "d-flex align-center mb-2"
                                                      }, [
                                                        createVNode(VTextField, {
                                                          modelValue: item.title,
                                                          "onUpdate:modelValue": ($event) => item.title = $event,
                                                          label: "Subheader text",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          "prepend-inner-icon": "mdi-format-header-3",
                                                          class: "mr-2",
                                                          placeholder: "Section"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        createVNode(VBtn, {
                                                          icon: "mdi-delete",
                                                          color: "error",
                                                          variant: "text",
                                                          density: "compact",
                                                          onClick: ($event) => removeHeader(index)
                                                        }, null, 8, ["onClick"])
                                                      ]);
                                                    }), 128)),
                                                    createVNode(VBtn, {
                                                      color: "primary",
                                                      "prepend-icon": "mdi-plus",
                                                      variant: "tonal",
                                                      block: "",
                                                      onClick: addHeader,
                                                      class: "mt-2"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(" Add subheader ")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ]),
                                                  _: 1
                                                })
                                              ])) : createCommentVNode("", true),
                                              createVNode(VSwitch, {
                                                modelValue: navProperties.value.showIconItems,
                                                "onUpdate:modelValue": ($event) => navProperties.value.showIconItems = $event,
                                                color: "primary",
                                                label: "Add navigation items",
                                                "hide-details": "",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              navProperties.value.showIconItems ? (openBlock(), createBlock("div", { key: 2 }, [
                                                createVNode(VCard, { class: "mb-4 pa-3" }, {
                                                  default: withCtx(() => [
                                                    (openBlock(true), createBlock(Fragment, null, renderList(navItems.value, (item, index) => {
                                                      return openBlock(), createBlock("div", {
                                                        key: index,
                                                        class: "d-flex align-center mb-2"
                                                      }, [
                                                        createVNode(VSelect, {
                                                          modelValue: item.icon,
                                                          "onUpdate:modelValue": ($event) => item.icon = $event,
                                                          items: navIcons.value,
                                                          label: "Icon",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          "prepend-inner-icon": "mdi-emoticon",
                                                          class: "mr-2",
                                                          placeholder: "mdi-home"
                                                        }, {
                                                          item: withCtx(({ item: item2, props }) => [
                                                            createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                              prepend: withCtx(() => [
                                                                createVNode(VIcon, {
                                                                  icon: item2.raw
                                                                }, null, 8, ["icon"])
                                                              ]),
                                                              default: withCtx(() => [
                                                                createVNode(VListItemTitle, null, {
                                                                  default: withCtx(() => [
                                                                    createTextVNode(toDisplayString(item2.raw.replace("mdi-", "")), 1)
                                                                  ]),
                                                                  _: 2
                                                                }, 1024)
                                                              ]),
                                                              _: 2
                                                            }, 1040)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                        createVNode(VTextField, {
                                                          modelValue: item.title,
                                                          "onUpdate:modelValue": ($event) => item.title = $event,
                                                          label: "Title",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          "prepend-inner-icon": "mdi-format-title",
                                                          class: "mr-2",
                                                          placeholder: "Home"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        createVNode(VBtn, {
                                                          icon: "mdi-delete",
                                                          color: "error",
                                                          variant: "text",
                                                          density: "compact",
                                                          onClick: ($event) => removeItem(index)
                                                        }, null, 8, ["onClick"])
                                                      ]);
                                                    }), 128)),
                                                    createVNode(VBtn, {
                                                      color: "primary",
                                                      "prepend-icon": "mdi-plus",
                                                      variant: "tonal",
                                                      block: "",
                                                      onClick: addIconItem,
                                                      class: "mt-2"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(" Add navigation item ")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ]),
                                                  _: 1
                                                })
                                              ])) : createCommentVNode("", true),
                                              createVNode(VTextField, {
                                                modelValue: navProperties.value.image,
                                                "onUpdate:modelValue": ($event) => navProperties.value.image = $event,
                                                label: "Background image URL",
                                                variant: "outlined",
                                                density: "comfortable",
                                                clearable: "",
                                                "prepend-inner-icon": "mdi-image",
                                                class: "mb-4"
                                              }, {
                                                "append-inner": withCtx(() => [
                                                  createVNode(VBtn, {
                                                    icon: "mdi-refresh",
                                                    variant: "text",
                                                    size: "small",
                                                    onClick: ($event) => navProperties.value.image = ""
                                                  }, null, 8, ["onClick"])
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode("div", { class: "d-flex flex-wrap mb-4" }, [
                                                createVNode(VChipGroup, null, {
                                                  default: withCtx(() => [
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1506744038136-46273834b3fb"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Nature")
                                                      ]),
                                                      _: 1
                                                    }, 8, ["onClick"]),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1507525428034-b723cf961d3e"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Ocean")
                                                      ]),
                                                      _: 1
                                                    }, 8, ["onClick"]),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1519681393784-d120267933ba"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Mountain")
                                                      ]),
                                                      _: 1
                                                    }, 8, ["onClick"])
                                                  ]),
                                                  _: 1
                                                })
                                              ])
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "style" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-42de9f80${_scopeId6}><div class="section-title d-flex align-center mb-3" data-v-42de9f80${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-palette`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-palette")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-42de9f80${_scopeId6}>Appearance</span></div><div class="mb-4" data-v-42de9f80${_scopeId6}><label class="text-subtitle-2 mb-2 d-block" data-v-42de9f80${_scopeId6}>Color</label>`);
                                          _push7(ssrRenderComponent(VBtnToggle, {
                                            mandatory: "",
                                            density: "comfortable",
                                            "selected-class": "border-primary"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<!--[-->`);
                                                ssrRenderList(colors, (color) => {
                                                  _push8(ssrRenderComponent(VBtn, {
                                                    key: color,
                                                    value: color,
                                                    color: color !== "default" ? color : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: "ma-1",
                                                    onClick: ($event) => navProperties.value.color = color
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        if (color === "default") {
                                                          _push9(ssrRenderComponent(VIcon, null, {
                                                            default: withCtx((_9, _push10, _parent10, _scopeId9) => {
                                                              if (_push10) {
                                                                _push10(`mdi-palette-outline`);
                                                              } else {
                                                                return [
                                                                  createTextVNode("mdi-palette-outline")
                                                                ];
                                                              }
                                                            }),
                                                            _: 2
                                                          }, _parent9, _scopeId8));
                                                        } else {
                                                          _push9(`<!---->`);
                                                        }
                                                      } else {
                                                        return [
                                                          color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ];
                                                      }
                                                    }),
                                                    _: 2
                                                  }, _parent8, _scopeId7));
                                                });
                                                _push8(`<!--]-->`);
                                              } else {
                                                return [
                                                  (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                    return createVNode(VBtn, {
                                                      key: color,
                                                      value: color,
                                                      color: color !== "default" ? color : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1",
                                                      onClick: ($event) => navProperties.value.color = color
                                                    }, {
                                                      default: withCtx(() => [
                                                        color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color", "onClick"]);
                                                  }), 64))
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div><div class="mb-4" data-v-42de9f80${_scopeId6}><label class="text-subtitle-2 mb-1 d-block" data-v-42de9f80${_scopeId6}>Elevation</label><div class="d-flex align-center" data-v-42de9f80${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-box-shadow`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-box-shadow")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSlider, {
                                            modelValue: navProperties.value.elevation,
                                            "onUpdate:modelValue": ($event) => navProperties.value.elevation = $event,
                                            min: "0",
                                            max: "24",
                                            step: "1",
                                            "thumb-label": "",
                                            class: "mx-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VChip, { size: "x-small" }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`${ssrInterpolate(navProperties.value.elevation)}`);
                                              } else {
                                                return [
                                                  createTextVNode(toDisplayString(navProperties.value.elevation), 1)
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div></div><div class="mb-4" data-v-42de9f80${_scopeId6}><label class="text-subtitle-2 mb-1 d-block" data-v-42de9f80${_scopeId6}>Width</label><div class="d-flex align-center" data-v-42de9f80${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-arrow-expand-horizontal`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-arrow-expand-horizontal")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSlider, {
                                            modelValue: navProperties.value.width,
                                            "onUpdate:modelValue": ($event) => navProperties.value.width = $event,
                                            min: "180",
                                            max: "400",
                                            step: "10",
                                            "thumb-label": "",
                                            class: "mx-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VChip, { size: "x-small" }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`${ssrInterpolate(navProperties.value.width)}px`);
                                              } else {
                                                return [
                                                  createTextVNode(toDisplayString(navProperties.value.width) + "px", 1)
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div></div>`);
                                          _push7(ssrRenderComponent(VDivider, { class: "my-4" }, null, _parent7, _scopeId6));
                                          _push7(`<div class="section-title d-flex align-center mb-3" data-v-42de9f80${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-monitor-dashboard`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-monitor-dashboard")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-42de9f80${_scopeId6}>Layout &amp; Position</span></div><div class="mb-4" data-v-42de9f80${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VBtnToggle, {
                                            modelValue: navProperties.value.location,
                                            "onUpdate:modelValue": ($event) => navProperties.value.location = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            class: "mb-3"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VBtn, {
                                                  value: "left",
                                                  "prepend-icon": "mdi-format-horizontal-align-left"
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`Left`);
                                                    } else {
                                                      return [
                                                        createTextVNode("Left")
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                                _push8(ssrRenderComponent(VBtn, {
                                                  value: "right",
                                                  "prepend-icon": "mdi-format-horizontal-align-right"
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`Right`);
                                                    } else {
                                                      return [
                                                        createTextVNode("Right")
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VBtn, {
                                                    value: "left",
                                                    "prepend-icon": "mdi-format-horizontal-align-left"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Left")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VBtn, {
                                                    value: "right",
                                                    "prepend-icon": "mdi-format-horizontal-align-right"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Right")
                                                    ]),
                                                    _: 1
                                                  })
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div>`);
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: navProperties.value.rounded,
                                            "onUpdate:modelValue": ($event) => navProperties.value.rounded = $event,
                                            color: "primary",
                                            label: "Rounded corners",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: navProperties.value.floating,
                                            "onUpdate:modelValue": ($event) => navProperties.value.floating = $event,
                                            color: "primary",
                                            label: "Floating",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: navProperties.value.rail,
                                            "onUpdate:modelValue": ($event) => navProperties.value.rail = $event,
                                            color: "primary",
                                            label: "Rail mode",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: navProperties.value.expandOnHover,
                                            "onUpdate:modelValue": ($event) => navProperties.value.expandOnHover = $event,
                                            color: "primary",
                                            label: "Expand on hover",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: navProperties.value.permanent,
                                            "onUpdate:modelValue": ($event) => navProperties.value.permanent = $event,
                                            color: "primary",
                                            label: "Permanent",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-palette")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Appearance")
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-2 d-block" }, "Color"),
                                                createVNode(VBtnToggle, {
                                                  mandatory: "",
                                                  density: "comfortable",
                                                  "selected-class": "border-primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                      return createVNode(VBtn, {
                                                        key: color,
                                                        value: color,
                                                        color: color !== "default" ? color : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: "ma-1",
                                                        onClick: ($event) => navProperties.value.color = color
                                                      }, {
                                                        default: withCtx(() => [
                                                          color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color", "onClick"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Elevation"),
                                                createVNode("div", { class: "d-flex align-center" }, [
                                                  createVNode(VIcon, {
                                                    size: "small",
                                                    color: "primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-box-shadow")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VSlider, {
                                                    modelValue: navProperties.value.elevation,
                                                    "onUpdate:modelValue": ($event) => navProperties.value.elevation = $event,
                                                    min: "0",
                                                    max: "24",
                                                    step: "1",
                                                    "thumb-label": "",
                                                    class: "mx-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VChip, { size: "x-small" }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(toDisplayString(navProperties.value.elevation), 1)
                                                    ]),
                                                    _: 1
                                                  })
                                                ])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Width"),
                                                createVNode("div", { class: "d-flex align-center" }, [
                                                  createVNode(VIcon, {
                                                    size: "small",
                                                    color: "primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-arrow-expand-horizontal")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VSlider, {
                                                    modelValue: navProperties.value.width,
                                                    "onUpdate:modelValue": ($event) => navProperties.value.width = $event,
                                                    min: "180",
                                                    max: "400",
                                                    step: "10",
                                                    "thumb-label": "",
                                                    class: "mx-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VChip, { size: "x-small" }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(toDisplayString(navProperties.value.width) + "px", 1)
                                                    ]),
                                                    _: 1
                                                  })
                                                ])
                                              ]),
                                              createVNode(VDivider, { class: "my-4" }),
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-monitor-dashboard")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Layout & Position")
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode(VBtnToggle, {
                                                  modelValue: navProperties.value.location,
                                                  "onUpdate:modelValue": ($event) => navProperties.value.location = $event,
                                                  mandatory: "",
                                                  density: "comfortable",
                                                  class: "mb-3"
                                                }, {
                                                  default: withCtx(() => [
                                                    createVNode(VBtn, {
                                                      value: "left",
                                                      "prepend-icon": "mdi-format-horizontal-align-left"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Left")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VBtn, {
                                                      value: "right",
                                                      "prepend-icon": "mdi-format-horizontal-align-right"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Right")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode(VSwitch, {
                                                modelValue: navProperties.value.rounded,
                                                "onUpdate:modelValue": ($event) => navProperties.value.rounded = $event,
                                                color: "primary",
                                                label: "Rounded corners",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: navProperties.value.floating,
                                                "onUpdate:modelValue": ($event) => navProperties.value.floating = $event,
                                                color: "primary",
                                                label: "Floating",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: navProperties.value.rail,
                                                "onUpdate:modelValue": ($event) => navProperties.value.rail = $event,
                                                color: "primary",
                                                label: "Rail mode",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: navProperties.value.expandOnHover,
                                                "onUpdate:modelValue": ($event) => navProperties.value.expandOnHover = $event,
                                                color: "primary",
                                                label: "Expand on hover",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: navProperties.value.permanent,
                                                "onUpdate:modelValue": ($event) => navProperties.value.permanent = $event,
                                                color: "primary",
                                                label: "Permanent",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "actions" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-42de9f80${_scopeId6}><div class="section-title d-flex align-center mb-3" data-v-42de9f80${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-cog`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-cog")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-42de9f80${_scopeId6}>Behavior</span></div>`);
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: navProperties.value.clipped,
                                            "onUpdate:modelValue": ($event) => navProperties.value.clipped = $event,
                                            color: "primary",
                                            label: "Clipped",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: navProperties.value.mobile,
                                            "onUpdate:modelValue": ($event) => navProperties.value.mobile = $event,
                                            color: "primary",
                                            label: "Mobile",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: navProperties.value.temporary,
                                            "onUpdate:modelValue": ($event) => navProperties.value.temporary = $event,
                                            color: "primary",
                                            label: "Temporary",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VDivider, { class: "my-4" }, null, _parent7, _scopeId6));
                                          _push7(`<div class="section-title d-flex align-center mb-3" data-v-42de9f80${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-link`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-link")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-42de9f80${_scopeId6}>Actions &amp; Links</span></div>`);
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: navProperties.value.showLinkItem,
                                            "onUpdate:modelValue": ($event) => navProperties.value.showLinkItem = $event,
                                            color: "primary",
                                            label: "Add custom link",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          if (navProperties.value.showLinkItem) {
                                            _push7(ssrRenderComponent(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(ssrRenderComponent(VSelect, {
                                                    modelValue: navProperties.value.linkIcon,
                                                    "onUpdate:modelValue": ($event) => navProperties.value.linkIcon = $event,
                                                    items: navIcons.value,
                                                    label: "Link icon",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    clearable: "",
                                                    "prepend-inner-icon": "mdi-pencil",
                                                    class: "mb-3"
                                                  }, {
                                                    item: withCtx(({ item, props }, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(ssrRenderComponent(VListItem, props, {
                                                          prepend: withCtx((_8, _push10, _parent10, _scopeId9) => {
                                                            if (_push10) {
                                                              _push10(ssrRenderComponent(VIcon, {
                                                                icon: item.raw
                                                              }, null, _parent10, _scopeId9));
                                                            } else {
                                                              return [
                                                                createVNode(VIcon, {
                                                                  icon: item.raw
                                                                }, null, 8, ["icon"])
                                                              ];
                                                            }
                                                          }),
                                                          _: 2
                                                        }, _parent9, _scopeId8));
                                                      } else {
                                                        return [
                                                          createVNode(VListItem, props, {
                                                            prepend: withCtx(() => [
                                                              createVNode(VIcon, {
                                                                icon: item.raw
                                                              }, null, 8, ["icon"])
                                                            ]),
                                                            _: 2
                                                          }, 1040)
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VTextField, {
                                                    modelValue: navProperties.value.linkTitle,
                                                    "onUpdate:modelValue": ($event) => navProperties.value.linkTitle = $event,
                                                    label: "Link title",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    clearable: "",
                                                    "prepend-inner-icon": "mdi-format-title",
                                                    class: "mb-3"
                                                  }, null, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VTextField, {
                                                    modelValue: navProperties.value.linkUrl,
                                                    "onUpdate:modelValue": ($event) => navProperties.value.linkUrl = $event,
                                                    label: "Link URL",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    clearable: "",
                                                    "prepend-inner-icon": "mdi-link-variant",
                                                    class: "mb-3"
                                                  }, null, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VSwitch, {
                                                    modelValue: navProperties.value.linkExternal,
                                                    "onUpdate:modelValue": ($event) => navProperties.value.linkExternal = $event,
                                                    color: "primary",
                                                    label: "Open in new tab",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, _parent8, _scopeId7));
                                                } else {
                                                  return [
                                                    createVNode(VSelect, {
                                                      modelValue: navProperties.value.linkIcon,
                                                      "onUpdate:modelValue": ($event) => navProperties.value.linkIcon = $event,
                                                      items: navIcons.value,
                                                      label: "Link icon",
                                                      variant: "outlined",
                                                      density: "comfortable",
                                                      clearable: "",
                                                      "prepend-inner-icon": "mdi-pencil",
                                                      class: "mb-3"
                                                    }, {
                                                      item: withCtx(({ item, props }) => [
                                                        createVNode(VListItem, props, {
                                                          prepend: withCtx(() => [
                                                            createVNode(VIcon, {
                                                              icon: item.raw
                                                            }, null, 8, ["icon"])
                                                          ]),
                                                          _: 2
                                                        }, 1040)
                                                      ]),
                                                      _: 1
                                                    }, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                                    createVNode(VTextField, {
                                                      modelValue: navProperties.value.linkTitle,
                                                      "onUpdate:modelValue": ($event) => navProperties.value.linkTitle = $event,
                                                      label: "Link title",
                                                      variant: "outlined",
                                                      density: "comfortable",
                                                      clearable: "",
                                                      "prepend-inner-icon": "mdi-format-title",
                                                      class: "mb-3"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode(VTextField, {
                                                      modelValue: navProperties.value.linkUrl,
                                                      "onUpdate:modelValue": ($event) => navProperties.value.linkUrl = $event,
                                                      label: "Link URL",
                                                      variant: "outlined",
                                                      density: "comfortable",
                                                      clearable: "",
                                                      "prepend-inner-icon": "mdi-link-variant",
                                                      class: "mb-3"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode(VSwitch, {
                                                      modelValue: navProperties.value.linkExternal,
                                                      "onUpdate:modelValue": ($event) => navProperties.value.linkExternal = $event,
                                                      color: "primary",
                                                      label: "Open in new tab",
                                                      "hide-details": "",
                                                      class: "mb-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-cog")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Behavior")
                                              ]),
                                              createVNode(VSwitch, {
                                                modelValue: navProperties.value.clipped,
                                                "onUpdate:modelValue": ($event) => navProperties.value.clipped = $event,
                                                color: "primary",
                                                label: "Clipped",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: navProperties.value.mobile,
                                                "onUpdate:modelValue": ($event) => navProperties.value.mobile = $event,
                                                color: "primary",
                                                label: "Mobile",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: navProperties.value.temporary,
                                                "onUpdate:modelValue": ($event) => navProperties.value.temporary = $event,
                                                color: "primary",
                                                label: "Temporary",
                                                "hide-details": "",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VDivider, { class: "my-4" }),
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-link")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Actions & Links")
                                              ]),
                                              createVNode(VSwitch, {
                                                modelValue: navProperties.value.showLinkItem,
                                                "onUpdate:modelValue": ($event) => navProperties.value.showLinkItem = $event,
                                                color: "primary",
                                                label: "Add custom link",
                                                "hide-details": "",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              navProperties.value.showLinkItem ? (openBlock(), createBlock(VCard, {
                                                key: 0,
                                                class: "mb-4 pa-3"
                                              }, {
                                                default: withCtx(() => [
                                                  createVNode(VSelect, {
                                                    modelValue: navProperties.value.linkIcon,
                                                    "onUpdate:modelValue": ($event) => navProperties.value.linkIcon = $event,
                                                    items: navIcons.value,
                                                    label: "Link icon",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    clearable: "",
                                                    "prepend-inner-icon": "mdi-pencil",
                                                    class: "mb-3"
                                                  }, {
                                                    item: withCtx(({ item, props }) => [
                                                      createVNode(VListItem, props, {
                                                        prepend: withCtx(() => [
                                                          createVNode(VIcon, {
                                                            icon: item.raw
                                                          }, null, 8, ["icon"])
                                                        ]),
                                                        _: 2
                                                      }, 1040)
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                                  createVNode(VTextField, {
                                                    modelValue: navProperties.value.linkTitle,
                                                    "onUpdate:modelValue": ($event) => navProperties.value.linkTitle = $event,
                                                    label: "Link title",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    clearable: "",
                                                    "prepend-inner-icon": "mdi-format-title",
                                                    class: "mb-3"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VTextField, {
                                                    modelValue: navProperties.value.linkUrl,
                                                    "onUpdate:modelValue": ($event) => navProperties.value.linkUrl = $event,
                                                    label: "Link URL",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    clearable: "",
                                                    "prepend-inner-icon": "mdi-link-variant",
                                                    class: "mb-3"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VSwitch, {
                                                    modelValue: navProperties.value.linkExternal,
                                                    "onUpdate:modelValue": ($event) => navProperties.value.linkExternal = $event,
                                                    color: "primary",
                                                    label: "Open in new tab",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                _: 1
                                              })) : createCommentVNode("", true)
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "templates" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-42de9f80${_scopeId6}><div class="section-title d-flex align-center mb-3 justify-space-between" data-v-42de9f80${_scopeId6}><div class="d-flex align-center" data-v-42de9f80${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-file-document-outline`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-file-document-outline")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-42de9f80${_scopeId6}>Navigation Templates</span></div>`);
                                          _push7(ssrRenderComponent(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props }, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VBtn, mergeProps({
                                                  icon: "mdi-help-circle-outline",
                                                  variant: "text",
                                                  size: "small"
                                                }, props), null, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VBtn, mergeProps({
                                                    icon: "mdi-help-circle-outline",
                                                    variant: "text",
                                                    size: "small"
                                                  }, props), null, 16)
                                                ];
                                              }
                                            }),
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<span data-v-42de9f80${_scopeId7}>Apply pre-defined templates or save your own</span>`);
                                              } else {
                                                return [
                                                  createVNode("span", null, "Apply pre-defined templates or save your own")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div><p class="text-body-2 mb-4" data-v-42de9f80${_scopeId6}>Choose a pre-defined template to quickly create common navigation layouts. </p>`);
                                          _push7(ssrRenderComponent(VCard, { class: "mb-4" }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VList, null, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("dashboard"),
                                                        "prepend-icon": "mdi-view-dashboard",
                                                        title: "Dashboard",
                                                        subtitle: "Admin dashboard navigation"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("ecommerce"),
                                                        "prepend-icon": "mdi-shopping",
                                                        title: "E-commerce",
                                                        subtitle: "Online store navigation"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("social"),
                                                        "prepend-icon": "mdi-account-group",
                                                        title: "Social Network",
                                                        subtitle: "Social media navigation"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("admin"),
                                                        "prepend-icon": "mdi-shield-account",
                                                        title: "Admin Panel",
                                                        subtitle: "Advanced admin navigation"
                                                      }, null, _parent9, _scopeId8));
                                                    } else {
                                                      return [
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("dashboard"),
                                                          "prepend-icon": "mdi-view-dashboard",
                                                          title: "Dashboard",
                                                          subtitle: "Admin dashboard navigation"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("ecommerce"),
                                                          "prepend-icon": "mdi-shopping",
                                                          title: "E-commerce",
                                                          subtitle: "Online store navigation"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("social"),
                                                          "prepend-icon": "mdi-account-group",
                                                          title: "Social Network",
                                                          subtitle: "Social media navigation"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("admin"),
                                                          "prepend-icon": "mdi-shield-account",
                                                          title: "Admin Panel",
                                                          subtitle: "Advanced admin navigation"
                                                        }, null, 8, ["onClick"])
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VList, null, {
                                                    default: withCtx(() => [
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("dashboard"),
                                                        "prepend-icon": "mdi-view-dashboard",
                                                        title: "Dashboard",
                                                        subtitle: "Admin dashboard navigation"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("ecommerce"),
                                                        "prepend-icon": "mdi-shopping",
                                                        title: "E-commerce",
                                                        subtitle: "Online store navigation"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("social"),
                                                        "prepend-icon": "mdi-account-group",
                                                        title: "Social Network",
                                                        subtitle: "Social media navigation"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("admin"),
                                                        "prepend-icon": "mdi-shield-account",
                                                        title: "Admin Panel",
                                                        subtitle: "Advanced admin navigation"
                                                      }, null, 8, ["onClick"])
                                                    ]),
                                                    _: 1
                                                  })
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VAlert, {
                                            type: "info",
                                            variant: "tonal",
                                            class: "mb-4"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(` Applying a template will replace your current navigation settings. `);
                                              } else {
                                                return [
                                                  createTextVNode(" Applying a template will replace your current navigation settings. ")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VDivider, { class: "my-4" }, null, _parent7, _scopeId6));
                                          _push7(`<div class="section-title d-flex align-center mb-3" data-v-42de9f80${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-content-save`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-content-save")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-42de9f80${_scopeId6}>Save Current Navigation</span></div>`);
                                          _push7(ssrRenderComponent(VTextField, {
                                            modelValue: customTemplateName.value,
                                            "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                            label: "Template Name",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "prepend-inner-icon": "mdi-tag",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VBtn, {
                                            color: "primary",
                                            "prepend-icon": "mdi-content-save",
                                            block: "",
                                            onClick: saveCurrentTemplate
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(` Save Current Navigation as Template `);
                                              } else {
                                                return [
                                                  createTextVNode(" Save Current Navigation as Template ")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                                createVNode("div", { class: "d-flex align-center" }, [
                                                  createVNode(VIcon, {
                                                    color: "primary",
                                                    class: "mr-2"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-file-document-outline")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode("span", { class: "text-h6" }, "Navigation Templates")
                                                ]),
                                                createVNode(VTooltip, { location: "bottom" }, {
                                                  activator: withCtx(({ props }) => [
                                                    createVNode(VBtn, mergeProps({
                                                      icon: "mdi-help-circle-outline",
                                                      variant: "text",
                                                      size: "small"
                                                    }, props), null, 16)
                                                  ]),
                                                  default: withCtx(() => [
                                                    createVNode("span", null, "Apply pre-defined templates or save your own")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common navigation layouts. "),
                                              createVNode(VCard, { class: "mb-4" }, {
                                                default: withCtx(() => [
                                                  createVNode(VList, null, {
                                                    default: withCtx(() => [
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("dashboard"),
                                                        "prepend-icon": "mdi-view-dashboard",
                                                        title: "Dashboard",
                                                        subtitle: "Admin dashboard navigation"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("ecommerce"),
                                                        "prepend-icon": "mdi-shopping",
                                                        title: "E-commerce",
                                                        subtitle: "Online store navigation"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("social"),
                                                        "prepend-icon": "mdi-account-group",
                                                        title: "Social Network",
                                                        subtitle: "Social media navigation"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("admin"),
                                                        "prepend-icon": "mdi-shield-account",
                                                        title: "Admin Panel",
                                                        subtitle: "Advanced admin navigation"
                                                      }, null, 8, ["onClick"])
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VAlert, {
                                                type: "info",
                                                variant: "tonal",
                                                class: "mb-4"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Applying a template will replace your current navigation settings. ")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VDivider, { class: "my-4" }),
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-content-save")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Save Current Navigation")
                                              ]),
                                              createVNode(VTextField, {
                                                modelValue: customTemplateName.value,
                                                "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                                label: "Template Name",
                                                variant: "outlined",
                                                density: "comfortable",
                                                "prepend-inner-icon": "mdi-tag",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VBtn, {
                                                color: "primary",
                                                "prepend-icon": "mdi-content-save",
                                                block: "",
                                                onClick: saveCurrentTemplate
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Save Current Navigation as Template ")
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                  } else {
                                    return [
                                      createVNode(VWindowItem, { value: "content" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-view-dashboard-outline")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "App Bar")
                                            ]),
                                            createVNode(VSwitch, {
                                              modelValue: navProperties.value.addAppBar,
                                              "onUpdate:modelValue": ($event) => navProperties.value.addAppBar = $event,
                                              color: "primary",
                                              label: "Add app bar",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            navProperties.value.addAppBar ? (openBlock(), createBlock("div", { key: 0 }, [
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-2 d-block" }, "App Bar Color"),
                                                createVNode(VBtnToggle, {
                                                  modelValue: navProperties.value.appBarColor,
                                                  "onUpdate:modelValue": ($event) => navProperties.value.appBarColor = $event,
                                                  mandatory: "",
                                                  density: "comfortable",
                                                  class: "mb-4"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(appBarColors, (color, index) => {
                                                      return createVNode(VBtn, {
                                                        key: color.value,
                                                        value: index,
                                                        color: color.value !== "default" ? color.value : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: "ma-1"
                                                      }, {
                                                        default: withCtx(() => [
                                                          color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode(VCard, { class: "mb-4 pa-3" }, {
                                                default: withCtx(() => [
                                                  (openBlock(true), createBlock(Fragment, null, renderList(appBar.value, (item, index) => {
                                                    return openBlock(), createBlock("div", {
                                                      key: index,
                                                      class: "d-flex align-center mb-2"
                                                    }, [
                                                      createVNode(VTextField, {
                                                        modelValue: item.title,
                                                        "onUpdate:modelValue": ($event) => item.title = $event,
                                                        label: "Title",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-format-title",
                                                        class: "mr-2",
                                                        placeholder: "Home"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode(VSelect, {
                                                        modelValue: item.icon,
                                                        "onUpdate:modelValue": ($event) => item.icon = $event,
                                                        items: navIcons.value,
                                                        label: "Icon",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-pencil",
                                                        class: "mr-2",
                                                        placeholder: "mdi-home"
                                                      }, {
                                                        item: withCtx(({ item: item2, props }) => [
                                                          createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                            prepend: withCtx(() => [
                                                              createVNode(VIcon, {
                                                                icon: item2.raw
                                                              }, null, 8, ["icon"])
                                                            ]),
                                                            _: 2
                                                          }, 1040)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                      createVNode(VBtn, {
                                                        icon: "mdi-delete",
                                                        color: "error",
                                                        variant: "text",
                                                        density: "compact",
                                                        onClick: ($event) => removeAppBar(index)
                                                      }, null, 8, ["onClick"])
                                                    ]);
                                                  }), 128)),
                                                  createVNode(VBtn, {
                                                    color: "primary",
                                                    "prepend-icon": "mdi-plus",
                                                    variant: "tonal",
                                                    block: "",
                                                    onClick: addAppBar,
                                                    class: "mt-2"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(" Add app bar item ")
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              })
                                            ])) : createCommentVNode("", true),
                                            createVNode(VDivider, { class: "my-4" }),
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-format-list-bulleted")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Navigation Items")
                                            ]),
                                            createVNode(VSwitch, {
                                              modelValue: navProperties.value.showSubheader,
                                              "onUpdate:modelValue": ($event) => navProperties.value.showSubheader = $event,
                                              color: "primary",
                                              label: "Add subheaders",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            navProperties.value.showSubheader ? (openBlock(), createBlock("div", { key: 1 }, [
                                              createVNode(VCard, { class: "mb-4 pa-3" }, {
                                                default: withCtx(() => [
                                                  (openBlock(true), createBlock(Fragment, null, renderList(navHeader.value, (item, index) => {
                                                    return openBlock(), createBlock("div", {
                                                      key: index,
                                                      class: "d-flex align-center mb-2"
                                                    }, [
                                                      createVNode(VTextField, {
                                                        modelValue: item.title,
                                                        "onUpdate:modelValue": ($event) => item.title = $event,
                                                        label: "Subheader text",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-format-header-3",
                                                        class: "mr-2",
                                                        placeholder: "Section"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode(VBtn, {
                                                        icon: "mdi-delete",
                                                        color: "error",
                                                        variant: "text",
                                                        density: "compact",
                                                        onClick: ($event) => removeHeader(index)
                                                      }, null, 8, ["onClick"])
                                                    ]);
                                                  }), 128)),
                                                  createVNode(VBtn, {
                                                    color: "primary",
                                                    "prepend-icon": "mdi-plus",
                                                    variant: "tonal",
                                                    block: "",
                                                    onClick: addHeader,
                                                    class: "mt-2"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(" Add subheader ")
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              })
                                            ])) : createCommentVNode("", true),
                                            createVNode(VSwitch, {
                                              modelValue: navProperties.value.showIconItems,
                                              "onUpdate:modelValue": ($event) => navProperties.value.showIconItems = $event,
                                              color: "primary",
                                              label: "Add navigation items",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            navProperties.value.showIconItems ? (openBlock(), createBlock("div", { key: 2 }, [
                                              createVNode(VCard, { class: "mb-4 pa-3" }, {
                                                default: withCtx(() => [
                                                  (openBlock(true), createBlock(Fragment, null, renderList(navItems.value, (item, index) => {
                                                    return openBlock(), createBlock("div", {
                                                      key: index,
                                                      class: "d-flex align-center mb-2"
                                                    }, [
                                                      createVNode(VSelect, {
                                                        modelValue: item.icon,
                                                        "onUpdate:modelValue": ($event) => item.icon = $event,
                                                        items: navIcons.value,
                                                        label: "Icon",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-emoticon",
                                                        class: "mr-2",
                                                        placeholder: "mdi-home"
                                                      }, {
                                                        item: withCtx(({ item: item2, props }) => [
                                                          createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                            prepend: withCtx(() => [
                                                              createVNode(VIcon, {
                                                                icon: item2.raw
                                                              }, null, 8, ["icon"])
                                                            ]),
                                                            default: withCtx(() => [
                                                              createVNode(VListItemTitle, null, {
                                                                default: withCtx(() => [
                                                                  createTextVNode(toDisplayString(item2.raw.replace("mdi-", "")), 1)
                                                                ]),
                                                                _: 2
                                                              }, 1024)
                                                            ]),
                                                            _: 2
                                                          }, 1040)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                      createVNode(VTextField, {
                                                        modelValue: item.title,
                                                        "onUpdate:modelValue": ($event) => item.title = $event,
                                                        label: "Title",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-format-title",
                                                        class: "mr-2",
                                                        placeholder: "Home"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode(VBtn, {
                                                        icon: "mdi-delete",
                                                        color: "error",
                                                        variant: "text",
                                                        density: "compact",
                                                        onClick: ($event) => removeItem(index)
                                                      }, null, 8, ["onClick"])
                                                    ]);
                                                  }), 128)),
                                                  createVNode(VBtn, {
                                                    color: "primary",
                                                    "prepend-icon": "mdi-plus",
                                                    variant: "tonal",
                                                    block: "",
                                                    onClick: addIconItem,
                                                    class: "mt-2"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(" Add navigation item ")
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              })
                                            ])) : createCommentVNode("", true),
                                            createVNode(VTextField, {
                                              modelValue: navProperties.value.image,
                                              "onUpdate:modelValue": ($event) => navProperties.value.image = $event,
                                              label: "Background image URL",
                                              variant: "outlined",
                                              density: "comfortable",
                                              clearable: "",
                                              "prepend-inner-icon": "mdi-image",
                                              class: "mb-4"
                                            }, {
                                              "append-inner": withCtx(() => [
                                                createVNode(VBtn, {
                                                  icon: "mdi-refresh",
                                                  variant: "text",
                                                  size: "small",
                                                  onClick: ($event) => navProperties.value.image = ""
                                                }, null, 8, ["onClick"])
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode("div", { class: "d-flex flex-wrap mb-4" }, [
                                              createVNode(VChipGroup, null, {
                                                default: withCtx(() => [
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1506744038136-46273834b3fb"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Nature")
                                                    ]),
                                                    _: 1
                                                  }, 8, ["onClick"]),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1507525428034-b723cf961d3e"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Ocean")
                                                    ]),
                                                    _: 1
                                                  }, 8, ["onClick"]),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1519681393784-d120267933ba"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Mountain")
                                                    ]),
                                                    _: 1
                                                  }, 8, ["onClick"])
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "style" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-palette")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Appearance")
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-2 d-block" }, "Color"),
                                              createVNode(VBtnToggle, {
                                                mandatory: "",
                                                density: "comfortable",
                                                "selected-class": "border-primary"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                    return createVNode(VBtn, {
                                                      key: color,
                                                      value: color,
                                                      color: color !== "default" ? color : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1",
                                                      onClick: ($event) => navProperties.value.color = color
                                                    }, {
                                                      default: withCtx(() => [
                                                        color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color", "onClick"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Elevation"),
                                              createVNode("div", { class: "d-flex align-center" }, [
                                                createVNode(VIcon, {
                                                  size: "small",
                                                  color: "primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-box-shadow")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VSlider, {
                                                  modelValue: navProperties.value.elevation,
                                                  "onUpdate:modelValue": ($event) => navProperties.value.elevation = $event,
                                                  min: "0",
                                                  max: "24",
                                                  step: "1",
                                                  "thumb-label": "",
                                                  class: "mx-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VChip, { size: "x-small" }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(toDisplayString(navProperties.value.elevation), 1)
                                                  ]),
                                                  _: 1
                                                })
                                              ])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Width"),
                                              createVNode("div", { class: "d-flex align-center" }, [
                                                createVNode(VIcon, {
                                                  size: "small",
                                                  color: "primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-arrow-expand-horizontal")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VSlider, {
                                                  modelValue: navProperties.value.width,
                                                  "onUpdate:modelValue": ($event) => navProperties.value.width = $event,
                                                  min: "180",
                                                  max: "400",
                                                  step: "10",
                                                  "thumb-label": "",
                                                  class: "mx-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VChip, { size: "x-small" }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(toDisplayString(navProperties.value.width) + "px", 1)
                                                  ]),
                                                  _: 1
                                                })
                                              ])
                                            ]),
                                            createVNode(VDivider, { class: "my-4" }),
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-monitor-dashboard")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Layout & Position")
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode(VBtnToggle, {
                                                modelValue: navProperties.value.location,
                                                "onUpdate:modelValue": ($event) => navProperties.value.location = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                class: "mb-3"
                                              }, {
                                                default: withCtx(() => [
                                                  createVNode(VBtn, {
                                                    value: "left",
                                                    "prepend-icon": "mdi-format-horizontal-align-left"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Left")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VBtn, {
                                                    value: "right",
                                                    "prepend-icon": "mdi-format-horizontal-align-right"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Right")
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode(VSwitch, {
                                              modelValue: navProperties.value.rounded,
                                              "onUpdate:modelValue": ($event) => navProperties.value.rounded = $event,
                                              color: "primary",
                                              label: "Rounded corners",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: navProperties.value.floating,
                                              "onUpdate:modelValue": ($event) => navProperties.value.floating = $event,
                                              color: "primary",
                                              label: "Floating",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: navProperties.value.rail,
                                              "onUpdate:modelValue": ($event) => navProperties.value.rail = $event,
                                              color: "primary",
                                              label: "Rail mode",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: navProperties.value.expandOnHover,
                                              "onUpdate:modelValue": ($event) => navProperties.value.expandOnHover = $event,
                                              color: "primary",
                                              label: "Expand on hover",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: navProperties.value.permanent,
                                              "onUpdate:modelValue": ($event) => navProperties.value.permanent = $event,
                                              color: "primary",
                                              label: "Permanent",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "actions" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-cog")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Behavior")
                                            ]),
                                            createVNode(VSwitch, {
                                              modelValue: navProperties.value.clipped,
                                              "onUpdate:modelValue": ($event) => navProperties.value.clipped = $event,
                                              color: "primary",
                                              label: "Clipped",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: navProperties.value.mobile,
                                              "onUpdate:modelValue": ($event) => navProperties.value.mobile = $event,
                                              color: "primary",
                                              label: "Mobile",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: navProperties.value.temporary,
                                              "onUpdate:modelValue": ($event) => navProperties.value.temporary = $event,
                                              color: "primary",
                                              label: "Temporary",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VDivider, { class: "my-4" }),
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-link")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Actions & Links")
                                            ]),
                                            createVNode(VSwitch, {
                                              modelValue: navProperties.value.showLinkItem,
                                              "onUpdate:modelValue": ($event) => navProperties.value.showLinkItem = $event,
                                              color: "primary",
                                              label: "Add custom link",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            navProperties.value.showLinkItem ? (openBlock(), createBlock(VCard, {
                                              key: 0,
                                              class: "mb-4 pa-3"
                                            }, {
                                              default: withCtx(() => [
                                                createVNode(VSelect, {
                                                  modelValue: navProperties.value.linkIcon,
                                                  "onUpdate:modelValue": ($event) => navProperties.value.linkIcon = $event,
                                                  items: navIcons.value,
                                                  label: "Link icon",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  clearable: "",
                                                  "prepend-inner-icon": "mdi-pencil",
                                                  class: "mb-3"
                                                }, {
                                                  item: withCtx(({ item, props }) => [
                                                    createVNode(VListItem, props, {
                                                      prepend: withCtx(() => [
                                                        createVNode(VIcon, {
                                                          icon: item.raw
                                                        }, null, 8, ["icon"])
                                                      ]),
                                                      _: 2
                                                    }, 1040)
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                                createVNode(VTextField, {
                                                  modelValue: navProperties.value.linkTitle,
                                                  "onUpdate:modelValue": ($event) => navProperties.value.linkTitle = $event,
                                                  label: "Link title",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  clearable: "",
                                                  "prepend-inner-icon": "mdi-format-title",
                                                  class: "mb-3"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VTextField, {
                                                  modelValue: navProperties.value.linkUrl,
                                                  "onUpdate:modelValue": ($event) => navProperties.value.linkUrl = $event,
                                                  label: "Link URL",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  clearable: "",
                                                  "prepend-inner-icon": "mdi-link-variant",
                                                  class: "mb-3"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: navProperties.value.linkExternal,
                                                  "onUpdate:modelValue": ($event) => navProperties.value.linkExternal = $event,
                                                  color: "primary",
                                                  label: "Open in new tab",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              _: 1
                                            })) : createCommentVNode("", true)
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "templates" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                              createVNode("div", { class: "d-flex align-center" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-file-document-outline")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Navigation Templates")
                                              ]),
                                              createVNode(VTooltip, { location: "bottom" }, {
                                                activator: withCtx(({ props }) => [
                                                  createVNode(VBtn, mergeProps({
                                                    icon: "mdi-help-circle-outline",
                                                    variant: "text",
                                                    size: "small"
                                                  }, props), null, 16)
                                                ]),
                                                default: withCtx(() => [
                                                  createVNode("span", null, "Apply pre-defined templates or save your own")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common navigation layouts. "),
                                            createVNode(VCard, { class: "mb-4" }, {
                                              default: withCtx(() => [
                                                createVNode(VList, null, {
                                                  default: withCtx(() => [
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("dashboard"),
                                                      "prepend-icon": "mdi-view-dashboard",
                                                      title: "Dashboard",
                                                      subtitle: "Admin dashboard navigation"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("ecommerce"),
                                                      "prepend-icon": "mdi-shopping",
                                                      title: "E-commerce",
                                                      subtitle: "Online store navigation"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("social"),
                                                      "prepend-icon": "mdi-account-group",
                                                      title: "Social Network",
                                                      subtitle: "Social media navigation"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("admin"),
                                                      "prepend-icon": "mdi-shield-account",
                                                      title: "Admin Panel",
                                                      subtitle: "Advanced admin navigation"
                                                    }, null, 8, ["onClick"])
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VAlert, {
                                              type: "info",
                                              variant: "tonal",
                                              class: "mb-4"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(" Applying a template will replace your current navigation settings. ")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VDivider, { class: "my-4" }),
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-content-save")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Save Current Navigation")
                                            ]),
                                            createVNode(VTextField, {
                                              modelValue: customTemplateName.value,
                                              "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                              label: "Template Name",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "prepend-inner-icon": "mdi-tag",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VBtn, {
                                              color: "primary",
                                              "prepend-icon": "mdi-content-save",
                                              block: "",
                                              onClick: saveCurrentTemplate
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(" Save Current Navigation as Template ")
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        _: 1
                                      })
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VWindow, {
                                  modelValue: tab.value,
                                  "onUpdate:modelValue": ($event) => tab.value = $event
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VWindowItem, { value: "content" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-view-dashboard-outline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "App Bar")
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: navProperties.value.addAppBar,
                                            "onUpdate:modelValue": ($event) => navProperties.value.addAppBar = $event,
                                            color: "primary",
                                            label: "Add app bar",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          navProperties.value.addAppBar ? (openBlock(), createBlock("div", { key: 0 }, [
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-2 d-block" }, "App Bar Color"),
                                              createVNode(VBtnToggle, {
                                                modelValue: navProperties.value.appBarColor,
                                                "onUpdate:modelValue": ($event) => navProperties.value.appBarColor = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                class: "mb-4"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(appBarColors, (color, index) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: index,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx(() => [
                                                (openBlock(true), createBlock(Fragment, null, renderList(appBar.value, (item, index) => {
                                                  return openBlock(), createBlock("div", {
                                                    key: index,
                                                    class: "d-flex align-center mb-2"
                                                  }, [
                                                    createVNode(VTextField, {
                                                      modelValue: item.title,
                                                      "onUpdate:modelValue": ($event) => item.title = $event,
                                                      label: "Title",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-format-title",
                                                      class: "mr-2",
                                                      placeholder: "Home"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode(VSelect, {
                                                      modelValue: item.icon,
                                                      "onUpdate:modelValue": ($event) => item.icon = $event,
                                                      items: navIcons.value,
                                                      label: "Icon",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-pencil",
                                                      class: "mr-2",
                                                      placeholder: "mdi-home"
                                                    }, {
                                                      item: withCtx(({ item: item2, props }) => [
                                                        createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                          prepend: withCtx(() => [
                                                            createVNode(VIcon, {
                                                              icon: item2.raw
                                                            }, null, 8, ["icon"])
                                                          ]),
                                                          _: 2
                                                        }, 1040)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                    createVNode(VBtn, {
                                                      icon: "mdi-delete",
                                                      color: "error",
                                                      variant: "text",
                                                      density: "compact",
                                                      onClick: ($event) => removeAppBar(index)
                                                    }, null, 8, ["onClick"])
                                                  ]);
                                                }), 128)),
                                                createVNode(VBtn, {
                                                  color: "primary",
                                                  "prepend-icon": "mdi-plus",
                                                  variant: "tonal",
                                                  block: "",
                                                  onClick: addAppBar,
                                                  class: "mt-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(" Add app bar item ")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            })
                                          ])) : createCommentVNode("", true),
                                          createVNode(VDivider, { class: "my-4" }),
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-format-list-bulleted")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Navigation Items")
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: navProperties.value.showSubheader,
                                            "onUpdate:modelValue": ($event) => navProperties.value.showSubheader = $event,
                                            color: "primary",
                                            label: "Add subheaders",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          navProperties.value.showSubheader ? (openBlock(), createBlock("div", { key: 1 }, [
                                            createVNode(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx(() => [
                                                (openBlock(true), createBlock(Fragment, null, renderList(navHeader.value, (item, index) => {
                                                  return openBlock(), createBlock("div", {
                                                    key: index,
                                                    class: "d-flex align-center mb-2"
                                                  }, [
                                                    createVNode(VTextField, {
                                                      modelValue: item.title,
                                                      "onUpdate:modelValue": ($event) => item.title = $event,
                                                      label: "Subheader text",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-format-header-3",
                                                      class: "mr-2",
                                                      placeholder: "Section"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode(VBtn, {
                                                      icon: "mdi-delete",
                                                      color: "error",
                                                      variant: "text",
                                                      density: "compact",
                                                      onClick: ($event) => removeHeader(index)
                                                    }, null, 8, ["onClick"])
                                                  ]);
                                                }), 128)),
                                                createVNode(VBtn, {
                                                  color: "primary",
                                                  "prepend-icon": "mdi-plus",
                                                  variant: "tonal",
                                                  block: "",
                                                  onClick: addHeader,
                                                  class: "mt-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(" Add subheader ")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            })
                                          ])) : createCommentVNode("", true),
                                          createVNode(VSwitch, {
                                            modelValue: navProperties.value.showIconItems,
                                            "onUpdate:modelValue": ($event) => navProperties.value.showIconItems = $event,
                                            color: "primary",
                                            label: "Add navigation items",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          navProperties.value.showIconItems ? (openBlock(), createBlock("div", { key: 2 }, [
                                            createVNode(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx(() => [
                                                (openBlock(true), createBlock(Fragment, null, renderList(navItems.value, (item, index) => {
                                                  return openBlock(), createBlock("div", {
                                                    key: index,
                                                    class: "d-flex align-center mb-2"
                                                  }, [
                                                    createVNode(VSelect, {
                                                      modelValue: item.icon,
                                                      "onUpdate:modelValue": ($event) => item.icon = $event,
                                                      items: navIcons.value,
                                                      label: "Icon",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-emoticon",
                                                      class: "mr-2",
                                                      placeholder: "mdi-home"
                                                    }, {
                                                      item: withCtx(({ item: item2, props }) => [
                                                        createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                          prepend: withCtx(() => [
                                                            createVNode(VIcon, {
                                                              icon: item2.raw
                                                            }, null, 8, ["icon"])
                                                          ]),
                                                          default: withCtx(() => [
                                                            createVNode(VListItemTitle, null, {
                                                              default: withCtx(() => [
                                                                createTextVNode(toDisplayString(item2.raw.replace("mdi-", "")), 1)
                                                              ]),
                                                              _: 2
                                                            }, 1024)
                                                          ]),
                                                          _: 2
                                                        }, 1040)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                    createVNode(VTextField, {
                                                      modelValue: item.title,
                                                      "onUpdate:modelValue": ($event) => item.title = $event,
                                                      label: "Title",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-format-title",
                                                      class: "mr-2",
                                                      placeholder: "Home"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode(VBtn, {
                                                      icon: "mdi-delete",
                                                      color: "error",
                                                      variant: "text",
                                                      density: "compact",
                                                      onClick: ($event) => removeItem(index)
                                                    }, null, 8, ["onClick"])
                                                  ]);
                                                }), 128)),
                                                createVNode(VBtn, {
                                                  color: "primary",
                                                  "prepend-icon": "mdi-plus",
                                                  variant: "tonal",
                                                  block: "",
                                                  onClick: addIconItem,
                                                  class: "mt-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(" Add navigation item ")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            })
                                          ])) : createCommentVNode("", true),
                                          createVNode(VTextField, {
                                            modelValue: navProperties.value.image,
                                            "onUpdate:modelValue": ($event) => navProperties.value.image = $event,
                                            label: "Background image URL",
                                            variant: "outlined",
                                            density: "comfortable",
                                            clearable: "",
                                            "prepend-inner-icon": "mdi-image",
                                            class: "mb-4"
                                          }, {
                                            "append-inner": withCtx(() => [
                                              createVNode(VBtn, {
                                                icon: "mdi-refresh",
                                                variant: "text",
                                                size: "small",
                                                onClick: ($event) => navProperties.value.image = ""
                                              }, null, 8, ["onClick"])
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode("div", { class: "d-flex flex-wrap mb-4" }, [
                                            createVNode(VChipGroup, null, {
                                              default: withCtx(() => [
                                                createVNode(VChip, {
                                                  size: "small",
                                                  onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1506744038136-46273834b3fb"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Nature")
                                                  ]),
                                                  _: 1
                                                }, 8, ["onClick"]),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1507525428034-b723cf961d3e"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Ocean")
                                                  ]),
                                                  _: 1
                                                }, 8, ["onClick"]),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1519681393784-d120267933ba"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Mountain")
                                                  ]),
                                                  _: 1
                                                }, 8, ["onClick"])
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ])
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "style" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-palette")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Appearance")
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-2 d-block" }, "Color"),
                                            createVNode(VBtnToggle, {
                                              mandatory: "",
                                              density: "comfortable",
                                              "selected-class": "border-primary"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                  return createVNode(VBtn, {
                                                    key: color,
                                                    value: color,
                                                    color: color !== "default" ? color : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: "ma-1",
                                                    onClick: ($event) => navProperties.value.color = color
                                                  }, {
                                                    default: withCtx(() => [
                                                      color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("mdi-palette-outline")
                                                        ]),
                                                        _: 1
                                                      })) : createCommentVNode("", true)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value", "color", "onClick"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Elevation"),
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-box-shadow")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: navProperties.value.elevation,
                                                "onUpdate:modelValue": ($event) => navProperties.value.elevation = $event,
                                                min: "0",
                                                max: "24",
                                                step: "1",
                                                "thumb-label": "",
                                                class: "mx-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VChip, { size: "x-small" }, {
                                                default: withCtx(() => [
                                                  createTextVNode(toDisplayString(navProperties.value.elevation), 1)
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Width"),
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-arrow-expand-horizontal")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: navProperties.value.width,
                                                "onUpdate:modelValue": ($event) => navProperties.value.width = $event,
                                                min: "180",
                                                max: "400",
                                                step: "10",
                                                "thumb-label": "",
                                                class: "mx-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VChip, { size: "x-small" }, {
                                                default: withCtx(() => [
                                                  createTextVNode(toDisplayString(navProperties.value.width) + "px", 1)
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ]),
                                          createVNode(VDivider, { class: "my-4" }),
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-monitor-dashboard")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Layout & Position")
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode(VBtnToggle, {
                                              modelValue: navProperties.value.location,
                                              "onUpdate:modelValue": ($event) => navProperties.value.location = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              class: "mb-3"
                                            }, {
                                              default: withCtx(() => [
                                                createVNode(VBtn, {
                                                  value: "left",
                                                  "prepend-icon": "mdi-format-horizontal-align-left"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Left")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VBtn, {
                                                  value: "right",
                                                  "prepend-icon": "mdi-format-horizontal-align-right"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Right")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: navProperties.value.rounded,
                                            "onUpdate:modelValue": ($event) => navProperties.value.rounded = $event,
                                            color: "primary",
                                            label: "Rounded corners",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: navProperties.value.floating,
                                            "onUpdate:modelValue": ($event) => navProperties.value.floating = $event,
                                            color: "primary",
                                            label: "Floating",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: navProperties.value.rail,
                                            "onUpdate:modelValue": ($event) => navProperties.value.rail = $event,
                                            color: "primary",
                                            label: "Rail mode",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: navProperties.value.expandOnHover,
                                            "onUpdate:modelValue": ($event) => navProperties.value.expandOnHover = $event,
                                            color: "primary",
                                            label: "Expand on hover",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: navProperties.value.permanent,
                                            "onUpdate:modelValue": ($event) => navProperties.value.permanent = $event,
                                            color: "primary",
                                            label: "Permanent",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ])
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "actions" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-cog")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Behavior")
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: navProperties.value.clipped,
                                            "onUpdate:modelValue": ($event) => navProperties.value.clipped = $event,
                                            color: "primary",
                                            label: "Clipped",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: navProperties.value.mobile,
                                            "onUpdate:modelValue": ($event) => navProperties.value.mobile = $event,
                                            color: "primary",
                                            label: "Mobile",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: navProperties.value.temporary,
                                            "onUpdate:modelValue": ($event) => navProperties.value.temporary = $event,
                                            color: "primary",
                                            label: "Temporary",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VDivider, { class: "my-4" }),
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-link")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Actions & Links")
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: navProperties.value.showLinkItem,
                                            "onUpdate:modelValue": ($event) => navProperties.value.showLinkItem = $event,
                                            color: "primary",
                                            label: "Add custom link",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          navProperties.value.showLinkItem ? (openBlock(), createBlock(VCard, {
                                            key: 0,
                                            class: "mb-4 pa-3"
                                          }, {
                                            default: withCtx(() => [
                                              createVNode(VSelect, {
                                                modelValue: navProperties.value.linkIcon,
                                                "onUpdate:modelValue": ($event) => navProperties.value.linkIcon = $event,
                                                items: navIcons.value,
                                                label: "Link icon",
                                                variant: "outlined",
                                                density: "comfortable",
                                                clearable: "",
                                                "prepend-inner-icon": "mdi-pencil",
                                                class: "mb-3"
                                              }, {
                                                item: withCtx(({ item, props }) => [
                                                  createVNode(VListItem, props, {
                                                    prepend: withCtx(() => [
                                                      createVNode(VIcon, {
                                                        icon: item.raw
                                                      }, null, 8, ["icon"])
                                                    ]),
                                                    _: 2
                                                  }, 1040)
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                              createVNode(VTextField, {
                                                modelValue: navProperties.value.linkTitle,
                                                "onUpdate:modelValue": ($event) => navProperties.value.linkTitle = $event,
                                                label: "Link title",
                                                variant: "outlined",
                                                density: "comfortable",
                                                clearable: "",
                                                "prepend-inner-icon": "mdi-format-title",
                                                class: "mb-3"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VTextField, {
                                                modelValue: navProperties.value.linkUrl,
                                                "onUpdate:modelValue": ($event) => navProperties.value.linkUrl = $event,
                                                label: "Link URL",
                                                variant: "outlined",
                                                density: "comfortable",
                                                clearable: "",
                                                "prepend-inner-icon": "mdi-link-variant",
                                                class: "mb-3"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: navProperties.value.linkExternal,
                                                "onUpdate:modelValue": ($event) => navProperties.value.linkExternal = $event,
                                                color: "primary",
                                                label: "Open in new tab",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            _: 1
                                          })) : createCommentVNode("", true)
                                        ])
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "templates" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-file-document-outline")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Navigation Templates")
                                            ]),
                                            createVNode(VTooltip, { location: "bottom" }, {
                                              activator: withCtx(({ props }) => [
                                                createVNode(VBtn, mergeProps({
                                                  icon: "mdi-help-circle-outline",
                                                  variant: "text",
                                                  size: "small"
                                                }, props), null, 16)
                                              ]),
                                              default: withCtx(() => [
                                                createVNode("span", null, "Apply pre-defined templates or save your own")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common navigation layouts. "),
                                          createVNode(VCard, { class: "mb-4" }, {
                                            default: withCtx(() => [
                                              createVNode(VList, null, {
                                                default: withCtx(() => [
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("dashboard"),
                                                    "prepend-icon": "mdi-view-dashboard",
                                                    title: "Dashboard",
                                                    subtitle: "Admin dashboard navigation"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("ecommerce"),
                                                    "prepend-icon": "mdi-shopping",
                                                    title: "E-commerce",
                                                    subtitle: "Online store navigation"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("social"),
                                                    "prepend-icon": "mdi-account-group",
                                                    title: "Social Network",
                                                    subtitle: "Social media navigation"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("admin"),
                                                    "prepend-icon": "mdi-shield-account",
                                                    title: "Admin Panel",
                                                    subtitle: "Advanced admin navigation"
                                                  }, null, 8, ["onClick"])
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VAlert, {
                                            type: "info",
                                            variant: "tonal",
                                            class: "mb-4"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(" Applying a template will replace your current navigation settings. ")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VDivider, { class: "my-4" }),
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-content-save")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Save Current Navigation")
                                          ]),
                                          createVNode(VTextField, {
                                            modelValue: customTemplateName.value,
                                            "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                            label: "Template Name",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "prepend-inner-icon": "mdi-tag",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VBtn, {
                                            color: "primary",
                                            "prepend-icon": "mdi-content-save",
                                            block: "",
                                            onClick: saveCurrentTemplate
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(" Save Current Navigation as Template ")
                                            ]),
                                            _: 1
                                          })
                                        ])
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }, 8, ["modelValue", "onUpdate:modelValue"])
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                      } else {
                        return [
                          createVNode("div", { class: "px-4 py-2 d-flex align-center" }, [
                            createVNode(VChip, {
                              color: "success",
                              "prepend-icon": "mdi-vuejs",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vue.js")
                              ]),
                              _: 1
                            }),
                            createVNode(VChip, {
                              color: "info",
                              "prepend-icon": "mdi-vuetify",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vuetify")
                              ]),
                              _: 1
                            })
                          ]),
                          createVNode(VTabs, {
                            modelValue: tab.value,
                            "onUpdate:modelValue": ($event) => tab.value = $event,
                            color: "primary",
                            "align-tabs": "center",
                            class: "px-4"
                          }, {
                            default: withCtx(() => [
                              createVNode(VTab, { value: "content" }, {
                                default: withCtx(() => [
                                  createTextVNode("Content")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "style" }, {
                                default: withCtx(() => [
                                  createTextVNode("Style")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "actions" }, {
                                default: withCtx(() => [
                                  createTextVNode("Actions")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "templates" }, {
                                default: withCtx(() => [
                                  createTextVNode("Template")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue"]),
                          createVNode(VDivider),
                          createVNode(VCardText, {
                            class: "pa-0 fill-height",
                            style: { "overflow-y": "auto" }
                          }, {
                            default: withCtx(() => [
                              createVNode(VWindow, {
                                modelValue: tab.value,
                                "onUpdate:modelValue": ($event) => tab.value = $event
                              }, {
                                default: withCtx(() => [
                                  createVNode(VWindowItem, { value: "content" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-view-dashboard-outline")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "App Bar")
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.addAppBar,
                                          "onUpdate:modelValue": ($event) => navProperties.value.addAppBar = $event,
                                          color: "primary",
                                          label: "Add app bar",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        navProperties.value.addAppBar ? (openBlock(), createBlock("div", { key: 0 }, [
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-2 d-block" }, "App Bar Color"),
                                            createVNode(VBtnToggle, {
                                              modelValue: navProperties.value.appBarColor,
                                              "onUpdate:modelValue": ($event) => navProperties.value.appBarColor = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(appBarColors, (color, index) => {
                                                  return createVNode(VBtn, {
                                                    key: color.value,
                                                    value: index,
                                                    color: color.value !== "default" ? color.value : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: "ma-1"
                                                  }, {
                                                    default: withCtx(() => [
                                                      color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("mdi-palette-outline")
                                                        ]),
                                                        _: 1
                                                      })) : createCommentVNode("", true)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value", "color"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx(() => [
                                              (openBlock(true), createBlock(Fragment, null, renderList(appBar.value, (item, index) => {
                                                return openBlock(), createBlock("div", {
                                                  key: index,
                                                  class: "d-flex align-center mb-2"
                                                }, [
                                                  createVNode(VTextField, {
                                                    modelValue: item.title,
                                                    "onUpdate:modelValue": ($event) => item.title = $event,
                                                    label: "Title",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-format-title",
                                                    class: "mr-2",
                                                    placeholder: "Home"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VSelect, {
                                                    modelValue: item.icon,
                                                    "onUpdate:modelValue": ($event) => item.icon = $event,
                                                    items: navIcons.value,
                                                    label: "Icon",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-pencil",
                                                    class: "mr-2",
                                                    placeholder: "mdi-home"
                                                  }, {
                                                    item: withCtx(({ item: item2, props }) => [
                                                      createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                        prepend: withCtx(() => [
                                                          createVNode(VIcon, {
                                                            icon: item2.raw
                                                          }, null, 8, ["icon"])
                                                        ]),
                                                        _: 2
                                                      }, 1040)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                  createVNode(VBtn, {
                                                    icon: "mdi-delete",
                                                    color: "error",
                                                    variant: "text",
                                                    density: "compact",
                                                    onClick: ($event) => removeAppBar(index)
                                                  }, null, 8, ["onClick"])
                                                ]);
                                              }), 128)),
                                              createVNode(VBtn, {
                                                color: "primary",
                                                "prepend-icon": "mdi-plus",
                                                variant: "tonal",
                                                block: "",
                                                onClick: addAppBar,
                                                class: "mt-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Add app bar item ")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          })
                                        ])) : createCommentVNode("", true),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-format-list-bulleted")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Navigation Items")
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.showSubheader,
                                          "onUpdate:modelValue": ($event) => navProperties.value.showSubheader = $event,
                                          color: "primary",
                                          label: "Add subheaders",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        navProperties.value.showSubheader ? (openBlock(), createBlock("div", { key: 1 }, [
                                          createVNode(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx(() => [
                                              (openBlock(true), createBlock(Fragment, null, renderList(navHeader.value, (item, index) => {
                                                return openBlock(), createBlock("div", {
                                                  key: index,
                                                  class: "d-flex align-center mb-2"
                                                }, [
                                                  createVNode(VTextField, {
                                                    modelValue: item.title,
                                                    "onUpdate:modelValue": ($event) => item.title = $event,
                                                    label: "Subheader text",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-format-header-3",
                                                    class: "mr-2",
                                                    placeholder: "Section"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VBtn, {
                                                    icon: "mdi-delete",
                                                    color: "error",
                                                    variant: "text",
                                                    density: "compact",
                                                    onClick: ($event) => removeHeader(index)
                                                  }, null, 8, ["onClick"])
                                                ]);
                                              }), 128)),
                                              createVNode(VBtn, {
                                                color: "primary",
                                                "prepend-icon": "mdi-plus",
                                                variant: "tonal",
                                                block: "",
                                                onClick: addHeader,
                                                class: "mt-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Add subheader ")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          })
                                        ])) : createCommentVNode("", true),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.showIconItems,
                                          "onUpdate:modelValue": ($event) => navProperties.value.showIconItems = $event,
                                          color: "primary",
                                          label: "Add navigation items",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        navProperties.value.showIconItems ? (openBlock(), createBlock("div", { key: 2 }, [
                                          createVNode(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx(() => [
                                              (openBlock(true), createBlock(Fragment, null, renderList(navItems.value, (item, index) => {
                                                return openBlock(), createBlock("div", {
                                                  key: index,
                                                  class: "d-flex align-center mb-2"
                                                }, [
                                                  createVNode(VSelect, {
                                                    modelValue: item.icon,
                                                    "onUpdate:modelValue": ($event) => item.icon = $event,
                                                    items: navIcons.value,
                                                    label: "Icon",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-emoticon",
                                                    class: "mr-2",
                                                    placeholder: "mdi-home"
                                                  }, {
                                                    item: withCtx(({ item: item2, props }) => [
                                                      createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                        prepend: withCtx(() => [
                                                          createVNode(VIcon, {
                                                            icon: item2.raw
                                                          }, null, 8, ["icon"])
                                                        ]),
                                                        default: withCtx(() => [
                                                          createVNode(VListItemTitle, null, {
                                                            default: withCtx(() => [
                                                              createTextVNode(toDisplayString(item2.raw.replace("mdi-", "")), 1)
                                                            ]),
                                                            _: 2
                                                          }, 1024)
                                                        ]),
                                                        _: 2
                                                      }, 1040)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                  createVNode(VTextField, {
                                                    modelValue: item.title,
                                                    "onUpdate:modelValue": ($event) => item.title = $event,
                                                    label: "Title",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-format-title",
                                                    class: "mr-2",
                                                    placeholder: "Home"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VBtn, {
                                                    icon: "mdi-delete",
                                                    color: "error",
                                                    variant: "text",
                                                    density: "compact",
                                                    onClick: ($event) => removeItem(index)
                                                  }, null, 8, ["onClick"])
                                                ]);
                                              }), 128)),
                                              createVNode(VBtn, {
                                                color: "primary",
                                                "prepend-icon": "mdi-plus",
                                                variant: "tonal",
                                                block: "",
                                                onClick: addIconItem,
                                                class: "mt-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Add navigation item ")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          })
                                        ])) : createCommentVNode("", true),
                                        createVNode(VTextField, {
                                          modelValue: navProperties.value.image,
                                          "onUpdate:modelValue": ($event) => navProperties.value.image = $event,
                                          label: "Background image URL",
                                          variant: "outlined",
                                          density: "comfortable",
                                          clearable: "",
                                          "prepend-inner-icon": "mdi-image",
                                          class: "mb-4"
                                        }, {
                                          "append-inner": withCtx(() => [
                                            createVNode(VBtn, {
                                              icon: "mdi-refresh",
                                              variant: "text",
                                              size: "small",
                                              onClick: ($event) => navProperties.value.image = ""
                                            }, null, 8, ["onClick"])
                                          ]),
                                          _: 1
                                        }, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode("div", { class: "d-flex flex-wrap mb-4" }, [
                                          createVNode(VChipGroup, null, {
                                            default: withCtx(() => [
                                              createVNode(VChip, {
                                                size: "small",
                                                onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1506744038136-46273834b3fb"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Nature")
                                                ]),
                                                _: 1
                                              }, 8, ["onClick"]),
                                              createVNode(VChip, {
                                                size: "small",
                                                onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1507525428034-b723cf961d3e"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Ocean")
                                                ]),
                                                _: 1
                                              }, 8, ["onClick"]),
                                              createVNode(VChip, {
                                                size: "small",
                                                onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1519681393784-d120267933ba"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Mountain")
                                                ]),
                                                _: 1
                                              }, 8, ["onClick"])
                                            ]),
                                            _: 1
                                          })
                                        ])
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "style" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-palette")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Appearance")
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2 d-block" }, "Color"),
                                          createVNode(VBtnToggle, {
                                            mandatory: "",
                                            density: "comfortable",
                                            "selected-class": "border-primary"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                return createVNode(VBtn, {
                                                  key: color,
                                                  value: color,
                                                  color: color !== "default" ? color : void 0,
                                                  size: "small",
                                                  variant: "tonal",
                                                  width: "40",
                                                  height: "40",
                                                  class: "ma-1",
                                                  onClick: ($event) => navProperties.value.color = color
                                                }, {
                                                  default: withCtx(() => [
                                                    color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-palette-outline")
                                                      ]),
                                                      _: 1
                                                    })) : createCommentVNode("", true)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value", "color", "onClick"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Elevation"),
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-box-shadow")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: navProperties.value.elevation,
                                              "onUpdate:modelValue": ($event) => navProperties.value.elevation = $event,
                                              min: "0",
                                              max: "24",
                                              step: "1",
                                              "thumb-label": "",
                                              class: "mx-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VChip, { size: "x-small" }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(navProperties.value.elevation), 1)
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Width"),
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-arrow-expand-horizontal")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: navProperties.value.width,
                                              "onUpdate:modelValue": ($event) => navProperties.value.width = $event,
                                              min: "180",
                                              max: "400",
                                              step: "10",
                                              "thumb-label": "",
                                              class: "mx-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VChip, { size: "x-small" }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(navProperties.value.width) + "px", 1)
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-monitor-dashboard")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Layout & Position")
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode(VBtnToggle, {
                                            modelValue: navProperties.value.location,
                                            "onUpdate:modelValue": ($event) => navProperties.value.location = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            class: "mb-3"
                                          }, {
                                            default: withCtx(() => [
                                              createVNode(VBtn, {
                                                value: "left",
                                                "prepend-icon": "mdi-format-horizontal-align-left"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Left")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VBtn, {
                                                value: "right",
                                                "prepend-icon": "mdi-format-horizontal-align-right"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Right")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.rounded,
                                          "onUpdate:modelValue": ($event) => navProperties.value.rounded = $event,
                                          color: "primary",
                                          label: "Rounded corners",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.floating,
                                          "onUpdate:modelValue": ($event) => navProperties.value.floating = $event,
                                          color: "primary",
                                          label: "Floating",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.rail,
                                          "onUpdate:modelValue": ($event) => navProperties.value.rail = $event,
                                          color: "primary",
                                          label: "Rail mode",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.expandOnHover,
                                          "onUpdate:modelValue": ($event) => navProperties.value.expandOnHover = $event,
                                          color: "primary",
                                          label: "Expand on hover",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.permanent,
                                          "onUpdate:modelValue": ($event) => navProperties.value.permanent = $event,
                                          color: "primary",
                                          label: "Permanent",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "actions" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-cog")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Behavior")
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.clipped,
                                          "onUpdate:modelValue": ($event) => navProperties.value.clipped = $event,
                                          color: "primary",
                                          label: "Clipped",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.mobile,
                                          "onUpdate:modelValue": ($event) => navProperties.value.mobile = $event,
                                          color: "primary",
                                          label: "Mobile",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.temporary,
                                          "onUpdate:modelValue": ($event) => navProperties.value.temporary = $event,
                                          color: "primary",
                                          label: "Temporary",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-link")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Actions & Links")
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.showLinkItem,
                                          "onUpdate:modelValue": ($event) => navProperties.value.showLinkItem = $event,
                                          color: "primary",
                                          label: "Add custom link",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        navProperties.value.showLinkItem ? (openBlock(), createBlock(VCard, {
                                          key: 0,
                                          class: "mb-4 pa-3"
                                        }, {
                                          default: withCtx(() => [
                                            createVNode(VSelect, {
                                              modelValue: navProperties.value.linkIcon,
                                              "onUpdate:modelValue": ($event) => navProperties.value.linkIcon = $event,
                                              items: navIcons.value,
                                              label: "Link icon",
                                              variant: "outlined",
                                              density: "comfortable",
                                              clearable: "",
                                              "prepend-inner-icon": "mdi-pencil",
                                              class: "mb-3"
                                            }, {
                                              item: withCtx(({ item, props }) => [
                                                createVNode(VListItem, props, {
                                                  prepend: withCtx(() => [
                                                    createVNode(VIcon, {
                                                      icon: item.raw
                                                    }, null, 8, ["icon"])
                                                  ]),
                                                  _: 2
                                                }, 1040)
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                            createVNode(VTextField, {
                                              modelValue: navProperties.value.linkTitle,
                                              "onUpdate:modelValue": ($event) => navProperties.value.linkTitle = $event,
                                              label: "Link title",
                                              variant: "outlined",
                                              density: "comfortable",
                                              clearable: "",
                                              "prepend-inner-icon": "mdi-format-title",
                                              class: "mb-3"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VTextField, {
                                              modelValue: navProperties.value.linkUrl,
                                              "onUpdate:modelValue": ($event) => navProperties.value.linkUrl = $event,
                                              label: "Link URL",
                                              variant: "outlined",
                                              density: "comfortable",
                                              clearable: "",
                                              "prepend-inner-icon": "mdi-link-variant",
                                              class: "mb-3"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: navProperties.value.linkExternal,
                                              "onUpdate:modelValue": ($event) => navProperties.value.linkExternal = $event,
                                              color: "primary",
                                              label: "Open in new tab",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          _: 1
                                        })) : createCommentVNode("", true)
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "templates" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-file-document-outline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Navigation Templates")
                                          ]),
                                          createVNode(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props }) => [
                                              createVNode(VBtn, mergeProps({
                                                icon: "mdi-help-circle-outline",
                                                variant: "text",
                                                size: "small"
                                              }, props), null, 16)
                                            ]),
                                            default: withCtx(() => [
                                              createVNode("span", null, "Apply pre-defined templates or save your own")
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common navigation layouts. "),
                                        createVNode(VCard, { class: "mb-4" }, {
                                          default: withCtx(() => [
                                            createVNode(VList, null, {
                                              default: withCtx(() => [
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("dashboard"),
                                                  "prepend-icon": "mdi-view-dashboard",
                                                  title: "Dashboard",
                                                  subtitle: "Admin dashboard navigation"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("ecommerce"),
                                                  "prepend-icon": "mdi-shopping",
                                                  title: "E-commerce",
                                                  subtitle: "Online store navigation"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("social"),
                                                  "prepend-icon": "mdi-account-group",
                                                  title: "Social Network",
                                                  subtitle: "Social media navigation"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("admin"),
                                                  "prepend-icon": "mdi-shield-account",
                                                  title: "Admin Panel",
                                                  subtitle: "Advanced admin navigation"
                                                }, null, 8, ["onClick"])
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VAlert, {
                                          type: "info",
                                          variant: "tonal",
                                          class: "mb-4"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(" Applying a template will replace your current navigation settings. ")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-content-save")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Save Current Navigation")
                                        ]),
                                        createVNode(VTextField, {
                                          modelValue: customTemplateName.value,
                                          "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                          label: "Template Name",
                                          variant: "outlined",
                                          density: "comfortable",
                                          "prepend-inner-icon": "mdi-tag",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VBtn, {
                                          color: "primary",
                                          "prepend-icon": "mdi-content-save",
                                          block: "",
                                          onClick: saveCurrentTemplate
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(" Save Current Navigation as Template ")
                                          ]),
                                          _: 1
                                        })
                                      ])
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"])
                            ]),
                            _: 1
                          })
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(`</div><div class="preview-area pa-4 d-flex flex-column" data-v-42de9f80${_scopeId2}><div class="d-flex justify-space-between align-center mb-3" data-v-42de9f80${_scopeId2}>`);
                  _push3(ssrRenderComponent(VChip, {
                    color: "primary",
                    variant: "flat",
                    size: "small",
                    class: "mr-2"
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(ssrRenderComponent(VIcon, {
                          start: "",
                          size: "small"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(`mdi-eye`);
                            } else {
                              return [
                                createTextVNode("mdi-eye")
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(` Live preview `);
                      } else {
                        return [
                          createVNode(VIcon, {
                            start: "",
                            size: "small"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("mdi-eye")
                            ]),
                            _: 1
                          }),
                          createTextVNode(" Live preview ")
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(`</div><div class="preview-canvas flex-grow-1 pa-4" style="${ssrRenderStyle({ maxWidth: previewWidth.value })}" data-v-42de9f80${_scopeId2}>`);
                  _push3(ssrRenderComponent(VLayout, {
                    class: "rounded border",
                    style: { "height": "100%" }
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        if (navProperties.value.addAppBar && appBar.value.length > 0) {
                          _push4(`<!--[-->`);
                          ssrRenderList(appBar.value, (item, index) => {
                            _push4(ssrRenderComponent(VAppBar, {
                              key: index,
                              color: appBarColors[navProperties.value.appBarColor].value !== "default" ? appBarColors[navProperties.value.appBarColor].value : void 0,
                              flat: ""
                            }, {
                              default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                                if (_push5) {
                                  _push5(ssrRenderComponent(VAppBarNavIcon, {
                                    icon: item.icon
                                  }, null, _parent5, _scopeId4));
                                  _push5(ssrRenderComponent(VAppBarTitle, null, {
                                    default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                      if (_push6) {
                                        _push6(`${ssrInterpolate(item.title)}`);
                                      } else {
                                        return [
                                          createTextVNode(toDisplayString(item.title), 1)
                                        ];
                                      }
                                    }),
                                    _: 2
                                  }, _parent5, _scopeId4));
                                } else {
                                  return [
                                    createVNode(VAppBarNavIcon, {
                                      icon: item.icon
                                    }, null, 8, ["icon"]),
                                    createVNode(VAppBarTitle, null, {
                                      default: withCtx(() => [
                                        createTextVNode(toDisplayString(item.title), 1)
                                      ]),
                                      _: 2
                                    }, 1024)
                                  ];
                                }
                              }),
                              _: 2
                            }, _parent4, _scopeId3));
                          });
                          _push4(`<!--]-->`);
                        } else {
                          _push4(`<!---->`);
                        }
                        _push4(ssrRenderComponent(VNavigationDrawer, {
                          modelValue: navProperties.value.model,
                          "onUpdate:modelValue": ($event) => navProperties.value.model = $event,
                          permanent: navProperties.value.permanent,
                          "expand-on-hover": navProperties.value.expandOnHover,
                          location: navProperties.value.location,
                          width: navProperties.value.width,
                          color: navProperties.value.color,
                          elevation: navProperties.value.elevation,
                          rounded: navProperties.value.rounded,
                          floating: navProperties.value.floating,
                          rail: navProperties.value.rail,
                          clipped: navProperties.value.clipped,
                          mobile: navProperties.value.mobile,
                          temporary: navProperties.value.temporary,
                          image: navProperties.value.image,
                          transition: navProperties.value.transition
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VList, null, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    if (navProperties.value.showSubheader && navHeader.value.length > 0 && navProperties.value.showIconItems && navItems.value.length > 0) {
                                      _push6(`<!--[-->`);
                                      ssrRenderList(navHeader.value, (header, headerIdx) => {
                                        _push6(`<!--[-->`);
                                        _push6(ssrRenderComponent(VListSubheader, null, {
                                          default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                            if (_push7) {
                                              _push7(`${ssrInterpolate(header.title)}`);
                                            } else {
                                              return [
                                                createTextVNode(toDisplayString(header.title), 1)
                                              ];
                                            }
                                          }),
                                          _: 2
                                        }, _parent6, _scopeId5));
                                        _push6(`<!--[-->`);
                                        ssrRenderList(navItems.value, (item, itemIdx) => {
                                          _push6(`<!--[-->`);
                                          if (Math.floor(itemIdx / Math.ceil(navItems.value.length / Math.max(1, navHeader.value.length))) === headerIdx) {
                                            _push6(ssrRenderComponent(VListItem, {
                                              "prepend-icon": item.icon,
                                              title: item.title || "Item"
                                            }, null, _parent6, _scopeId5));
                                          } else {
                                            _push6(`<!---->`);
                                          }
                                          _push6(`<!--]-->`);
                                        });
                                        _push6(`<!--]--><!--]-->`);
                                      });
                                      _push6(`<!--]-->`);
                                    } else if (navProperties.value.showSubheader && navHeader.value.length > 0) {
                                      _push6(`<!--[--><!--[-->`);
                                      ssrRenderList(navHeader.value, (header, idx) => {
                                        _push6(ssrRenderComponent(VListSubheader, { key: idx }, {
                                          default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                            if (_push7) {
                                              _push7(`${ssrInterpolate(header.title)}`);
                                            } else {
                                              return [
                                                createTextVNode(toDisplayString(header.title), 1)
                                              ];
                                            }
                                          }),
                                          _: 2
                                        }, _parent6, _scopeId5));
                                      });
                                      _push6(`<!--]-->`);
                                      _push6(ssrRenderComponent(VListItem, {
                                        "prepend-icon": "mdi-home",
                                        title: "Home"
                                      }, null, _parent6, _scopeId5));
                                      _push6(ssrRenderComponent(VListItem, {
                                        "prepend-icon": "mdi-account",
                                        title: "Profile"
                                      }, null, _parent6, _scopeId5));
                                      _push6(ssrRenderComponent(VListItem, {
                                        "prepend-icon": "mdi-cog",
                                        title: "Settings"
                                      }, null, _parent6, _scopeId5));
                                      _push6(`<!--]-->`);
                                    } else if (navProperties.value.showIconItems && navItems.value.length > 0) {
                                      _push6(`<!--[-->`);
                                      ssrRenderList(navItems.value, (item, idx) => {
                                        _push6(ssrRenderComponent(VListItem, {
                                          key: idx,
                                          "prepend-icon": item.icon,
                                          title: item.title || "Item"
                                        }, null, _parent6, _scopeId5));
                                      });
                                      _push6(`<!--]-->`);
                                    } else {
                                      _push6(`<!--[-->`);
                                      _push6(ssrRenderComponent(VListItem, {
                                        "prepend-icon": "mdi-home",
                                        title: "Home"
                                      }, null, _parent6, _scopeId5));
                                      _push6(ssrRenderComponent(VListItem, {
                                        "prepend-icon": "mdi-account",
                                        title: "Profile"
                                      }, null, _parent6, _scopeId5));
                                      _push6(ssrRenderComponent(VListItem, {
                                        "prepend-icon": "mdi-cog",
                                        title: "Settings"
                                      }, null, _parent6, _scopeId5));
                                      _push6(`<!--]-->`);
                                    }
                                    if (navProperties.value.showLinkItem) {
                                      _push6(ssrRenderComponent(VListItem, {
                                        "prepend-icon": navProperties.value.linkIcon || "mdi-link-variant",
                                        title: navProperties.value.linkTitle || "Link",
                                        href: navProperties.value.linkUrl,
                                        target: navProperties.value.linkExternal ? "_blank" : void 0
                                      }, null, _parent6, _scopeId5));
                                    } else {
                                      _push6(`<!---->`);
                                    }
                                  } else {
                                    return [
                                      navProperties.value.showSubheader && navHeader.value.length > 0 && navProperties.value.showIconItems && navItems.value.length > 0 ? (openBlock(true), createBlock(Fragment, { key: 0 }, renderList(navHeader.value, (header, headerIdx) => {
                                        return openBlock(), createBlock(Fragment, {
                                          key: `header-${headerIdx}`
                                        }, [
                                          createVNode(VListSubheader, null, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString(header.title), 1)
                                            ]),
                                            _: 2
                                          }, 1024),
                                          (openBlock(true), createBlock(Fragment, null, renderList(navItems.value, (item, itemIdx) => {
                                            return openBlock(), createBlock(Fragment, {
                                              key: `item-${itemIdx}`
                                            }, [
                                              Math.floor(itemIdx / Math.ceil(navItems.value.length / Math.max(1, navHeader.value.length))) === headerIdx ? (openBlock(), createBlock(VListItem, {
                                                key: 0,
                                                "prepend-icon": item.icon,
                                                title: item.title || "Item"
                                              }, null, 8, ["prepend-icon", "title"])) : createCommentVNode("", true)
                                            ], 64);
                                          }), 128))
                                        ], 64);
                                      }), 128)) : navProperties.value.showSubheader && navHeader.value.length > 0 ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                        (openBlock(true), createBlock(Fragment, null, renderList(navHeader.value, (header, idx) => {
                                          return openBlock(), createBlock(VListSubheader, { key: idx }, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString(header.title), 1)
                                            ]),
                                            _: 2
                                          }, 1024);
                                        }), 128)),
                                        createVNode(VListItem, {
                                          "prepend-icon": "mdi-home",
                                          title: "Home"
                                        }),
                                        createVNode(VListItem, {
                                          "prepend-icon": "mdi-account",
                                          title: "Profile"
                                        }),
                                        createVNode(VListItem, {
                                          "prepend-icon": "mdi-cog",
                                          title: "Settings"
                                        })
                                      ], 64)) : navProperties.value.showIconItems && navItems.value.length > 0 ? (openBlock(true), createBlock(Fragment, { key: 2 }, renderList(navItems.value, (item, idx) => {
                                        return openBlock(), createBlock(VListItem, {
                                          key: idx,
                                          "prepend-icon": item.icon,
                                          title: item.title || "Item"
                                        }, null, 8, ["prepend-icon", "title"]);
                                      }), 128)) : (openBlock(), createBlock(Fragment, { key: 3 }, [
                                        createVNode(VListItem, {
                                          "prepend-icon": "mdi-home",
                                          title: "Home"
                                        }),
                                        createVNode(VListItem, {
                                          "prepend-icon": "mdi-account",
                                          title: "Profile"
                                        }),
                                        createVNode(VListItem, {
                                          "prepend-icon": "mdi-cog",
                                          title: "Settings"
                                        })
                                      ], 64)),
                                      navProperties.value.showLinkItem ? (openBlock(), createBlock(VListItem, {
                                        key: 4,
                                        "prepend-icon": navProperties.value.linkIcon || "mdi-link-variant",
                                        title: navProperties.value.linkTitle || "Link",
                                        href: navProperties.value.linkUrl,
                                        target: navProperties.value.linkExternal ? "_blank" : void 0
                                      }, null, 8, ["prepend-icon", "title", "href", "target"])) : createCommentVNode("", true)
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VList, null, {
                                  default: withCtx(() => [
                                    navProperties.value.showSubheader && navHeader.value.length > 0 && navProperties.value.showIconItems && navItems.value.length > 0 ? (openBlock(true), createBlock(Fragment, { key: 0 }, renderList(navHeader.value, (header, headerIdx) => {
                                      return openBlock(), createBlock(Fragment, {
                                        key: `header-${headerIdx}`
                                      }, [
                                        createVNode(VListSubheader, null, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(header.title), 1)
                                          ]),
                                          _: 2
                                        }, 1024),
                                        (openBlock(true), createBlock(Fragment, null, renderList(navItems.value, (item, itemIdx) => {
                                          return openBlock(), createBlock(Fragment, {
                                            key: `item-${itemIdx}`
                                          }, [
                                            Math.floor(itemIdx / Math.ceil(navItems.value.length / Math.max(1, navHeader.value.length))) === headerIdx ? (openBlock(), createBlock(VListItem, {
                                              key: 0,
                                              "prepend-icon": item.icon,
                                              title: item.title || "Item"
                                            }, null, 8, ["prepend-icon", "title"])) : createCommentVNode("", true)
                                          ], 64);
                                        }), 128))
                                      ], 64);
                                    }), 128)) : navProperties.value.showSubheader && navHeader.value.length > 0 ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                      (openBlock(true), createBlock(Fragment, null, renderList(navHeader.value, (header, idx) => {
                                        return openBlock(), createBlock(VListSubheader, { key: idx }, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(header.title), 1)
                                          ]),
                                          _: 2
                                        }, 1024);
                                      }), 128)),
                                      createVNode(VListItem, {
                                        "prepend-icon": "mdi-home",
                                        title: "Home"
                                      }),
                                      createVNode(VListItem, {
                                        "prepend-icon": "mdi-account",
                                        title: "Profile"
                                      }),
                                      createVNode(VListItem, {
                                        "prepend-icon": "mdi-cog",
                                        title: "Settings"
                                      })
                                    ], 64)) : navProperties.value.showIconItems && navItems.value.length > 0 ? (openBlock(true), createBlock(Fragment, { key: 2 }, renderList(navItems.value, (item, idx) => {
                                      return openBlock(), createBlock(VListItem, {
                                        key: idx,
                                        "prepend-icon": item.icon,
                                        title: item.title || "Item"
                                      }, null, 8, ["prepend-icon", "title"]);
                                    }), 128)) : (openBlock(), createBlock(Fragment, { key: 3 }, [
                                      createVNode(VListItem, {
                                        "prepend-icon": "mdi-home",
                                        title: "Home"
                                      }),
                                      createVNode(VListItem, {
                                        "prepend-icon": "mdi-account",
                                        title: "Profile"
                                      }),
                                      createVNode(VListItem, {
                                        "prepend-icon": "mdi-cog",
                                        title: "Settings"
                                      })
                                    ], 64)),
                                    navProperties.value.showLinkItem ? (openBlock(), createBlock(VListItem, {
                                      key: 4,
                                      "prepend-icon": navProperties.value.linkIcon || "mdi-link-variant",
                                      title: navProperties.value.linkTitle || "Link",
                                      href: navProperties.value.linkUrl,
                                      target: navProperties.value.linkExternal ? "_blank" : void 0
                                    }, null, 8, ["prepend-icon", "title", "href", "target"])) : createCommentVNode("", true)
                                  ]),
                                  _: 1
                                })
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                      } else {
                        return [
                          navProperties.value.addAppBar && appBar.value.length > 0 ? (openBlock(true), createBlock(Fragment, { key: 0 }, renderList(appBar.value, (item, index) => {
                            return openBlock(), createBlock(VAppBar, {
                              key: index,
                              color: appBarColors[navProperties.value.appBarColor].value !== "default" ? appBarColors[navProperties.value.appBarColor].value : void 0,
                              flat: ""
                            }, {
                              default: withCtx(() => [
                                createVNode(VAppBarNavIcon, {
                                  icon: item.icon
                                }, null, 8, ["icon"]),
                                createVNode(VAppBarTitle, null, {
                                  default: withCtx(() => [
                                    createTextVNode(toDisplayString(item.title), 1)
                                  ]),
                                  _: 2
                                }, 1024)
                              ]),
                              _: 2
                            }, 1032, ["color"]);
                          }), 128)) : createCommentVNode("", true),
                          createVNode(VNavigationDrawer, {
                            modelValue: navProperties.value.model,
                            "onUpdate:modelValue": ($event) => navProperties.value.model = $event,
                            permanent: navProperties.value.permanent,
                            "expand-on-hover": navProperties.value.expandOnHover,
                            location: navProperties.value.location,
                            width: navProperties.value.width,
                            color: navProperties.value.color,
                            elevation: navProperties.value.elevation,
                            rounded: navProperties.value.rounded,
                            floating: navProperties.value.floating,
                            rail: navProperties.value.rail,
                            clipped: navProperties.value.clipped,
                            mobile: navProperties.value.mobile,
                            temporary: navProperties.value.temporary,
                            image: navProperties.value.image,
                            transition: navProperties.value.transition
                          }, {
                            default: withCtx(() => [
                              createVNode(VList, null, {
                                default: withCtx(() => [
                                  navProperties.value.showSubheader && navHeader.value.length > 0 && navProperties.value.showIconItems && navItems.value.length > 0 ? (openBlock(true), createBlock(Fragment, { key: 0 }, renderList(navHeader.value, (header, headerIdx) => {
                                    return openBlock(), createBlock(Fragment, {
                                      key: `header-${headerIdx}`
                                    }, [
                                      createVNode(VListSubheader, null, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(header.title), 1)
                                        ]),
                                        _: 2
                                      }, 1024),
                                      (openBlock(true), createBlock(Fragment, null, renderList(navItems.value, (item, itemIdx) => {
                                        return openBlock(), createBlock(Fragment, {
                                          key: `item-${itemIdx}`
                                        }, [
                                          Math.floor(itemIdx / Math.ceil(navItems.value.length / Math.max(1, navHeader.value.length))) === headerIdx ? (openBlock(), createBlock(VListItem, {
                                            key: 0,
                                            "prepend-icon": item.icon,
                                            title: item.title || "Item"
                                          }, null, 8, ["prepend-icon", "title"])) : createCommentVNode("", true)
                                        ], 64);
                                      }), 128))
                                    ], 64);
                                  }), 128)) : navProperties.value.showSubheader && navHeader.value.length > 0 ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                    (openBlock(true), createBlock(Fragment, null, renderList(navHeader.value, (header, idx) => {
                                      return openBlock(), createBlock(VListSubheader, { key: idx }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(header.title), 1)
                                        ]),
                                        _: 2
                                      }, 1024);
                                    }), 128)),
                                    createVNode(VListItem, {
                                      "prepend-icon": "mdi-home",
                                      title: "Home"
                                    }),
                                    createVNode(VListItem, {
                                      "prepend-icon": "mdi-account",
                                      title: "Profile"
                                    }),
                                    createVNode(VListItem, {
                                      "prepend-icon": "mdi-cog",
                                      title: "Settings"
                                    })
                                  ], 64)) : navProperties.value.showIconItems && navItems.value.length > 0 ? (openBlock(true), createBlock(Fragment, { key: 2 }, renderList(navItems.value, (item, idx) => {
                                    return openBlock(), createBlock(VListItem, {
                                      key: idx,
                                      "prepend-icon": item.icon,
                                      title: item.title || "Item"
                                    }, null, 8, ["prepend-icon", "title"]);
                                  }), 128)) : (openBlock(), createBlock(Fragment, { key: 3 }, [
                                    createVNode(VListItem, {
                                      "prepend-icon": "mdi-home",
                                      title: "Home"
                                    }),
                                    createVNode(VListItem, {
                                      "prepend-icon": "mdi-account",
                                      title: "Profile"
                                    }),
                                    createVNode(VListItem, {
                                      "prepend-icon": "mdi-cog",
                                      title: "Settings"
                                    })
                                  ], 64)),
                                  navProperties.value.showLinkItem ? (openBlock(), createBlock(VListItem, {
                                    key: 4,
                                    "prepend-icon": navProperties.value.linkIcon || "mdi-link-variant",
                                    title: navProperties.value.linkTitle || "Link",
                                    href: navProperties.value.linkUrl,
                                    target: navProperties.value.linkExternal ? "_blank" : void 0
                                  }, null, 8, ["prepend-icon", "title", "href", "target"])) : createCommentVNode("", true)
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue", "permanent", "expand-on-hover", "location", "width", "color", "elevation", "rounded", "floating", "rail", "clipped", "mobile", "temporary", "image", "transition"])
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(`</div><div class="d-flex justify-end mt-3" data-v-42de9f80${_scopeId2}>`);
                  _push3(ssrRenderComponent(VBtn, {
                    color: "secondary",
                    class: "mr-2",
                    "prepend-icon": "mdi-eye",
                    onClick: previewCode
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(` Preview Code `);
                      } else {
                        return [
                          createTextVNode(" Preview Code ")
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(ssrRenderComponent(VBtn, {
                    color: "primary",
                    "prepend-icon": "mdi-content-copy",
                    onClick: copyNavCode
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(` Copy to Clipboard `);
                      } else {
                        return [
                          createTextVNode(" Copy to Clipboard ")
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(`</div></div>`);
                } else {
                  return [
                    createVNode("div", {
                      class: "control-panel",
                      style: { "width": "350px" }
                    }, [
                      createVNode(VCard, {
                        flat: "",
                        class: "fill-height"
                      }, {
                        default: withCtx(() => [
                          createVNode("div", { class: "px-4 py-2 d-flex align-center" }, [
                            createVNode(VChip, {
                              color: "success",
                              "prepend-icon": "mdi-vuejs",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vue.js")
                              ]),
                              _: 1
                            }),
                            createVNode(VChip, {
                              color: "info",
                              "prepend-icon": "mdi-vuetify",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vuetify")
                              ]),
                              _: 1
                            })
                          ]),
                          createVNode(VTabs, {
                            modelValue: tab.value,
                            "onUpdate:modelValue": ($event) => tab.value = $event,
                            color: "primary",
                            "align-tabs": "center",
                            class: "px-4"
                          }, {
                            default: withCtx(() => [
                              createVNode(VTab, { value: "content" }, {
                                default: withCtx(() => [
                                  createTextVNode("Content")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "style" }, {
                                default: withCtx(() => [
                                  createTextVNode("Style")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "actions" }, {
                                default: withCtx(() => [
                                  createTextVNode("Actions")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "templates" }, {
                                default: withCtx(() => [
                                  createTextVNode("Template")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue"]),
                          createVNode(VDivider),
                          createVNode(VCardText, {
                            class: "pa-0 fill-height",
                            style: { "overflow-y": "auto" }
                          }, {
                            default: withCtx(() => [
                              createVNode(VWindow, {
                                modelValue: tab.value,
                                "onUpdate:modelValue": ($event) => tab.value = $event
                              }, {
                                default: withCtx(() => [
                                  createVNode(VWindowItem, { value: "content" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-view-dashboard-outline")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "App Bar")
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.addAppBar,
                                          "onUpdate:modelValue": ($event) => navProperties.value.addAppBar = $event,
                                          color: "primary",
                                          label: "Add app bar",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        navProperties.value.addAppBar ? (openBlock(), createBlock("div", { key: 0 }, [
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-2 d-block" }, "App Bar Color"),
                                            createVNode(VBtnToggle, {
                                              modelValue: navProperties.value.appBarColor,
                                              "onUpdate:modelValue": ($event) => navProperties.value.appBarColor = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(appBarColors, (color, index) => {
                                                  return createVNode(VBtn, {
                                                    key: color.value,
                                                    value: index,
                                                    color: color.value !== "default" ? color.value : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: "ma-1"
                                                  }, {
                                                    default: withCtx(() => [
                                                      color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("mdi-palette-outline")
                                                        ]),
                                                        _: 1
                                                      })) : createCommentVNode("", true)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value", "color"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx(() => [
                                              (openBlock(true), createBlock(Fragment, null, renderList(appBar.value, (item, index) => {
                                                return openBlock(), createBlock("div", {
                                                  key: index,
                                                  class: "d-flex align-center mb-2"
                                                }, [
                                                  createVNode(VTextField, {
                                                    modelValue: item.title,
                                                    "onUpdate:modelValue": ($event) => item.title = $event,
                                                    label: "Title",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-format-title",
                                                    class: "mr-2",
                                                    placeholder: "Home"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VSelect, {
                                                    modelValue: item.icon,
                                                    "onUpdate:modelValue": ($event) => item.icon = $event,
                                                    items: navIcons.value,
                                                    label: "Icon",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-pencil",
                                                    class: "mr-2",
                                                    placeholder: "mdi-home"
                                                  }, {
                                                    item: withCtx(({ item: item2, props }) => [
                                                      createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                        prepend: withCtx(() => [
                                                          createVNode(VIcon, {
                                                            icon: item2.raw
                                                          }, null, 8, ["icon"])
                                                        ]),
                                                        _: 2
                                                      }, 1040)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                  createVNode(VBtn, {
                                                    icon: "mdi-delete",
                                                    color: "error",
                                                    variant: "text",
                                                    density: "compact",
                                                    onClick: ($event) => removeAppBar(index)
                                                  }, null, 8, ["onClick"])
                                                ]);
                                              }), 128)),
                                              createVNode(VBtn, {
                                                color: "primary",
                                                "prepend-icon": "mdi-plus",
                                                variant: "tonal",
                                                block: "",
                                                onClick: addAppBar,
                                                class: "mt-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Add app bar item ")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          })
                                        ])) : createCommentVNode("", true),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-format-list-bulleted")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Navigation Items")
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.showSubheader,
                                          "onUpdate:modelValue": ($event) => navProperties.value.showSubheader = $event,
                                          color: "primary",
                                          label: "Add subheaders",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        navProperties.value.showSubheader ? (openBlock(), createBlock("div", { key: 1 }, [
                                          createVNode(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx(() => [
                                              (openBlock(true), createBlock(Fragment, null, renderList(navHeader.value, (item, index) => {
                                                return openBlock(), createBlock("div", {
                                                  key: index,
                                                  class: "d-flex align-center mb-2"
                                                }, [
                                                  createVNode(VTextField, {
                                                    modelValue: item.title,
                                                    "onUpdate:modelValue": ($event) => item.title = $event,
                                                    label: "Subheader text",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-format-header-3",
                                                    class: "mr-2",
                                                    placeholder: "Section"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VBtn, {
                                                    icon: "mdi-delete",
                                                    color: "error",
                                                    variant: "text",
                                                    density: "compact",
                                                    onClick: ($event) => removeHeader(index)
                                                  }, null, 8, ["onClick"])
                                                ]);
                                              }), 128)),
                                              createVNode(VBtn, {
                                                color: "primary",
                                                "prepend-icon": "mdi-plus",
                                                variant: "tonal",
                                                block: "",
                                                onClick: addHeader,
                                                class: "mt-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Add subheader ")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          })
                                        ])) : createCommentVNode("", true),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.showIconItems,
                                          "onUpdate:modelValue": ($event) => navProperties.value.showIconItems = $event,
                                          color: "primary",
                                          label: "Add navigation items",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        navProperties.value.showIconItems ? (openBlock(), createBlock("div", { key: 2 }, [
                                          createVNode(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx(() => [
                                              (openBlock(true), createBlock(Fragment, null, renderList(navItems.value, (item, index) => {
                                                return openBlock(), createBlock("div", {
                                                  key: index,
                                                  class: "d-flex align-center mb-2"
                                                }, [
                                                  createVNode(VSelect, {
                                                    modelValue: item.icon,
                                                    "onUpdate:modelValue": ($event) => item.icon = $event,
                                                    items: navIcons.value,
                                                    label: "Icon",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-emoticon",
                                                    class: "mr-2",
                                                    placeholder: "mdi-home"
                                                  }, {
                                                    item: withCtx(({ item: item2, props }) => [
                                                      createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                        prepend: withCtx(() => [
                                                          createVNode(VIcon, {
                                                            icon: item2.raw
                                                          }, null, 8, ["icon"])
                                                        ]),
                                                        default: withCtx(() => [
                                                          createVNode(VListItemTitle, null, {
                                                            default: withCtx(() => [
                                                              createTextVNode(toDisplayString(item2.raw.replace("mdi-", "")), 1)
                                                            ]),
                                                            _: 2
                                                          }, 1024)
                                                        ]),
                                                        _: 2
                                                      }, 1040)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                  createVNode(VTextField, {
                                                    modelValue: item.title,
                                                    "onUpdate:modelValue": ($event) => item.title = $event,
                                                    label: "Title",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-format-title",
                                                    class: "mr-2",
                                                    placeholder: "Home"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VBtn, {
                                                    icon: "mdi-delete",
                                                    color: "error",
                                                    variant: "text",
                                                    density: "compact",
                                                    onClick: ($event) => removeItem(index)
                                                  }, null, 8, ["onClick"])
                                                ]);
                                              }), 128)),
                                              createVNode(VBtn, {
                                                color: "primary",
                                                "prepend-icon": "mdi-plus",
                                                variant: "tonal",
                                                block: "",
                                                onClick: addIconItem,
                                                class: "mt-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Add navigation item ")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          })
                                        ])) : createCommentVNode("", true),
                                        createVNode(VTextField, {
                                          modelValue: navProperties.value.image,
                                          "onUpdate:modelValue": ($event) => navProperties.value.image = $event,
                                          label: "Background image URL",
                                          variant: "outlined",
                                          density: "comfortable",
                                          clearable: "",
                                          "prepend-inner-icon": "mdi-image",
                                          class: "mb-4"
                                        }, {
                                          "append-inner": withCtx(() => [
                                            createVNode(VBtn, {
                                              icon: "mdi-refresh",
                                              variant: "text",
                                              size: "small",
                                              onClick: ($event) => navProperties.value.image = ""
                                            }, null, 8, ["onClick"])
                                          ]),
                                          _: 1
                                        }, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode("div", { class: "d-flex flex-wrap mb-4" }, [
                                          createVNode(VChipGroup, null, {
                                            default: withCtx(() => [
                                              createVNode(VChip, {
                                                size: "small",
                                                onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1506744038136-46273834b3fb"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Nature")
                                                ]),
                                                _: 1
                                              }, 8, ["onClick"]),
                                              createVNode(VChip, {
                                                size: "small",
                                                onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1507525428034-b723cf961d3e"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Ocean")
                                                ]),
                                                _: 1
                                              }, 8, ["onClick"]),
                                              createVNode(VChip, {
                                                size: "small",
                                                onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1519681393784-d120267933ba"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Mountain")
                                                ]),
                                                _: 1
                                              }, 8, ["onClick"])
                                            ]),
                                            _: 1
                                          })
                                        ])
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "style" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-palette")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Appearance")
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2 d-block" }, "Color"),
                                          createVNode(VBtnToggle, {
                                            mandatory: "",
                                            density: "comfortable",
                                            "selected-class": "border-primary"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                return createVNode(VBtn, {
                                                  key: color,
                                                  value: color,
                                                  color: color !== "default" ? color : void 0,
                                                  size: "small",
                                                  variant: "tonal",
                                                  width: "40",
                                                  height: "40",
                                                  class: "ma-1",
                                                  onClick: ($event) => navProperties.value.color = color
                                                }, {
                                                  default: withCtx(() => [
                                                    color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-palette-outline")
                                                      ]),
                                                      _: 1
                                                    })) : createCommentVNode("", true)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value", "color", "onClick"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Elevation"),
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-box-shadow")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: navProperties.value.elevation,
                                              "onUpdate:modelValue": ($event) => navProperties.value.elevation = $event,
                                              min: "0",
                                              max: "24",
                                              step: "1",
                                              "thumb-label": "",
                                              class: "mx-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VChip, { size: "x-small" }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(navProperties.value.elevation), 1)
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Width"),
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-arrow-expand-horizontal")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: navProperties.value.width,
                                              "onUpdate:modelValue": ($event) => navProperties.value.width = $event,
                                              min: "180",
                                              max: "400",
                                              step: "10",
                                              "thumb-label": "",
                                              class: "mx-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VChip, { size: "x-small" }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(navProperties.value.width) + "px", 1)
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-monitor-dashboard")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Layout & Position")
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode(VBtnToggle, {
                                            modelValue: navProperties.value.location,
                                            "onUpdate:modelValue": ($event) => navProperties.value.location = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            class: "mb-3"
                                          }, {
                                            default: withCtx(() => [
                                              createVNode(VBtn, {
                                                value: "left",
                                                "prepend-icon": "mdi-format-horizontal-align-left"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Left")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VBtn, {
                                                value: "right",
                                                "prepend-icon": "mdi-format-horizontal-align-right"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Right")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.rounded,
                                          "onUpdate:modelValue": ($event) => navProperties.value.rounded = $event,
                                          color: "primary",
                                          label: "Rounded corners",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.floating,
                                          "onUpdate:modelValue": ($event) => navProperties.value.floating = $event,
                                          color: "primary",
                                          label: "Floating",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.rail,
                                          "onUpdate:modelValue": ($event) => navProperties.value.rail = $event,
                                          color: "primary",
                                          label: "Rail mode",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.expandOnHover,
                                          "onUpdate:modelValue": ($event) => navProperties.value.expandOnHover = $event,
                                          color: "primary",
                                          label: "Expand on hover",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.permanent,
                                          "onUpdate:modelValue": ($event) => navProperties.value.permanent = $event,
                                          color: "primary",
                                          label: "Permanent",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "actions" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-cog")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Behavior")
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.clipped,
                                          "onUpdate:modelValue": ($event) => navProperties.value.clipped = $event,
                                          color: "primary",
                                          label: "Clipped",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.mobile,
                                          "onUpdate:modelValue": ($event) => navProperties.value.mobile = $event,
                                          color: "primary",
                                          label: "Mobile",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.temporary,
                                          "onUpdate:modelValue": ($event) => navProperties.value.temporary = $event,
                                          color: "primary",
                                          label: "Temporary",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-link")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Actions & Links")
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: navProperties.value.showLinkItem,
                                          "onUpdate:modelValue": ($event) => navProperties.value.showLinkItem = $event,
                                          color: "primary",
                                          label: "Add custom link",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        navProperties.value.showLinkItem ? (openBlock(), createBlock(VCard, {
                                          key: 0,
                                          class: "mb-4 pa-3"
                                        }, {
                                          default: withCtx(() => [
                                            createVNode(VSelect, {
                                              modelValue: navProperties.value.linkIcon,
                                              "onUpdate:modelValue": ($event) => navProperties.value.linkIcon = $event,
                                              items: navIcons.value,
                                              label: "Link icon",
                                              variant: "outlined",
                                              density: "comfortable",
                                              clearable: "",
                                              "prepend-inner-icon": "mdi-pencil",
                                              class: "mb-3"
                                            }, {
                                              item: withCtx(({ item, props }) => [
                                                createVNode(VListItem, props, {
                                                  prepend: withCtx(() => [
                                                    createVNode(VIcon, {
                                                      icon: item.raw
                                                    }, null, 8, ["icon"])
                                                  ]),
                                                  _: 2
                                                }, 1040)
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                            createVNode(VTextField, {
                                              modelValue: navProperties.value.linkTitle,
                                              "onUpdate:modelValue": ($event) => navProperties.value.linkTitle = $event,
                                              label: "Link title",
                                              variant: "outlined",
                                              density: "comfortable",
                                              clearable: "",
                                              "prepend-inner-icon": "mdi-format-title",
                                              class: "mb-3"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VTextField, {
                                              modelValue: navProperties.value.linkUrl,
                                              "onUpdate:modelValue": ($event) => navProperties.value.linkUrl = $event,
                                              label: "Link URL",
                                              variant: "outlined",
                                              density: "comfortable",
                                              clearable: "",
                                              "prepend-inner-icon": "mdi-link-variant",
                                              class: "mb-3"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: navProperties.value.linkExternal,
                                              "onUpdate:modelValue": ($event) => navProperties.value.linkExternal = $event,
                                              color: "primary",
                                              label: "Open in new tab",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          _: 1
                                        })) : createCommentVNode("", true)
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "templates" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-file-document-outline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Navigation Templates")
                                          ]),
                                          createVNode(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props }) => [
                                              createVNode(VBtn, mergeProps({
                                                icon: "mdi-help-circle-outline",
                                                variant: "text",
                                                size: "small"
                                              }, props), null, 16)
                                            ]),
                                            default: withCtx(() => [
                                              createVNode("span", null, "Apply pre-defined templates or save your own")
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common navigation layouts. "),
                                        createVNode(VCard, { class: "mb-4" }, {
                                          default: withCtx(() => [
                                            createVNode(VList, null, {
                                              default: withCtx(() => [
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("dashboard"),
                                                  "prepend-icon": "mdi-view-dashboard",
                                                  title: "Dashboard",
                                                  subtitle: "Admin dashboard navigation"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("ecommerce"),
                                                  "prepend-icon": "mdi-shopping",
                                                  title: "E-commerce",
                                                  subtitle: "Online store navigation"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("social"),
                                                  "prepend-icon": "mdi-account-group",
                                                  title: "Social Network",
                                                  subtitle: "Social media navigation"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("admin"),
                                                  "prepend-icon": "mdi-shield-account",
                                                  title: "Admin Panel",
                                                  subtitle: "Advanced admin navigation"
                                                }, null, 8, ["onClick"])
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VAlert, {
                                          type: "info",
                                          variant: "tonal",
                                          class: "mb-4"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(" Applying a template will replace your current navigation settings. ")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-content-save")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Save Current Navigation")
                                        ]),
                                        createVNode(VTextField, {
                                          modelValue: customTemplateName.value,
                                          "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                          label: "Template Name",
                                          variant: "outlined",
                                          density: "comfortable",
                                          "prepend-inner-icon": "mdi-tag",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VBtn, {
                                          color: "primary",
                                          "prepend-icon": "mdi-content-save",
                                          block: "",
                                          onClick: saveCurrentTemplate
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(" Save Current Navigation as Template ")
                                          ]),
                                          _: 1
                                        })
                                      ])
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"])
                            ]),
                            _: 1
                          })
                        ]),
                        _: 1
                      })
                    ]),
                    createVNode("div", { class: "preview-area pa-4 d-flex flex-column" }, [
                      createVNode("div", { class: "d-flex justify-space-between align-center mb-3" }, [
                        createVNode(VChip, {
                          color: "primary",
                          variant: "flat",
                          size: "small",
                          class: "mr-2"
                        }, {
                          default: withCtx(() => [
                            createVNode(VIcon, {
                              start: "",
                              size: "small"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("mdi-eye")
                              ]),
                              _: 1
                            }),
                            createTextVNode(" Live preview ")
                          ]),
                          _: 1
                        })
                      ]),
                      createVNode("div", {
                        class: "preview-canvas flex-grow-1 pa-4",
                        style: { maxWidth: previewWidth.value }
                      }, [
                        createVNode(VLayout, {
                          class: "rounded border",
                          style: { "height": "100%" }
                        }, {
                          default: withCtx(() => [
                            navProperties.value.addAppBar && appBar.value.length > 0 ? (openBlock(true), createBlock(Fragment, { key: 0 }, renderList(appBar.value, (item, index) => {
                              return openBlock(), createBlock(VAppBar, {
                                key: index,
                                color: appBarColors[navProperties.value.appBarColor].value !== "default" ? appBarColors[navProperties.value.appBarColor].value : void 0,
                                flat: ""
                              }, {
                                default: withCtx(() => [
                                  createVNode(VAppBarNavIcon, {
                                    icon: item.icon
                                  }, null, 8, ["icon"]),
                                  createVNode(VAppBarTitle, null, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString(item.title), 1)
                                    ]),
                                    _: 2
                                  }, 1024)
                                ]),
                                _: 2
                              }, 1032, ["color"]);
                            }), 128)) : createCommentVNode("", true),
                            createVNode(VNavigationDrawer, {
                              modelValue: navProperties.value.model,
                              "onUpdate:modelValue": ($event) => navProperties.value.model = $event,
                              permanent: navProperties.value.permanent,
                              "expand-on-hover": navProperties.value.expandOnHover,
                              location: navProperties.value.location,
                              width: navProperties.value.width,
                              color: navProperties.value.color,
                              elevation: navProperties.value.elevation,
                              rounded: navProperties.value.rounded,
                              floating: navProperties.value.floating,
                              rail: navProperties.value.rail,
                              clipped: navProperties.value.clipped,
                              mobile: navProperties.value.mobile,
                              temporary: navProperties.value.temporary,
                              image: navProperties.value.image,
                              transition: navProperties.value.transition
                            }, {
                              default: withCtx(() => [
                                createVNode(VList, null, {
                                  default: withCtx(() => [
                                    navProperties.value.showSubheader && navHeader.value.length > 0 && navProperties.value.showIconItems && navItems.value.length > 0 ? (openBlock(true), createBlock(Fragment, { key: 0 }, renderList(navHeader.value, (header, headerIdx) => {
                                      return openBlock(), createBlock(Fragment, {
                                        key: `header-${headerIdx}`
                                      }, [
                                        createVNode(VListSubheader, null, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(header.title), 1)
                                          ]),
                                          _: 2
                                        }, 1024),
                                        (openBlock(true), createBlock(Fragment, null, renderList(navItems.value, (item, itemIdx) => {
                                          return openBlock(), createBlock(Fragment, {
                                            key: `item-${itemIdx}`
                                          }, [
                                            Math.floor(itemIdx / Math.ceil(navItems.value.length / Math.max(1, navHeader.value.length))) === headerIdx ? (openBlock(), createBlock(VListItem, {
                                              key: 0,
                                              "prepend-icon": item.icon,
                                              title: item.title || "Item"
                                            }, null, 8, ["prepend-icon", "title"])) : createCommentVNode("", true)
                                          ], 64);
                                        }), 128))
                                      ], 64);
                                    }), 128)) : navProperties.value.showSubheader && navHeader.value.length > 0 ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                      (openBlock(true), createBlock(Fragment, null, renderList(navHeader.value, (header, idx) => {
                                        return openBlock(), createBlock(VListSubheader, { key: idx }, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(header.title), 1)
                                          ]),
                                          _: 2
                                        }, 1024);
                                      }), 128)),
                                      createVNode(VListItem, {
                                        "prepend-icon": "mdi-home",
                                        title: "Home"
                                      }),
                                      createVNode(VListItem, {
                                        "prepend-icon": "mdi-account",
                                        title: "Profile"
                                      }),
                                      createVNode(VListItem, {
                                        "prepend-icon": "mdi-cog",
                                        title: "Settings"
                                      })
                                    ], 64)) : navProperties.value.showIconItems && navItems.value.length > 0 ? (openBlock(true), createBlock(Fragment, { key: 2 }, renderList(navItems.value, (item, idx) => {
                                      return openBlock(), createBlock(VListItem, {
                                        key: idx,
                                        "prepend-icon": item.icon,
                                        title: item.title || "Item"
                                      }, null, 8, ["prepend-icon", "title"]);
                                    }), 128)) : (openBlock(), createBlock(Fragment, { key: 3 }, [
                                      createVNode(VListItem, {
                                        "prepend-icon": "mdi-home",
                                        title: "Home"
                                      }),
                                      createVNode(VListItem, {
                                        "prepend-icon": "mdi-account",
                                        title: "Profile"
                                      }),
                                      createVNode(VListItem, {
                                        "prepend-icon": "mdi-cog",
                                        title: "Settings"
                                      })
                                    ], 64)),
                                    navProperties.value.showLinkItem ? (openBlock(), createBlock(VListItem, {
                                      key: 4,
                                      "prepend-icon": navProperties.value.linkIcon || "mdi-link-variant",
                                      title: navProperties.value.linkTitle || "Link",
                                      href: navProperties.value.linkUrl,
                                      target: navProperties.value.linkExternal ? "_blank" : void 0
                                    }, null, 8, ["prepend-icon", "title", "href", "target"])) : createCommentVNode("", true)
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            }, 8, ["modelValue", "onUpdate:modelValue", "permanent", "expand-on-hover", "location", "width", "color", "elevation", "rounded", "floating", "rail", "clipped", "mobile", "temporary", "image", "transition"])
                          ]),
                          _: 1
                        })
                      ], 4),
                      createVNode("div", { class: "d-flex justify-end mt-3" }, [
                        createVNode(VBtn, {
                          color: "secondary",
                          class: "mr-2",
                          "prepend-icon": "mdi-eye",
                          onClick: previewCode
                        }, {
                          default: withCtx(() => [
                            createTextVNode(" Preview Code ")
                          ]),
                          _: 1
                        }),
                        createVNode(VBtn, {
                          color: "primary",
                          "prepend-icon": "mdi-content-copy",
                          onClick: copyNavCode
                        }, {
                          default: withCtx(() => [
                            createTextVNode(" Copy to Clipboard ")
                          ]),
                          _: 1
                        })
                      ])
                    ])
                  ];
                }
              }),
              _: 1
            }, _parent2, _scopeId));
            _push2(ssrRenderComponent(VDialog, {
              modelValue: showCodeDialog.value,
              "onUpdate:modelValue": ($event) => showCodeDialog.value = $event,
              width: "800"
            }, {
              default: withCtx((_2, _push3, _parent3, _scopeId2) => {
                if (_push3) {
                  _push3(ssrRenderComponent(VCard, { class: "bg-grey-darken-4" }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(ssrRenderComponent(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VTabs, {
                                modelValue: codeTab.value,
                                "onUpdate:modelValue": ($event) => codeTab.value = $event,
                                color: "primary"
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VTab, { value: "template" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`Template`);
                                        } else {
                                          return [
                                            createTextVNode("Template")
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VTab, { value: "script" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`Script`);
                                        } else {
                                          return [
                                            createTextVNode("Script")
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VTab, { value: "theme" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`Theme`);
                                        } else {
                                          return [
                                            createTextVNode("Theme")
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                  } else {
                                    return [
                                      createVNode(VTab, { value: "template" }, {
                                        default: withCtx(() => [
                                          createTextVNode("Template")
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VTab, { value: "script" }, {
                                        default: withCtx(() => [
                                          createTextVNode("Script")
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VTab, { value: "theme" }, {
                                        default: withCtx(() => [
                                          createTextVNode("Theme")
                                        ]),
                                        _: 1
                                      })
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VBtn, {
                                icon: "mdi-close",
                                variant: "text",
                                onClick: ($event) => showCodeDialog.value = false
                              }, null, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VTabs, {
                                  modelValue: codeTab.value,
                                  "onUpdate:modelValue": ($event) => codeTab.value = $event,
                                  color: "primary"
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VTab, { value: "template" }, {
                                      default: withCtx(() => [
                                        createTextVNode("Template")
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VTab, { value: "script" }, {
                                      default: withCtx(() => [
                                        createTextVNode("Script")
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VTab, { value: "theme" }, {
                                      default: withCtx(() => [
                                        createTextVNode("Theme")
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }, 8, ["modelValue", "onUpdate:modelValue"]),
                                createVNode(VBtn, {
                                  icon: "mdi-close",
                                  variant: "text",
                                  onClick: ($event) => showCodeDialog.value = false
                                }, null, 8, ["onClick"])
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VCardText, null, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VWindow, {
                                modelValue: codeTab.value,
                                "onUpdate:modelValue": ($event) => codeTab.value = $event
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VWindowItem, { value: "template" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(ssrRenderComponent(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`${ssrInterpolate(generateTemplateCode())}`);
                                              } else {
                                                return [
                                                  createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                        } else {
                                          return [
                                            createVNode(VSheet, {
                                              class: "bg-grey-darken-4 rounded pa-4",
                                              style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                              ]),
                                              _: 1
                                            })
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "script" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(ssrRenderComponent(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`${ssrInterpolate(generateScriptCode())}`);
                                              } else {
                                                return [
                                                  createTextVNode(toDisplayString(generateScriptCode()), 1)
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                        } else {
                                          return [
                                            createVNode(VSheet, {
                                              class: "bg-grey-darken-4 rounded pa-4",
                                              style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(generateScriptCode()), 1)
                                              ]),
                                              _: 1
                                            })
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "theme" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(ssrRenderComponent(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`${ssrInterpolate(unref(theme))}`);
                                              } else {
                                                return [
                                                  createTextVNode(toDisplayString(unref(theme)), 1)
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                        } else {
                                          return [
                                            createVNode(VSheet, {
                                              class: "bg-grey-darken-4 rounded pa-4",
                                              style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(unref(theme)), 1)
                                              ]),
                                              _: 1
                                            })
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                  } else {
                                    return [
                                      createVNode(VWindowItem, { value: "template" }, {
                                        default: withCtx(() => [
                                          createVNode(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "script" }, {
                                        default: withCtx(() => [
                                          createVNode(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString(generateScriptCode()), 1)
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "theme" }, {
                                        default: withCtx(() => [
                                          createVNode(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString(unref(theme)), 1)
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        _: 1
                                      })
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VWindow, {
                                  modelValue: codeTab.value,
                                  "onUpdate:modelValue": ($event) => codeTab.value = $event
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VWindowItem, { value: "template" }, {
                                      default: withCtx(() => [
                                        createVNode(VSheet, {
                                          class: "bg-grey-darken-4 rounded pa-4",
                                          style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "script" }, {
                                      default: withCtx(() => [
                                        createVNode(VSheet, {
                                          class: "bg-grey-darken-4 rounded pa-4",
                                          style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(generateScriptCode()), 1)
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "theme" }, {
                                      default: withCtx(() => [
                                        createVNode(VSheet, {
                                          class: "bg-grey-darken-4 rounded pa-4",
                                          style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(unref(theme)), 1)
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }, 8, ["modelValue", "onUpdate:modelValue"])
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VCardActions, { class: "pa-4" }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VBtn, {
                                color: "secondary",
                                "prepend-icon": "mdi-content-copy",
                                onClick: copyCurrentTab
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(` Copy Current Tab `);
                                  } else {
                                    return [
                                      createTextVNode(" Copy Current Tab ")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VBtn, {
                                  color: "secondary",
                                  "prepend-icon": "mdi-content-copy",
                                  onClick: copyCurrentTab
                                }, {
                                  default: withCtx(() => [
                                    createTextVNode(" Copy Current Tab ")
                                  ]),
                                  _: 1
                                })
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                      } else {
                        return [
                          createVNode(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                            default: withCtx(() => [
                              createVNode(VTabs, {
                                modelValue: codeTab.value,
                                "onUpdate:modelValue": ($event) => codeTab.value = $event,
                                color: "primary"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VTab, { value: "template" }, {
                                    default: withCtx(() => [
                                      createTextVNode("Template")
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VTab, { value: "script" }, {
                                    default: withCtx(() => [
                                      createTextVNode("Script")
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VTab, { value: "theme" }, {
                                    default: withCtx(() => [
                                      createTextVNode("Theme")
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"]),
                              createVNode(VBtn, {
                                icon: "mdi-close",
                                variant: "text",
                                onClick: ($event) => showCodeDialog.value = false
                              }, null, 8, ["onClick"])
                            ]),
                            _: 1
                          }),
                          createVNode(VCardText, null, {
                            default: withCtx(() => [
                              createVNode(VWindow, {
                                modelValue: codeTab.value,
                                "onUpdate:modelValue": ($event) => codeTab.value = $event
                              }, {
                                default: withCtx(() => [
                                  createVNode(VWindowItem, { value: "template" }, {
                                    default: withCtx(() => [
                                      createVNode(VSheet, {
                                        class: "bg-grey-darken-4 rounded pa-4",
                                        style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                        ]),
                                        _: 1
                                      })
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "script" }, {
                                    default: withCtx(() => [
                                      createVNode(VSheet, {
                                        class: "bg-grey-darken-4 rounded pa-4",
                                        style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(generateScriptCode()), 1)
                                        ]),
                                        _: 1
                                      })
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "theme" }, {
                                    default: withCtx(() => [
                                      createVNode(VSheet, {
                                        class: "bg-grey-darken-4 rounded pa-4",
                                        style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(unref(theme)), 1)
                                        ]),
                                        _: 1
                                      })
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"])
                            ]),
                            _: 1
                          }),
                          createVNode(VCardActions, { class: "pa-4" }, {
                            default: withCtx(() => [
                              createVNode(VBtn, {
                                color: "secondary",
                                "prepend-icon": "mdi-content-copy",
                                onClick: copyCurrentTab
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(" Copy Current Tab ")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          })
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                } else {
                  return [
                    createVNode(VCard, { class: "bg-grey-darken-4" }, {
                      default: withCtx(() => [
                        createVNode(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                          default: withCtx(() => [
                            createVNode(VTabs, {
                              modelValue: codeTab.value,
                              "onUpdate:modelValue": ($event) => codeTab.value = $event,
                              color: "primary"
                            }, {
                              default: withCtx(() => [
                                createVNode(VTab, { value: "template" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Template")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "script" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Script")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "theme" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Theme")
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            }, 8, ["modelValue", "onUpdate:modelValue"]),
                            createVNode(VBtn, {
                              icon: "mdi-close",
                              variant: "text",
                              onClick: ($event) => showCodeDialog.value = false
                            }, null, 8, ["onClick"])
                          ]),
                          _: 1
                        }),
                        createVNode(VCardText, null, {
                          default: withCtx(() => [
                            createVNode(VWindow, {
                              modelValue: codeTab.value,
                              "onUpdate:modelValue": ($event) => codeTab.value = $event
                            }, {
                              default: withCtx(() => [
                                createVNode(VWindowItem, { value: "template" }, {
                                  default: withCtx(() => [
                                    createVNode(VSheet, {
                                      class: "bg-grey-darken-4 rounded pa-4",
                                      style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "script" }, {
                                  default: withCtx(() => [
                                    createVNode(VSheet, {
                                      class: "bg-grey-darken-4 rounded pa-4",
                                      style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode(toDisplayString(generateScriptCode()), 1)
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "theme" }, {
                                  default: withCtx(() => [
                                    createVNode(VSheet, {
                                      class: "bg-grey-darken-4 rounded pa-4",
                                      style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode(toDisplayString(unref(theme)), 1)
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            }, 8, ["modelValue", "onUpdate:modelValue"])
                          ]),
                          _: 1
                        }),
                        createVNode(VCardActions, { class: "pa-4" }, {
                          default: withCtx(() => [
                            createVNode(VBtn, {
                              color: "secondary",
                              "prepend-icon": "mdi-content-copy",
                              onClick: copyCurrentTab
                            }, {
                              default: withCtx(() => [
                                createTextVNode(" Copy Current Tab ")
                              ]),
                              _: 1
                            })
                          ]),
                          _: 1
                        })
                      ]),
                      _: 1
                    })
                  ];
                }
              }),
              _: 1
            }, _parent2, _scopeId));
            _push2(ssrRenderComponent(Snackbar, {
              modelValue: showSnackbarMessage.value,
              "onUpdate:modelValue": ($event) => showSnackbarMessage.value = $event,
              text: snackbarText.value,
              color: snackbarColor.value
            }, null, _parent2, _scopeId));
          } else {
            return [
              createVNode(VMain, { class: "w-100 h-100 overflow-hidden d-flex" }, {
                default: withCtx(() => [
                  createVNode("div", {
                    class: "control-panel",
                    style: { "width": "350px" }
                  }, [
                    createVNode(VCard, {
                      flat: "",
                      class: "fill-height"
                    }, {
                      default: withCtx(() => [
                        createVNode("div", { class: "px-4 py-2 d-flex align-center" }, [
                          createVNode(VChip, {
                            color: "success",
                            "prepend-icon": "mdi-vuejs",
                            size: "small",
                            class: "mr-2 px-4 py-2"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("Vue.js")
                            ]),
                            _: 1
                          }),
                          createVNode(VChip, {
                            color: "info",
                            "prepend-icon": "mdi-vuetify",
                            size: "small",
                            class: "mr-2 px-4 py-2"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("Vuetify")
                            ]),
                            _: 1
                          })
                        ]),
                        createVNode(VTabs, {
                          modelValue: tab.value,
                          "onUpdate:modelValue": ($event) => tab.value = $event,
                          color: "primary",
                          "align-tabs": "center",
                          class: "px-4"
                        }, {
                          default: withCtx(() => [
                            createVNode(VTab, { value: "content" }, {
                              default: withCtx(() => [
                                createTextVNode("Content")
                              ]),
                              _: 1
                            }),
                            createVNode(VTab, { value: "style" }, {
                              default: withCtx(() => [
                                createTextVNode("Style")
                              ]),
                              _: 1
                            }),
                            createVNode(VTab, { value: "actions" }, {
                              default: withCtx(() => [
                                createTextVNode("Actions")
                              ]),
                              _: 1
                            }),
                            createVNode(VTab, { value: "templates" }, {
                              default: withCtx(() => [
                                createTextVNode("Template")
                              ]),
                              _: 1
                            })
                          ]),
                          _: 1
                        }, 8, ["modelValue", "onUpdate:modelValue"]),
                        createVNode(VDivider),
                        createVNode(VCardText, {
                          class: "pa-0 fill-height",
                          style: { "overflow-y": "auto" }
                        }, {
                          default: withCtx(() => [
                            createVNode(VWindow, {
                              modelValue: tab.value,
                              "onUpdate:modelValue": ($event) => tab.value = $event
                            }, {
                              default: withCtx(() => [
                                createVNode(VWindowItem, { value: "content" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-view-dashboard-outline")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "App Bar")
                                      ]),
                                      createVNode(VSwitch, {
                                        modelValue: navProperties.value.addAppBar,
                                        "onUpdate:modelValue": ($event) => navProperties.value.addAppBar = $event,
                                        color: "primary",
                                        label: "Add app bar",
                                        "hide-details": "",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      navProperties.value.addAppBar ? (openBlock(), createBlock("div", { key: 0 }, [
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2 d-block" }, "App Bar Color"),
                                          createVNode(VBtnToggle, {
                                            modelValue: navProperties.value.appBarColor,
                                            "onUpdate:modelValue": ($event) => navProperties.value.appBarColor = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(appBarColors, (color, index) => {
                                                return createVNode(VBtn, {
                                                  key: color.value,
                                                  value: index,
                                                  color: color.value !== "default" ? color.value : void 0,
                                                  size: "small",
                                                  variant: "tonal",
                                                  width: "40",
                                                  height: "40",
                                                  class: "ma-1"
                                                }, {
                                                  default: withCtx(() => [
                                                    color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-palette-outline")
                                                      ]),
                                                      _: 1
                                                    })) : createCommentVNode("", true)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value", "color"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            (openBlock(true), createBlock(Fragment, null, renderList(appBar.value, (item, index) => {
                                              return openBlock(), createBlock("div", {
                                                key: index,
                                                class: "d-flex align-center mb-2"
                                              }, [
                                                createVNode(VTextField, {
                                                  modelValue: item.title,
                                                  "onUpdate:modelValue": ($event) => item.title = $event,
                                                  label: "Title",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-format-title",
                                                  class: "mr-2",
                                                  placeholder: "Home"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSelect, {
                                                  modelValue: item.icon,
                                                  "onUpdate:modelValue": ($event) => item.icon = $event,
                                                  items: navIcons.value,
                                                  label: "Icon",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-pencil",
                                                  class: "mr-2",
                                                  placeholder: "mdi-home"
                                                }, {
                                                  item: withCtx(({ item: item2, props }) => [
                                                    createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                      prepend: withCtx(() => [
                                                        createVNode(VIcon, {
                                                          icon: item2.raw
                                                        }, null, 8, ["icon"])
                                                      ]),
                                                      _: 2
                                                    }, 1040)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                createVNode(VBtn, {
                                                  icon: "mdi-delete",
                                                  color: "error",
                                                  variant: "text",
                                                  density: "compact",
                                                  onClick: ($event) => removeAppBar(index)
                                                }, null, 8, ["onClick"])
                                              ]);
                                            }), 128)),
                                            createVNode(VBtn, {
                                              color: "primary",
                                              "prepend-icon": "mdi-plus",
                                              variant: "tonal",
                                              block: "",
                                              onClick: addAppBar,
                                              class: "mt-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(" Add app bar item ")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        })
                                      ])) : createCommentVNode("", true),
                                      createVNode(VDivider, { class: "my-4" }),
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-format-list-bulleted")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Navigation Items")
                                      ]),
                                      createVNode(VSwitch, {
                                        modelValue: navProperties.value.showSubheader,
                                        "onUpdate:modelValue": ($event) => navProperties.value.showSubheader = $event,
                                        color: "primary",
                                        label: "Add subheaders",
                                        "hide-details": "",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      navProperties.value.showSubheader ? (openBlock(), createBlock("div", { key: 1 }, [
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            (openBlock(true), createBlock(Fragment, null, renderList(navHeader.value, (item, index) => {
                                              return openBlock(), createBlock("div", {
                                                key: index,
                                                class: "d-flex align-center mb-2"
                                              }, [
                                                createVNode(VTextField, {
                                                  modelValue: item.title,
                                                  "onUpdate:modelValue": ($event) => item.title = $event,
                                                  label: "Subheader text",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-format-header-3",
                                                  class: "mr-2",
                                                  placeholder: "Section"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VBtn, {
                                                  icon: "mdi-delete",
                                                  color: "error",
                                                  variant: "text",
                                                  density: "compact",
                                                  onClick: ($event) => removeHeader(index)
                                                }, null, 8, ["onClick"])
                                              ]);
                                            }), 128)),
                                            createVNode(VBtn, {
                                              color: "primary",
                                              "prepend-icon": "mdi-plus",
                                              variant: "tonal",
                                              block: "",
                                              onClick: addHeader,
                                              class: "mt-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(" Add subheader ")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        })
                                      ])) : createCommentVNode("", true),
                                      createVNode(VSwitch, {
                                        modelValue: navProperties.value.showIconItems,
                                        "onUpdate:modelValue": ($event) => navProperties.value.showIconItems = $event,
                                        color: "primary",
                                        label: "Add navigation items",
                                        "hide-details": "",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      navProperties.value.showIconItems ? (openBlock(), createBlock("div", { key: 2 }, [
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            (openBlock(true), createBlock(Fragment, null, renderList(navItems.value, (item, index) => {
                                              return openBlock(), createBlock("div", {
                                                key: index,
                                                class: "d-flex align-center mb-2"
                                              }, [
                                                createVNode(VSelect, {
                                                  modelValue: item.icon,
                                                  "onUpdate:modelValue": ($event) => item.icon = $event,
                                                  items: navIcons.value,
                                                  label: "Icon",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-emoticon",
                                                  class: "mr-2",
                                                  placeholder: "mdi-home"
                                                }, {
                                                  item: withCtx(({ item: item2, props }) => [
                                                    createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                      prepend: withCtx(() => [
                                                        createVNode(VIcon, {
                                                          icon: item2.raw
                                                        }, null, 8, ["icon"])
                                                      ]),
                                                      default: withCtx(() => [
                                                        createVNode(VListItemTitle, null, {
                                                          default: withCtx(() => [
                                                            createTextVNode(toDisplayString(item2.raw.replace("mdi-", "")), 1)
                                                          ]),
                                                          _: 2
                                                        }, 1024)
                                                      ]),
                                                      _: 2
                                                    }, 1040)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                createVNode(VTextField, {
                                                  modelValue: item.title,
                                                  "onUpdate:modelValue": ($event) => item.title = $event,
                                                  label: "Title",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-format-title",
                                                  class: "mr-2",
                                                  placeholder: "Home"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VBtn, {
                                                  icon: "mdi-delete",
                                                  color: "error",
                                                  variant: "text",
                                                  density: "compact",
                                                  onClick: ($event) => removeItem(index)
                                                }, null, 8, ["onClick"])
                                              ]);
                                            }), 128)),
                                            createVNode(VBtn, {
                                              color: "primary",
                                              "prepend-icon": "mdi-plus",
                                              variant: "tonal",
                                              block: "",
                                              onClick: addIconItem,
                                              class: "mt-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(" Add navigation item ")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        })
                                      ])) : createCommentVNode("", true),
                                      createVNode(VTextField, {
                                        modelValue: navProperties.value.image,
                                        "onUpdate:modelValue": ($event) => navProperties.value.image = $event,
                                        label: "Background image URL",
                                        variant: "outlined",
                                        density: "comfortable",
                                        clearable: "",
                                        "prepend-inner-icon": "mdi-image",
                                        class: "mb-4"
                                      }, {
                                        "append-inner": withCtx(() => [
                                          createVNode(VBtn, {
                                            icon: "mdi-refresh",
                                            variant: "text",
                                            size: "small",
                                            onClick: ($event) => navProperties.value.image = ""
                                          }, null, 8, ["onClick"])
                                        ]),
                                        _: 1
                                      }, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode("div", { class: "d-flex flex-wrap mb-4" }, [
                                        createVNode(VChipGroup, null, {
                                          default: withCtx(() => [
                                            createVNode(VChip, {
                                              size: "small",
                                              onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1506744038136-46273834b3fb"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("Nature")
                                              ]),
                                              _: 1
                                            }, 8, ["onClick"]),
                                            createVNode(VChip, {
                                              size: "small",
                                              onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1507525428034-b723cf961d3e"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("Ocean")
                                              ]),
                                              _: 1
                                            }, 8, ["onClick"]),
                                            createVNode(VChip, {
                                              size: "small",
                                              onClick: ($event) => navProperties.value.image = "https://images.unsplash.com/photo-1519681393784-d120267933ba"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("Mountain")
                                              ]),
                                              _: 1
                                            }, 8, ["onClick"])
                                          ]),
                                          _: 1
                                        })
                                      ])
                                    ])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "style" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-palette")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Appearance")
                                      ]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-2 d-block" }, "Color"),
                                        createVNode(VBtnToggle, {
                                          mandatory: "",
                                          density: "comfortable",
                                          "selected-class": "border-primary"
                                        }, {
                                          default: withCtx(() => [
                                            (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                              return createVNode(VBtn, {
                                                key: color,
                                                value: color,
                                                color: color !== "default" ? color : void 0,
                                                size: "small",
                                                variant: "tonal",
                                                width: "40",
                                                height: "40",
                                                class: "ma-1",
                                                onClick: ($event) => navProperties.value.color = color
                                              }, {
                                                default: withCtx(() => [
                                                  color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-palette-outline")
                                                    ]),
                                                    _: 1
                                                  })) : createCommentVNode("", true)
                                                ]),
                                                _: 2
                                              }, 1032, ["value", "color", "onClick"]);
                                            }), 64))
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Elevation"),
                                        createVNode("div", { class: "d-flex align-center" }, [
                                          createVNode(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-box-shadow")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VSlider, {
                                            modelValue: navProperties.value.elevation,
                                            "onUpdate:modelValue": ($event) => navProperties.value.elevation = $event,
                                            min: "0",
                                            max: "24",
                                            step: "1",
                                            "thumb-label": "",
                                            class: "mx-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VChip, { size: "x-small" }, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString(navProperties.value.elevation), 1)
                                            ]),
                                            _: 1
                                          })
                                        ])
                                      ]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Width"),
                                        createVNode("div", { class: "d-flex align-center" }, [
                                          createVNode(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-arrow-expand-horizontal")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VSlider, {
                                            modelValue: navProperties.value.width,
                                            "onUpdate:modelValue": ($event) => navProperties.value.width = $event,
                                            min: "180",
                                            max: "400",
                                            step: "10",
                                            "thumb-label": "",
                                            class: "mx-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VChip, { size: "x-small" }, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString(navProperties.value.width) + "px", 1)
                                            ]),
                                            _: 1
                                          })
                                        ])
                                      ]),
                                      createVNode(VDivider, { class: "my-4" }),
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-monitor-dashboard")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Layout & Position")
                                      ]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode(VBtnToggle, {
                                          modelValue: navProperties.value.location,
                                          "onUpdate:modelValue": ($event) => navProperties.value.location = $event,
                                          mandatory: "",
                                          density: "comfortable",
                                          class: "mb-3"
                                        }, {
                                          default: withCtx(() => [
                                            createVNode(VBtn, {
                                              value: "left",
                                              "prepend-icon": "mdi-format-horizontal-align-left"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("Left")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VBtn, {
                                              value: "right",
                                              "prepend-icon": "mdi-format-horizontal-align-right"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("Right")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        }, 8, ["modelValue", "onUpdate:modelValue"])
                                      ]),
                                      createVNode(VSwitch, {
                                        modelValue: navProperties.value.rounded,
                                        "onUpdate:modelValue": ($event) => navProperties.value.rounded = $event,
                                        color: "primary",
                                        label: "Rounded corners",
                                        "hide-details": "",
                                        class: "mb-2"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VSwitch, {
                                        modelValue: navProperties.value.floating,
                                        "onUpdate:modelValue": ($event) => navProperties.value.floating = $event,
                                        color: "primary",
                                        label: "Floating",
                                        "hide-details": "",
                                        class: "mb-2"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VSwitch, {
                                        modelValue: navProperties.value.rail,
                                        "onUpdate:modelValue": ($event) => navProperties.value.rail = $event,
                                        color: "primary",
                                        label: "Rail mode",
                                        "hide-details": "",
                                        class: "mb-2"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VSwitch, {
                                        modelValue: navProperties.value.expandOnHover,
                                        "onUpdate:modelValue": ($event) => navProperties.value.expandOnHover = $event,
                                        color: "primary",
                                        label: "Expand on hover",
                                        "hide-details": "",
                                        class: "mb-2"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VSwitch, {
                                        modelValue: navProperties.value.permanent,
                                        "onUpdate:modelValue": ($event) => navProperties.value.permanent = $event,
                                        color: "primary",
                                        label: "Permanent",
                                        "hide-details": "",
                                        class: "mb-2"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                    ])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "actions" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-cog")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Behavior")
                                      ]),
                                      createVNode(VSwitch, {
                                        modelValue: navProperties.value.clipped,
                                        "onUpdate:modelValue": ($event) => navProperties.value.clipped = $event,
                                        color: "primary",
                                        label: "Clipped",
                                        "hide-details": "",
                                        class: "mb-2"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VSwitch, {
                                        modelValue: navProperties.value.mobile,
                                        "onUpdate:modelValue": ($event) => navProperties.value.mobile = $event,
                                        color: "primary",
                                        label: "Mobile",
                                        "hide-details": "",
                                        class: "mb-2"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VSwitch, {
                                        modelValue: navProperties.value.temporary,
                                        "onUpdate:modelValue": ($event) => navProperties.value.temporary = $event,
                                        color: "primary",
                                        label: "Temporary",
                                        "hide-details": "",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VDivider, { class: "my-4" }),
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-link")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Actions & Links")
                                      ]),
                                      createVNode(VSwitch, {
                                        modelValue: navProperties.value.showLinkItem,
                                        "onUpdate:modelValue": ($event) => navProperties.value.showLinkItem = $event,
                                        color: "primary",
                                        label: "Add custom link",
                                        "hide-details": "",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      navProperties.value.showLinkItem ? (openBlock(), createBlock(VCard, {
                                        key: 0,
                                        class: "mb-4 pa-3"
                                      }, {
                                        default: withCtx(() => [
                                          createVNode(VSelect, {
                                            modelValue: navProperties.value.linkIcon,
                                            "onUpdate:modelValue": ($event) => navProperties.value.linkIcon = $event,
                                            items: navIcons.value,
                                            label: "Link icon",
                                            variant: "outlined",
                                            density: "comfortable",
                                            clearable: "",
                                            "prepend-inner-icon": "mdi-pencil",
                                            class: "mb-3"
                                          }, {
                                            item: withCtx(({ item, props }) => [
                                              createVNode(VListItem, props, {
                                                prepend: withCtx(() => [
                                                  createVNode(VIcon, {
                                                    icon: item.raw
                                                  }, null, 8, ["icon"])
                                                ]),
                                                _: 2
                                              }, 1040)
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                          createVNode(VTextField, {
                                            modelValue: navProperties.value.linkTitle,
                                            "onUpdate:modelValue": ($event) => navProperties.value.linkTitle = $event,
                                            label: "Link title",
                                            variant: "outlined",
                                            density: "comfortable",
                                            clearable: "",
                                            "prepend-inner-icon": "mdi-format-title",
                                            class: "mb-3"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VTextField, {
                                            modelValue: navProperties.value.linkUrl,
                                            "onUpdate:modelValue": ($event) => navProperties.value.linkUrl = $event,
                                            label: "Link URL",
                                            variant: "outlined",
                                            density: "comfortable",
                                            clearable: "",
                                            "prepend-inner-icon": "mdi-link-variant",
                                            class: "mb-3"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: navProperties.value.linkExternal,
                                            "onUpdate:modelValue": ($event) => navProperties.value.linkExternal = $event,
                                            color: "primary",
                                            label: "Open in new tab",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        _: 1
                                      })) : createCommentVNode("", true)
                                    ])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "templates" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                        createVNode("div", { class: "d-flex align-center" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-file-document-outline")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Navigation Templates")
                                        ]),
                                        createVNode(VTooltip, { location: "bottom" }, {
                                          activator: withCtx(({ props }) => [
                                            createVNode(VBtn, mergeProps({
                                              icon: "mdi-help-circle-outline",
                                              variant: "text",
                                              size: "small"
                                            }, props), null, 16)
                                          ]),
                                          default: withCtx(() => [
                                            createVNode("span", null, "Apply pre-defined templates or save your own")
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common navigation layouts. "),
                                      createVNode(VCard, { class: "mb-4" }, {
                                        default: withCtx(() => [
                                          createVNode(VList, null, {
                                            default: withCtx(() => [
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("dashboard"),
                                                "prepend-icon": "mdi-view-dashboard",
                                                title: "Dashboard",
                                                subtitle: "Admin dashboard navigation"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("ecommerce"),
                                                "prepend-icon": "mdi-shopping",
                                                title: "E-commerce",
                                                subtitle: "Online store navigation"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("social"),
                                                "prepend-icon": "mdi-account-group",
                                                title: "Social Network",
                                                subtitle: "Social media navigation"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("admin"),
                                                "prepend-icon": "mdi-shield-account",
                                                title: "Admin Panel",
                                                subtitle: "Advanced admin navigation"
                                              }, null, 8, ["onClick"])
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VAlert, {
                                        type: "info",
                                        variant: "tonal",
                                        class: "mb-4"
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(" Applying a template will replace your current navigation settings. ")
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VDivider, { class: "my-4" }),
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-content-save")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Save Current Navigation")
                                      ]),
                                      createVNode(VTextField, {
                                        modelValue: customTemplateName.value,
                                        "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                        label: "Template Name",
                                        variant: "outlined",
                                        density: "comfortable",
                                        "prepend-inner-icon": "mdi-tag",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VBtn, {
                                        color: "primary",
                                        "prepend-icon": "mdi-content-save",
                                        block: "",
                                        onClick: saveCurrentTemplate
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(" Save Current Navigation as Template ")
                                        ]),
                                        _: 1
                                      })
                                    ])
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            }, 8, ["modelValue", "onUpdate:modelValue"])
                          ]),
                          _: 1
                        })
                      ]),
                      _: 1
                    })
                  ]),
                  createVNode("div", { class: "preview-area pa-4 d-flex flex-column" }, [
                    createVNode("div", { class: "d-flex justify-space-between align-center mb-3" }, [
                      createVNode(VChip, {
                        color: "primary",
                        variant: "flat",
                        size: "small",
                        class: "mr-2"
                      }, {
                        default: withCtx(() => [
                          createVNode(VIcon, {
                            start: "",
                            size: "small"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("mdi-eye")
                            ]),
                            _: 1
                          }),
                          createTextVNode(" Live preview ")
                        ]),
                        _: 1
                      })
                    ]),
                    createVNode("div", {
                      class: "preview-canvas flex-grow-1 pa-4",
                      style: { maxWidth: previewWidth.value }
                    }, [
                      createVNode(VLayout, {
                        class: "rounded border",
                        style: { "height": "100%" }
                      }, {
                        default: withCtx(() => [
                          navProperties.value.addAppBar && appBar.value.length > 0 ? (openBlock(true), createBlock(Fragment, { key: 0 }, renderList(appBar.value, (item, index) => {
                            return openBlock(), createBlock(VAppBar, {
                              key: index,
                              color: appBarColors[navProperties.value.appBarColor].value !== "default" ? appBarColors[navProperties.value.appBarColor].value : void 0,
                              flat: ""
                            }, {
                              default: withCtx(() => [
                                createVNode(VAppBarNavIcon, {
                                  icon: item.icon
                                }, null, 8, ["icon"]),
                                createVNode(VAppBarTitle, null, {
                                  default: withCtx(() => [
                                    createTextVNode(toDisplayString(item.title), 1)
                                  ]),
                                  _: 2
                                }, 1024)
                              ]),
                              _: 2
                            }, 1032, ["color"]);
                          }), 128)) : createCommentVNode("", true),
                          createVNode(VNavigationDrawer, {
                            modelValue: navProperties.value.model,
                            "onUpdate:modelValue": ($event) => navProperties.value.model = $event,
                            permanent: navProperties.value.permanent,
                            "expand-on-hover": navProperties.value.expandOnHover,
                            location: navProperties.value.location,
                            width: navProperties.value.width,
                            color: navProperties.value.color,
                            elevation: navProperties.value.elevation,
                            rounded: navProperties.value.rounded,
                            floating: navProperties.value.floating,
                            rail: navProperties.value.rail,
                            clipped: navProperties.value.clipped,
                            mobile: navProperties.value.mobile,
                            temporary: navProperties.value.temporary,
                            image: navProperties.value.image,
                            transition: navProperties.value.transition
                          }, {
                            default: withCtx(() => [
                              createVNode(VList, null, {
                                default: withCtx(() => [
                                  navProperties.value.showSubheader && navHeader.value.length > 0 && navProperties.value.showIconItems && navItems.value.length > 0 ? (openBlock(true), createBlock(Fragment, { key: 0 }, renderList(navHeader.value, (header, headerIdx) => {
                                    return openBlock(), createBlock(Fragment, {
                                      key: `header-${headerIdx}`
                                    }, [
                                      createVNode(VListSubheader, null, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(header.title), 1)
                                        ]),
                                        _: 2
                                      }, 1024),
                                      (openBlock(true), createBlock(Fragment, null, renderList(navItems.value, (item, itemIdx) => {
                                        return openBlock(), createBlock(Fragment, {
                                          key: `item-${itemIdx}`
                                        }, [
                                          Math.floor(itemIdx / Math.ceil(navItems.value.length / Math.max(1, navHeader.value.length))) === headerIdx ? (openBlock(), createBlock(VListItem, {
                                            key: 0,
                                            "prepend-icon": item.icon,
                                            title: item.title || "Item"
                                          }, null, 8, ["prepend-icon", "title"])) : createCommentVNode("", true)
                                        ], 64);
                                      }), 128))
                                    ], 64);
                                  }), 128)) : navProperties.value.showSubheader && navHeader.value.length > 0 ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                    (openBlock(true), createBlock(Fragment, null, renderList(navHeader.value, (header, idx) => {
                                      return openBlock(), createBlock(VListSubheader, { key: idx }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(header.title), 1)
                                        ]),
                                        _: 2
                                      }, 1024);
                                    }), 128)),
                                    createVNode(VListItem, {
                                      "prepend-icon": "mdi-home",
                                      title: "Home"
                                    }),
                                    createVNode(VListItem, {
                                      "prepend-icon": "mdi-account",
                                      title: "Profile"
                                    }),
                                    createVNode(VListItem, {
                                      "prepend-icon": "mdi-cog",
                                      title: "Settings"
                                    })
                                  ], 64)) : navProperties.value.showIconItems && navItems.value.length > 0 ? (openBlock(true), createBlock(Fragment, { key: 2 }, renderList(navItems.value, (item, idx) => {
                                    return openBlock(), createBlock(VListItem, {
                                      key: idx,
                                      "prepend-icon": item.icon,
                                      title: item.title || "Item"
                                    }, null, 8, ["prepend-icon", "title"]);
                                  }), 128)) : (openBlock(), createBlock(Fragment, { key: 3 }, [
                                    createVNode(VListItem, {
                                      "prepend-icon": "mdi-home",
                                      title: "Home"
                                    }),
                                    createVNode(VListItem, {
                                      "prepend-icon": "mdi-account",
                                      title: "Profile"
                                    }),
                                    createVNode(VListItem, {
                                      "prepend-icon": "mdi-cog",
                                      title: "Settings"
                                    })
                                  ], 64)),
                                  navProperties.value.showLinkItem ? (openBlock(), createBlock(VListItem, {
                                    key: 4,
                                    "prepend-icon": navProperties.value.linkIcon || "mdi-link-variant",
                                    title: navProperties.value.linkTitle || "Link",
                                    href: navProperties.value.linkUrl,
                                    target: navProperties.value.linkExternal ? "_blank" : void 0
                                  }, null, 8, ["prepend-icon", "title", "href", "target"])) : createCommentVNode("", true)
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue", "permanent", "expand-on-hover", "location", "width", "color", "elevation", "rounded", "floating", "rail", "clipped", "mobile", "temporary", "image", "transition"])
                        ]),
                        _: 1
                      })
                    ], 4),
                    createVNode("div", { class: "d-flex justify-end mt-3" }, [
                      createVNode(VBtn, {
                        color: "secondary",
                        class: "mr-2",
                        "prepend-icon": "mdi-eye",
                        onClick: previewCode
                      }, {
                        default: withCtx(() => [
                          createTextVNode(" Preview Code ")
                        ]),
                        _: 1
                      }),
                      createVNode(VBtn, {
                        color: "primary",
                        "prepend-icon": "mdi-content-copy",
                        onClick: copyNavCode
                      }, {
                        default: withCtx(() => [
                          createTextVNode(" Copy to Clipboard ")
                        ]),
                        _: 1
                      })
                    ])
                  ])
                ]),
                _: 1
              }),
              createVNode(VDialog, {
                modelValue: showCodeDialog.value,
                "onUpdate:modelValue": ($event) => showCodeDialog.value = $event,
                width: "800"
              }, {
                default: withCtx(() => [
                  createVNode(VCard, { class: "bg-grey-darken-4" }, {
                    default: withCtx(() => [
                      createVNode(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                        default: withCtx(() => [
                          createVNode(VTabs, {
                            modelValue: codeTab.value,
                            "onUpdate:modelValue": ($event) => codeTab.value = $event,
                            color: "primary"
                          }, {
                            default: withCtx(() => [
                              createVNode(VTab, { value: "template" }, {
                                default: withCtx(() => [
                                  createTextVNode("Template")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "script" }, {
                                default: withCtx(() => [
                                  createTextVNode("Script")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "theme" }, {
                                default: withCtx(() => [
                                  createTextVNode("Theme")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue"]),
                          createVNode(VBtn, {
                            icon: "mdi-close",
                            variant: "text",
                            onClick: ($event) => showCodeDialog.value = false
                          }, null, 8, ["onClick"])
                        ]),
                        _: 1
                      }),
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VWindow, {
                            modelValue: codeTab.value,
                            "onUpdate:modelValue": ($event) => codeTab.value = $event
                          }, {
                            default: withCtx(() => [
                              createVNode(VWindowItem, { value: "template" }, {
                                default: withCtx(() => [
                                  createVNode(VSheet, {
                                    class: "bg-grey-darken-4 rounded pa-4",
                                    style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }),
                              createVNode(VWindowItem, { value: "script" }, {
                                default: withCtx(() => [
                                  createVNode(VSheet, {
                                    class: "bg-grey-darken-4 rounded pa-4",
                                    style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString(generateScriptCode()), 1)
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }),
                              createVNode(VWindowItem, { value: "theme" }, {
                                default: withCtx(() => [
                                  createVNode(VSheet, {
                                    class: "bg-grey-darken-4 rounded pa-4",
                                    style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString(unref(theme)), 1)
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue"])
                        ]),
                        _: 1
                      }),
                      createVNode(VCardActions, { class: "pa-4" }, {
                        default: withCtx(() => [
                          createVNode(VBtn, {
                            color: "secondary",
                            "prepend-icon": "mdi-content-copy",
                            onClick: copyCurrentTab
                          }, {
                            default: withCtx(() => [
                              createTextVNode(" Copy Current Tab ")
                            ]),
                            _: 1
                          })
                        ]),
                        _: 1
                      })
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }, 8, ["modelValue", "onUpdate:modelValue"]),
              createVNode(Snackbar, {
                modelValue: showSnackbarMessage.value,
                "onUpdate:modelValue": ($event) => showSnackbarMessage.value = $event,
                text: snackbarText.value,
                color: snackbarColor.value
              }, null, 8, ["modelValue", "onUpdate:modelValue", "text", "color"])
            ];
          }
        }),
        _: 1
      }, _parent));
    };
  }
});

const _sfc_setup$3 = _sfc_main$3.setup;
_sfc_main$3.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/studioNav.vue");
  return _sfc_setup$3 ? _sfc_setup$3(props, ctx) : void 0;
};
const StudioNav = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["__scopeId", "data-v-42de9f80"]]);

const timelineTemplates = {
  project: {
    title: "Project Timeline",
    align: "start",
    side: "end",
    density: "default",
    direction: "vertical",
    lineColor: "primary",
    lineWidth: 2,
    lineInset: 0,
    dotSize: "small",
    elevation: 2,
    rounded: true,
    reverse: false,
    truncateLine: false,
    fillDots: true,
    hideOpposite: false,
    items: [
      {
        title: "Project Kickoff",
        text: "Initial meeting with stakeholders to define project scope and objectives.",
        icon: "mdi-flag",
        color: "success",
        time: "Jan 15, 2023",
        hideOpposite: false
      },
      {
        title: "Design Phase",
        text: "Creating wireframes and mockups for the application interface.",
        icon: "mdi-palette",
        color: "info",
        time: "Feb 1, 2023",
        hideOpposite: false
      },
      {
        title: "Development Started",
        text: "Beginning of the coding phase with frontend and backend implementation.",
        icon: "mdi-code-braces",
        color: "primary",
        time: "Mar 10, 2023",
        hideOpposite: false
      },
      {
        title: "Testing Phase",
        text: "Quality assurance and bug fixing before the release.",
        icon: "mdi-test-tube",
        color: "warning",
        time: "Apr 5, 2023",
        hideOpposite: false
      },
      {
        title: "Project Launch",
        text: "Successful deployment of the application to production.",
        icon: "mdi-rocket-launch",
        color: "error",
        time: "May 1, 2023",
        hideOpposite: false
      }
    ]
  },
  routine: {
    title: "Daily Routine",
    align: "center",
    side: "end",
    density: "compact",
    direction: "vertical",
    lineColor: "secondary",
    lineWidth: 2,
    lineInset: 0,
    dotSize: "small",
    elevation: 2,
    rounded: true,
    reverse: false,
    truncateLine: false,
    fillDots: true,
    hideOpposite: false,
    items: [
      {
        title: "Wake Up & Meditation",
        text: "Start the day with 15 minutes of meditation to focus and prepare mentally.",
        icon: "mdi-weather-sunset-up",
        color: "info",
        time: "06:00",
        hideOpposite: false
      },
      {
        title: "Morning Exercise",
        text: "30 minutes of physical exercise to stimulate body and mind.",
        icon: "mdi-run",
        color: "success",
        time: "06:30",
        hideOpposite: false
      },
      {
        title: "Breakfast",
        text: "Balanced meal to start the day with energy.",
        icon: "mdi-food-apple",
        color: "primary",
        time: "07:15",
        hideOpposite: false
      },
      {
        title: "Work - Morning Session",
        text: "Focus on priority tasks when energy is at its peak.",
        icon: "mdi-briefcase",
        color: "secondary",
        time: "08:00",
        hideOpposite: false
      },
      {
        title: "Lunch Break",
        text: "Balanced meal and short walk to recharge.",
        icon: "mdi-food",
        color: "warning",
        time: "12:00",
        hideOpposite: false
      },
      {
        title: "Work - Afternoon Session",
        text: "Meetings and collaborative tasks.",
        icon: "mdi-account-group",
        color: "secondary",
        time: "13:00",
        hideOpposite: false
      },
      {
        title: "Personal Time",
        text: "Hobbies, family or personal development.",
        icon: "mdi-heart",
        color: "error",
        time: "18:00",
        hideOpposite: false
      },
      {
        title: "Bedtime Preparation",
        text: "Reading and relaxation for a restful night.",
        icon: "mdi-weather-night",
        color: "info",
        time: "22:00",
        hideOpposite: false
      }
    ]
  },
  history: {
    title: "Company History",
    align: "start",
    side: "alternate",
    density: "default",
    direction: "vertical",
    lineColor: "secondary",
    lineWidth: 3,
    lineInset: 0,
    dotSize: "large",
    elevation: 4,
    rounded: true,
    reverse: false,
    truncateLine: false,
    fillDots: false,
    hideOpposite: false,
    items: [
      {
        title: "Company Founded",
        text: "Our company was established with a vision to revolutionize the industry.",
        icon: "mdi-domain",
        color: "primary",
        time: "2010",
        hideOpposite: false
      },
      {
        title: "First Major Client",
        text: "Secured our first enterprise client, marking a significant milestone.",
        icon: "mdi-handshake",
        color: "success",
        time: "2012",
        hideOpposite: false
      },
      {
        title: "International Expansion",
        text: "Opened our first international office in London, UK.",
        icon: "mdi-earth",
        color: "info",
        time: "2015",
        hideOpposite: false
      },
      {
        title: "Product Launch",
        text: "Released our flagship product that changed the market landscape.",
        icon: "mdi-new-box",
        color: "warning",
        time: "2018",
        hideOpposite: false
      },
      {
        title: "IPO",
        text: "Successfully completed our initial public offering on the stock exchange.",
        icon: "mdi-chart-line",
        color: "error",
        time: "2022",
        hideOpposite: false
      }
    ]
  },
  process: {
    title: "Workflow Process",
    align: "end",
    side: "start",
    density: "comfortable",
    direction: "vertical",
    lineColor: "success",
    lineWidth: 2,
    lineInset: 8,
    dotSize: "small",
    elevation: 2,
    rounded: true,
    reverse: false,
    truncateLine: true,
    fillDots: true,
    hideOpposite: false,
    items: [
      {
        title: "Request Submission",
        text: "Customer submits a new service request through the portal.",
        icon: "mdi-clipboard-text",
        color: "primary",
        time: "Step 1",
        hideOpposite: false
      },
      {
        title: "Initial Review",
        text: "Support team reviews the request and assigns priority.",
        icon: "mdi-eye-outline",
        color: "info",
        time: "Step 2",
        hideOpposite: false
      },
      {
        title: "Assignment",
        text: "Request is assigned to the appropriate department for handling.",
        icon: "mdi-account-switch",
        color: "secondary",
        time: "Step 3",
        hideOpposite: false
      },
      {
        title: "Resolution",
        text: "Department resolves the issue and documents the solution.",
        icon: "mdi-check-circle",
        color: "success",
        time: "Step 4",
        hideOpposite: false
      },
      {
        title: "Feedback",
        text: "Customer provides feedback on the service quality.",
        icon: "mdi-star",
        color: "warning",
        time: "Step 5",
        hideOpposite: false
      }
    ]
  }
};
const getTimelineTemplate = (templateName) => {
  return JSON.parse(JSON.stringify(timelineTemplates[templateName] || {}));
};

const _sfc_main$2 = /* @__PURE__ */ defineComponent({
  __name: "studioTimeline",
  __ssrInlineRender: true,
  emits: ["update:content", "save"],
  setup(__props, { emit: __emit }) {
    const emit = __emit;
    const codeTab = ref("template");
    const tab = ref("content");
    const previewMode = ref("desktop");
    const showCodeDialog = ref(false);
    const generatedCode = ref("");
    const showSnackbarMessage = ref(false);
    const snackbarColor = ref("success");
    const userStore = useUserStore();
    const timelineIcons = ref(icons);
    const snackbarText = ref("");
    const colors = [
      "default",
      "primary",
      "secondary",
      "success",
      "info",
      "warning",
      "error"
    ];
    const cardVariants = ["elevated", "flat", "tonal", "outlined", "text", "plain"];
    const cardVariantIndex = ref(0);
    const cardVariant = computed(() => cardVariants[cardVariantIndex.value]);
    const transitions = [
      "fade",
      "slide-x-transition",
      "slide-y-transition",
      "scale-transition",
      "scroll-x-transition",
      "scroll-y-transition"
    ];
    const timelineProperties = ref({
      align: "center",
      direction: "vertical",
      side: "end",
      dense: false,
      lineColor: "primary",
      lineWidth: 2,
      dotSize: 36,
      reverse: false,
      truncateLine: false,
      rounded: true,
      showCards: true,
      cardElevation: 2,
      cardColor: "default",
      cardPadding: "pa-4",
      cardBorderRadius: "rounded",
      cardHoverEffect: false,
      separateHeader: false,
      titleStyle: "regular",
      animated: false,
      transition: "fade",
      transitionDuration: 300
    });
    const timelineItems = ref([
      {
        title: "First milestone",
        text: "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
        icon: "mdi-star",
        color: "primary",
        time: "January 2023",
        hideOpposite: false
      },
      {
        title: "Second milestone",
        text: "Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
        icon: "mdi-check",
        color: "success",
        time: "March 2023",
        hideOpposite: false
      },
      {
        title: "Third milestone",
        text: "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris.",
        icon: "mdi-alert",
        color: "warning",
        time: "June 2023",
        hideOpposite: false
      }
    ]);
    const customTemplateName = ref("");
    const addTimelineItem = () => {
      timelineItems.value.push({
        title: "New milestone",
        text: "Add your description here",
        icon: "mdi-star",
        color: "primary",
        time: "Date/Time",
        hideOpposite: false
      });
    };
    const removeTimelineItem = (index) => {
      timelineItems.value.splice(index, 1);
    };
    const applyTemplate = (template) => {
      const templateData = getTimelineTemplate(template);
      if (!templateData) {
        showSnackbarMessage.value = true;
        return;
      }
      Object.assign(timelineProperties.value, templateData);
      if (templateData.items) {
        timelineItems.value = [...templateData.items];
      }
      showSnackbarMessage.value = true;
      snackbarText.value = `${template} template applied successfully`;
      generateTimelineCodeSilently();
    };
    const saveCurrentTemplate = async () => {
      if (!customTemplateName.value) {
        snackbarText.value = "Please enter a template name";
        showSnackbarMessage.value = true;
        return;
      }
      const templateData = {
        ...JSON.parse(JSON.stringify(timelineProperties.value)),
        items: [...timelineItems.value]
      };
      const response = await userStore.saveTemplate(customTemplateName.value, templateData, "timeline");
      if (response) {
        snackbarText.value = `Template "${customTemplateName.value}" saved successfully`;
        showSnackbarMessage.value = true;
        customTemplateName.value = "";
        await userStore.loadData();
      } else {
        snackbarText.value = `Failed to save template "${customTemplateName.value}"`;
        showSnackbarMessage.value = true;
      }
    };
    const generateTimelineCode = () => {
      const templateCode = generateTemplateCode();
      const scriptCode = generateScriptCode();
      const themeCode = theme;
      switch (codeTab.value) {
        case "template":
          return templateCode;
        case "script":
          return scriptCode;
        case "style":
          return themeCode;
        default:
          return `${templateCode}

${scriptCode}

${themeCode}`;
      }
    };
    const generateTemplateCode = () => {
      let code = "<v-timeline\n";
      if (timelineProperties.value.align !== "center") code += `  align="${timelineProperties.value.align}"
`;
      if (timelineProperties.value.direction !== "vertical") code += `  direction="${timelineProperties.value.direction}"
`;
      if (timelineProperties.value.side) code += `  side="${timelineProperties.value.side}"
`;
      if (timelineProperties.value.dense) code += `  density="compact"
`;
      if (timelineProperties.value.lineColor !== "default") code += `  line-color="${timelineProperties.value.lineColor}"
`;
      if (timelineProperties.value.lineWidth !== 2) code += `  :line-width="${timelineProperties.value.lineWidth}"
`;
      if (timelineProperties.value.dotSize !== 36) code += `  :dot-size="${timelineProperties.value.dotSize}"
`;
      if (timelineProperties.value.reverse) code += `  reverse
`;
      if (timelineProperties.value.truncateLine) code += `  truncate-line
`;
      code += ">\n";
      code += "  <v-timeline-item\n";
      code += '    v-for="(item, index) in timelineItems"\n';
      code += '    :key="index"\n';
      code += `    :dot-color="item.color !== 'default' ? item.color : undefined"
`;
      code += '    :icon="item.icon"\n';
      code += '    :hide-opposite="item.hideOpposite"\n';
      code += `    :size="${timelineProperties.value.dotSize}"
`;
      if (timelineProperties.value.rounded) code += "    rounded\n";
      code += "  >\n";
      code += "    <template v-slot:opposite>\n";
      code += '      <div v-if="!item.hideOpposite" class="text-caption">{{ item.time }}</div>\n';
      code += "    </template>\n";
      if (timelineProperties.value.showCards) {
        code += "    <v-card\n";
        code += `      variant="${cardVariant.value}"
`;
        if (timelineProperties.value.cardElevation !== 2) code += `      :elevation="${timelineProperties.value.cardElevation}"
`;
        if (timelineProperties.value.cardColor !== "default") code += `      :color="timelineProperties.cardColor !== 'default' ? timelineProperties.cardColor : undefined"
`;
        let cardClasses = ["mb-4"];
        cardClasses.push(timelineProperties.value.cardPadding);
        cardClasses.push(timelineProperties.value.cardBorderRadius);
        if (timelineProperties.value.cardHoverEffect) {
          cardClasses.push("timeline-card-hover");
        }
        code += `      class="${cardClasses.join(" ")}"
`;
        if (timelineProperties.value.animated) {
          code += `      :transition="timelineProperties.transition"
`;
          code += `      :style="{ transitionDuration: timelineProperties.transitionDuration + 'ms' }"
`;
        }
        code += "    >\n";
        if (timelineProperties.value.separateHeader) {
          code += "      <v-card-title>{{ item.title }}</v-card-title>\n";
          code += "      <v-divider></v-divider>\n";
          code += "      <v-card-text>{{ item.text }}</v-card-text>\n";
        } else {
          code += '      <v-card-title :class="getTitleStyleClass()">{{ item.title }}</v-card-title>\n';
          code += "      <v-card-text>{{ item.text }}</v-card-text>\n";
        }
        code += "    </v-card>\n";
      } else {
        code += `    <div :class="['text-h6', getTitleStyleClass()]"`;
        if (timelineProperties.value.animated) {
          code += ' :transition="timelineProperties.transition"';
          code += ` :style="{ transitionDuration: timelineProperties.transitionDuration + 'ms' }"`;
        }
        code += ">{{ item.title }}</div>\n";
        code += "    <div";
        if (timelineProperties.value.animated) {
          code += ' :transition="timelineProperties.transition"';
          code += ` :style="{ transitionDuration: timelineProperties.transitionDuration + 'ms' }"`;
        }
        code += ">{{ item.text }}</div>\n";
      }
      code += "  </v-timeline-item>\n";
      code += "</v-timeline>";
      return code;
    };
    const generateScriptCode = () => {
      let code = `
import { ref, computed } from 'vue';

const timelineItems = ref([`;
      timelineItems.value.forEach((item, index) => {
        code += `
  {
    title: "${item.title}",
    text: "${item.text}",
    icon: "${item.icon}",
    color: "${item.color}",
    time: "${item.time}",
    hideOpposite: ${item.hideOpposite}
  }`;
        if (index < timelineItems.value.length - 1) {
          code += ",";
        }
      });
      code += `
]);`;
      return code;
    };
    const getTitleStyleClass = () => {
      switch (timelineProperties.value.titleStyle) {
        case "bold":
          return "font-weight-bold";
        case "italic":
          return "font-italic";
        case "uppercase":
          return "text-uppercase";
        default:
          return "";
      }
    };
    const previewCode = () => {
      generatedCode.value = generateTimelineCode();
      showCodeDialog.value = true;
    };
    const copyTimelineCode = () => {
      const templateCode = generateTemplateCode();
      const scriptCode = generateScriptCode();
      const fullCode = `${templateCode}

${scriptCode}`;
      (void 0).clipboard.writeText(fullCode).then(() => {
        snackbarText.value = "Code copied to clipboard!";
        showSnackbarMessage.value = true;
      }).catch((err) => {
        console.error("Error copying:", err);
      });
    };
    const copyCurrentTab = () => {
      let code;
      switch (codeTab.value) {
        case "template":
          code = generateTemplateCode();
          break;
        case "script":
          code = generateScriptCode();
          break;
        case "style":
          code = theme;
          break;
        default:
          code = "";
      }
      (void 0).navigator.clipboard.writeText(code).catch((err) => {
        console.error("Error copying:", err);
      });
    };
    const generateTimelineCodeSilently = () => {
      const code = generateTimelineCode();
      emit("update:content", code);
    };
    watch([timelineProperties, timelineItems, cardVariantIndex], () => {
      generateTimelineCodeSilently();
    }, { deep: true });
    watch(previewMode, () => {
      generateTimelineCodeSilently();
    });
    const getCardClasses = () => {
      const classes = {
        [timelineProperties.value.cardPadding]: true,
        [timelineProperties.value.cardBorderRadius]: true,
        "timeline-card-hover": timelineProperties.value.cardHoverEffect
      };
      return classes;
    };
    const showTimeline = ref(true);
    const triggerAnimation = () => {
      showTimeline.value = false;
      setTimeout(() => {
        showTimeline.value = true;
      }, 300);
    };
    watch(() => {
      return "";
    }, () => {
    }, { immediate: true });
    return (_ctx, _push, _parent, _attrs) => {
      _push(ssrRenderComponent(VApp, _attrs, {
        default: withCtx((_, _push2, _parent2, _scopeId) => {
          if (_push2) {
            _push2(ssrRenderComponent(VMain, { class: "w-100 h-100 overflow-hidden d-flex" }, {
              default: withCtx((_2, _push3, _parent3, _scopeId2) => {
                if (_push3) {
                  _push3(`<div class="control-panel" style="${ssrRenderStyle({ "width": "350px" })}" data-v-1424ad6c${_scopeId2}>`);
                  _push3(ssrRenderComponent(VCard, {
                    flat: "",
                    class: "fill-height"
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(`<div class="px-4 py-2 d-flex align-center" data-v-1424ad6c${_scopeId3}>`);
                        _push4(ssrRenderComponent(VChip, {
                          color: "success",
                          "prepend-icon": "mdi-vuejs",
                          size: "small",
                          class: "mr-2 px-4 py-2"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(`Vue.js`);
                            } else {
                              return [
                                createTextVNode("Vue.js")
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VChip, {
                          color: "info",
                          "prepend-icon": "mdi-vuetify",
                          size: "small",
                          class: "mr-2 px-4 py-2"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(`Vuetify`);
                            } else {
                              return [
                                createTextVNode("Vuetify")
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(`</div>`);
                        _push4(ssrRenderComponent(VTabs, {
                          modelValue: tab.value,
                          "onUpdate:modelValue": ($event) => tab.value = $event,
                          color: "primary",
                          "align-tabs": "center",
                          class: "px-4"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VTab, { value: "content" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Content`);
                                  } else {
                                    return [
                                      createTextVNode("Content")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VTab, { value: "style" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Style`);
                                  } else {
                                    return [
                                      createTextVNode("Style")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VTab, { value: "cards" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Cards`);
                                  } else {
                                    return [
                                      createTextVNode("Cards")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VTab, { value: "actions" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Actions`);
                                  } else {
                                    return [
                                      createTextVNode("Actions")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VTab, { value: "templates" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Templates`);
                                  } else {
                                    return [
                                      createTextVNode("Templates")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VTab, { value: "content" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Content")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "style" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Style")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "cards" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Cards")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "actions" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Actions")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "templates" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Templates")
                                  ]),
                                  _: 1
                                })
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VDivider, null, null, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VCardText, {
                          class: "pa-0 fill-height",
                          style: { "overflow-y": "auto" }
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VWindow, {
                                modelValue: tab.value,
                                "onUpdate:modelValue": ($event) => tab.value = $event,
                                class: "fill-height"
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VWindowItem, { value: "content" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-1424ad6c${_scopeId6}><div class="section-title d-flex align-center mb-3" data-v-1424ad6c${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-timeline`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-timeline")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-1424ad6c${_scopeId6}>Timeline Items</span></div>`);
                                          _push7(ssrRenderComponent(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<!--[-->`);
                                                ssrRenderList(timelineItems.value, (item, index) => {
                                                  _push8(`<div class="mb-4" data-v-1424ad6c${_scopeId7}><div class="d-flex align-center justify-space-between mb-2" data-v-1424ad6c${_scopeId7}><span class="text-subtitle-2" data-v-1424ad6c${_scopeId7}>Item ${ssrInterpolate(index + 1)}</span>`);
                                                  _push8(ssrRenderComponent(VBtn, {
                                                    icon: "mdi-delete",
                                                    color: "error",
                                                    variant: "text",
                                                    density: "compact",
                                                    onClick: ($event) => removeTimelineItem(index)
                                                  }, null, _parent8, _scopeId7));
                                                  _push8(`</div>`);
                                                  _push8(ssrRenderComponent(VTextField, {
                                                    modelValue: item.title,
                                                    "onUpdate:modelValue": ($event) => item.title = $event,
                                                    label: "Title",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-format-title",
                                                    class: "mb-2"
                                                  }, null, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VTextarea, {
                                                    modelValue: item.text,
                                                    "onUpdate:modelValue": ($event) => item.text = $event,
                                                    label: "Content",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "auto-grow": "",
                                                    rows: "2",
                                                    "row-height": "20",
                                                    "prepend-inner-icon": "mdi-text",
                                                    class: "mb-2"
                                                  }, null, _parent8, _scopeId7));
                                                  _push8(`<div class="d-flex gap-2" data-v-1424ad6c${_scopeId7}>`);
                                                  _push8(ssrRenderComponent(VSelect, {
                                                    modelValue: item.icon,
                                                    "onUpdate:modelValue": ($event) => item.icon = $event,
                                                    items: timelineIcons.value,
                                                    label: "Icon",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-pencil",
                                                    class: "mb-2",
                                                    style: { "flex": "1" }
                                                  }, {
                                                    item: withCtx(({ item: item2, props }, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(ssrRenderComponent(VListItem, mergeProps({ ref_for: true }, props), {
                                                          prepend: withCtx((_8, _push10, _parent10, _scopeId9) => {
                                                            if (_push10) {
                                                              _push10(ssrRenderComponent(VIcon, {
                                                                icon: item2.raw
                                                              }, null, _parent10, _scopeId9));
                                                            } else {
                                                              return [
                                                                createVNode(VIcon, {
                                                                  icon: item2.raw
                                                                }, null, 8, ["icon"])
                                                              ];
                                                            }
                                                          }),
                                                          _: 2
                                                        }, _parent9, _scopeId8));
                                                      } else {
                                                        return [
                                                          createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                            prepend: withCtx(() => [
                                                              createVNode(VIcon, {
                                                                icon: item2.raw
                                                              }, null, 8, ["icon"])
                                                            ]),
                                                            _: 2
                                                          }, 1040)
                                                        ];
                                                      }
                                                    }),
                                                    _: 2
                                                  }, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VSelect, {
                                                    modelValue: item.color,
                                                    "onUpdate:modelValue": ($event) => item.color = $event,
                                                    items: colors,
                                                    label: "Dot Color",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-palette",
                                                    class: "mb-2",
                                                    style: { "flex": "1" }
                                                  }, {
                                                    item: withCtx(({ item: item2, props }, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(ssrRenderComponent(VListItem, mergeProps({ ref_for: true }, props), {
                                                          prepend: withCtx((_8, _push10, _parent10, _scopeId9) => {
                                                            if (_push10) {
                                                              _push10(ssrRenderComponent(VIcon, {
                                                                color: item2.raw !== "default" ? item2.raw : void 0
                                                              }, {
                                                                default: withCtx((_9, _push11, _parent11, _scopeId10) => {
                                                                  if (_push11) {
                                                                    _push11(`mdi-circle`);
                                                                  } else {
                                                                    return [
                                                                      createTextVNode("mdi-circle")
                                                                    ];
                                                                  }
                                                                }),
                                                                _: 2
                                                              }, _parent10, _scopeId9));
                                                            } else {
                                                              return [
                                                                createVNode(VIcon, {
                                                                  color: item2.raw !== "default" ? item2.raw : void 0
                                                                }, {
                                                                  default: withCtx(() => [
                                                                    createTextVNode("mdi-circle")
                                                                  ]),
                                                                  _: 2
                                                                }, 1032, ["color"])
                                                              ];
                                                            }
                                                          }),
                                                          _: 2
                                                        }, _parent9, _scopeId8));
                                                      } else {
                                                        return [
                                                          createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                            prepend: withCtx(() => [
                                                              createVNode(VIcon, {
                                                                color: item2.raw !== "default" ? item2.raw : void 0
                                                              }, {
                                                                default: withCtx(() => [
                                                                  createTextVNode("mdi-circle")
                                                                ]),
                                                                _: 2
                                                              }, 1032, ["color"])
                                                            ]),
                                                            _: 2
                                                          }, 1040)
                                                        ];
                                                      }
                                                    }),
                                                    _: 2
                                                  }, _parent8, _scopeId7));
                                                  _push8(`</div>`);
                                                  _push8(ssrRenderComponent(VTextField, {
                                                    modelValue: item.time,
                                                    "onUpdate:modelValue": ($event) => item.time = $event,
                                                    label: "Time/Date",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-clock-outline",
                                                    class: "mb-2"
                                                  }, null, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VSwitch, {
                                                    modelValue: item.hideOpposite,
                                                    "onUpdate:modelValue": ($event) => item.hideOpposite = $event,
                                                    color: "primary",
                                                    label: "Hide opposite content",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, _parent8, _scopeId7));
                                                  _push8(`</div>`);
                                                });
                                                _push8(`<!--]-->`);
                                                _push8(ssrRenderComponent(VBtn, {
                                                  color: "primary",
                                                  "prepend-icon": "mdi-plus",
                                                  variant: "tonal",
                                                  block: "",
                                                  onClick: addTimelineItem
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(` Add timeline item `);
                                                    } else {
                                                      return [
                                                        createTextVNode(" Add timeline item ")
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value, (item, index) => {
                                                    return openBlock(), createBlock("div", {
                                                      key: index,
                                                      class: "mb-4"
                                                    }, [
                                                      createVNode("div", { class: "d-flex align-center justify-space-between mb-2" }, [
                                                        createVNode("span", { class: "text-subtitle-2" }, "Item " + toDisplayString(index + 1), 1),
                                                        createVNode(VBtn, {
                                                          icon: "mdi-delete",
                                                          color: "error",
                                                          variant: "text",
                                                          density: "compact",
                                                          onClick: ($event) => removeTimelineItem(index)
                                                        }, null, 8, ["onClick"])
                                                      ]),
                                                      createVNode(VTextField, {
                                                        modelValue: item.title,
                                                        "onUpdate:modelValue": ($event) => item.title = $event,
                                                        label: "Title",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-format-title",
                                                        class: "mb-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode(VTextarea, {
                                                        modelValue: item.text,
                                                        "onUpdate:modelValue": ($event) => item.text = $event,
                                                        label: "Content",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "auto-grow": "",
                                                        rows: "2",
                                                        "row-height": "20",
                                                        "prepend-inner-icon": "mdi-text",
                                                        class: "mb-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode("div", { class: "d-flex gap-2" }, [
                                                        createVNode(VSelect, {
                                                          modelValue: item.icon,
                                                          "onUpdate:modelValue": ($event) => item.icon = $event,
                                                          items: timelineIcons.value,
                                                          label: "Icon",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          "prepend-inner-icon": "mdi-pencil",
                                                          class: "mb-2",
                                                          style: { "flex": "1" }
                                                        }, {
                                                          item: withCtx(({ item: item2, props }) => [
                                                            createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                              prepend: withCtx(() => [
                                                                createVNode(VIcon, {
                                                                  icon: item2.raw
                                                                }, null, 8, ["icon"])
                                                              ]),
                                                              _: 2
                                                            }, 1040)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                        createVNode(VSelect, {
                                                          modelValue: item.color,
                                                          "onUpdate:modelValue": ($event) => item.color = $event,
                                                          items: colors,
                                                          label: "Dot Color",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          "prepend-inner-icon": "mdi-palette",
                                                          class: "mb-2",
                                                          style: { "flex": "1" }
                                                        }, {
                                                          item: withCtx(({ item: item2, props }) => [
                                                            createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                              prepend: withCtx(() => [
                                                                createVNode(VIcon, {
                                                                  color: item2.raw !== "default" ? item2.raw : void 0
                                                                }, {
                                                                  default: withCtx(() => [
                                                                    createTextVNode("mdi-circle")
                                                                  ]),
                                                                  _: 2
                                                                }, 1032, ["color"])
                                                              ]),
                                                              _: 2
                                                            }, 1040)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["modelValue", "onUpdate:modelValue"])
                                                      ]),
                                                      createVNode(VTextField, {
                                                        modelValue: item.time,
                                                        "onUpdate:modelValue": ($event) => item.time = $event,
                                                        label: "Time/Date",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-clock-outline",
                                                        class: "mb-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode(VSwitch, {
                                                        modelValue: item.hideOpposite,
                                                        "onUpdate:modelValue": ($event) => item.hideOpposite = $event,
                                                        color: "primary",
                                                        label: "Hide opposite content",
                                                        "hide-details": "",
                                                        class: "mb-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                    ]);
                                                  }), 128)),
                                                  createVNode(VBtn, {
                                                    color: "primary",
                                                    "prepend-icon": "mdi-plus",
                                                    variant: "tonal",
                                                    block: "",
                                                    onClick: addTimelineItem
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(" Add timeline item ")
                                                    ]),
                                                    _: 1
                                                  })
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-timeline")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Timeline Items")
                                              ]),
                                              createVNode(VCard, { class: "mb-4 pa-3" }, {
                                                default: withCtx(() => [
                                                  (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value, (item, index) => {
                                                    return openBlock(), createBlock("div", {
                                                      key: index,
                                                      class: "mb-4"
                                                    }, [
                                                      createVNode("div", { class: "d-flex align-center justify-space-between mb-2" }, [
                                                        createVNode("span", { class: "text-subtitle-2" }, "Item " + toDisplayString(index + 1), 1),
                                                        createVNode(VBtn, {
                                                          icon: "mdi-delete",
                                                          color: "error",
                                                          variant: "text",
                                                          density: "compact",
                                                          onClick: ($event) => removeTimelineItem(index)
                                                        }, null, 8, ["onClick"])
                                                      ]),
                                                      createVNode(VTextField, {
                                                        modelValue: item.title,
                                                        "onUpdate:modelValue": ($event) => item.title = $event,
                                                        label: "Title",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-format-title",
                                                        class: "mb-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode(VTextarea, {
                                                        modelValue: item.text,
                                                        "onUpdate:modelValue": ($event) => item.text = $event,
                                                        label: "Content",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "auto-grow": "",
                                                        rows: "2",
                                                        "row-height": "20",
                                                        "prepend-inner-icon": "mdi-text",
                                                        class: "mb-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode("div", { class: "d-flex gap-2" }, [
                                                        createVNode(VSelect, {
                                                          modelValue: item.icon,
                                                          "onUpdate:modelValue": ($event) => item.icon = $event,
                                                          items: timelineIcons.value,
                                                          label: "Icon",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          "prepend-inner-icon": "mdi-pencil",
                                                          class: "mb-2",
                                                          style: { "flex": "1" }
                                                        }, {
                                                          item: withCtx(({ item: item2, props }) => [
                                                            createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                              prepend: withCtx(() => [
                                                                createVNode(VIcon, {
                                                                  icon: item2.raw
                                                                }, null, 8, ["icon"])
                                                              ]),
                                                              _: 2
                                                            }, 1040)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                        createVNode(VSelect, {
                                                          modelValue: item.color,
                                                          "onUpdate:modelValue": ($event) => item.color = $event,
                                                          items: colors,
                                                          label: "Dot Color",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          "prepend-inner-icon": "mdi-palette",
                                                          class: "mb-2",
                                                          style: { "flex": "1" }
                                                        }, {
                                                          item: withCtx(({ item: item2, props }) => [
                                                            createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                              prepend: withCtx(() => [
                                                                createVNode(VIcon, {
                                                                  color: item2.raw !== "default" ? item2.raw : void 0
                                                                }, {
                                                                  default: withCtx(() => [
                                                                    createTextVNode("mdi-circle")
                                                                  ]),
                                                                  _: 2
                                                                }, 1032, ["color"])
                                                              ]),
                                                              _: 2
                                                            }, 1040)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["modelValue", "onUpdate:modelValue"])
                                                      ]),
                                                      createVNode(VTextField, {
                                                        modelValue: item.time,
                                                        "onUpdate:modelValue": ($event) => item.time = $event,
                                                        label: "Time/Date",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-clock-outline",
                                                        class: "mb-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode(VSwitch, {
                                                        modelValue: item.hideOpposite,
                                                        "onUpdate:modelValue": ($event) => item.hideOpposite = $event,
                                                        color: "primary",
                                                        label: "Hide opposite content",
                                                        "hide-details": "",
                                                        class: "mb-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                    ]);
                                                  }), 128)),
                                                  createVNode(VBtn, {
                                                    color: "primary",
                                                    "prepend-icon": "mdi-plus",
                                                    variant: "tonal",
                                                    block: "",
                                                    onClick: addTimelineItem
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(" Add timeline item ")
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "style" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-1424ad6c${_scopeId6}><div class="section-title d-flex align-center mb-3" data-v-1424ad6c${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-palette`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-palette")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-1424ad6c${_scopeId6}>Appearance</span></div><div class="mb-4" data-v-1424ad6c${_scopeId6}><label class="text-subtitle-2 mb-2 d-block" data-v-1424ad6c${_scopeId6}>Timeline Color</label>`);
                                          _push7(ssrRenderComponent(VBtnToggle, {
                                            modelValue: timelineProperties.value.lineColor,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.lineColor = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            "selected-class": "border-primary"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<!--[-->`);
                                                ssrRenderList(colors, (color) => {
                                                  _push8(ssrRenderComponent(VBtn, {
                                                    key: color,
                                                    value: color,
                                                    color: color !== "default" ? color : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: "ma-1"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        if (color === "default") {
                                                          _push9(ssrRenderComponent(VIcon, null, {
                                                            default: withCtx((_9, _push10, _parent10, _scopeId9) => {
                                                              if (_push10) {
                                                                _push10(`mdi-palette-outline`);
                                                              } else {
                                                                return [
                                                                  createTextVNode("mdi-palette-outline")
                                                                ];
                                                              }
                                                            }),
                                                            _: 2
                                                          }, _parent9, _scopeId8));
                                                        } else {
                                                          _push9(`<!---->`);
                                                        }
                                                      } else {
                                                        return [
                                                          color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ];
                                                      }
                                                    }),
                                                    _: 2
                                                  }, _parent8, _scopeId7));
                                                });
                                                _push8(`<!--]-->`);
                                              } else {
                                                return [
                                                  (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                    return createVNode(VBtn, {
                                                      key: color,
                                                      value: color,
                                                      color: color !== "default" ? color : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx(() => [
                                                        color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color"]);
                                                  }), 64))
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div><div class="mb-4" data-v-1424ad6c${_scopeId6}><label class="text-subtitle-2 mb-1 d-block" data-v-1424ad6c${_scopeId6}>Line Width</label><div class="d-flex align-center" data-v-1424ad6c${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-minus`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-minus")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSlider, {
                                            modelValue: timelineProperties.value.lineWidth,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.lineWidth = $event,
                                            min: "1",
                                            max: "5",
                                            step: "1",
                                            "thumb-label": "",
                                            class: "mx-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-plus`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-plus")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div></div><div class="mb-4" data-v-1424ad6c${_scopeId6}><label class="text-subtitle-2 mb-1 d-block" data-v-1424ad6c${_scopeId6}>Dot Size</label><div class="d-flex align-center" data-v-1424ad6c${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-circle-small`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-circle-small")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSlider, {
                                            modelValue: timelineProperties.value.dotSize,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.dotSize = $event,
                                            min: "10",
                                            max: "48",
                                            step: "2",
                                            "thumb-label": "",
                                            class: "mx-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-circle-large`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-circle-large")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div></div>`);
                                          _push7(ssrRenderComponent(VDivider, { class: "my-4" }, null, _parent7, _scopeId6));
                                          _push7(`<div class="section-title d-flex align-center mb-3" data-v-1424ad6c${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-monitor-dashboard`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-monitor-dashboard")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-1424ad6c${_scopeId6}>Layout &amp; Position</span></div><div class="mb-4" data-v-1424ad6c${_scopeId6}><label class="text-subtitle-2 mb-2" data-v-1424ad6c${_scopeId6}>Alignment</label>`);
                                          _push7(ssrRenderComponent(VBtnToggle, {
                                            modelValue: timelineProperties.value.align,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.align = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            class: "mb-3"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VBtn, {
                                                  value: "start",
                                                  "prepend-icon": "mdi-format-align-left"
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`Left`);
                                                    } else {
                                                      return [
                                                        createTextVNode("Left")
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                                _push8(ssrRenderComponent(VBtn, {
                                                  value: "center",
                                                  "prepend-icon": "mdi-format-align-center"
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`Center`);
                                                    } else {
                                                      return [
                                                        createTextVNode("Center")
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                                _push8(ssrRenderComponent(VBtn, {
                                                  value: "end",
                                                  "prepend-icon": "mdi-format-align-right"
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`Right`);
                                                    } else {
                                                      return [
                                                        createTextVNode("Right")
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VBtn, {
                                                    value: "start",
                                                    "prepend-icon": "mdi-format-align-left"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Left")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VBtn, {
                                                    value: "center",
                                                    "prepend-icon": "mdi-format-align-center"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Center")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VBtn, {
                                                    value: "end",
                                                    "prepend-icon": "mdi-format-align-right"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Right")
                                                    ]),
                                                    _: 1
                                                  })
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div><div class="mb-4" data-v-1424ad6c${_scopeId6}><label class="text-subtitle-2 mb-2" data-v-1424ad6c${_scopeId6}>Direction</label>`);
                                          _push7(ssrRenderComponent(VBtnToggle, {
                                            modelValue: timelineProperties.value.direction,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.direction = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            class: "mb-3"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VBtn, {
                                                  value: "vertical",
                                                  "prepend-icon": "mdi-arrow-up-down"
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`Vertical`);
                                                    } else {
                                                      return [
                                                        createTextVNode("Vertical")
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                                _push8(ssrRenderComponent(VBtn, {
                                                  value: "horizontal",
                                                  "prepend-icon": "mdi-arrow-left-right"
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`Horizontal`);
                                                    } else {
                                                      return [
                                                        createTextVNode("Horizontal")
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VBtn, {
                                                    value: "vertical",
                                                    "prepend-icon": "mdi-arrow-up-down"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Vertical")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VBtn, {
                                                    value: "horizontal",
                                                    "prepend-icon": "mdi-arrow-left-right"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Horizontal")
                                                    ]),
                                                    _: 1
                                                  })
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div>`);
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: timelineProperties.value.reverse,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.reverse = $event,
                                            color: "primary",
                                            label: "Reverse order",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: timelineProperties.value.dense,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.dense = $event,
                                            color: "primary",
                                            label: "Dense",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: timelineProperties.value.rounded,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.rounded = $event,
                                            color: "primary",
                                            label: "Rounded dots",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-palette")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Appearance")
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-2 d-block" }, "Timeline Color"),
                                                createVNode(VBtnToggle, {
                                                  modelValue: timelineProperties.value.lineColor,
                                                  "onUpdate:modelValue": ($event) => timelineProperties.value.lineColor = $event,
                                                  mandatory: "",
                                                  density: "comfortable",
                                                  "selected-class": "border-primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                      return createVNode(VBtn, {
                                                        key: color,
                                                        value: color,
                                                        color: color !== "default" ? color : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: "ma-1"
                                                      }, {
                                                        default: withCtx(() => [
                                                          color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Line Width"),
                                                createVNode("div", { class: "d-flex align-center" }, [
                                                  createVNode(VIcon, {
                                                    size: "small",
                                                    color: "primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-minus")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VSlider, {
                                                    modelValue: timelineProperties.value.lineWidth,
                                                    "onUpdate:modelValue": ($event) => timelineProperties.value.lineWidth = $event,
                                                    min: "1",
                                                    max: "5",
                                                    step: "1",
                                                    "thumb-label": "",
                                                    class: "mx-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VIcon, {
                                                    size: "small",
                                                    color: "primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-plus")
                                                    ]),
                                                    _: 1
                                                  })
                                                ])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Dot Size"),
                                                createVNode("div", { class: "d-flex align-center" }, [
                                                  createVNode(VIcon, {
                                                    size: "small",
                                                    color: "primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-circle-small")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VSlider, {
                                                    modelValue: timelineProperties.value.dotSize,
                                                    "onUpdate:modelValue": ($event) => timelineProperties.value.dotSize = $event,
                                                    min: "10",
                                                    max: "48",
                                                    step: "2",
                                                    "thumb-label": "",
                                                    class: "mx-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VIcon, {
                                                    size: "small",
                                                    color: "primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-circle-large")
                                                    ]),
                                                    _: 1
                                                  })
                                                ])
                                              ]),
                                              createVNode(VDivider, { class: "my-4" }),
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-monitor-dashboard")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Layout & Position")
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-2" }, "Alignment"),
                                                createVNode(VBtnToggle, {
                                                  modelValue: timelineProperties.value.align,
                                                  "onUpdate:modelValue": ($event) => timelineProperties.value.align = $event,
                                                  mandatory: "",
                                                  density: "comfortable",
                                                  class: "mb-3"
                                                }, {
                                                  default: withCtx(() => [
                                                    createVNode(VBtn, {
                                                      value: "start",
                                                      "prepend-icon": "mdi-format-align-left"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Left")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VBtn, {
                                                      value: "center",
                                                      "prepend-icon": "mdi-format-align-center"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Center")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VBtn, {
                                                      value: "end",
                                                      "prepend-icon": "mdi-format-align-right"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Right")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-2" }, "Direction"),
                                                createVNode(VBtnToggle, {
                                                  modelValue: timelineProperties.value.direction,
                                                  "onUpdate:modelValue": ($event) => timelineProperties.value.direction = $event,
                                                  mandatory: "",
                                                  density: "comfortable",
                                                  class: "mb-3"
                                                }, {
                                                  default: withCtx(() => [
                                                    createVNode(VBtn, {
                                                      value: "vertical",
                                                      "prepend-icon": "mdi-arrow-up-down"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Vertical")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VBtn, {
                                                      value: "horizontal",
                                                      "prepend-icon": "mdi-arrow-left-right"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Horizontal")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode(VSwitch, {
                                                modelValue: timelineProperties.value.reverse,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.reverse = $event,
                                                color: "primary",
                                                label: "Reverse order",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: timelineProperties.value.dense,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.dense = $event,
                                                color: "primary",
                                                label: "Dense",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: timelineProperties.value.rounded,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.rounded = $event,
                                                color: "primary",
                                                label: "Rounded dots",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "cards" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-1424ad6c${_scopeId6}><div class="section-title d-flex align-center mb-3" data-v-1424ad6c${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-card-outline`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-card-outline")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-1424ad6c${_scopeId6}>Card Style</span></div>`);
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: timelineProperties.value.showCards,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.showCards = $event,
                                            color: "primary",
                                            label: "Show cards",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          if (timelineProperties.value.showCards) {
                                            _push7(`<div data-v-1424ad6c${_scopeId6}><div class="mb-4" data-v-1424ad6c${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-1424ad6c${_scopeId6}>Card Variant</label>`);
                                            _push7(ssrRenderComponent(VChipGroup, {
                                              modelValue: cardVariantIndex.value,
                                              "onUpdate:modelValue": ($event) => cardVariantIndex.value = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`<!--[-->`);
                                                  ssrRenderList(cardVariants, (variant, index) => {
                                                    _push8(ssrRenderComponent(VChip, {
                                                      key: variant,
                                                      size: "small",
                                                      value: index
                                                    }, {
                                                      default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                        if (_push9) {
                                                          _push9(`${ssrInterpolate(variant)}`);
                                                        } else {
                                                          return [
                                                            createTextVNode(toDisplayString(variant), 1)
                                                          ];
                                                        }
                                                      }),
                                                      _: 2
                                                    }, _parent8, _scopeId7));
                                                  });
                                                  _push8(`<!--]-->`);
                                                } else {
                                                  return [
                                                    (openBlock(), createBlock(Fragment, null, renderList(cardVariants, (variant, index) => {
                                                      return createVNode(VChip, {
                                                        key: variant,
                                                        size: "small",
                                                        value: index
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode(toDisplayString(variant), 1)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value"]);
                                                    }), 64))
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div><div class="mb-4" data-v-1424ad6c${_scopeId6}><label class="text-subtitle-2 mb-1 d-block" data-v-1424ad6c${_scopeId6}>Card Elevation</label><div class="d-flex align-center" data-v-1424ad6c${_scopeId6}>`);
                                            _push7(ssrRenderComponent(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`mdi-card-outline`);
                                                } else {
                                                  return [
                                                    createTextVNode("mdi-card-outline")
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSlider, {
                                              modelValue: timelineProperties.value.cardElevation,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.cardElevation = $event,
                                              min: "0",
                                              max: "24",
                                              step: "1",
                                              "thumb-label": "",
                                              class: "mx-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`mdi-layers-triple`);
                                                } else {
                                                  return [
                                                    createTextVNode("mdi-layers-triple")
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div></div><div class="mb-4" data-v-1424ad6c${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-1424ad6c${_scopeId6}>Card Background Color</label>`);
                                            _push7(ssrRenderComponent(VBtnToggle, {
                                              modelValue: timelineProperties.value.cardColor,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.cardColor = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              "selected-class": "border-primary"
                                            }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`<!--[-->`);
                                                  ssrRenderList(colors, (color) => {
                                                    _push8(ssrRenderComponent(VBtn, {
                                                      key: color,
                                                      value: color,
                                                      color: color !== "default" ? color : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                        if (_push9) {
                                                          if (color === "default") {
                                                            _push9(ssrRenderComponent(VIcon, null, {
                                                              default: withCtx((_9, _push10, _parent10, _scopeId9) => {
                                                                if (_push10) {
                                                                  _push10(`mdi-palette-outline`);
                                                                } else {
                                                                  return [
                                                                    createTextVNode("mdi-palette-outline")
                                                                  ];
                                                                }
                                                              }),
                                                              _: 2
                                                            }, _parent9, _scopeId8));
                                                          } else {
                                                            _push9(`<!---->`);
                                                          }
                                                        } else {
                                                          return [
                                                            color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                              default: withCtx(() => [
                                                                createTextVNode("mdi-palette-outline")
                                                              ]),
                                                              _: 1
                                                            })) : createCommentVNode("", true)
                                                          ];
                                                        }
                                                      }),
                                                      _: 2
                                                    }, _parent8, _scopeId7));
                                                  });
                                                  _push8(`<!--]-->`);
                                                } else {
                                                  return [
                                                    (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                      return createVNode(VBtn, {
                                                        key: color,
                                                        value: color,
                                                        color: color !== "default" ? color : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: "ma-1"
                                                      }, {
                                                        default: withCtx(() => [
                                                          color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color"]);
                                                    }), 64))
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div><div class="mb-4" data-v-1424ad6c${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-1424ad6c${_scopeId6}>Title Style</label>`);
                                            _push7(ssrRenderComponent(VChipGroup, {
                                              modelValue: timelineProperties.value.titleStyle,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.titleStyle = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(ssrRenderComponent(VChip, {
                                                    size: "small",
                                                    value: "regular"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`Regular`);
                                                      } else {
                                                        return [
                                                          createTextVNode("Regular")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VChip, {
                                                    size: "small",
                                                    value: "bold"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`Bold`);
                                                      } else {
                                                        return [
                                                          createTextVNode("Bold")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VChip, {
                                                    size: "small",
                                                    value: "italic"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`Italic`);
                                                      } else {
                                                        return [
                                                          createTextVNode("Italic")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VChip, {
                                                    size: "small",
                                                    value: "uppercase"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`uppercase`);
                                                      } else {
                                                        return [
                                                          createTextVNode("uppercase")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                } else {
                                                  return [
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "regular"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Regular")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "bold"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Bold")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "italic"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Italic")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "uppercase"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("uppercase")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div><div class="mb-4" data-v-1424ad6c${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-1424ad6c${_scopeId6}>Card Padding</label>`);
                                            _push7(ssrRenderComponent(VChipGroup, {
                                              modelValue: timelineProperties.value.cardPadding,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.cardPadding = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(ssrRenderComponent(VChip, {
                                                    size: "small",
                                                    value: "pa-0"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`None`);
                                                      } else {
                                                        return [
                                                          createTextVNode("None")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VChip, {
                                                    size: "small",
                                                    value: "pa-2"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`xs`);
                                                      } else {
                                                        return [
                                                          createTextVNode("xs")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VChip, {
                                                    size: "small",
                                                    value: "pa-4"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`sm`);
                                                      } else {
                                                        return [
                                                          createTextVNode("sm")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VChip, {
                                                    size: "small",
                                                    value: "pa-6"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`md`);
                                                      } else {
                                                        return [
                                                          createTextVNode("md")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VChip, {
                                                    size: "small",
                                                    value: "pa-8"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`lg`);
                                                      } else {
                                                        return [
                                                          createTextVNode("lg")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VChip, {
                                                    size: "small",
                                                    value: "pa-10"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`xl`);
                                                      } else {
                                                        return [
                                                          createTextVNode("xl")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                } else {
                                                  return [
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "pa-0"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("None")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "pa-2"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("xs")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "pa-4"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("sm")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "pa-6"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("md")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "pa-8"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("lg")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "pa-10"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("xl")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div><div class="mb-4" data-v-1424ad6c${_scopeId6}><label class="text-subtitle-2 mb-1" data-v-1424ad6c${_scopeId6}>Card Border Radius</label>`);
                                            _push7(ssrRenderComponent(VChipGroup, {
                                              modelValue: timelineProperties.value.cardBorderRadius,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.cardBorderRadius = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(ssrRenderComponent(VChip, {
                                                    size: "small",
                                                    value: "rounded-0"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`None`);
                                                      } else {
                                                        return [
                                                          createTextVNode("None")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VChip, {
                                                    size: "small",
                                                    value: "rounded"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`Default`);
                                                      } else {
                                                        return [
                                                          createTextVNode("Default")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VChip, {
                                                    size: "small",
                                                    value: "rounded-lg"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`Large`);
                                                      } else {
                                                        return [
                                                          createTextVNode("Large")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VChip, {
                                                    size: "small",
                                                    value: "rounded-xl"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`X-Large`);
                                                      } else {
                                                        return [
                                                          createTextVNode("X-Large")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                  _push8(ssrRenderComponent(VChip, {
                                                    size: "small",
                                                    value: "rounded-pill"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`Pill`);
                                                      } else {
                                                        return [
                                                          createTextVNode("Pill")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                } else {
                                                  return [
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "rounded-0"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("None")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "rounded"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Default")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "rounded-lg"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Large")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "rounded-xl"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("X-Large")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "rounded-pill"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Pill")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`</div>`);
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: timelineProperties.value.cardHoverEffect,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.cardHoverEffect = $event,
                                              color: "primary",
                                              label: "Hover effect",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: timelineProperties.value.separateHeader,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.separateHeader = $event,
                                              color: "primary",
                                              label: "Separate header",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(`</div>`);
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-card-outline")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Card Style")
                                              ]),
                                              createVNode(VSwitch, {
                                                modelValue: timelineProperties.value.showCards,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.showCards = $event,
                                                color: "primary",
                                                label: "Show cards",
                                                "hide-details": "",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              timelineProperties.value.showCards ? (openBlock(), createBlock("div", { key: 0 }, [
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Variant"),
                                                  createVNode(VChipGroup, {
                                                    modelValue: cardVariantIndex.value,
                                                    "onUpdate:modelValue": ($event) => cardVariantIndex.value = $event,
                                                    mandatory: "",
                                                    "selected-class": "bg-primary text-white"
                                                  }, {
                                                    default: withCtx(() => [
                                                      (openBlock(), createBlock(Fragment, null, renderList(cardVariants, (variant, index) => {
                                                        return createVNode(VChip, {
                                                          key: variant,
                                                          size: "small",
                                                          value: index
                                                        }, {
                                                          default: withCtx(() => [
                                                            createTextVNode(toDisplayString(variant), 1)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["value"]);
                                                      }), 64))
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Card Elevation"),
                                                  createVNode("div", { class: "d-flex align-center" }, [
                                                    createVNode(VIcon, {
                                                      size: "small",
                                                      color: "primary"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-card-outline")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VSlider, {
                                                      modelValue: timelineProperties.value.cardElevation,
                                                      "onUpdate:modelValue": ($event) => timelineProperties.value.cardElevation = $event,
                                                      min: "0",
                                                      max: "24",
                                                      step: "1",
                                                      "thumb-label": "",
                                                      class: "mx-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode(VIcon, {
                                                      size: "small",
                                                      color: "primary"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-layers-triple")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ])
                                                ]),
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Background Color"),
                                                  createVNode(VBtnToggle, {
                                                    modelValue: timelineProperties.value.cardColor,
                                                    "onUpdate:modelValue": ($event) => timelineProperties.value.cardColor = $event,
                                                    mandatory: "",
                                                    density: "comfortable",
                                                    "selected-class": "border-primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                        return createVNode(VBtn, {
                                                          key: color,
                                                          value: color,
                                                          color: color !== "default" ? color : void 0,
                                                          size: "small",
                                                          variant: "tonal",
                                                          width: "40",
                                                          height: "40",
                                                          class: "ma-1"
                                                        }, {
                                                          default: withCtx(() => [
                                                            color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                              default: withCtx(() => [
                                                                createTextVNode("mdi-palette-outline")
                                                              ]),
                                                              _: 1
                                                            })) : createCommentVNode("", true)
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["value", "color"]);
                                                      }), 64))
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1" }, "Title Style"),
                                                  createVNode(VChipGroup, {
                                                    modelValue: timelineProperties.value.titleStyle,
                                                    "onUpdate:modelValue": ($event) => timelineProperties.value.titleStyle = $event,
                                                    mandatory: "",
                                                    "selected-class": "bg-primary text-white"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createVNode(VChip, {
                                                        size: "small",
                                                        value: "regular"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("Regular")
                                                        ]),
                                                        _: 1
                                                      }),
                                                      createVNode(VChip, {
                                                        size: "small",
                                                        value: "bold"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("Bold")
                                                        ]),
                                                        _: 1
                                                      }),
                                                      createVNode(VChip, {
                                                        size: "small",
                                                        value: "italic"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("Italic")
                                                        ]),
                                                        _: 1
                                                      }),
                                                      createVNode(VChip, {
                                                        size: "small",
                                                        value: "uppercase"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("uppercase")
                                                        ]),
                                                        _: 1
                                                      })
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Padding"),
                                                  createVNode(VChipGroup, {
                                                    modelValue: timelineProperties.value.cardPadding,
                                                    "onUpdate:modelValue": ($event) => timelineProperties.value.cardPadding = $event,
                                                    mandatory: "",
                                                    "selected-class": "bg-primary text-white"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createVNode(VChip, {
                                                        size: "small",
                                                        value: "pa-0"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("None")
                                                        ]),
                                                        _: 1
                                                      }),
                                                      createVNode(VChip, {
                                                        size: "small",
                                                        value: "pa-2"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("xs")
                                                        ]),
                                                        _: 1
                                                      }),
                                                      createVNode(VChip, {
                                                        size: "small",
                                                        value: "pa-4"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("sm")
                                                        ]),
                                                        _: 1
                                                      }),
                                                      createVNode(VChip, {
                                                        size: "small",
                                                        value: "pa-6"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("md")
                                                        ]),
                                                        _: 1
                                                      }),
                                                      createVNode(VChip, {
                                                        size: "small",
                                                        value: "pa-8"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("lg")
                                                        ]),
                                                        _: 1
                                                      }),
                                                      createVNode(VChip, {
                                                        size: "small",
                                                        value: "pa-10"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("xl")
                                                        ]),
                                                        _: 1
                                                      })
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                createVNode("div", { class: "mb-4" }, [
                                                  createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Border Radius"),
                                                  createVNode(VChipGroup, {
                                                    modelValue: timelineProperties.value.cardBorderRadius,
                                                    "onUpdate:modelValue": ($event) => timelineProperties.value.cardBorderRadius = $event,
                                                    mandatory: "",
                                                    "selected-class": "bg-primary text-white"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createVNode(VChip, {
                                                        size: "small",
                                                        value: "rounded-0"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("None")
                                                        ]),
                                                        _: 1
                                                      }),
                                                      createVNode(VChip, {
                                                        size: "small",
                                                        value: "rounded"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("Default")
                                                        ]),
                                                        _: 1
                                                      }),
                                                      createVNode(VChip, {
                                                        size: "small",
                                                        value: "rounded-lg"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("Large")
                                                        ]),
                                                        _: 1
                                                      }),
                                                      createVNode(VChip, {
                                                        size: "small",
                                                        value: "rounded-xl"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("X-Large")
                                                        ]),
                                                        _: 1
                                                      }),
                                                      createVNode(VChip, {
                                                        size: "small",
                                                        value: "rounded-pill"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("Pill")
                                                        ]),
                                                        _: 1
                                                      })
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                createVNode(VSwitch, {
                                                  modelValue: timelineProperties.value.cardHoverEffect,
                                                  "onUpdate:modelValue": ($event) => timelineProperties.value.cardHoverEffect = $event,
                                                  color: "primary",
                                                  label: "Hover effect",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: timelineProperties.value.separateHeader,
                                                  "onUpdate:modelValue": ($event) => timelineProperties.value.separateHeader = $event,
                                                  color: "primary",
                                                  label: "Separate header",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                              ])) : createCommentVNode("", true)
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "actions" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-1424ad6c${_scopeId6}><div class="section-title d-flex align-center mb-3" data-v-1424ad6c${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-animation-outline`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-animation-outline")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-1424ad6c${_scopeId6}>Animations</span></div>`);
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: timelineProperties.value.animated,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.animated = $event,
                                            color: "primary",
                                            label: "Enable animations",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          if (timelineProperties.value.animated) {
                                            _push7(`<div data-v-1424ad6c${_scopeId6}>`);
                                            _push7(ssrRenderComponent(VSelect, {
                                              modelValue: timelineProperties.value.transition,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.transition = $event,
                                              items: transitions,
                                              label: "Transition effect",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSlider, {
                                              modelValue: timelineProperties.value.transitionDuration,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.transitionDuration = $event,
                                              min: "1000",
                                              max: "10000",
                                              step: "100",
                                              label: "Transition duration (ms)",
                                              "thumb-label": "",
                                              class: "mb-4"
                                            }, null, _parent7, _scopeId6));
                                            _push7(`</div>`);
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-animation-outline")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Animations")
                                              ]),
                                              createVNode(VSwitch, {
                                                modelValue: timelineProperties.value.animated,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.animated = $event,
                                                color: "primary",
                                                label: "Enable animations",
                                                "hide-details": "",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              timelineProperties.value.animated ? (openBlock(), createBlock("div", { key: 0 }, [
                                                createVNode(VSelect, {
                                                  modelValue: timelineProperties.value.transition,
                                                  "onUpdate:modelValue": ($event) => timelineProperties.value.transition = $event,
                                                  items: transitions,
                                                  label: "Transition effect",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-4"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSlider, {
                                                  modelValue: timelineProperties.value.transitionDuration,
                                                  "onUpdate:modelValue": ($event) => timelineProperties.value.transitionDuration = $event,
                                                  min: "1000",
                                                  max: "10000",
                                                  step: "100",
                                                  label: "Transition duration (ms)",
                                                  "thumb-label": "",
                                                  class: "mb-4"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                              ])) : createCommentVNode("", true)
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "templates" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-1424ad6c${_scopeId6}><div class="section-title d-flex align-center mb-3 justify-space-between" data-v-1424ad6c${_scopeId6}><div class="d-flex align-center" data-v-1424ad6c${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-file-document-outline`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-file-document-outline")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-1424ad6c${_scopeId6}>Timeline Templates</span></div>`);
                                          _push7(ssrRenderComponent(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props }, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VBtn, mergeProps({
                                                  icon: "mdi-help-circle-outline",
                                                  variant: "text",
                                                  size: "small"
                                                }, props), null, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VBtn, mergeProps({
                                                    icon: "mdi-help-circle-outline",
                                                    variant: "text",
                                                    size: "small"
                                                  }, props), null, 16)
                                                ];
                                              }
                                            }),
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<span data-v-1424ad6c${_scopeId7}>Apply pre-defined templates or save your own</span>`);
                                              } else {
                                                return [
                                                  createVNode("span", null, "Apply pre-defined templates or save your own")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div><p class="text-body-2 mb-4" data-v-1424ad6c${_scopeId6}>Choose a pre-defined template to quickly create common timeline layouts. </p>`);
                                          _push7(ssrRenderComponent(VCard, { class: "mb-4" }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VList, null, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("project"),
                                                        "prepend-icon": "mdi-flag",
                                                        title: "Project Timeline",
                                                        subtitle: "Project management milestones"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("routine"),
                                                        "prepend-icon": "mdi-clock-time-eight",
                                                        title: "Daily Routine",
                                                        subtitle: "Daily schedule management"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("history"),
                                                        "prepend-icon": "mdi-history",
                                                        title: "Company History",
                                                        subtitle: "Historical milestones"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("process"),
                                                        "prepend-icon": "mdi-clipboard-flow",
                                                        title: "Workflow Process",
                                                        subtitle: "Step-by-step workflow"
                                                      }, null, _parent9, _scopeId8));
                                                    } else {
                                                      return [
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("project"),
                                                          "prepend-icon": "mdi-flag",
                                                          title: "Project Timeline",
                                                          subtitle: "Project management milestones"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("routine"),
                                                          "prepend-icon": "mdi-clock-time-eight",
                                                          title: "Daily Routine",
                                                          subtitle: "Daily schedule management"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("history"),
                                                          "prepend-icon": "mdi-history",
                                                          title: "Company History",
                                                          subtitle: "Historical milestones"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("process"),
                                                          "prepend-icon": "mdi-clipboard-flow",
                                                          title: "Workflow Process",
                                                          subtitle: "Step-by-step workflow"
                                                        }, null, 8, ["onClick"])
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VList, null, {
                                                    default: withCtx(() => [
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("project"),
                                                        "prepend-icon": "mdi-flag",
                                                        title: "Project Timeline",
                                                        subtitle: "Project management milestones"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("routine"),
                                                        "prepend-icon": "mdi-clock-time-eight",
                                                        title: "Daily Routine",
                                                        subtitle: "Daily schedule management"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("history"),
                                                        "prepend-icon": "mdi-history",
                                                        title: "Company History",
                                                        subtitle: "Historical milestones"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("process"),
                                                        "prepend-icon": "mdi-clipboard-flow",
                                                        title: "Workflow Process",
                                                        subtitle: "Step-by-step workflow"
                                                      }, null, 8, ["onClick"])
                                                    ]),
                                                    _: 1
                                                  })
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VAlert, {
                                            type: "info",
                                            variant: "tonal",
                                            class: "mb-4"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(` Applying a template will replace your current timeline settings. `);
                                              } else {
                                                return [
                                                  createTextVNode(" Applying a template will replace your current timeline settings. ")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VDivider, { class: "my-4" }, null, _parent7, _scopeId6));
                                          _push7(`<div class="section-title d-flex align-center mb-3" data-v-1424ad6c${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-content-save`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-content-save")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-1424ad6c${_scopeId6}>Save Current Timeline</span></div>`);
                                          _push7(ssrRenderComponent(VTextField, {
                                            modelValue: customTemplateName.value,
                                            "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                            label: "Template Name",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "prepend-inner-icon": "mdi-tag",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VBtn, {
                                            color: "primary",
                                            "prepend-icon": "mdi-content-save",
                                            block: "",
                                            onClick: saveCurrentTemplate
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(` Save Current Timeline as Template `);
                                              } else {
                                                return [
                                                  createTextVNode(" Save Current Timeline as Template ")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                                createVNode("div", { class: "d-flex align-center" }, [
                                                  createVNode(VIcon, {
                                                    color: "primary",
                                                    class: "mr-2"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-file-document-outline")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode("span", { class: "text-h6" }, "Timeline Templates")
                                                ]),
                                                createVNode(VTooltip, { location: "bottom" }, {
                                                  activator: withCtx(({ props }) => [
                                                    createVNode(VBtn, mergeProps({
                                                      icon: "mdi-help-circle-outline",
                                                      variant: "text",
                                                      size: "small"
                                                    }, props), null, 16)
                                                  ]),
                                                  default: withCtx(() => [
                                                    createVNode("span", null, "Apply pre-defined templates or save your own")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common timeline layouts. "),
                                              createVNode(VCard, { class: "mb-4" }, {
                                                default: withCtx(() => [
                                                  createVNode(VList, null, {
                                                    default: withCtx(() => [
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("project"),
                                                        "prepend-icon": "mdi-flag",
                                                        title: "Project Timeline",
                                                        subtitle: "Project management milestones"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("routine"),
                                                        "prepend-icon": "mdi-clock-time-eight",
                                                        title: "Daily Routine",
                                                        subtitle: "Daily schedule management"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("history"),
                                                        "prepend-icon": "mdi-history",
                                                        title: "Company History",
                                                        subtitle: "Historical milestones"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("process"),
                                                        "prepend-icon": "mdi-clipboard-flow",
                                                        title: "Workflow Process",
                                                        subtitle: "Step-by-step workflow"
                                                      }, null, 8, ["onClick"])
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VAlert, {
                                                type: "info",
                                                variant: "tonal",
                                                class: "mb-4"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Applying a template will replace your current timeline settings. ")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VDivider, { class: "my-4" }),
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-content-save")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Save Current Timeline")
                                              ]),
                                              createVNode(VTextField, {
                                                modelValue: customTemplateName.value,
                                                "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                                label: "Template Name",
                                                variant: "outlined",
                                                density: "comfortable",
                                                "prepend-inner-icon": "mdi-tag",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VBtn, {
                                                color: "primary",
                                                "prepend-icon": "mdi-content-save",
                                                block: "",
                                                onClick: saveCurrentTemplate
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Save Current Timeline as Template ")
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                  } else {
                                    return [
                                      createVNode(VWindowItem, { value: "content" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-timeline")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Timeline Items")
                                            ]),
                                            createVNode(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx(() => [
                                                (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value, (item, index) => {
                                                  return openBlock(), createBlock("div", {
                                                    key: index,
                                                    class: "mb-4"
                                                  }, [
                                                    createVNode("div", { class: "d-flex align-center justify-space-between mb-2" }, [
                                                      createVNode("span", { class: "text-subtitle-2" }, "Item " + toDisplayString(index + 1), 1),
                                                      createVNode(VBtn, {
                                                        icon: "mdi-delete",
                                                        color: "error",
                                                        variant: "text",
                                                        density: "compact",
                                                        onClick: ($event) => removeTimelineItem(index)
                                                      }, null, 8, ["onClick"])
                                                    ]),
                                                    createVNode(VTextField, {
                                                      modelValue: item.title,
                                                      "onUpdate:modelValue": ($event) => item.title = $event,
                                                      label: "Title",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-format-title",
                                                      class: "mb-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode(VTextarea, {
                                                      modelValue: item.text,
                                                      "onUpdate:modelValue": ($event) => item.text = $event,
                                                      label: "Content",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "auto-grow": "",
                                                      rows: "2",
                                                      "row-height": "20",
                                                      "prepend-inner-icon": "mdi-text",
                                                      class: "mb-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode("div", { class: "d-flex gap-2" }, [
                                                      createVNode(VSelect, {
                                                        modelValue: item.icon,
                                                        "onUpdate:modelValue": ($event) => item.icon = $event,
                                                        items: timelineIcons.value,
                                                        label: "Icon",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-pencil",
                                                        class: "mb-2",
                                                        style: { "flex": "1" }
                                                      }, {
                                                        item: withCtx(({ item: item2, props }) => [
                                                          createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                            prepend: withCtx(() => [
                                                              createVNode(VIcon, {
                                                                icon: item2.raw
                                                              }, null, 8, ["icon"])
                                                            ]),
                                                            _: 2
                                                          }, 1040)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                      createVNode(VSelect, {
                                                        modelValue: item.color,
                                                        "onUpdate:modelValue": ($event) => item.color = $event,
                                                        items: colors,
                                                        label: "Dot Color",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        "prepend-inner-icon": "mdi-palette",
                                                        class: "mb-2",
                                                        style: { "flex": "1" }
                                                      }, {
                                                        item: withCtx(({ item: item2, props }) => [
                                                          createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                            prepend: withCtx(() => [
                                                              createVNode(VIcon, {
                                                                color: item2.raw !== "default" ? item2.raw : void 0
                                                              }, {
                                                                default: withCtx(() => [
                                                                  createTextVNode("mdi-circle")
                                                                ]),
                                                                _: 2
                                                              }, 1032, ["color"])
                                                            ]),
                                                            _: 2
                                                          }, 1040)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["modelValue", "onUpdate:modelValue"])
                                                    ]),
                                                    createVNode(VTextField, {
                                                      modelValue: item.time,
                                                      "onUpdate:modelValue": ($event) => item.time = $event,
                                                      label: "Time/Date",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-clock-outline",
                                                      class: "mb-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode(VSwitch, {
                                                      modelValue: item.hideOpposite,
                                                      "onUpdate:modelValue": ($event) => item.hideOpposite = $event,
                                                      color: "primary",
                                                      label: "Hide opposite content",
                                                      "hide-details": "",
                                                      class: "mb-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                  ]);
                                                }), 128)),
                                                createVNode(VBtn, {
                                                  color: "primary",
                                                  "prepend-icon": "mdi-plus",
                                                  variant: "tonal",
                                                  block: "",
                                                  onClick: addTimelineItem
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(" Add timeline item ")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "style" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-palette")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Appearance")
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-2 d-block" }, "Timeline Color"),
                                              createVNode(VBtnToggle, {
                                                modelValue: timelineProperties.value.lineColor,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.lineColor = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                "selected-class": "border-primary"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                    return createVNode(VBtn, {
                                                      key: color,
                                                      value: color,
                                                      color: color !== "default" ? color : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx(() => [
                                                        color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Line Width"),
                                              createVNode("div", { class: "d-flex align-center" }, [
                                                createVNode(VIcon, {
                                                  size: "small",
                                                  color: "primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-minus")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VSlider, {
                                                  modelValue: timelineProperties.value.lineWidth,
                                                  "onUpdate:modelValue": ($event) => timelineProperties.value.lineWidth = $event,
                                                  min: "1",
                                                  max: "5",
                                                  step: "1",
                                                  "thumb-label": "",
                                                  class: "mx-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VIcon, {
                                                  size: "small",
                                                  color: "primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-plus")
                                                  ]),
                                                  _: 1
                                                })
                                              ])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Dot Size"),
                                              createVNode("div", { class: "d-flex align-center" }, [
                                                createVNode(VIcon, {
                                                  size: "small",
                                                  color: "primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-circle-small")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VSlider, {
                                                  modelValue: timelineProperties.value.dotSize,
                                                  "onUpdate:modelValue": ($event) => timelineProperties.value.dotSize = $event,
                                                  min: "10",
                                                  max: "48",
                                                  step: "2",
                                                  "thumb-label": "",
                                                  class: "mx-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VIcon, {
                                                  size: "small",
                                                  color: "primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-circle-large")
                                                  ]),
                                                  _: 1
                                                })
                                              ])
                                            ]),
                                            createVNode(VDivider, { class: "my-4" }),
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-monitor-dashboard")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Layout & Position")
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-2" }, "Alignment"),
                                              createVNode(VBtnToggle, {
                                                modelValue: timelineProperties.value.align,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.align = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                class: "mb-3"
                                              }, {
                                                default: withCtx(() => [
                                                  createVNode(VBtn, {
                                                    value: "start",
                                                    "prepend-icon": "mdi-format-align-left"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Left")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VBtn, {
                                                    value: "center",
                                                    "prepend-icon": "mdi-format-align-center"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Center")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VBtn, {
                                                    value: "end",
                                                    "prepend-icon": "mdi-format-align-right"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Right")
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-2" }, "Direction"),
                                              createVNode(VBtnToggle, {
                                                modelValue: timelineProperties.value.direction,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.direction = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                class: "mb-3"
                                              }, {
                                                default: withCtx(() => [
                                                  createVNode(VBtn, {
                                                    value: "vertical",
                                                    "prepend-icon": "mdi-arrow-up-down"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Vertical")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VBtn, {
                                                    value: "horizontal",
                                                    "prepend-icon": "mdi-arrow-left-right"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Horizontal")
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode(VSwitch, {
                                              modelValue: timelineProperties.value.reverse,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.reverse = $event,
                                              color: "primary",
                                              label: "Reverse order",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: timelineProperties.value.dense,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.dense = $event,
                                              color: "primary",
                                              label: "Dense",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: timelineProperties.value.rounded,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.rounded = $event,
                                              color: "primary",
                                              label: "Rounded dots",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "cards" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-card-outline")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Card Style")
                                            ]),
                                            createVNode(VSwitch, {
                                              modelValue: timelineProperties.value.showCards,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.showCards = $event,
                                              color: "primary",
                                              label: "Show cards",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            timelineProperties.value.showCards ? (openBlock(), createBlock("div", { key: 0 }, [
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Variant"),
                                                createVNode(VChipGroup, {
                                                  modelValue: cardVariantIndex.value,
                                                  "onUpdate:modelValue": ($event) => cardVariantIndex.value = $event,
                                                  mandatory: "",
                                                  "selected-class": "bg-primary text-white"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(cardVariants, (variant, index) => {
                                                      return createVNode(VChip, {
                                                        key: variant,
                                                        size: "small",
                                                        value: index
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode(toDisplayString(variant), 1)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Card Elevation"),
                                                createVNode("div", { class: "d-flex align-center" }, [
                                                  createVNode(VIcon, {
                                                    size: "small",
                                                    color: "primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-card-outline")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VSlider, {
                                                    modelValue: timelineProperties.value.cardElevation,
                                                    "onUpdate:modelValue": ($event) => timelineProperties.value.cardElevation = $event,
                                                    min: "0",
                                                    max: "24",
                                                    step: "1",
                                                    "thumb-label": "",
                                                    class: "mx-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VIcon, {
                                                    size: "small",
                                                    color: "primary"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-layers-triple")
                                                    ]),
                                                    _: 1
                                                  })
                                                ])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Background Color"),
                                                createVNode(VBtnToggle, {
                                                  modelValue: timelineProperties.value.cardColor,
                                                  "onUpdate:modelValue": ($event) => timelineProperties.value.cardColor = $event,
                                                  mandatory: "",
                                                  density: "comfortable",
                                                  "selected-class": "border-primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                      return createVNode(VBtn, {
                                                        key: color,
                                                        value: color,
                                                        color: color !== "default" ? color : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: "ma-1"
                                                      }, {
                                                        default: withCtx(() => [
                                                          color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Title Style"),
                                                createVNode(VChipGroup, {
                                                  modelValue: timelineProperties.value.titleStyle,
                                                  "onUpdate:modelValue": ($event) => timelineProperties.value.titleStyle = $event,
                                                  mandatory: "",
                                                  "selected-class": "bg-primary text-white"
                                                }, {
                                                  default: withCtx(() => [
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "regular"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Regular")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "bold"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Bold")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "italic"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Italic")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "uppercase"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("uppercase")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Padding"),
                                                createVNode(VChipGroup, {
                                                  modelValue: timelineProperties.value.cardPadding,
                                                  "onUpdate:modelValue": ($event) => timelineProperties.value.cardPadding = $event,
                                                  mandatory: "",
                                                  "selected-class": "bg-primary text-white"
                                                }, {
                                                  default: withCtx(() => [
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "pa-0"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("None")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "pa-2"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("xs")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "pa-4"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("sm")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "pa-6"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("md")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "pa-8"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("lg")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "pa-10"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("xl")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Border Radius"),
                                                createVNode(VChipGroup, {
                                                  modelValue: timelineProperties.value.cardBorderRadius,
                                                  "onUpdate:modelValue": ($event) => timelineProperties.value.cardBorderRadius = $event,
                                                  mandatory: "",
                                                  "selected-class": "bg-primary text-white"
                                                }, {
                                                  default: withCtx(() => [
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "rounded-0"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("None")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "rounded"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Default")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "rounded-lg"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Large")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "rounded-xl"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("X-Large")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VChip, {
                                                      size: "small",
                                                      value: "rounded-pill"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("Pill")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode(VSwitch, {
                                                modelValue: timelineProperties.value.cardHoverEffect,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.cardHoverEffect = $event,
                                                color: "primary",
                                                label: "Hover effect",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: timelineProperties.value.separateHeader,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.separateHeader = $event,
                                                color: "primary",
                                                label: "Separate header",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])) : createCommentVNode("", true)
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "actions" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-animation-outline")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Animations")
                                            ]),
                                            createVNode(VSwitch, {
                                              modelValue: timelineProperties.value.animated,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.animated = $event,
                                              color: "primary",
                                              label: "Enable animations",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            timelineProperties.value.animated ? (openBlock(), createBlock("div", { key: 0 }, [
                                              createVNode(VSelect, {
                                                modelValue: timelineProperties.value.transition,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.transition = $event,
                                                items: transitions,
                                                label: "Transition effect",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSlider, {
                                                modelValue: timelineProperties.value.transitionDuration,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.transitionDuration = $event,
                                                min: "1000",
                                                max: "10000",
                                                step: "100",
                                                label: "Transition duration (ms)",
                                                "thumb-label": "",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])) : createCommentVNode("", true)
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "templates" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                              createVNode("div", { class: "d-flex align-center" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-file-document-outline")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Timeline Templates")
                                              ]),
                                              createVNode(VTooltip, { location: "bottom" }, {
                                                activator: withCtx(({ props }) => [
                                                  createVNode(VBtn, mergeProps({
                                                    icon: "mdi-help-circle-outline",
                                                    variant: "text",
                                                    size: "small"
                                                  }, props), null, 16)
                                                ]),
                                                default: withCtx(() => [
                                                  createVNode("span", null, "Apply pre-defined templates or save your own")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common timeline layouts. "),
                                            createVNode(VCard, { class: "mb-4" }, {
                                              default: withCtx(() => [
                                                createVNode(VList, null, {
                                                  default: withCtx(() => [
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("project"),
                                                      "prepend-icon": "mdi-flag",
                                                      title: "Project Timeline",
                                                      subtitle: "Project management milestones"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("routine"),
                                                      "prepend-icon": "mdi-clock-time-eight",
                                                      title: "Daily Routine",
                                                      subtitle: "Daily schedule management"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("history"),
                                                      "prepend-icon": "mdi-history",
                                                      title: "Company History",
                                                      subtitle: "Historical milestones"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("process"),
                                                      "prepend-icon": "mdi-clipboard-flow",
                                                      title: "Workflow Process",
                                                      subtitle: "Step-by-step workflow"
                                                    }, null, 8, ["onClick"])
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VAlert, {
                                              type: "info",
                                              variant: "tonal",
                                              class: "mb-4"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(" Applying a template will replace your current timeline settings. ")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VDivider, { class: "my-4" }),
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-content-save")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Save Current Timeline")
                                            ]),
                                            createVNode(VTextField, {
                                              modelValue: customTemplateName.value,
                                              "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                              label: "Template Name",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "prepend-inner-icon": "mdi-tag",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VBtn, {
                                              color: "primary",
                                              "prepend-icon": "mdi-content-save",
                                              block: "",
                                              onClick: saveCurrentTemplate
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(" Save Current Timeline as Template ")
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        _: 1
                                      })
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VWindow, {
                                  modelValue: tab.value,
                                  "onUpdate:modelValue": ($event) => tab.value = $event,
                                  class: "fill-height"
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VWindowItem, { value: "content" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-timeline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Timeline Items")
                                          ]),
                                          createVNode(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx(() => [
                                              (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value, (item, index) => {
                                                return openBlock(), createBlock("div", {
                                                  key: index,
                                                  class: "mb-4"
                                                }, [
                                                  createVNode("div", { class: "d-flex align-center justify-space-between mb-2" }, [
                                                    createVNode("span", { class: "text-subtitle-2" }, "Item " + toDisplayString(index + 1), 1),
                                                    createVNode(VBtn, {
                                                      icon: "mdi-delete",
                                                      color: "error",
                                                      variant: "text",
                                                      density: "compact",
                                                      onClick: ($event) => removeTimelineItem(index)
                                                    }, null, 8, ["onClick"])
                                                  ]),
                                                  createVNode(VTextField, {
                                                    modelValue: item.title,
                                                    "onUpdate:modelValue": ($event) => item.title = $event,
                                                    label: "Title",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-format-title",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VTextarea, {
                                                    modelValue: item.text,
                                                    "onUpdate:modelValue": ($event) => item.text = $event,
                                                    label: "Content",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "auto-grow": "",
                                                    rows: "2",
                                                    "row-height": "20",
                                                    "prepend-inner-icon": "mdi-text",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode("div", { class: "d-flex gap-2" }, [
                                                    createVNode(VSelect, {
                                                      modelValue: item.icon,
                                                      "onUpdate:modelValue": ($event) => item.icon = $event,
                                                      items: timelineIcons.value,
                                                      label: "Icon",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-pencil",
                                                      class: "mb-2",
                                                      style: { "flex": "1" }
                                                    }, {
                                                      item: withCtx(({ item: item2, props }) => [
                                                        createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                          prepend: withCtx(() => [
                                                            createVNode(VIcon, {
                                                              icon: item2.raw
                                                            }, null, 8, ["icon"])
                                                          ]),
                                                          _: 2
                                                        }, 1040)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                    createVNode(VSelect, {
                                                      modelValue: item.color,
                                                      "onUpdate:modelValue": ($event) => item.color = $event,
                                                      items: colors,
                                                      label: "Dot Color",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      "prepend-inner-icon": "mdi-palette",
                                                      class: "mb-2",
                                                      style: { "flex": "1" }
                                                    }, {
                                                      item: withCtx(({ item: item2, props }) => [
                                                        createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                          prepend: withCtx(() => [
                                                            createVNode(VIcon, {
                                                              color: item2.raw !== "default" ? item2.raw : void 0
                                                            }, {
                                                              default: withCtx(() => [
                                                                createTextVNode("mdi-circle")
                                                              ]),
                                                              _: 2
                                                            }, 1032, ["color"])
                                                          ]),
                                                          _: 2
                                                        }, 1040)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["modelValue", "onUpdate:modelValue"])
                                                  ]),
                                                  createVNode(VTextField, {
                                                    modelValue: item.time,
                                                    "onUpdate:modelValue": ($event) => item.time = $event,
                                                    label: "Time/Date",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-clock-outline",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VSwitch, {
                                                    modelValue: item.hideOpposite,
                                                    "onUpdate:modelValue": ($event) => item.hideOpposite = $event,
                                                    color: "primary",
                                                    label: "Hide opposite content",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                ]);
                                              }), 128)),
                                              createVNode(VBtn, {
                                                color: "primary",
                                                "prepend-icon": "mdi-plus",
                                                variant: "tonal",
                                                block: "",
                                                onClick: addTimelineItem
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Add timeline item ")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          })
                                        ])
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "style" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-palette")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Appearance")
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-2 d-block" }, "Timeline Color"),
                                            createVNode(VBtnToggle, {
                                              modelValue: timelineProperties.value.lineColor,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.lineColor = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              "selected-class": "border-primary"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                  return createVNode(VBtn, {
                                                    key: color,
                                                    value: color,
                                                    color: color !== "default" ? color : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: "ma-1"
                                                  }, {
                                                    default: withCtx(() => [
                                                      color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("mdi-palette-outline")
                                                        ]),
                                                        _: 1
                                                      })) : createCommentVNode("", true)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value", "color"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Line Width"),
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-minus")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: timelineProperties.value.lineWidth,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.lineWidth = $event,
                                                min: "1",
                                                max: "5",
                                                step: "1",
                                                "thumb-label": "",
                                                class: "mx-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-plus")
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Dot Size"),
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-circle-small")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: timelineProperties.value.dotSize,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.dotSize = $event,
                                                min: "10",
                                                max: "48",
                                                step: "2",
                                                "thumb-label": "",
                                                class: "mx-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-circle-large")
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ]),
                                          createVNode(VDivider, { class: "my-4" }),
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-monitor-dashboard")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Layout & Position")
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-2" }, "Alignment"),
                                            createVNode(VBtnToggle, {
                                              modelValue: timelineProperties.value.align,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.align = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              class: "mb-3"
                                            }, {
                                              default: withCtx(() => [
                                                createVNode(VBtn, {
                                                  value: "start",
                                                  "prepend-icon": "mdi-format-align-left"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Left")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VBtn, {
                                                  value: "center",
                                                  "prepend-icon": "mdi-format-align-center"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Center")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VBtn, {
                                                  value: "end",
                                                  "prepend-icon": "mdi-format-align-right"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Right")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-2" }, "Direction"),
                                            createVNode(VBtnToggle, {
                                              modelValue: timelineProperties.value.direction,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.direction = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              class: "mb-3"
                                            }, {
                                              default: withCtx(() => [
                                                createVNode(VBtn, {
                                                  value: "vertical",
                                                  "prepend-icon": "mdi-arrow-up-down"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Vertical")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VBtn, {
                                                  value: "horizontal",
                                                  "prepend-icon": "mdi-arrow-left-right"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Horizontal")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: timelineProperties.value.reverse,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.reverse = $event,
                                            color: "primary",
                                            label: "Reverse order",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: timelineProperties.value.dense,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.dense = $event,
                                            color: "primary",
                                            label: "Dense",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: timelineProperties.value.rounded,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.rounded = $event,
                                            color: "primary",
                                            label: "Rounded dots",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ])
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "cards" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-card-outline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Card Style")
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: timelineProperties.value.showCards,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.showCards = $event,
                                            color: "primary",
                                            label: "Show cards",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          timelineProperties.value.showCards ? (openBlock(), createBlock("div", { key: 0 }, [
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Variant"),
                                              createVNode(VChipGroup, {
                                                modelValue: cardVariantIndex.value,
                                                "onUpdate:modelValue": ($event) => cardVariantIndex.value = $event,
                                                mandatory: "",
                                                "selected-class": "bg-primary text-white"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(cardVariants, (variant, index) => {
                                                    return createVNode(VChip, {
                                                      key: variant,
                                                      size: "small",
                                                      value: index
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(toDisplayString(variant), 1)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Card Elevation"),
                                              createVNode("div", { class: "d-flex align-center" }, [
                                                createVNode(VIcon, {
                                                  size: "small",
                                                  color: "primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-card-outline")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VSlider, {
                                                  modelValue: timelineProperties.value.cardElevation,
                                                  "onUpdate:modelValue": ($event) => timelineProperties.value.cardElevation = $event,
                                                  min: "0",
                                                  max: "24",
                                                  step: "1",
                                                  "thumb-label": "",
                                                  class: "mx-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VIcon, {
                                                  size: "small",
                                                  color: "primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-layers-triple")
                                                  ]),
                                                  _: 1
                                                })
                                              ])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Background Color"),
                                              createVNode(VBtnToggle, {
                                                modelValue: timelineProperties.value.cardColor,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.cardColor = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                "selected-class": "border-primary"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                    return createVNode(VBtn, {
                                                      key: color,
                                                      value: color,
                                                      color: color !== "default" ? color : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: "ma-1"
                                                    }, {
                                                      default: withCtx(() => [
                                                        color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Title Style"),
                                              createVNode(VChipGroup, {
                                                modelValue: timelineProperties.value.titleStyle,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.titleStyle = $event,
                                                mandatory: "",
                                                "selected-class": "bg-primary text-white"
                                              }, {
                                                default: withCtx(() => [
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "regular"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Regular")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "bold"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Bold")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "italic"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Italic")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "uppercase"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("uppercase")
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Padding"),
                                              createVNode(VChipGroup, {
                                                modelValue: timelineProperties.value.cardPadding,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.cardPadding = $event,
                                                mandatory: "",
                                                "selected-class": "bg-primary text-white"
                                              }, {
                                                default: withCtx(() => [
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "pa-0"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("None")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "pa-2"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("xs")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "pa-4"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("sm")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "pa-6"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("md")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "pa-8"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("lg")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "pa-10"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("xl")
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Border Radius"),
                                              createVNode(VChipGroup, {
                                                modelValue: timelineProperties.value.cardBorderRadius,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.cardBorderRadius = $event,
                                                mandatory: "",
                                                "selected-class": "bg-primary text-white"
                                              }, {
                                                default: withCtx(() => [
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "rounded-0"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("None")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "rounded"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Default")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "rounded-lg"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Large")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "rounded-xl"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("X-Large")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VChip, {
                                                    size: "small",
                                                    value: "rounded-pill"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("Pill")
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode(VSwitch, {
                                              modelValue: timelineProperties.value.cardHoverEffect,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.cardHoverEffect = $event,
                                              color: "primary",
                                              label: "Hover effect",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: timelineProperties.value.separateHeader,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.separateHeader = $event,
                                              color: "primary",
                                              label: "Separate header",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ])) : createCommentVNode("", true)
                                        ])
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "actions" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-animation-outline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Animations")
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: timelineProperties.value.animated,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.animated = $event,
                                            color: "primary",
                                            label: "Enable animations",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          timelineProperties.value.animated ? (openBlock(), createBlock("div", { key: 0 }, [
                                            createVNode(VSelect, {
                                              modelValue: timelineProperties.value.transition,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.transition = $event,
                                              items: transitions,
                                              label: "Transition effect",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSlider, {
                                              modelValue: timelineProperties.value.transitionDuration,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.transitionDuration = $event,
                                              min: "1000",
                                              max: "10000",
                                              step: "100",
                                              label: "Transition duration (ms)",
                                              "thumb-label": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ])) : createCommentVNode("", true)
                                        ])
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "templates" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-file-document-outline")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Timeline Templates")
                                            ]),
                                            createVNode(VTooltip, { location: "bottom" }, {
                                              activator: withCtx(({ props }) => [
                                                createVNode(VBtn, mergeProps({
                                                  icon: "mdi-help-circle-outline",
                                                  variant: "text",
                                                  size: "small"
                                                }, props), null, 16)
                                              ]),
                                              default: withCtx(() => [
                                                createVNode("span", null, "Apply pre-defined templates or save your own")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common timeline layouts. "),
                                          createVNode(VCard, { class: "mb-4" }, {
                                            default: withCtx(() => [
                                              createVNode(VList, null, {
                                                default: withCtx(() => [
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("project"),
                                                    "prepend-icon": "mdi-flag",
                                                    title: "Project Timeline",
                                                    subtitle: "Project management milestones"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("routine"),
                                                    "prepend-icon": "mdi-clock-time-eight",
                                                    title: "Daily Routine",
                                                    subtitle: "Daily schedule management"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("history"),
                                                    "prepend-icon": "mdi-history",
                                                    title: "Company History",
                                                    subtitle: "Historical milestones"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("process"),
                                                    "prepend-icon": "mdi-clipboard-flow",
                                                    title: "Workflow Process",
                                                    subtitle: "Step-by-step workflow"
                                                  }, null, 8, ["onClick"])
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VAlert, {
                                            type: "info",
                                            variant: "tonal",
                                            class: "mb-4"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(" Applying a template will replace your current timeline settings. ")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VDivider, { class: "my-4" }),
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-content-save")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Save Current Timeline")
                                          ]),
                                          createVNode(VTextField, {
                                            modelValue: customTemplateName.value,
                                            "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                            label: "Template Name",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "prepend-inner-icon": "mdi-tag",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VBtn, {
                                            color: "primary",
                                            "prepend-icon": "mdi-content-save",
                                            block: "",
                                            onClick: saveCurrentTemplate
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(" Save Current Timeline as Template ")
                                            ]),
                                            _: 1
                                          })
                                        ])
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }, 8, ["modelValue", "onUpdate:modelValue"])
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                      } else {
                        return [
                          createVNode("div", { class: "px-4 py-2 d-flex align-center" }, [
                            createVNode(VChip, {
                              color: "success",
                              "prepend-icon": "mdi-vuejs",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vue.js")
                              ]),
                              _: 1
                            }),
                            createVNode(VChip, {
                              color: "info",
                              "prepend-icon": "mdi-vuetify",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vuetify")
                              ]),
                              _: 1
                            })
                          ]),
                          createVNode(VTabs, {
                            modelValue: tab.value,
                            "onUpdate:modelValue": ($event) => tab.value = $event,
                            color: "primary",
                            "align-tabs": "center",
                            class: "px-4"
                          }, {
                            default: withCtx(() => [
                              createVNode(VTab, { value: "content" }, {
                                default: withCtx(() => [
                                  createTextVNode("Content")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "style" }, {
                                default: withCtx(() => [
                                  createTextVNode("Style")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "cards" }, {
                                default: withCtx(() => [
                                  createTextVNode("Cards")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "actions" }, {
                                default: withCtx(() => [
                                  createTextVNode("Actions")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "templates" }, {
                                default: withCtx(() => [
                                  createTextVNode("Templates")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue"]),
                          createVNode(VDivider),
                          createVNode(VCardText, {
                            class: "pa-0 fill-height",
                            style: { "overflow-y": "auto" }
                          }, {
                            default: withCtx(() => [
                              createVNode(VWindow, {
                                modelValue: tab.value,
                                "onUpdate:modelValue": ($event) => tab.value = $event,
                                class: "fill-height"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VWindowItem, { value: "content" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-timeline")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Timeline Items")
                                        ]),
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value, (item, index) => {
                                              return openBlock(), createBlock("div", {
                                                key: index,
                                                class: "mb-4"
                                              }, [
                                                createVNode("div", { class: "d-flex align-center justify-space-between mb-2" }, [
                                                  createVNode("span", { class: "text-subtitle-2" }, "Item " + toDisplayString(index + 1), 1),
                                                  createVNode(VBtn, {
                                                    icon: "mdi-delete",
                                                    color: "error",
                                                    variant: "text",
                                                    density: "compact",
                                                    onClick: ($event) => removeTimelineItem(index)
                                                  }, null, 8, ["onClick"])
                                                ]),
                                                createVNode(VTextField, {
                                                  modelValue: item.title,
                                                  "onUpdate:modelValue": ($event) => item.title = $event,
                                                  label: "Title",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-format-title",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VTextarea, {
                                                  modelValue: item.text,
                                                  "onUpdate:modelValue": ($event) => item.text = $event,
                                                  label: "Content",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "auto-grow": "",
                                                  rows: "2",
                                                  "row-height": "20",
                                                  "prepend-inner-icon": "mdi-text",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode("div", { class: "d-flex gap-2" }, [
                                                  createVNode(VSelect, {
                                                    modelValue: item.icon,
                                                    "onUpdate:modelValue": ($event) => item.icon = $event,
                                                    items: timelineIcons.value,
                                                    label: "Icon",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-pencil",
                                                    class: "mb-2",
                                                    style: { "flex": "1" }
                                                  }, {
                                                    item: withCtx(({ item: item2, props }) => [
                                                      createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                        prepend: withCtx(() => [
                                                          createVNode(VIcon, {
                                                            icon: item2.raw
                                                          }, null, 8, ["icon"])
                                                        ]),
                                                        _: 2
                                                      }, 1040)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                  createVNode(VSelect, {
                                                    modelValue: item.color,
                                                    "onUpdate:modelValue": ($event) => item.color = $event,
                                                    items: colors,
                                                    label: "Dot Color",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-palette",
                                                    class: "mb-2",
                                                    style: { "flex": "1" }
                                                  }, {
                                                    item: withCtx(({ item: item2, props }) => [
                                                      createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                        prepend: withCtx(() => [
                                                          createVNode(VIcon, {
                                                            color: item2.raw !== "default" ? item2.raw : void 0
                                                          }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-circle")
                                                            ]),
                                                            _: 2
                                                          }, 1032, ["color"])
                                                        ]),
                                                        _: 2
                                                      }, 1040)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                createVNode(VTextField, {
                                                  modelValue: item.time,
                                                  "onUpdate:modelValue": ($event) => item.time = $event,
                                                  label: "Time/Date",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-clock-outline",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: item.hideOpposite,
                                                  "onUpdate:modelValue": ($event) => item.hideOpposite = $event,
                                                  color: "primary",
                                                  label: "Hide opposite content",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]);
                                            }), 128)),
                                            createVNode(VBtn, {
                                              color: "primary",
                                              "prepend-icon": "mdi-plus",
                                              variant: "tonal",
                                              block: "",
                                              onClick: addTimelineItem
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(" Add timeline item ")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        })
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "style" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-palette")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Appearance")
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2 d-block" }, "Timeline Color"),
                                          createVNode(VBtnToggle, {
                                            modelValue: timelineProperties.value.lineColor,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.lineColor = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            "selected-class": "border-primary"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                return createVNode(VBtn, {
                                                  key: color,
                                                  value: color,
                                                  color: color !== "default" ? color : void 0,
                                                  size: "small",
                                                  variant: "tonal",
                                                  width: "40",
                                                  height: "40",
                                                  class: "ma-1"
                                                }, {
                                                  default: withCtx(() => [
                                                    color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-palette-outline")
                                                      ]),
                                                      _: 1
                                                    })) : createCommentVNode("", true)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value", "color"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Line Width"),
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-minus")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: timelineProperties.value.lineWidth,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.lineWidth = $event,
                                              min: "1",
                                              max: "5",
                                              step: "1",
                                              "thumb-label": "",
                                              class: "mx-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-plus")
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Dot Size"),
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-circle-small")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: timelineProperties.value.dotSize,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.dotSize = $event,
                                              min: "10",
                                              max: "48",
                                              step: "2",
                                              "thumb-label": "",
                                              class: "mx-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-circle-large")
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-monitor-dashboard")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Layout & Position")
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2" }, "Alignment"),
                                          createVNode(VBtnToggle, {
                                            modelValue: timelineProperties.value.align,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.align = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            class: "mb-3"
                                          }, {
                                            default: withCtx(() => [
                                              createVNode(VBtn, {
                                                value: "start",
                                                "prepend-icon": "mdi-format-align-left"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Left")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VBtn, {
                                                value: "center",
                                                "prepend-icon": "mdi-format-align-center"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Center")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VBtn, {
                                                value: "end",
                                                "prepend-icon": "mdi-format-align-right"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Right")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2" }, "Direction"),
                                          createVNode(VBtnToggle, {
                                            modelValue: timelineProperties.value.direction,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.direction = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            class: "mb-3"
                                          }, {
                                            default: withCtx(() => [
                                              createVNode(VBtn, {
                                                value: "vertical",
                                                "prepend-icon": "mdi-arrow-up-down"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Vertical")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VBtn, {
                                                value: "horizontal",
                                                "prepend-icon": "mdi-arrow-left-right"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Horizontal")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: timelineProperties.value.reverse,
                                          "onUpdate:modelValue": ($event) => timelineProperties.value.reverse = $event,
                                          color: "primary",
                                          label: "Reverse order",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: timelineProperties.value.dense,
                                          "onUpdate:modelValue": ($event) => timelineProperties.value.dense = $event,
                                          color: "primary",
                                          label: "Dense",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: timelineProperties.value.rounded,
                                          "onUpdate:modelValue": ($event) => timelineProperties.value.rounded = $event,
                                          color: "primary",
                                          label: "Rounded dots",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "cards" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-card-outline")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Card Style")
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: timelineProperties.value.showCards,
                                          "onUpdate:modelValue": ($event) => timelineProperties.value.showCards = $event,
                                          color: "primary",
                                          label: "Show cards",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        timelineProperties.value.showCards ? (openBlock(), createBlock("div", { key: 0 }, [
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Variant"),
                                            createVNode(VChipGroup, {
                                              modelValue: cardVariantIndex.value,
                                              "onUpdate:modelValue": ($event) => cardVariantIndex.value = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(cardVariants, (variant, index) => {
                                                  return createVNode(VChip, {
                                                    key: variant,
                                                    size: "small",
                                                    value: index
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(toDisplayString(variant), 1)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Card Elevation"),
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-card-outline")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: timelineProperties.value.cardElevation,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.cardElevation = $event,
                                                min: "0",
                                                max: "24",
                                                step: "1",
                                                "thumb-label": "",
                                                class: "mx-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-layers-triple")
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Background Color"),
                                            createVNode(VBtnToggle, {
                                              modelValue: timelineProperties.value.cardColor,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.cardColor = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              "selected-class": "border-primary"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                  return createVNode(VBtn, {
                                                    key: color,
                                                    value: color,
                                                    color: color !== "default" ? color : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: "ma-1"
                                                  }, {
                                                    default: withCtx(() => [
                                                      color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("mdi-palette-outline")
                                                        ]),
                                                        _: 1
                                                      })) : createCommentVNode("", true)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value", "color"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Title Style"),
                                            createVNode(VChipGroup, {
                                              modelValue: timelineProperties.value.titleStyle,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.titleStyle = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "regular"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Regular")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "bold"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Bold")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "italic"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Italic")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "uppercase"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("uppercase")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Padding"),
                                            createVNode(VChipGroup, {
                                              modelValue: timelineProperties.value.cardPadding,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.cardPadding = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "pa-0"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("None")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "pa-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("xs")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "pa-4"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("sm")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "pa-6"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("md")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "pa-8"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("lg")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "pa-10"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("xl")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Border Radius"),
                                            createVNode(VChipGroup, {
                                              modelValue: timelineProperties.value.cardBorderRadius,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.cardBorderRadius = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "rounded-0"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("None")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "rounded"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Default")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "rounded-lg"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Large")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "rounded-xl"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("X-Large")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "rounded-pill"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Pill")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: timelineProperties.value.cardHoverEffect,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.cardHoverEffect = $event,
                                            color: "primary",
                                            label: "Hover effect",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: timelineProperties.value.separateHeader,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.separateHeader = $event,
                                            color: "primary",
                                            label: "Separate header",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ])) : createCommentVNode("", true)
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "actions" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-animation-outline")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Animations")
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: timelineProperties.value.animated,
                                          "onUpdate:modelValue": ($event) => timelineProperties.value.animated = $event,
                                          color: "primary",
                                          label: "Enable animations",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        timelineProperties.value.animated ? (openBlock(), createBlock("div", { key: 0 }, [
                                          createVNode(VSelect, {
                                            modelValue: timelineProperties.value.transition,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.transition = $event,
                                            items: transitions,
                                            label: "Transition effect",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSlider, {
                                            modelValue: timelineProperties.value.transitionDuration,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.transitionDuration = $event,
                                            min: "1000",
                                            max: "10000",
                                            step: "100",
                                            label: "Transition duration (ms)",
                                            "thumb-label": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ])) : createCommentVNode("", true)
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "templates" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-file-document-outline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Timeline Templates")
                                          ]),
                                          createVNode(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props }) => [
                                              createVNode(VBtn, mergeProps({
                                                icon: "mdi-help-circle-outline",
                                                variant: "text",
                                                size: "small"
                                              }, props), null, 16)
                                            ]),
                                            default: withCtx(() => [
                                              createVNode("span", null, "Apply pre-defined templates or save your own")
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common timeline layouts. "),
                                        createVNode(VCard, { class: "mb-4" }, {
                                          default: withCtx(() => [
                                            createVNode(VList, null, {
                                              default: withCtx(() => [
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("project"),
                                                  "prepend-icon": "mdi-flag",
                                                  title: "Project Timeline",
                                                  subtitle: "Project management milestones"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("routine"),
                                                  "prepend-icon": "mdi-clock-time-eight",
                                                  title: "Daily Routine",
                                                  subtitle: "Daily schedule management"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("history"),
                                                  "prepend-icon": "mdi-history",
                                                  title: "Company History",
                                                  subtitle: "Historical milestones"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("process"),
                                                  "prepend-icon": "mdi-clipboard-flow",
                                                  title: "Workflow Process",
                                                  subtitle: "Step-by-step workflow"
                                                }, null, 8, ["onClick"])
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VAlert, {
                                          type: "info",
                                          variant: "tonal",
                                          class: "mb-4"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(" Applying a template will replace your current timeline settings. ")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-content-save")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Save Current Timeline")
                                        ]),
                                        createVNode(VTextField, {
                                          modelValue: customTemplateName.value,
                                          "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                          label: "Template Name",
                                          variant: "outlined",
                                          density: "comfortable",
                                          "prepend-inner-icon": "mdi-tag",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VBtn, {
                                          color: "primary",
                                          "prepend-icon": "mdi-content-save",
                                          block: "",
                                          onClick: saveCurrentTemplate
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(" Save Current Timeline as Template ")
                                          ]),
                                          _: 1
                                        })
                                      ])
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"])
                            ]),
                            _: 1
                          })
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(`</div><div class="preview-area pa-4 d-flex flex-column" data-v-1424ad6c${_scopeId2}><div class="d-flex justify-space-between align-center mb-3" data-v-1424ad6c${_scopeId2}>`);
                  _push3(ssrRenderComponent(VChip, {
                    color: "primary",
                    variant: "flat",
                    size: "small",
                    class: "mr-2"
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(ssrRenderComponent(VIcon, {
                          start: "",
                          size: "small"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(`mdi-eye`);
                            } else {
                              return [
                                createTextVNode("mdi-eye")
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(` Live preview `);
                      } else {
                        return [
                          createVNode(VIcon, {
                            start: "",
                            size: "small"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("mdi-eye")
                            ]),
                            _: 1
                          }),
                          createTextVNode(" Live preview ")
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(`</div><div class="preview-canvas flex-grow-1 pa-4" data-v-1424ad6c${_scopeId2}>`);
                  if (timelineProperties.value.animated) {
                    _push3(ssrRenderComponent(VBtn, {
                      color: "primary",
                      class: "mb-4",
                      onClick: triggerAnimation
                    }, {
                      default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                        if (_push4) {
                          _push4(` View animation `);
                        } else {
                          return [
                            createTextVNode(" View animation ")
                          ];
                        }
                      }),
                      _: 1
                    }, _parent3, _scopeId2));
                  } else {
                    _push3(`<!---->`);
                  }
                  if (timelineProperties.value.animated) {
                    _push3(ssrRenderComponent(VTimeline, {
                      style: showTimeline.value ? null : { display: "none" },
                      align: timelineProperties.value.align,
                      direction: timelineProperties.value.direction,
                      side: timelineProperties.value.side,
                      density: timelineProperties.value.dense ? "compact" : "default",
                      "line-color": timelineProperties.value.lineColor !== "default" ? timelineProperties.value.lineColor : void 0,
                      "line-width": timelineProperties.value.lineWidth,
                      "dot-size": timelineProperties.value.dotSize,
                      reverse: timelineProperties.value.reverse,
                      "truncate-line": timelineProperties.value.truncateLine
                    }, {
                      default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                        if (_push4) {
                          _push4(`<!--[-->`);
                          ssrRenderList(timelineItems.value, (item, index) => {
                            _push4(ssrRenderComponent(VTimelineItem, {
                              key: index,
                              "dot-color": item.color !== "default" ? item.color : void 0,
                              icon: item.icon,
                              "hide-opposite": item.hideOpposite,
                              size: timelineProperties.value.dotSize,
                              rounded: timelineProperties.value.rounded
                            }, {
                              opposite: withCtx((_4, _push5, _parent5, _scopeId4) => {
                                if (_push5) {
                                  if (!item.hideOpposite) {
                                    _push5(`<div class="text-caption" data-v-1424ad6c${_scopeId4}>${ssrInterpolate(item.time)}</div>`);
                                  } else {
                                    _push5(`<!---->`);
                                  }
                                } else {
                                  return [
                                    !item.hideOpposite ? (openBlock(), createBlock("div", {
                                      key: 0,
                                      class: "text-caption"
                                    }, toDisplayString(item.time), 1)) : createCommentVNode("", true)
                                  ];
                                }
                              }),
                              default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                                if (_push5) {
                                  if (timelineProperties.value.showCards) {
                                    _push5(ssrRenderComponent(VCard, mergeProps({
                                      variant: cardVariant.value,
                                      elevation: timelineProperties.value.cardElevation,
                                      color: timelineProperties.value.cardColor !== "default" ? timelineProperties.value.cardColor : void 0,
                                      class: ["mb-4", getCardClasses()],
                                      ref_for: true
                                    }, timelineProperties.value.animated ? { transition: timelineProperties.value.transition } : {}, {
                                      style: timelineProperties.value.animated ? `transition-duration: ${timelineProperties.value.transitionDuration}ms` : ""
                                    }), {
                                      default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                        if (_push6) {
                                          _push6(ssrRenderComponent(VCardTitle, {
                                            class: getTitleStyleClass()
                                          }, {
                                            default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                              if (_push7) {
                                                _push7(`${ssrInterpolate(item.title)}`);
                                              } else {
                                                return [
                                                  createTextVNode(toDisplayString(item.title), 1)
                                                ];
                                              }
                                            }),
                                            _: 2
                                          }, _parent6, _scopeId5));
                                          if (timelineProperties.value.separateHeader) {
                                            _push6(ssrRenderComponent(VDivider, null, null, _parent6, _scopeId5));
                                          } else {
                                            _push6(`<!---->`);
                                          }
                                          _push6(ssrRenderComponent(VCardText, null, {
                                            default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                              if (_push7) {
                                                _push7(`${ssrInterpolate(item.text)}`);
                                              } else {
                                                return [
                                                  createTextVNode(toDisplayString(item.text), 1)
                                                ];
                                              }
                                            }),
                                            _: 2
                                          }, _parent6, _scopeId5));
                                        } else {
                                          return [
                                            createVNode(VCardTitle, {
                                              class: getTitleStyleClass()
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(item.title), 1)
                                              ]),
                                              _: 2
                                            }, 1032, ["class"]),
                                            timelineProperties.value.separateHeader ? (openBlock(), createBlock(VDivider, { key: 0 })) : createCommentVNode("", true),
                                            createVNode(VCardText, null, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(item.text), 1)
                                              ]),
                                              _: 2
                                            }, 1024)
                                          ];
                                        }
                                      }),
                                      _: 2
                                    }, _parent5, _scopeId4));
                                  } else {
                                    _push5(`<!--[--><div${ssrRenderAttrs(mergeProps({
                                      class: ["text-h6", getTitleStyleClass()],
                                      ref_for: true
                                    }, timelineProperties.value.animated ? { transition: timelineProperties.value.transition } : {}, {
                                      style: timelineProperties.value.animated ? `transition-duration: ${timelineProperties.value.transitionDuration}ms` : ""
                                    }))} data-v-1424ad6c${_scopeId4}>${ssrInterpolate(item.title)}</div><div${ssrRenderAttrs(mergeProps({ ref_for: true }, timelineProperties.value.animated ? { transition: timelineProperties.value.transition } : {}, {
                                      style: timelineProperties.value.animated ? `transition-duration: ${timelineProperties.value.transitionDuration}ms` : ""
                                    }))} data-v-1424ad6c${_scopeId4}>${ssrInterpolate(item.text)}</div><!--]-->`);
                                  }
                                } else {
                                  return [
                                    timelineProperties.value.showCards ? (openBlock(), createBlock(VCard, mergeProps({
                                      key: 0,
                                      variant: cardVariant.value,
                                      elevation: timelineProperties.value.cardElevation,
                                      color: timelineProperties.value.cardColor !== "default" ? timelineProperties.value.cardColor : void 0,
                                      class: ["mb-4", getCardClasses()],
                                      ref_for: true
                                    }, timelineProperties.value.animated ? { transition: timelineProperties.value.transition } : {}, {
                                      style: timelineProperties.value.animated ? `transition-duration: ${timelineProperties.value.transitionDuration}ms` : ""
                                    }), {
                                      default: withCtx(() => [
                                        createVNode(VCardTitle, {
                                          class: getTitleStyleClass()
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(item.title), 1)
                                          ]),
                                          _: 2
                                        }, 1032, ["class"]),
                                        timelineProperties.value.separateHeader ? (openBlock(), createBlock(VDivider, { key: 0 })) : createCommentVNode("", true),
                                        createVNode(VCardText, null, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(item.text), 1)
                                          ]),
                                          _: 2
                                        }, 1024)
                                      ]),
                                      _: 2
                                    }, 1040, ["variant", "elevation", "color", "class", "style"])) : (openBlock(), createBlock(Fragment, { key: 1 }, [
                                      createVNode("div", mergeProps({
                                        class: ["text-h6", getTitleStyleClass()],
                                        ref_for: true
                                      }, timelineProperties.value.animated ? { transition: timelineProperties.value.transition } : {}, {
                                        style: timelineProperties.value.animated ? `transition-duration: ${timelineProperties.value.transitionDuration}ms` : ""
                                      }), toDisplayString(item.title), 17),
                                      createVNode("div", mergeProps({ ref_for: true }, timelineProperties.value.animated ? { transition: timelineProperties.value.transition } : {}, {
                                        style: timelineProperties.value.animated ? `transition-duration: ${timelineProperties.value.transitionDuration}ms` : ""
                                      }), toDisplayString(item.text), 17)
                                    ], 64))
                                  ];
                                }
                              }),
                              _: 2
                            }, _parent4, _scopeId3));
                          });
                          _push4(`<!--]-->`);
                        } else {
                          return [
                            (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value, (item, index) => {
                              return openBlock(), createBlock(VTimelineItem, {
                                key: index,
                                "dot-color": item.color !== "default" ? item.color : void 0,
                                icon: item.icon,
                                "hide-opposite": item.hideOpposite,
                                size: timelineProperties.value.dotSize,
                                rounded: timelineProperties.value.rounded
                              }, {
                                opposite: withCtx(() => [
                                  !item.hideOpposite ? (openBlock(), createBlock("div", {
                                    key: 0,
                                    class: "text-caption"
                                  }, toDisplayString(item.time), 1)) : createCommentVNode("", true)
                                ]),
                                default: withCtx(() => [
                                  timelineProperties.value.showCards ? (openBlock(), createBlock(VCard, mergeProps({
                                    key: 0,
                                    variant: cardVariant.value,
                                    elevation: timelineProperties.value.cardElevation,
                                    color: timelineProperties.value.cardColor !== "default" ? timelineProperties.value.cardColor : void 0,
                                    class: ["mb-4", getCardClasses()],
                                    ref_for: true
                                  }, timelineProperties.value.animated ? { transition: timelineProperties.value.transition } : {}, {
                                    style: timelineProperties.value.animated ? `transition-duration: ${timelineProperties.value.transitionDuration}ms` : ""
                                  }), {
                                    default: withCtx(() => [
                                      createVNode(VCardTitle, {
                                        class: getTitleStyleClass()
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(item.title), 1)
                                        ]),
                                        _: 2
                                      }, 1032, ["class"]),
                                      timelineProperties.value.separateHeader ? (openBlock(), createBlock(VDivider, { key: 0 })) : createCommentVNode("", true),
                                      createVNode(VCardText, null, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(item.text), 1)
                                        ]),
                                        _: 2
                                      }, 1024)
                                    ]),
                                    _: 2
                                  }, 1040, ["variant", "elevation", "color", "class", "style"])) : (openBlock(), createBlock(Fragment, { key: 1 }, [
                                    createVNode("div", mergeProps({
                                      class: ["text-h6", getTitleStyleClass()],
                                      ref_for: true
                                    }, timelineProperties.value.animated ? { transition: timelineProperties.value.transition } : {}, {
                                      style: timelineProperties.value.animated ? `transition-duration: ${timelineProperties.value.transitionDuration}ms` : ""
                                    }), toDisplayString(item.title), 17),
                                    createVNode("div", mergeProps({ ref_for: true }, timelineProperties.value.animated ? { transition: timelineProperties.value.transition } : {}, {
                                      style: timelineProperties.value.animated ? `transition-duration: ${timelineProperties.value.transitionDuration}ms` : ""
                                    }), toDisplayString(item.text), 17)
                                  ], 64))
                                ]),
                                _: 2
                              }, 1032, ["dot-color", "icon", "hide-opposite", "size", "rounded"]);
                            }), 128))
                          ];
                        }
                      }),
                      _: 1
                    }, _parent3, _scopeId2));
                  } else {
                    _push3(`<!---->`);
                  }
                  if (!timelineProperties.value.animated) {
                    _push3(ssrRenderComponent(VTimeline, {
                      align: timelineProperties.value.align,
                      direction: timelineProperties.value.direction,
                      side: timelineProperties.value.side,
                      density: timelineProperties.value.dense ? "compact" : "default",
                      "line-color": timelineProperties.value.lineColor !== "default" ? timelineProperties.value.lineColor : void 0,
                      "line-width": timelineProperties.value.lineWidth,
                      "dot-size": timelineProperties.value.dotSize,
                      reverse: timelineProperties.value.reverse,
                      "truncate-line": timelineProperties.value.truncateLine
                    }, {
                      default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                        if (_push4) {
                          _push4(`<!--[-->`);
                          ssrRenderList(timelineItems.value, (item, index) => {
                            _push4(ssrRenderComponent(VTimelineItem, {
                              key: index,
                              "dot-color": item.color !== "default" ? item.color : void 0,
                              icon: item.icon,
                              "hide-opposite": item.hideOpposite,
                              size: timelineProperties.value.dotSize,
                              rounded: timelineProperties.value.rounded
                            }, {
                              opposite: withCtx((_4, _push5, _parent5, _scopeId4) => {
                                if (_push5) {
                                  if (!item.hideOpposite) {
                                    _push5(`<div class="text-caption" data-v-1424ad6c${_scopeId4}>${ssrInterpolate(item.time)}</div>`);
                                  } else {
                                    _push5(`<!---->`);
                                  }
                                } else {
                                  return [
                                    !item.hideOpposite ? (openBlock(), createBlock("div", {
                                      key: 0,
                                      class: "text-caption"
                                    }, toDisplayString(item.time), 1)) : createCommentVNode("", true)
                                  ];
                                }
                              }),
                              default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                                if (_push5) {
                                  if (timelineProperties.value.showCards) {
                                    _push5(ssrRenderComponent(VCard, {
                                      variant: cardVariant.value,
                                      elevation: timelineProperties.value.cardElevation,
                                      color: timelineProperties.value.cardColor !== "default" ? timelineProperties.value.cardColor : void 0,
                                      class: ["mb-4", getCardClasses()]
                                    }, {
                                      default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                        if (_push6) {
                                          _push6(ssrRenderComponent(VCardTitle, {
                                            class: getTitleStyleClass()
                                          }, {
                                            default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                              if (_push7) {
                                                _push7(`${ssrInterpolate(item.title)}`);
                                              } else {
                                                return [
                                                  createTextVNode(toDisplayString(item.title), 1)
                                                ];
                                              }
                                            }),
                                            _: 2
                                          }, _parent6, _scopeId5));
                                          if (timelineProperties.value.separateHeader) {
                                            _push6(ssrRenderComponent(VDivider, null, null, _parent6, _scopeId5));
                                          } else {
                                            _push6(`<!---->`);
                                          }
                                          _push6(ssrRenderComponent(VCardText, null, {
                                            default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                              if (_push7) {
                                                _push7(`${ssrInterpolate(item.text)}`);
                                              } else {
                                                return [
                                                  createTextVNode(toDisplayString(item.text), 1)
                                                ];
                                              }
                                            }),
                                            _: 2
                                          }, _parent6, _scopeId5));
                                        } else {
                                          return [
                                            createVNode(VCardTitle, {
                                              class: getTitleStyleClass()
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(item.title), 1)
                                              ]),
                                              _: 2
                                            }, 1032, ["class"]),
                                            timelineProperties.value.separateHeader ? (openBlock(), createBlock(VDivider, { key: 0 })) : createCommentVNode("", true),
                                            createVNode(VCardText, null, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(item.text), 1)
                                              ]),
                                              _: 2
                                            }, 1024)
                                          ];
                                        }
                                      }),
                                      _: 2
                                    }, _parent5, _scopeId4));
                                  } else {
                                    _push5(`<!--[--><div class="${ssrRenderClass(["text-h6", getTitleStyleClass()])}" data-v-1424ad6c${_scopeId4}>${ssrInterpolate(item.title)}</div><div data-v-1424ad6c${_scopeId4}>${ssrInterpolate(item.text)}</div><!--]-->`);
                                  }
                                } else {
                                  return [
                                    timelineProperties.value.showCards ? (openBlock(), createBlock(VCard, {
                                      key: 0,
                                      variant: cardVariant.value,
                                      elevation: timelineProperties.value.cardElevation,
                                      color: timelineProperties.value.cardColor !== "default" ? timelineProperties.value.cardColor : void 0,
                                      class: ["mb-4", getCardClasses()]
                                    }, {
                                      default: withCtx(() => [
                                        createVNode(VCardTitle, {
                                          class: getTitleStyleClass()
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(item.title), 1)
                                          ]),
                                          _: 2
                                        }, 1032, ["class"]),
                                        timelineProperties.value.separateHeader ? (openBlock(), createBlock(VDivider, { key: 0 })) : createCommentVNode("", true),
                                        createVNode(VCardText, null, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(item.text), 1)
                                          ]),
                                          _: 2
                                        }, 1024)
                                      ]),
                                      _: 2
                                    }, 1032, ["variant", "elevation", "color", "class"])) : (openBlock(), createBlock(Fragment, { key: 1 }, [
                                      createVNode("div", {
                                        class: ["text-h6", getTitleStyleClass()]
                                      }, toDisplayString(item.title), 3),
                                      createVNode("div", null, toDisplayString(item.text), 1)
                                    ], 64))
                                  ];
                                }
                              }),
                              _: 2
                            }, _parent4, _scopeId3));
                          });
                          _push4(`<!--]-->`);
                        } else {
                          return [
                            (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value, (item, index) => {
                              return openBlock(), createBlock(VTimelineItem, {
                                key: index,
                                "dot-color": item.color !== "default" ? item.color : void 0,
                                icon: item.icon,
                                "hide-opposite": item.hideOpposite,
                                size: timelineProperties.value.dotSize,
                                rounded: timelineProperties.value.rounded
                              }, {
                                opposite: withCtx(() => [
                                  !item.hideOpposite ? (openBlock(), createBlock("div", {
                                    key: 0,
                                    class: "text-caption"
                                  }, toDisplayString(item.time), 1)) : createCommentVNode("", true)
                                ]),
                                default: withCtx(() => [
                                  timelineProperties.value.showCards ? (openBlock(), createBlock(VCard, {
                                    key: 0,
                                    variant: cardVariant.value,
                                    elevation: timelineProperties.value.cardElevation,
                                    color: timelineProperties.value.cardColor !== "default" ? timelineProperties.value.cardColor : void 0,
                                    class: ["mb-4", getCardClasses()]
                                  }, {
                                    default: withCtx(() => [
                                      createVNode(VCardTitle, {
                                        class: getTitleStyleClass()
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(item.title), 1)
                                        ]),
                                        _: 2
                                      }, 1032, ["class"]),
                                      timelineProperties.value.separateHeader ? (openBlock(), createBlock(VDivider, { key: 0 })) : createCommentVNode("", true),
                                      createVNode(VCardText, null, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(item.text), 1)
                                        ]),
                                        _: 2
                                      }, 1024)
                                    ]),
                                    _: 2
                                  }, 1032, ["variant", "elevation", "color", "class"])) : (openBlock(), createBlock(Fragment, { key: 1 }, [
                                    createVNode("div", {
                                      class: ["text-h6", getTitleStyleClass()]
                                    }, toDisplayString(item.title), 3),
                                    createVNode("div", null, toDisplayString(item.text), 1)
                                  ], 64))
                                ]),
                                _: 2
                              }, 1032, ["dot-color", "icon", "hide-opposite", "size", "rounded"]);
                            }), 128))
                          ];
                        }
                      }),
                      _: 1
                    }, _parent3, _scopeId2));
                  } else {
                    _push3(`<!---->`);
                  }
                  _push3(`</div><div class="d-flex justify-end mt-3" data-v-1424ad6c${_scopeId2}>`);
                  _push3(ssrRenderComponent(VBtn, {
                    color: "secondary",
                    class: "mr-2",
                    "prepend-icon": "mdi-eye",
                    onClick: previewCode
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(` Preview Code `);
                      } else {
                        return [
                          createTextVNode(" Preview Code ")
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(ssrRenderComponent(VBtn, {
                    color: "primary",
                    "prepend-icon": "mdi-content-copy",
                    onClick: copyTimelineCode
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(` Copy to Clipboard `);
                      } else {
                        return [
                          createTextVNode(" Copy to Clipboard ")
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(`</div></div>`);
                } else {
                  return [
                    createVNode("div", {
                      class: "control-panel",
                      style: { "width": "350px" }
                    }, [
                      createVNode(VCard, {
                        flat: "",
                        class: "fill-height"
                      }, {
                        default: withCtx(() => [
                          createVNode("div", { class: "px-4 py-2 d-flex align-center" }, [
                            createVNode(VChip, {
                              color: "success",
                              "prepend-icon": "mdi-vuejs",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vue.js")
                              ]),
                              _: 1
                            }),
                            createVNode(VChip, {
                              color: "info",
                              "prepend-icon": "mdi-vuetify",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vuetify")
                              ]),
                              _: 1
                            })
                          ]),
                          createVNode(VTabs, {
                            modelValue: tab.value,
                            "onUpdate:modelValue": ($event) => tab.value = $event,
                            color: "primary",
                            "align-tabs": "center",
                            class: "px-4"
                          }, {
                            default: withCtx(() => [
                              createVNode(VTab, { value: "content" }, {
                                default: withCtx(() => [
                                  createTextVNode("Content")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "style" }, {
                                default: withCtx(() => [
                                  createTextVNode("Style")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "cards" }, {
                                default: withCtx(() => [
                                  createTextVNode("Cards")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "actions" }, {
                                default: withCtx(() => [
                                  createTextVNode("Actions")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "templates" }, {
                                default: withCtx(() => [
                                  createTextVNode("Templates")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue"]),
                          createVNode(VDivider),
                          createVNode(VCardText, {
                            class: "pa-0 fill-height",
                            style: { "overflow-y": "auto" }
                          }, {
                            default: withCtx(() => [
                              createVNode(VWindow, {
                                modelValue: tab.value,
                                "onUpdate:modelValue": ($event) => tab.value = $event,
                                class: "fill-height"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VWindowItem, { value: "content" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-timeline")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Timeline Items")
                                        ]),
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value, (item, index) => {
                                              return openBlock(), createBlock("div", {
                                                key: index,
                                                class: "mb-4"
                                              }, [
                                                createVNode("div", { class: "d-flex align-center justify-space-between mb-2" }, [
                                                  createVNode("span", { class: "text-subtitle-2" }, "Item " + toDisplayString(index + 1), 1),
                                                  createVNode(VBtn, {
                                                    icon: "mdi-delete",
                                                    color: "error",
                                                    variant: "text",
                                                    density: "compact",
                                                    onClick: ($event) => removeTimelineItem(index)
                                                  }, null, 8, ["onClick"])
                                                ]),
                                                createVNode(VTextField, {
                                                  modelValue: item.title,
                                                  "onUpdate:modelValue": ($event) => item.title = $event,
                                                  label: "Title",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-format-title",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VTextarea, {
                                                  modelValue: item.text,
                                                  "onUpdate:modelValue": ($event) => item.text = $event,
                                                  label: "Content",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "auto-grow": "",
                                                  rows: "2",
                                                  "row-height": "20",
                                                  "prepend-inner-icon": "mdi-text",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode("div", { class: "d-flex gap-2" }, [
                                                  createVNode(VSelect, {
                                                    modelValue: item.icon,
                                                    "onUpdate:modelValue": ($event) => item.icon = $event,
                                                    items: timelineIcons.value,
                                                    label: "Icon",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-pencil",
                                                    class: "mb-2",
                                                    style: { "flex": "1" }
                                                  }, {
                                                    item: withCtx(({ item: item2, props }) => [
                                                      createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                        prepend: withCtx(() => [
                                                          createVNode(VIcon, {
                                                            icon: item2.raw
                                                          }, null, 8, ["icon"])
                                                        ]),
                                                        _: 2
                                                      }, 1040)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                  createVNode(VSelect, {
                                                    modelValue: item.color,
                                                    "onUpdate:modelValue": ($event) => item.color = $event,
                                                    items: colors,
                                                    label: "Dot Color",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    "prepend-inner-icon": "mdi-palette",
                                                    class: "mb-2",
                                                    style: { "flex": "1" }
                                                  }, {
                                                    item: withCtx(({ item: item2, props }) => [
                                                      createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                        prepend: withCtx(() => [
                                                          createVNode(VIcon, {
                                                            color: item2.raw !== "default" ? item2.raw : void 0
                                                          }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-circle")
                                                            ]),
                                                            _: 2
                                                          }, 1032, ["color"])
                                                        ]),
                                                        _: 2
                                                      }, 1040)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                createVNode(VTextField, {
                                                  modelValue: item.time,
                                                  "onUpdate:modelValue": ($event) => item.time = $event,
                                                  label: "Time/Date",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-clock-outline",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: item.hideOpposite,
                                                  "onUpdate:modelValue": ($event) => item.hideOpposite = $event,
                                                  color: "primary",
                                                  label: "Hide opposite content",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]);
                                            }), 128)),
                                            createVNode(VBtn, {
                                              color: "primary",
                                              "prepend-icon": "mdi-plus",
                                              variant: "tonal",
                                              block: "",
                                              onClick: addTimelineItem
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(" Add timeline item ")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        })
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "style" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-palette")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Appearance")
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2 d-block" }, "Timeline Color"),
                                          createVNode(VBtnToggle, {
                                            modelValue: timelineProperties.value.lineColor,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.lineColor = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            "selected-class": "border-primary"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                return createVNode(VBtn, {
                                                  key: color,
                                                  value: color,
                                                  color: color !== "default" ? color : void 0,
                                                  size: "small",
                                                  variant: "tonal",
                                                  width: "40",
                                                  height: "40",
                                                  class: "ma-1"
                                                }, {
                                                  default: withCtx(() => [
                                                    color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-palette-outline")
                                                      ]),
                                                      _: 1
                                                    })) : createCommentVNode("", true)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value", "color"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Line Width"),
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-minus")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: timelineProperties.value.lineWidth,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.lineWidth = $event,
                                              min: "1",
                                              max: "5",
                                              step: "1",
                                              "thumb-label": "",
                                              class: "mx-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-plus")
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Dot Size"),
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-circle-small")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: timelineProperties.value.dotSize,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.dotSize = $event,
                                              min: "10",
                                              max: "48",
                                              step: "2",
                                              "thumb-label": "",
                                              class: "mx-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-circle-large")
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-monitor-dashboard")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Layout & Position")
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2" }, "Alignment"),
                                          createVNode(VBtnToggle, {
                                            modelValue: timelineProperties.value.align,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.align = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            class: "mb-3"
                                          }, {
                                            default: withCtx(() => [
                                              createVNode(VBtn, {
                                                value: "start",
                                                "prepend-icon": "mdi-format-align-left"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Left")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VBtn, {
                                                value: "center",
                                                "prepend-icon": "mdi-format-align-center"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Center")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VBtn, {
                                                value: "end",
                                                "prepend-icon": "mdi-format-align-right"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Right")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2" }, "Direction"),
                                          createVNode(VBtnToggle, {
                                            modelValue: timelineProperties.value.direction,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.direction = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            class: "mb-3"
                                          }, {
                                            default: withCtx(() => [
                                              createVNode(VBtn, {
                                                value: "vertical",
                                                "prepend-icon": "mdi-arrow-up-down"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Vertical")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VBtn, {
                                                value: "horizontal",
                                                "prepend-icon": "mdi-arrow-left-right"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Horizontal")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: timelineProperties.value.reverse,
                                          "onUpdate:modelValue": ($event) => timelineProperties.value.reverse = $event,
                                          color: "primary",
                                          label: "Reverse order",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: timelineProperties.value.dense,
                                          "onUpdate:modelValue": ($event) => timelineProperties.value.dense = $event,
                                          color: "primary",
                                          label: "Dense",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: timelineProperties.value.rounded,
                                          "onUpdate:modelValue": ($event) => timelineProperties.value.rounded = $event,
                                          color: "primary",
                                          label: "Rounded dots",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "cards" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-card-outline")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Card Style")
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: timelineProperties.value.showCards,
                                          "onUpdate:modelValue": ($event) => timelineProperties.value.showCards = $event,
                                          color: "primary",
                                          label: "Show cards",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        timelineProperties.value.showCards ? (openBlock(), createBlock("div", { key: 0 }, [
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Variant"),
                                            createVNode(VChipGroup, {
                                              modelValue: cardVariantIndex.value,
                                              "onUpdate:modelValue": ($event) => cardVariantIndex.value = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(cardVariants, (variant, index) => {
                                                  return createVNode(VChip, {
                                                    key: variant,
                                                    size: "small",
                                                    value: index
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(toDisplayString(variant), 1)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Card Elevation"),
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-card-outline")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: timelineProperties.value.cardElevation,
                                                "onUpdate:modelValue": ($event) => timelineProperties.value.cardElevation = $event,
                                                min: "0",
                                                max: "24",
                                                step: "1",
                                                "thumb-label": "",
                                                class: "mx-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-layers-triple")
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Background Color"),
                                            createVNode(VBtnToggle, {
                                              modelValue: timelineProperties.value.cardColor,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.cardColor = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              "selected-class": "border-primary"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                  return createVNode(VBtn, {
                                                    key: color,
                                                    value: color,
                                                    color: color !== "default" ? color : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: "ma-1"
                                                  }, {
                                                    default: withCtx(() => [
                                                      color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("mdi-palette-outline")
                                                        ]),
                                                        _: 1
                                                      })) : createCommentVNode("", true)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value", "color"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Title Style"),
                                            createVNode(VChipGroup, {
                                              modelValue: timelineProperties.value.titleStyle,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.titleStyle = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "regular"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Regular")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "bold"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Bold")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "italic"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Italic")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "uppercase"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("uppercase")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Padding"),
                                            createVNode(VChipGroup, {
                                              modelValue: timelineProperties.value.cardPadding,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.cardPadding = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "pa-0"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("None")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "pa-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("xs")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "pa-4"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("sm")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "pa-6"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("md")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "pa-8"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("lg")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "pa-10"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("xl")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Border Radius"),
                                            createVNode(VChipGroup, {
                                              modelValue: timelineProperties.value.cardBorderRadius,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.cardBorderRadius = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "rounded-0"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("None")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "rounded"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Default")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "rounded-lg"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Large")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "rounded-xl"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("X-Large")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VChip, {
                                                  size: "small",
                                                  value: "rounded-pill"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("Pill")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: timelineProperties.value.cardHoverEffect,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.cardHoverEffect = $event,
                                            color: "primary",
                                            label: "Hover effect",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: timelineProperties.value.separateHeader,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.separateHeader = $event,
                                            color: "primary",
                                            label: "Separate header",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ])) : createCommentVNode("", true)
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "actions" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-animation-outline")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Animations")
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: timelineProperties.value.animated,
                                          "onUpdate:modelValue": ($event) => timelineProperties.value.animated = $event,
                                          color: "primary",
                                          label: "Enable animations",
                                          "hide-details": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        timelineProperties.value.animated ? (openBlock(), createBlock("div", { key: 0 }, [
                                          createVNode(VSelect, {
                                            modelValue: timelineProperties.value.transition,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.transition = $event,
                                            items: transitions,
                                            label: "Transition effect",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSlider, {
                                            modelValue: timelineProperties.value.transitionDuration,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.transitionDuration = $event,
                                            min: "1000",
                                            max: "10000",
                                            step: "100",
                                            label: "Transition duration (ms)",
                                            "thumb-label": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ])) : createCommentVNode("", true)
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "templates" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-file-document-outline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Timeline Templates")
                                          ]),
                                          createVNode(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props }) => [
                                              createVNode(VBtn, mergeProps({
                                                icon: "mdi-help-circle-outline",
                                                variant: "text",
                                                size: "small"
                                              }, props), null, 16)
                                            ]),
                                            default: withCtx(() => [
                                              createVNode("span", null, "Apply pre-defined templates or save your own")
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common timeline layouts. "),
                                        createVNode(VCard, { class: "mb-4" }, {
                                          default: withCtx(() => [
                                            createVNode(VList, null, {
                                              default: withCtx(() => [
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("project"),
                                                  "prepend-icon": "mdi-flag",
                                                  title: "Project Timeline",
                                                  subtitle: "Project management milestones"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("routine"),
                                                  "prepend-icon": "mdi-clock-time-eight",
                                                  title: "Daily Routine",
                                                  subtitle: "Daily schedule management"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("history"),
                                                  "prepend-icon": "mdi-history",
                                                  title: "Company History",
                                                  subtitle: "Historical milestones"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("process"),
                                                  "prepend-icon": "mdi-clipboard-flow",
                                                  title: "Workflow Process",
                                                  subtitle: "Step-by-step workflow"
                                                }, null, 8, ["onClick"])
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VAlert, {
                                          type: "info",
                                          variant: "tonal",
                                          class: "mb-4"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(" Applying a template will replace your current timeline settings. ")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-content-save")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Save Current Timeline")
                                        ]),
                                        createVNode(VTextField, {
                                          modelValue: customTemplateName.value,
                                          "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                          label: "Template Name",
                                          variant: "outlined",
                                          density: "comfortable",
                                          "prepend-inner-icon": "mdi-tag",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VBtn, {
                                          color: "primary",
                                          "prepend-icon": "mdi-content-save",
                                          block: "",
                                          onClick: saveCurrentTemplate
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(" Save Current Timeline as Template ")
                                          ]),
                                          _: 1
                                        })
                                      ])
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"])
                            ]),
                            _: 1
                          })
                        ]),
                        _: 1
                      })
                    ]),
                    createVNode("div", { class: "preview-area pa-4 d-flex flex-column" }, [
                      createVNode("div", { class: "d-flex justify-space-between align-center mb-3" }, [
                        createVNode(VChip, {
                          color: "primary",
                          variant: "flat",
                          size: "small",
                          class: "mr-2"
                        }, {
                          default: withCtx(() => [
                            createVNode(VIcon, {
                              start: "",
                              size: "small"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("mdi-eye")
                              ]),
                              _: 1
                            }),
                            createTextVNode(" Live preview ")
                          ]),
                          _: 1
                        })
                      ]),
                      createVNode("div", { class: "preview-canvas flex-grow-1 pa-4" }, [
                        timelineProperties.value.animated ? (openBlock(), createBlock(VBtn, {
                          key: 0,
                          color: "primary",
                          class: "mb-4",
                          onClick: triggerAnimation
                        }, {
                          default: withCtx(() => [
                            createTextVNode(" View animation ")
                          ]),
                          _: 1
                        })) : createCommentVNode("", true),
                        timelineProperties.value.animated ? (openBlock(), createBlock(Transition, {
                          key: 1,
                          name: timelineProperties.value.transition
                        }, {
                          default: withCtx(() => [
                            withDirectives(createVNode(VTimeline, {
                              align: timelineProperties.value.align,
                              direction: timelineProperties.value.direction,
                              side: timelineProperties.value.side,
                              density: timelineProperties.value.dense ? "compact" : "default",
                              "line-color": timelineProperties.value.lineColor !== "default" ? timelineProperties.value.lineColor : void 0,
                              "line-width": timelineProperties.value.lineWidth,
                              "dot-size": timelineProperties.value.dotSize,
                              reverse: timelineProperties.value.reverse,
                              "truncate-line": timelineProperties.value.truncateLine
                            }, {
                              default: withCtx(() => [
                                (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value, (item, index) => {
                                  return openBlock(), createBlock(VTimelineItem, {
                                    key: index,
                                    "dot-color": item.color !== "default" ? item.color : void 0,
                                    icon: item.icon,
                                    "hide-opposite": item.hideOpposite,
                                    size: timelineProperties.value.dotSize,
                                    rounded: timelineProperties.value.rounded
                                  }, {
                                    opposite: withCtx(() => [
                                      !item.hideOpposite ? (openBlock(), createBlock("div", {
                                        key: 0,
                                        class: "text-caption"
                                      }, toDisplayString(item.time), 1)) : createCommentVNode("", true)
                                    ]),
                                    default: withCtx(() => [
                                      timelineProperties.value.showCards ? (openBlock(), createBlock(VCard, mergeProps({
                                        key: 0,
                                        variant: cardVariant.value,
                                        elevation: timelineProperties.value.cardElevation,
                                        color: timelineProperties.value.cardColor !== "default" ? timelineProperties.value.cardColor : void 0,
                                        class: ["mb-4", getCardClasses()],
                                        ref_for: true
                                      }, timelineProperties.value.animated ? { transition: timelineProperties.value.transition } : {}, {
                                        style: timelineProperties.value.animated ? `transition-duration: ${timelineProperties.value.transitionDuration}ms` : ""
                                      }), {
                                        default: withCtx(() => [
                                          createVNode(VCardTitle, {
                                            class: getTitleStyleClass()
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString(item.title), 1)
                                            ]),
                                            _: 2
                                          }, 1032, ["class"]),
                                          timelineProperties.value.separateHeader ? (openBlock(), createBlock(VDivider, { key: 0 })) : createCommentVNode("", true),
                                          createVNode(VCardText, null, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString(item.text), 1)
                                            ]),
                                            _: 2
                                          }, 1024)
                                        ]),
                                        _: 2
                                      }, 1040, ["variant", "elevation", "color", "class", "style"])) : (openBlock(), createBlock(Fragment, { key: 1 }, [
                                        createVNode("div", mergeProps({
                                          class: ["text-h6", getTitleStyleClass()],
                                          ref_for: true
                                        }, timelineProperties.value.animated ? { transition: timelineProperties.value.transition } : {}, {
                                          style: timelineProperties.value.animated ? `transition-duration: ${timelineProperties.value.transitionDuration}ms` : ""
                                        }), toDisplayString(item.title), 17),
                                        createVNode("div", mergeProps({ ref_for: true }, timelineProperties.value.animated ? { transition: timelineProperties.value.transition } : {}, {
                                          style: timelineProperties.value.animated ? `transition-duration: ${timelineProperties.value.transitionDuration}ms` : ""
                                        }), toDisplayString(item.text), 17)
                                      ], 64))
                                    ]),
                                    _: 2
                                  }, 1032, ["dot-color", "icon", "hide-opposite", "size", "rounded"]);
                                }), 128))
                              ]),
                              _: 1
                            }, 8, ["align", "direction", "side", "density", "line-color", "line-width", "dot-size", "reverse", "truncate-line"]), [
                              [vShow, showTimeline.value]
                            ])
                          ]),
                          _: 1
                        }, 8, ["name"])) : createCommentVNode("", true),
                        !timelineProperties.value.animated ? (openBlock(), createBlock(VTimeline, {
                          key: 2,
                          align: timelineProperties.value.align,
                          direction: timelineProperties.value.direction,
                          side: timelineProperties.value.side,
                          density: timelineProperties.value.dense ? "compact" : "default",
                          "line-color": timelineProperties.value.lineColor !== "default" ? timelineProperties.value.lineColor : void 0,
                          "line-width": timelineProperties.value.lineWidth,
                          "dot-size": timelineProperties.value.dotSize,
                          reverse: timelineProperties.value.reverse,
                          "truncate-line": timelineProperties.value.truncateLine
                        }, {
                          default: withCtx(() => [
                            (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value, (item, index) => {
                              return openBlock(), createBlock(VTimelineItem, {
                                key: index,
                                "dot-color": item.color !== "default" ? item.color : void 0,
                                icon: item.icon,
                                "hide-opposite": item.hideOpposite,
                                size: timelineProperties.value.dotSize,
                                rounded: timelineProperties.value.rounded
                              }, {
                                opposite: withCtx(() => [
                                  !item.hideOpposite ? (openBlock(), createBlock("div", {
                                    key: 0,
                                    class: "text-caption"
                                  }, toDisplayString(item.time), 1)) : createCommentVNode("", true)
                                ]),
                                default: withCtx(() => [
                                  timelineProperties.value.showCards ? (openBlock(), createBlock(VCard, {
                                    key: 0,
                                    variant: cardVariant.value,
                                    elevation: timelineProperties.value.cardElevation,
                                    color: timelineProperties.value.cardColor !== "default" ? timelineProperties.value.cardColor : void 0,
                                    class: ["mb-4", getCardClasses()]
                                  }, {
                                    default: withCtx(() => [
                                      createVNode(VCardTitle, {
                                        class: getTitleStyleClass()
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(item.title), 1)
                                        ]),
                                        _: 2
                                      }, 1032, ["class"]),
                                      timelineProperties.value.separateHeader ? (openBlock(), createBlock(VDivider, { key: 0 })) : createCommentVNode("", true),
                                      createVNode(VCardText, null, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(item.text), 1)
                                        ]),
                                        _: 2
                                      }, 1024)
                                    ]),
                                    _: 2
                                  }, 1032, ["variant", "elevation", "color", "class"])) : (openBlock(), createBlock(Fragment, { key: 1 }, [
                                    createVNode("div", {
                                      class: ["text-h6", getTitleStyleClass()]
                                    }, toDisplayString(item.title), 3),
                                    createVNode("div", null, toDisplayString(item.text), 1)
                                  ], 64))
                                ]),
                                _: 2
                              }, 1032, ["dot-color", "icon", "hide-opposite", "size", "rounded"]);
                            }), 128))
                          ]),
                          _: 1
                        }, 8, ["align", "direction", "side", "density", "line-color", "line-width", "dot-size", "reverse", "truncate-line"])) : createCommentVNode("", true)
                      ]),
                      createVNode("div", { class: "d-flex justify-end mt-3" }, [
                        createVNode(VBtn, {
                          color: "secondary",
                          class: "mr-2",
                          "prepend-icon": "mdi-eye",
                          onClick: previewCode
                        }, {
                          default: withCtx(() => [
                            createTextVNode(" Preview Code ")
                          ]),
                          _: 1
                        }),
                        createVNode(VBtn, {
                          color: "primary",
                          "prepend-icon": "mdi-content-copy",
                          onClick: copyTimelineCode
                        }, {
                          default: withCtx(() => [
                            createTextVNode(" Copy to Clipboard ")
                          ]),
                          _: 1
                        })
                      ])
                    ])
                  ];
                }
              }),
              _: 1
            }, _parent2, _scopeId));
            _push2(ssrRenderComponent(VDialog, {
              modelValue: showCodeDialog.value,
              "onUpdate:modelValue": ($event) => showCodeDialog.value = $event,
              width: "800"
            }, {
              default: withCtx((_2, _push3, _parent3, _scopeId2) => {
                if (_push3) {
                  _push3(ssrRenderComponent(VCard, { class: "bg-grey-darken-4" }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(ssrRenderComponent(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VTabs, {
                                modelValue: codeTab.value,
                                "onUpdate:modelValue": ($event) => codeTab.value = $event,
                                color: "primary"
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VTab, { value: "template" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`Template`);
                                        } else {
                                          return [
                                            createTextVNode("Template")
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VTab, { value: "script" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`Script`);
                                        } else {
                                          return [
                                            createTextVNode("Script")
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VTab, { value: "theme" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`Theme`);
                                        } else {
                                          return [
                                            createTextVNode("Theme")
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                  } else {
                                    return [
                                      createVNode(VTab, { value: "template" }, {
                                        default: withCtx(() => [
                                          createTextVNode("Template")
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VTab, { value: "script" }, {
                                        default: withCtx(() => [
                                          createTextVNode("Script")
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VTab, { value: "theme" }, {
                                        default: withCtx(() => [
                                          createTextVNode("Theme")
                                        ]),
                                        _: 1
                                      })
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VBtn, {
                                icon: "mdi-close",
                                variant: "text",
                                onClick: ($event) => showCodeDialog.value = false
                              }, null, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VTabs, {
                                  modelValue: codeTab.value,
                                  "onUpdate:modelValue": ($event) => codeTab.value = $event,
                                  color: "primary"
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VTab, { value: "template" }, {
                                      default: withCtx(() => [
                                        createTextVNode("Template")
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VTab, { value: "script" }, {
                                      default: withCtx(() => [
                                        createTextVNode("Script")
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VTab, { value: "theme" }, {
                                      default: withCtx(() => [
                                        createTextVNode("Theme")
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }, 8, ["modelValue", "onUpdate:modelValue"]),
                                createVNode(VBtn, {
                                  icon: "mdi-close",
                                  variant: "text",
                                  onClick: ($event) => showCodeDialog.value = false
                                }, null, 8, ["onClick"])
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VCardText, null, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VWindow, {
                                modelValue: codeTab.value,
                                "onUpdate:modelValue": ($event) => codeTab.value = $event
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VWindowItem, { value: "template" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(ssrRenderComponent(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`${ssrInterpolate(generateTemplateCode())}`);
                                              } else {
                                                return [
                                                  createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                        } else {
                                          return [
                                            createVNode(VSheet, {
                                              class: "bg-grey-darken-4 rounded pa-4",
                                              style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                              ]),
                                              _: 1
                                            })
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "script" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(ssrRenderComponent(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`${ssrInterpolate(generateScriptCode())}`);
                                              } else {
                                                return [
                                                  createTextVNode(toDisplayString(generateScriptCode()), 1)
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                        } else {
                                          return [
                                            createVNode(VSheet, {
                                              class: "bg-grey-darken-4 rounded pa-4",
                                              style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(generateScriptCode()), 1)
                                              ]),
                                              _: 1
                                            })
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "theme" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(ssrRenderComponent(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`${ssrInterpolate("theme" in _ctx ? _ctx.theme : unref(theme))}`);
                                              } else {
                                                return [
                                                  createTextVNode(toDisplayString("theme" in _ctx ? _ctx.theme : unref(theme)), 1)
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                        } else {
                                          return [
                                            createVNode(VSheet, {
                                              class: "bg-grey-darken-4 rounded pa-4",
                                              style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString("theme" in _ctx ? _ctx.theme : unref(theme)), 1)
                                              ]),
                                              _: 1
                                            })
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                  } else {
                                    return [
                                      createVNode(VWindowItem, { value: "template" }, {
                                        default: withCtx(() => [
                                          createVNode(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "script" }, {
                                        default: withCtx(() => [
                                          createVNode(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString(generateScriptCode()), 1)
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "theme" }, {
                                        default: withCtx(() => [
                                          createVNode(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString("theme" in _ctx ? _ctx.theme : unref(theme)), 1)
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        _: 1
                                      })
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VWindow, {
                                  modelValue: codeTab.value,
                                  "onUpdate:modelValue": ($event) => codeTab.value = $event
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VWindowItem, { value: "template" }, {
                                      default: withCtx(() => [
                                        createVNode(VSheet, {
                                          class: "bg-grey-darken-4 rounded pa-4",
                                          style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "script" }, {
                                      default: withCtx(() => [
                                        createVNode(VSheet, {
                                          class: "bg-grey-darken-4 rounded pa-4",
                                          style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(generateScriptCode()), 1)
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "theme" }, {
                                      default: withCtx(() => [
                                        createVNode(VSheet, {
                                          class: "bg-grey-darken-4 rounded pa-4",
                                          style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString("theme" in _ctx ? _ctx.theme : unref(theme)), 1)
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }, 8, ["modelValue", "onUpdate:modelValue"])
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VCardActions, { class: "pa-4" }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VBtn, {
                                color: "secondary",
                                "prepend-icon": "mdi-content-copy",
                                onClick: copyCurrentTab
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(` Copy Current Tab `);
                                  } else {
                                    return [
                                      createTextVNode(" Copy Current Tab ")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VBtn, {
                                  color: "secondary",
                                  "prepend-icon": "mdi-content-copy",
                                  onClick: copyCurrentTab
                                }, {
                                  default: withCtx(() => [
                                    createTextVNode(" Copy Current Tab ")
                                  ]),
                                  _: 1
                                })
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                      } else {
                        return [
                          createVNode(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                            default: withCtx(() => [
                              createVNode(VTabs, {
                                modelValue: codeTab.value,
                                "onUpdate:modelValue": ($event) => codeTab.value = $event,
                                color: "primary"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VTab, { value: "template" }, {
                                    default: withCtx(() => [
                                      createTextVNode("Template")
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VTab, { value: "script" }, {
                                    default: withCtx(() => [
                                      createTextVNode("Script")
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VTab, { value: "theme" }, {
                                    default: withCtx(() => [
                                      createTextVNode("Theme")
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"]),
                              createVNode(VBtn, {
                                icon: "mdi-close",
                                variant: "text",
                                onClick: ($event) => showCodeDialog.value = false
                              }, null, 8, ["onClick"])
                            ]),
                            _: 1
                          }),
                          createVNode(VCardText, null, {
                            default: withCtx(() => [
                              createVNode(VWindow, {
                                modelValue: codeTab.value,
                                "onUpdate:modelValue": ($event) => codeTab.value = $event
                              }, {
                                default: withCtx(() => [
                                  createVNode(VWindowItem, { value: "template" }, {
                                    default: withCtx(() => [
                                      createVNode(VSheet, {
                                        class: "bg-grey-darken-4 rounded pa-4",
                                        style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                        ]),
                                        _: 1
                                      })
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "script" }, {
                                    default: withCtx(() => [
                                      createVNode(VSheet, {
                                        class: "bg-grey-darken-4 rounded pa-4",
                                        style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(generateScriptCode()), 1)
                                        ]),
                                        _: 1
                                      })
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "theme" }, {
                                    default: withCtx(() => [
                                      createVNode(VSheet, {
                                        class: "bg-grey-darken-4 rounded pa-4",
                                        style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString("theme" in _ctx ? _ctx.theme : unref(theme)), 1)
                                        ]),
                                        _: 1
                                      })
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"])
                            ]),
                            _: 1
                          }),
                          createVNode(VCardActions, { class: "pa-4" }, {
                            default: withCtx(() => [
                              createVNode(VBtn, {
                                color: "secondary",
                                "prepend-icon": "mdi-content-copy",
                                onClick: copyCurrentTab
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(" Copy Current Tab ")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          })
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                } else {
                  return [
                    createVNode(VCard, { class: "bg-grey-darken-4" }, {
                      default: withCtx(() => [
                        createVNode(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                          default: withCtx(() => [
                            createVNode(VTabs, {
                              modelValue: codeTab.value,
                              "onUpdate:modelValue": ($event) => codeTab.value = $event,
                              color: "primary"
                            }, {
                              default: withCtx(() => [
                                createVNode(VTab, { value: "template" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Template")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "script" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Script")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "theme" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Theme")
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            }, 8, ["modelValue", "onUpdate:modelValue"]),
                            createVNode(VBtn, {
                              icon: "mdi-close",
                              variant: "text",
                              onClick: ($event) => showCodeDialog.value = false
                            }, null, 8, ["onClick"])
                          ]),
                          _: 1
                        }),
                        createVNode(VCardText, null, {
                          default: withCtx(() => [
                            createVNode(VWindow, {
                              modelValue: codeTab.value,
                              "onUpdate:modelValue": ($event) => codeTab.value = $event
                            }, {
                              default: withCtx(() => [
                                createVNode(VWindowItem, { value: "template" }, {
                                  default: withCtx(() => [
                                    createVNode(VSheet, {
                                      class: "bg-grey-darken-4 rounded pa-4",
                                      style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "script" }, {
                                  default: withCtx(() => [
                                    createVNode(VSheet, {
                                      class: "bg-grey-darken-4 rounded pa-4",
                                      style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode(toDisplayString(generateScriptCode()), 1)
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "theme" }, {
                                  default: withCtx(() => [
                                    createVNode(VSheet, {
                                      class: "bg-grey-darken-4 rounded pa-4",
                                      style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode(toDisplayString("theme" in _ctx ? _ctx.theme : unref(theme)), 1)
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            }, 8, ["modelValue", "onUpdate:modelValue"])
                          ]),
                          _: 1
                        }),
                        createVNode(VCardActions, { class: "pa-4" }, {
                          default: withCtx(() => [
                            createVNode(VBtn, {
                              color: "secondary",
                              "prepend-icon": "mdi-content-copy",
                              onClick: copyCurrentTab
                            }, {
                              default: withCtx(() => [
                                createTextVNode(" Copy Current Tab ")
                              ]),
                              _: 1
                            })
                          ]),
                          _: 1
                        })
                      ]),
                      _: 1
                    })
                  ];
                }
              }),
              _: 1
            }, _parent2, _scopeId));
            _push2(ssrRenderComponent(Snackbar, {
              modelValue: showSnackbarMessage.value,
              "onUpdate:modelValue": ($event) => showSnackbarMessage.value = $event,
              text: snackbarText.value,
              color: snackbarColor.value
            }, null, _parent2, _scopeId));
          } else {
            return [
              createVNode(VMain, { class: "w-100 h-100 overflow-hidden d-flex" }, {
                default: withCtx(() => [
                  createVNode("div", {
                    class: "control-panel",
                    style: { "width": "350px" }
                  }, [
                    createVNode(VCard, {
                      flat: "",
                      class: "fill-height"
                    }, {
                      default: withCtx(() => [
                        createVNode("div", { class: "px-4 py-2 d-flex align-center" }, [
                          createVNode(VChip, {
                            color: "success",
                            "prepend-icon": "mdi-vuejs",
                            size: "small",
                            class: "mr-2 px-4 py-2"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("Vue.js")
                            ]),
                            _: 1
                          }),
                          createVNode(VChip, {
                            color: "info",
                            "prepend-icon": "mdi-vuetify",
                            size: "small",
                            class: "mr-2 px-4 py-2"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("Vuetify")
                            ]),
                            _: 1
                          })
                        ]),
                        createVNode(VTabs, {
                          modelValue: tab.value,
                          "onUpdate:modelValue": ($event) => tab.value = $event,
                          color: "primary",
                          "align-tabs": "center",
                          class: "px-4"
                        }, {
                          default: withCtx(() => [
                            createVNode(VTab, { value: "content" }, {
                              default: withCtx(() => [
                                createTextVNode("Content")
                              ]),
                              _: 1
                            }),
                            createVNode(VTab, { value: "style" }, {
                              default: withCtx(() => [
                                createTextVNode("Style")
                              ]),
                              _: 1
                            }),
                            createVNode(VTab, { value: "cards" }, {
                              default: withCtx(() => [
                                createTextVNode("Cards")
                              ]),
                              _: 1
                            }),
                            createVNode(VTab, { value: "actions" }, {
                              default: withCtx(() => [
                                createTextVNode("Actions")
                              ]),
                              _: 1
                            }),
                            createVNode(VTab, { value: "templates" }, {
                              default: withCtx(() => [
                                createTextVNode("Templates")
                              ]),
                              _: 1
                            })
                          ]),
                          _: 1
                        }, 8, ["modelValue", "onUpdate:modelValue"]),
                        createVNode(VDivider),
                        createVNode(VCardText, {
                          class: "pa-0 fill-height",
                          style: { "overflow-y": "auto" }
                        }, {
                          default: withCtx(() => [
                            createVNode(VWindow, {
                              modelValue: tab.value,
                              "onUpdate:modelValue": ($event) => tab.value = $event,
                              class: "fill-height"
                            }, {
                              default: withCtx(() => [
                                createVNode(VWindowItem, { value: "content" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-timeline")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Timeline Items")
                                      ]),
                                      createVNode(VCard, { class: "mb-4 pa-3" }, {
                                        default: withCtx(() => [
                                          (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value, (item, index) => {
                                            return openBlock(), createBlock("div", {
                                              key: index,
                                              class: "mb-4"
                                            }, [
                                              createVNode("div", { class: "d-flex align-center justify-space-between mb-2" }, [
                                                createVNode("span", { class: "text-subtitle-2" }, "Item " + toDisplayString(index + 1), 1),
                                                createVNode(VBtn, {
                                                  icon: "mdi-delete",
                                                  color: "error",
                                                  variant: "text",
                                                  density: "compact",
                                                  onClick: ($event) => removeTimelineItem(index)
                                                }, null, 8, ["onClick"])
                                              ]),
                                              createVNode(VTextField, {
                                                modelValue: item.title,
                                                "onUpdate:modelValue": ($event) => item.title = $event,
                                                label: "Title",
                                                variant: "outlined",
                                                density: "compact",
                                                "prepend-inner-icon": "mdi-format-title",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VTextarea, {
                                                modelValue: item.text,
                                                "onUpdate:modelValue": ($event) => item.text = $event,
                                                label: "Content",
                                                variant: "outlined",
                                                density: "compact",
                                                "auto-grow": "",
                                                rows: "2",
                                                "row-height": "20",
                                                "prepend-inner-icon": "mdi-text",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode("div", { class: "d-flex gap-2" }, [
                                                createVNode(VSelect, {
                                                  modelValue: item.icon,
                                                  "onUpdate:modelValue": ($event) => item.icon = $event,
                                                  items: timelineIcons.value,
                                                  label: "Icon",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-pencil",
                                                  class: "mb-2",
                                                  style: { "flex": "1" }
                                                }, {
                                                  item: withCtx(({ item: item2, props }) => [
                                                    createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                      prepend: withCtx(() => [
                                                        createVNode(VIcon, {
                                                          icon: item2.raw
                                                        }, null, 8, ["icon"])
                                                      ]),
                                                      _: 2
                                                    }, 1040)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["modelValue", "onUpdate:modelValue", "items"]),
                                                createVNode(VSelect, {
                                                  modelValue: item.color,
                                                  "onUpdate:modelValue": ($event) => item.color = $event,
                                                  items: colors,
                                                  label: "Dot Color",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  "prepend-inner-icon": "mdi-palette",
                                                  class: "mb-2",
                                                  style: { "flex": "1" }
                                                }, {
                                                  item: withCtx(({ item: item2, props }) => [
                                                    createVNode(VListItem, mergeProps({ ref_for: true }, props), {
                                                      prepend: withCtx(() => [
                                                        createVNode(VIcon, {
                                                          color: item2.raw !== "default" ? item2.raw : void 0
                                                        }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-circle")
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["color"])
                                                      ]),
                                                      _: 2
                                                    }, 1040)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode(VTextField, {
                                                modelValue: item.time,
                                                "onUpdate:modelValue": ($event) => item.time = $event,
                                                label: "Time/Date",
                                                variant: "outlined",
                                                density: "compact",
                                                "prepend-inner-icon": "mdi-clock-outline",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: item.hideOpposite,
                                                "onUpdate:modelValue": ($event) => item.hideOpposite = $event,
                                                color: "primary",
                                                label: "Hide opposite content",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]);
                                          }), 128)),
                                          createVNode(VBtn, {
                                            color: "primary",
                                            "prepend-icon": "mdi-plus",
                                            variant: "tonal",
                                            block: "",
                                            onClick: addTimelineItem
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(" Add timeline item ")
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        _: 1
                                      })
                                    ])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "style" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-palette")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Appearance")
                                      ]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-2 d-block" }, "Timeline Color"),
                                        createVNode(VBtnToggle, {
                                          modelValue: timelineProperties.value.lineColor,
                                          "onUpdate:modelValue": ($event) => timelineProperties.value.lineColor = $event,
                                          mandatory: "",
                                          density: "comfortable",
                                          "selected-class": "border-primary"
                                        }, {
                                          default: withCtx(() => [
                                            (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                              return createVNode(VBtn, {
                                                key: color,
                                                value: color,
                                                color: color !== "default" ? color : void 0,
                                                size: "small",
                                                variant: "tonal",
                                                width: "40",
                                                height: "40",
                                                class: "ma-1"
                                              }, {
                                                default: withCtx(() => [
                                                  color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-palette-outline")
                                                    ]),
                                                    _: 1
                                                  })) : createCommentVNode("", true)
                                                ]),
                                                _: 2
                                              }, 1032, ["value", "color"]);
                                            }), 64))
                                          ]),
                                          _: 1
                                        }, 8, ["modelValue", "onUpdate:modelValue"])
                                      ]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Line Width"),
                                        createVNode("div", { class: "d-flex align-center" }, [
                                          createVNode(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-minus")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VSlider, {
                                            modelValue: timelineProperties.value.lineWidth,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.lineWidth = $event,
                                            min: "1",
                                            max: "5",
                                            step: "1",
                                            "thumb-label": "",
                                            class: "mx-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-plus")
                                            ]),
                                            _: 1
                                          })
                                        ])
                                      ]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Dot Size"),
                                        createVNode("div", { class: "d-flex align-center" }, [
                                          createVNode(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-circle-small")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VSlider, {
                                            modelValue: timelineProperties.value.dotSize,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.dotSize = $event,
                                            min: "10",
                                            max: "48",
                                            step: "2",
                                            "thumb-label": "",
                                            class: "mx-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VIcon, {
                                            size: "small",
                                            color: "primary"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-circle-large")
                                            ]),
                                            _: 1
                                          })
                                        ])
                                      ]),
                                      createVNode(VDivider, { class: "my-4" }),
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-monitor-dashboard")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Layout & Position")
                                      ]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-2" }, "Alignment"),
                                        createVNode(VBtnToggle, {
                                          modelValue: timelineProperties.value.align,
                                          "onUpdate:modelValue": ($event) => timelineProperties.value.align = $event,
                                          mandatory: "",
                                          density: "comfortable",
                                          class: "mb-3"
                                        }, {
                                          default: withCtx(() => [
                                            createVNode(VBtn, {
                                              value: "start",
                                              "prepend-icon": "mdi-format-align-left"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("Left")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VBtn, {
                                              value: "center",
                                              "prepend-icon": "mdi-format-align-center"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("Center")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VBtn, {
                                              value: "end",
                                              "prepend-icon": "mdi-format-align-right"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("Right")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        }, 8, ["modelValue", "onUpdate:modelValue"])
                                      ]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-2" }, "Direction"),
                                        createVNode(VBtnToggle, {
                                          modelValue: timelineProperties.value.direction,
                                          "onUpdate:modelValue": ($event) => timelineProperties.value.direction = $event,
                                          mandatory: "",
                                          density: "comfortable",
                                          class: "mb-3"
                                        }, {
                                          default: withCtx(() => [
                                            createVNode(VBtn, {
                                              value: "vertical",
                                              "prepend-icon": "mdi-arrow-up-down"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("Vertical")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VBtn, {
                                              value: "horizontal",
                                              "prepend-icon": "mdi-arrow-left-right"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("Horizontal")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        }, 8, ["modelValue", "onUpdate:modelValue"])
                                      ]),
                                      createVNode(VSwitch, {
                                        modelValue: timelineProperties.value.reverse,
                                        "onUpdate:modelValue": ($event) => timelineProperties.value.reverse = $event,
                                        color: "primary",
                                        label: "Reverse order",
                                        "hide-details": "",
                                        class: "mb-2"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VSwitch, {
                                        modelValue: timelineProperties.value.dense,
                                        "onUpdate:modelValue": ($event) => timelineProperties.value.dense = $event,
                                        color: "primary",
                                        label: "Dense",
                                        "hide-details": "",
                                        class: "mb-2"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VSwitch, {
                                        modelValue: timelineProperties.value.rounded,
                                        "onUpdate:modelValue": ($event) => timelineProperties.value.rounded = $event,
                                        color: "primary",
                                        label: "Rounded dots",
                                        "hide-details": "",
                                        class: "mb-2"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                    ])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "cards" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-card-outline")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Card Style")
                                      ]),
                                      createVNode(VSwitch, {
                                        modelValue: timelineProperties.value.showCards,
                                        "onUpdate:modelValue": ($event) => timelineProperties.value.showCards = $event,
                                        color: "primary",
                                        label: "Show cards",
                                        "hide-details": "",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      timelineProperties.value.showCards ? (openBlock(), createBlock("div", { key: 0 }, [
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Variant"),
                                          createVNode(VChipGroup, {
                                            modelValue: cardVariantIndex.value,
                                            "onUpdate:modelValue": ($event) => cardVariantIndex.value = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(cardVariants, (variant, index) => {
                                                return createVNode(VChip, {
                                                  key: variant,
                                                  size: "small",
                                                  value: index
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(toDisplayString(variant), 1)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1 d-block" }, "Card Elevation"),
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-card-outline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: timelineProperties.value.cardElevation,
                                              "onUpdate:modelValue": ($event) => timelineProperties.value.cardElevation = $event,
                                              min: "0",
                                              max: "24",
                                              step: "1",
                                              "thumb-label": "",
                                              class: "mx-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-layers-triple")
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Background Color"),
                                          createVNode(VBtnToggle, {
                                            modelValue: timelineProperties.value.cardColor,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.cardColor = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            "selected-class": "border-primary"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                return createVNode(VBtn, {
                                                  key: color,
                                                  value: color,
                                                  color: color !== "default" ? color : void 0,
                                                  size: "small",
                                                  variant: "tonal",
                                                  width: "40",
                                                  height: "40",
                                                  class: "ma-1"
                                                }, {
                                                  default: withCtx(() => [
                                                    color === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-palette-outline")
                                                      ]),
                                                      _: 1
                                                    })) : createCommentVNode("", true)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value", "color"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Title Style"),
                                          createVNode(VChipGroup, {
                                            modelValue: timelineProperties.value.titleStyle,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.titleStyle = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "regular"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Regular")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "bold"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Bold")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "italic"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Italic")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "uppercase"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("uppercase")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Padding"),
                                          createVNode(VChipGroup, {
                                            modelValue: timelineProperties.value.cardPadding,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.cardPadding = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "pa-0"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("None")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "pa-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("xs")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "pa-4"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("sm")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "pa-6"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("md")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "pa-8"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("lg")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "pa-10"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("xl")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-1" }, "Card Border Radius"),
                                          createVNode(VChipGroup, {
                                            modelValue: timelineProperties.value.cardBorderRadius,
                                            "onUpdate:modelValue": ($event) => timelineProperties.value.cardBorderRadius = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "rounded-0"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("None")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "rounded"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Default")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "rounded-lg"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Large")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "rounded-xl"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("X-Large")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VChip, {
                                                size: "small",
                                                value: "rounded-pill"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("Pill")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: timelineProperties.value.cardHoverEffect,
                                          "onUpdate:modelValue": ($event) => timelineProperties.value.cardHoverEffect = $event,
                                          color: "primary",
                                          label: "Hover effect",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: timelineProperties.value.separateHeader,
                                          "onUpdate:modelValue": ($event) => timelineProperties.value.separateHeader = $event,
                                          color: "primary",
                                          label: "Separate header",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                      ])) : createCommentVNode("", true)
                                    ])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "actions" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-animation-outline")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Animations")
                                      ]),
                                      createVNode(VSwitch, {
                                        modelValue: timelineProperties.value.animated,
                                        "onUpdate:modelValue": ($event) => timelineProperties.value.animated = $event,
                                        color: "primary",
                                        label: "Enable animations",
                                        "hide-details": "",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      timelineProperties.value.animated ? (openBlock(), createBlock("div", { key: 0 }, [
                                        createVNode(VSelect, {
                                          modelValue: timelineProperties.value.transition,
                                          "onUpdate:modelValue": ($event) => timelineProperties.value.transition = $event,
                                          items: transitions,
                                          label: "Transition effect",
                                          variant: "outlined",
                                          density: "comfortable",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSlider, {
                                          modelValue: timelineProperties.value.transitionDuration,
                                          "onUpdate:modelValue": ($event) => timelineProperties.value.transitionDuration = $event,
                                          min: "1000",
                                          max: "10000",
                                          step: "100",
                                          label: "Transition duration (ms)",
                                          "thumb-label": "",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                      ])) : createCommentVNode("", true)
                                    ])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "templates" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                        createVNode("div", { class: "d-flex align-center" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-file-document-outline")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Timeline Templates")
                                        ]),
                                        createVNode(VTooltip, { location: "bottom" }, {
                                          activator: withCtx(({ props }) => [
                                            createVNode(VBtn, mergeProps({
                                              icon: "mdi-help-circle-outline",
                                              variant: "text",
                                              size: "small"
                                            }, props), null, 16)
                                          ]),
                                          default: withCtx(() => [
                                            createVNode("span", null, "Apply pre-defined templates or save your own")
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common timeline layouts. "),
                                      createVNode(VCard, { class: "mb-4" }, {
                                        default: withCtx(() => [
                                          createVNode(VList, null, {
                                            default: withCtx(() => [
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("project"),
                                                "prepend-icon": "mdi-flag",
                                                title: "Project Timeline",
                                                subtitle: "Project management milestones"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("routine"),
                                                "prepend-icon": "mdi-clock-time-eight",
                                                title: "Daily Routine",
                                                subtitle: "Daily schedule management"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("history"),
                                                "prepend-icon": "mdi-history",
                                                title: "Company History",
                                                subtitle: "Historical milestones"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("process"),
                                                "prepend-icon": "mdi-clipboard-flow",
                                                title: "Workflow Process",
                                                subtitle: "Step-by-step workflow"
                                              }, null, 8, ["onClick"])
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VAlert, {
                                        type: "info",
                                        variant: "tonal",
                                        class: "mb-4"
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(" Applying a template will replace your current timeline settings. ")
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VDivider, { class: "my-4" }),
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-content-save")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Save Current Timeline")
                                      ]),
                                      createVNode(VTextField, {
                                        modelValue: customTemplateName.value,
                                        "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                        label: "Template Name",
                                        variant: "outlined",
                                        density: "comfortable",
                                        "prepend-inner-icon": "mdi-tag",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VBtn, {
                                        color: "primary",
                                        "prepend-icon": "mdi-content-save",
                                        block: "",
                                        onClick: saveCurrentTemplate
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(" Save Current Timeline as Template ")
                                        ]),
                                        _: 1
                                      })
                                    ])
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            }, 8, ["modelValue", "onUpdate:modelValue"])
                          ]),
                          _: 1
                        })
                      ]),
                      _: 1
                    })
                  ]),
                  createVNode("div", { class: "preview-area pa-4 d-flex flex-column" }, [
                    createVNode("div", { class: "d-flex justify-space-between align-center mb-3" }, [
                      createVNode(VChip, {
                        color: "primary",
                        variant: "flat",
                        size: "small",
                        class: "mr-2"
                      }, {
                        default: withCtx(() => [
                          createVNode(VIcon, {
                            start: "",
                            size: "small"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("mdi-eye")
                            ]),
                            _: 1
                          }),
                          createTextVNode(" Live preview ")
                        ]),
                        _: 1
                      })
                    ]),
                    createVNode("div", { class: "preview-canvas flex-grow-1 pa-4" }, [
                      timelineProperties.value.animated ? (openBlock(), createBlock(VBtn, {
                        key: 0,
                        color: "primary",
                        class: "mb-4",
                        onClick: triggerAnimation
                      }, {
                        default: withCtx(() => [
                          createTextVNode(" View animation ")
                        ]),
                        _: 1
                      })) : createCommentVNode("", true),
                      timelineProperties.value.animated ? (openBlock(), createBlock(Transition, {
                        key: 1,
                        name: timelineProperties.value.transition
                      }, {
                        default: withCtx(() => [
                          withDirectives(createVNode(VTimeline, {
                            align: timelineProperties.value.align,
                            direction: timelineProperties.value.direction,
                            side: timelineProperties.value.side,
                            density: timelineProperties.value.dense ? "compact" : "default",
                            "line-color": timelineProperties.value.lineColor !== "default" ? timelineProperties.value.lineColor : void 0,
                            "line-width": timelineProperties.value.lineWidth,
                            "dot-size": timelineProperties.value.dotSize,
                            reverse: timelineProperties.value.reverse,
                            "truncate-line": timelineProperties.value.truncateLine
                          }, {
                            default: withCtx(() => [
                              (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value, (item, index) => {
                                return openBlock(), createBlock(VTimelineItem, {
                                  key: index,
                                  "dot-color": item.color !== "default" ? item.color : void 0,
                                  icon: item.icon,
                                  "hide-opposite": item.hideOpposite,
                                  size: timelineProperties.value.dotSize,
                                  rounded: timelineProperties.value.rounded
                                }, {
                                  opposite: withCtx(() => [
                                    !item.hideOpposite ? (openBlock(), createBlock("div", {
                                      key: 0,
                                      class: "text-caption"
                                    }, toDisplayString(item.time), 1)) : createCommentVNode("", true)
                                  ]),
                                  default: withCtx(() => [
                                    timelineProperties.value.showCards ? (openBlock(), createBlock(VCard, mergeProps({
                                      key: 0,
                                      variant: cardVariant.value,
                                      elevation: timelineProperties.value.cardElevation,
                                      color: timelineProperties.value.cardColor !== "default" ? timelineProperties.value.cardColor : void 0,
                                      class: ["mb-4", getCardClasses()],
                                      ref_for: true
                                    }, timelineProperties.value.animated ? { transition: timelineProperties.value.transition } : {}, {
                                      style: timelineProperties.value.animated ? `transition-duration: ${timelineProperties.value.transitionDuration}ms` : ""
                                    }), {
                                      default: withCtx(() => [
                                        createVNode(VCardTitle, {
                                          class: getTitleStyleClass()
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(item.title), 1)
                                          ]),
                                          _: 2
                                        }, 1032, ["class"]),
                                        timelineProperties.value.separateHeader ? (openBlock(), createBlock(VDivider, { key: 0 })) : createCommentVNode("", true),
                                        createVNode(VCardText, null, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(item.text), 1)
                                          ]),
                                          _: 2
                                        }, 1024)
                                      ]),
                                      _: 2
                                    }, 1040, ["variant", "elevation", "color", "class", "style"])) : (openBlock(), createBlock(Fragment, { key: 1 }, [
                                      createVNode("div", mergeProps({
                                        class: ["text-h6", getTitleStyleClass()],
                                        ref_for: true
                                      }, timelineProperties.value.animated ? { transition: timelineProperties.value.transition } : {}, {
                                        style: timelineProperties.value.animated ? `transition-duration: ${timelineProperties.value.transitionDuration}ms` : ""
                                      }), toDisplayString(item.title), 17),
                                      createVNode("div", mergeProps({ ref_for: true }, timelineProperties.value.animated ? { transition: timelineProperties.value.transition } : {}, {
                                        style: timelineProperties.value.animated ? `transition-duration: ${timelineProperties.value.transitionDuration}ms` : ""
                                      }), toDisplayString(item.text), 17)
                                    ], 64))
                                  ]),
                                  _: 2
                                }, 1032, ["dot-color", "icon", "hide-opposite", "size", "rounded"]);
                              }), 128))
                            ]),
                            _: 1
                          }, 8, ["align", "direction", "side", "density", "line-color", "line-width", "dot-size", "reverse", "truncate-line"]), [
                            [vShow, showTimeline.value]
                          ])
                        ]),
                        _: 1
                      }, 8, ["name"])) : createCommentVNode("", true),
                      !timelineProperties.value.animated ? (openBlock(), createBlock(VTimeline, {
                        key: 2,
                        align: timelineProperties.value.align,
                        direction: timelineProperties.value.direction,
                        side: timelineProperties.value.side,
                        density: timelineProperties.value.dense ? "compact" : "default",
                        "line-color": timelineProperties.value.lineColor !== "default" ? timelineProperties.value.lineColor : void 0,
                        "line-width": timelineProperties.value.lineWidth,
                        "dot-size": timelineProperties.value.dotSize,
                        reverse: timelineProperties.value.reverse,
                        "truncate-line": timelineProperties.value.truncateLine
                      }, {
                        default: withCtx(() => [
                          (openBlock(true), createBlock(Fragment, null, renderList(timelineItems.value, (item, index) => {
                            return openBlock(), createBlock(VTimelineItem, {
                              key: index,
                              "dot-color": item.color !== "default" ? item.color : void 0,
                              icon: item.icon,
                              "hide-opposite": item.hideOpposite,
                              size: timelineProperties.value.dotSize,
                              rounded: timelineProperties.value.rounded
                            }, {
                              opposite: withCtx(() => [
                                !item.hideOpposite ? (openBlock(), createBlock("div", {
                                  key: 0,
                                  class: "text-caption"
                                }, toDisplayString(item.time), 1)) : createCommentVNode("", true)
                              ]),
                              default: withCtx(() => [
                                timelineProperties.value.showCards ? (openBlock(), createBlock(VCard, {
                                  key: 0,
                                  variant: cardVariant.value,
                                  elevation: timelineProperties.value.cardElevation,
                                  color: timelineProperties.value.cardColor !== "default" ? timelineProperties.value.cardColor : void 0,
                                  class: ["mb-4", getCardClasses()]
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VCardTitle, {
                                      class: getTitleStyleClass()
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode(toDisplayString(item.title), 1)
                                      ]),
                                      _: 2
                                    }, 1032, ["class"]),
                                    timelineProperties.value.separateHeader ? (openBlock(), createBlock(VDivider, { key: 0 })) : createCommentVNode("", true),
                                    createVNode(VCardText, null, {
                                      default: withCtx(() => [
                                        createTextVNode(toDisplayString(item.text), 1)
                                      ]),
                                      _: 2
                                    }, 1024)
                                  ]),
                                  _: 2
                                }, 1032, ["variant", "elevation", "color", "class"])) : (openBlock(), createBlock(Fragment, { key: 1 }, [
                                  createVNode("div", {
                                    class: ["text-h6", getTitleStyleClass()]
                                  }, toDisplayString(item.title), 3),
                                  createVNode("div", null, toDisplayString(item.text), 1)
                                ], 64))
                              ]),
                              _: 2
                            }, 1032, ["dot-color", "icon", "hide-opposite", "size", "rounded"]);
                          }), 128))
                        ]),
                        _: 1
                      }, 8, ["align", "direction", "side", "density", "line-color", "line-width", "dot-size", "reverse", "truncate-line"])) : createCommentVNode("", true)
                    ]),
                    createVNode("div", { class: "d-flex justify-end mt-3" }, [
                      createVNode(VBtn, {
                        color: "secondary",
                        class: "mr-2",
                        "prepend-icon": "mdi-eye",
                        onClick: previewCode
                      }, {
                        default: withCtx(() => [
                          createTextVNode(" Preview Code ")
                        ]),
                        _: 1
                      }),
                      createVNode(VBtn, {
                        color: "primary",
                        "prepend-icon": "mdi-content-copy",
                        onClick: copyTimelineCode
                      }, {
                        default: withCtx(() => [
                          createTextVNode(" Copy to Clipboard ")
                        ]),
                        _: 1
                      })
                    ])
                  ])
                ]),
                _: 1
              }),
              createVNode(VDialog, {
                modelValue: showCodeDialog.value,
                "onUpdate:modelValue": ($event) => showCodeDialog.value = $event,
                width: "800"
              }, {
                default: withCtx(() => [
                  createVNode(VCard, { class: "bg-grey-darken-4" }, {
                    default: withCtx(() => [
                      createVNode(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                        default: withCtx(() => [
                          createVNode(VTabs, {
                            modelValue: codeTab.value,
                            "onUpdate:modelValue": ($event) => codeTab.value = $event,
                            color: "primary"
                          }, {
                            default: withCtx(() => [
                              createVNode(VTab, { value: "template" }, {
                                default: withCtx(() => [
                                  createTextVNode("Template")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "script" }, {
                                default: withCtx(() => [
                                  createTextVNode("Script")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "theme" }, {
                                default: withCtx(() => [
                                  createTextVNode("Theme")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue"]),
                          createVNode(VBtn, {
                            icon: "mdi-close",
                            variant: "text",
                            onClick: ($event) => showCodeDialog.value = false
                          }, null, 8, ["onClick"])
                        ]),
                        _: 1
                      }),
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VWindow, {
                            modelValue: codeTab.value,
                            "onUpdate:modelValue": ($event) => codeTab.value = $event
                          }, {
                            default: withCtx(() => [
                              createVNode(VWindowItem, { value: "template" }, {
                                default: withCtx(() => [
                                  createVNode(VSheet, {
                                    class: "bg-grey-darken-4 rounded pa-4",
                                    style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }),
                              createVNode(VWindowItem, { value: "script" }, {
                                default: withCtx(() => [
                                  createVNode(VSheet, {
                                    class: "bg-grey-darken-4 rounded pa-4",
                                    style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString(generateScriptCode()), 1)
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }),
                              createVNode(VWindowItem, { value: "theme" }, {
                                default: withCtx(() => [
                                  createVNode(VSheet, {
                                    class: "bg-grey-darken-4 rounded pa-4",
                                    style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString("theme" in _ctx ? _ctx.theme : unref(theme)), 1)
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue"])
                        ]),
                        _: 1
                      }),
                      createVNode(VCardActions, { class: "pa-4" }, {
                        default: withCtx(() => [
                          createVNode(VBtn, {
                            color: "secondary",
                            "prepend-icon": "mdi-content-copy",
                            onClick: copyCurrentTab
                          }, {
                            default: withCtx(() => [
                              createTextVNode(" Copy Current Tab ")
                            ]),
                            _: 1
                          })
                        ]),
                        _: 1
                      })
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }, 8, ["modelValue", "onUpdate:modelValue"]),
              createVNode(Snackbar, {
                modelValue: showSnackbarMessage.value,
                "onUpdate:modelValue": ($event) => showSnackbarMessage.value = $event,
                text: snackbarText.value,
                color: snackbarColor.value
              }, null, 8, ["modelValue", "onUpdate:modelValue", "text", "color"])
            ];
          }
        }),
        _: 1
      }, _parent));
    };
  }
});

const _sfc_setup$2 = _sfc_main$2.setup;
_sfc_main$2.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/studioTimeline.vue");
  return _sfc_setup$2 ? _sfc_setup$2(props, ctx) : void 0;
};
const StudioTimeline = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["__scopeId", "data-v-1424ad6c"]]);

const templates = {
  info: {
    type: "alert",
    variant: "tonal",
    color: "info",
    text: "Information",
    description: "This is an informational message.",
    icon: "mdi-information"
  },
  status: {
    type: "badge",
    color: "success",
    text: "3",
    position: "top end",
    icon: "mdi-account"
  },
  barChart: {
    type: "chart",
    chartType: "bar",
    chartData: [12, 19, 3, 5, 2, 3],
    chartLabels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun"],
    showLegend: true,
    responsive: true,
    maintainAspectRatio: true
  },
  lineChart: {
    type: "chart",
    chartType: "line",
    chartData: [5, 10, 15, 10, 20, 15, 25],
    chartLabels: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
    showLegend: true,
    responsive: true,
    maintainAspectRatio: true
  },
  pieChart: {
    type: "chart",
    chartType: "pie",
    chartData: [30, 40, 30],
    chartLabels: ["Team A", "Team B", "Team C"],
    showLegend: true,
    responsive: true,
    maintainAspectRatio: true
  },
  doughnutChart: {
    type: "chart",
    chartType: "doughnut",
    chartData: [45, 25, 20, 10],
    chartLabels: ["Product A", "Product B", "Product C", "Product D"],
    showLegend: true,
    responsive: true,
    maintainAspectRatio: true
  },
  radarChart: {
    type: "chart",
    chartType: "radar",
    chartData: [65, 59, 90, 81, 56, 55, 40],
    chartLabels: ["Speed", "Agility", "Strength", "Endurance", "Technique", "Tactics", "Teamwork"],
    showLegend: true,
    responsive: true,
    maintainAspectRatio: true
  },
  polarAreaChart: {
    type: "chart",
    chartType: "polarArea",
    chartData: [11, 16, 7, 3, 14],
    chartLabels: ["Region A", "Region B", "Region C", "Region D", "Region E"],
    showLegend: true,
    responsive: true,
    maintainAspectRatio: true
  },
  dataTable: {
    type: "table",
    tableHeaders: [
      { title: "Place", key: "place", sortable: true },
      { title: "City", key: "city", sortable: true },
      { title: "Country", key: "country", sortable: true },
      { title: "Popularity", key: "popularity", sortable: true }
    ],
    tableItems: [
      { place: "Eiffel Tower", city: "Paris", country: "France", popularity: "4.7/5" },
      { place: "Grand Canyon", city: "Arizona", country: "USA", popularity: "4.8/5" },
      { place: "Colosseum", city: "Rome", country: "Italy", popularity: "4.7/5" }
    ],
    itemsPerPage: 10,
    sortBy: "place",
    sortOrder: "asc",
    showSelect: true,
    showFooter: true,
    dense: false
  },
  // File Upload
  fileUpload: {
    type: "file",
    acceptTypes: "image/*,.pdf,.docx",
    maxFiles: 5,
    maxSize: 10,
    dropzoneText: "Déposez vos fichiers ici ou cliquez pour télécharger",
    showPreview: true,
    autoUpload: true,
    chips: true,
    counter: true,
    validateOnSelect: true,
    returnObject: false,
    color: "primary",
    multiple: true
  },
  // Galerie d'images
  photoGallery: {
    type: "gallery",
    galleryImages: [
      { src: "https://images.unsplash.com/photo-1506744038136-46273834b3fb", alt: "Nature", title: "Paysage naturel" },
      { src: "https://images.unsplash.com/photo-1519681393784-d120267933ba", alt: "Montagne", title: "Vue montagne" },
      { src: "https://images.unsplash.com/photo-1434725039720-aaad6dd32dfe", alt: "Eau", title: "Cascade" },
      { src: "https://images.unsplash.com/photo-1486728297118-82a07bc48a28", alt: "Architecture", title: "Bâtiment moderne" }
    ],
    thumbnailSize: 120,
    showCaption: true,
    lightbox: true
  }
};
function getUtilsTemplate(templateName) {
  return templates[templateName] || null;
}

const makeVBadgeProps = propsFactory({
  bordered: Boolean,
  color: String,
  content: [Number, String],
  dot: Boolean,
  floating: Boolean,
  icon: IconValue,
  inline: Boolean,
  label: {
    type: String,
    default: "$vuetify.badge"
  },
  max: [Number, String],
  modelValue: {
    type: Boolean,
    default: true
  },
  offsetX: [Number, String],
  offsetY: [Number, String],
  textColor: String,
  ...makeComponentProps(),
  ...makeLocationProps({
    location: "top end"
  }),
  ...makeRoundedProps(),
  ...makeTagProps(),
  ...makeThemeProps(),
  ...makeTransitionProps({
    transition: "scale-rotate-transition"
  })
}, "VBadge");
const VBadge = genericComponent()({
  name: "VBadge",
  inheritAttrs: false,
  props: makeVBadgeProps(),
  setup(props, ctx) {
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor(toRef(props, "color"));
    const {
      roundedClasses
    } = useRounded(props);
    const {
      t
    } = useLocale();
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor(toRef(props, "textColor"));
    const {
      themeClasses
    } = useTheme();
    const {
      locationStyles
    } = useLocation(props, true, (side) => {
      const base = props.floating ? props.dot ? 2 : 4 : props.dot ? 8 : 12;
      return base + (["top", "bottom"].includes(side) ? Number(props.offsetY ?? 0) : ["left", "right"].includes(side) ? Number(props.offsetX ?? 0) : 0);
    });
    useRender(() => {
      const value = Number(props.content);
      const content = !props.max || isNaN(value) ? props.content : value <= Number(props.max) ? value : `${props.max}+`;
      const [badgeAttrs, attrs] = pickWithRest(ctx.attrs, ["aria-atomic", "aria-label", "aria-live", "role", "title"]);
      return createVNode(props.tag, mergeProps({
        "class": ["v-badge", {
          "v-badge--bordered": props.bordered,
          "v-badge--dot": props.dot,
          "v-badge--floating": props.floating,
          "v-badge--inline": props.inline
        }, props.class]
      }, attrs, {
        "style": props.style
      }), {
        default: () => {
          var _a, _b;
          return [createVNode("div", {
            "class": "v-badge__wrapper"
          }, [(_b = (_a = ctx.slots).default) == null ? void 0 : _b.call(_a), createVNode(MaybeTransition, {
            "transition": props.transition
          }, {
            default: () => {
              var _a2, _b2;
              return [withDirectives(createVNode("span", mergeProps({
                "class": ["v-badge__badge", themeClasses.value, backgroundColorClasses.value, roundedClasses.value, textColorClasses.value],
                "style": [backgroundColorStyles.value, textColorStyles.value, props.inline ? {} : locationStyles.value],
                "aria-atomic": "true",
                "aria-label": t(props.label, value),
                "aria-live": "polite",
                "role": "status"
              }, badgeAttrs), [props.dot ? void 0 : ctx.slots.badge ? (_b2 = (_a2 = ctx.slots).badge) == null ? void 0 : _b2.call(_a2) : props.icon ? createVNode(VIcon, {
                "icon": props.icon
              }, null) : content]), [[vShow, props.modelValue]])];
            }
          })])];
        }
      });
    });
    return {};
  }
});

const makeVDatePickerControlsProps = propsFactory({
  active: {
    type: [String, Array],
    default: void 0
  },
  disabled: {
    type: [Boolean, String, Array],
    default: null
  },
  nextIcon: {
    type: IconValue,
    default: "$next"
  },
  prevIcon: {
    type: IconValue,
    default: "$prev"
  },
  modeIcon: {
    type: IconValue,
    default: "$subgroup"
  },
  text: String,
  viewMode: {
    type: String,
    default: "month"
  }
}, "VDatePickerControls");
const VDatePickerControls = genericComponent()({
  name: "VDatePickerControls",
  props: makeVDatePickerControlsProps(),
  emits: {
    "click:year": () => true,
    "click:month": () => true,
    "click:prev": () => true,
    "click:next": () => true,
    "click:text": () => true
  },
  setup(props, _ref) {
    let {
      emit
    } = _ref;
    const disableMonth = computed(() => {
      return Array.isArray(props.disabled) ? props.disabled.includes("text") : !!props.disabled;
    });
    const disableYear = computed(() => {
      return Array.isArray(props.disabled) ? props.disabled.includes("mode") : !!props.disabled;
    });
    const disablePrev = computed(() => {
      return Array.isArray(props.disabled) ? props.disabled.includes("prev") : !!props.disabled;
    });
    const disableNext = computed(() => {
      return Array.isArray(props.disabled) ? props.disabled.includes("next") : !!props.disabled;
    });
    function onClickPrev() {
      emit("click:prev");
    }
    function onClickNext() {
      emit("click:next");
    }
    function onClickYear() {
      emit("click:year");
    }
    function onClickMonth() {
      emit("click:month");
    }
    useRender(() => {
      return createVNode("div", {
        "class": ["v-date-picker-controls"]
      }, [createVNode(VBtn, {
        "class": "v-date-picker-controls__month-btn",
        "data-testid": "month-btn",
        "disabled": disableMonth.value,
        "text": props.text,
        "variant": "text",
        "rounded": true,
        "onClick": onClickMonth
      }, null), createVNode(VBtn, {
        "class": "v-date-picker-controls__mode-btn",
        "data-testid": "year-btn",
        "disabled": disableYear.value,
        "density": "comfortable",
        "icon": props.modeIcon,
        "variant": "text",
        "onClick": onClickYear
      }, null), createVNode(VSpacer, null, null), createVNode("div", {
        "class": "v-date-picker-controls__month"
      }, [createVNode(VBtn, {
        "data-testid": "prev-month",
        "disabled": disablePrev.value,
        "icon": props.prevIcon,
        "variant": "text",
        "onClick": onClickPrev
      }, null), createVNode(VBtn, {
        "data-testid": "next-month",
        "disabled": disableNext.value,
        "icon": props.nextIcon,
        "variant": "text",
        "onClick": onClickNext
      }, null)])]);
    });
    return {};
  }
});

const makeVDatePickerHeaderProps = propsFactory({
  appendIcon: IconValue,
  color: String,
  header: String,
  transition: String,
  onClick: EventProp()
}, "VDatePickerHeader");
const VDatePickerHeader = genericComponent()({
  name: "VDatePickerHeader",
  props: makeVDatePickerHeaderProps(),
  emits: {
    click: () => true,
    "click:append": () => true
  },
  setup(props, _ref) {
    let {
      emit,
      slots
    } = _ref;
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor(props, "color");
    function onClick() {
      emit("click");
    }
    function onClickAppend() {
      emit("click:append");
    }
    useRender(() => {
      const hasContent = !!(slots.default || props.header);
      const hasAppend = !!(slots.append || props.appendIcon);
      return createVNode("div", {
        "class": ["v-date-picker-header", {
          "v-date-picker-header--clickable": !!props.onClick
        }, backgroundColorClasses.value],
        "style": backgroundColorStyles.value,
        "onClick": onClick
      }, [slots.prepend && createVNode("div", {
        "key": "prepend",
        "class": "v-date-picker-header__prepend"
      }, [slots.prepend()]), hasContent && createVNode(MaybeTransition, {
        "key": "content",
        "name": props.transition
      }, {
        default: () => {
          var _a;
          return [createVNode("div", {
            "key": props.header,
            "class": "v-date-picker-header__content"
          }, [((_a = slots.default) == null ? void 0 : _a.call(slots)) ?? props.header])];
        }
      }), hasAppend && createVNode("div", {
        "class": "v-date-picker-header__append"
      }, [!slots.append ? createVNode(VBtn, {
        "key": "append-btn",
        "icon": props.appendIcon,
        "variant": "text",
        "onClick": onClickAppend
      }, null) : createVNode(VDefaultsProvider, {
        "key": "append-defaults",
        "disabled": !props.appendIcon,
        "defaults": {
          VBtn: {
            icon: props.appendIcon,
            variant: "text"
          }
        }
      }, {
        default: () => {
          var _a;
          return [(_a = slots.append) == null ? void 0 : _a.call(slots)];
        }
      })])]);
    });
    return {};
  }
});

const makeCalendarProps = propsFactory({
  allowedDates: [Array, Function],
  disabled: {
    type: Boolean,
    default: null
  },
  displayValue: null,
  modelValue: Array,
  month: [Number, String],
  max: null,
  min: null,
  showAdjacentMonths: Boolean,
  year: [Number, String],
  weekdays: {
    type: Array,
    default: () => [0, 1, 2, 3, 4, 5, 6]
  },
  weeksInMonth: {
    type: String,
    default: "dynamic"
  },
  firstDayOfWeek: [Number, String]
}, "calendar");
function useCalendar(props) {
  const adapter = useDate();
  const model = useProxiedModel(props, "modelValue", [], (v) => wrapInArray(v).map((i) => adapter.date(i)));
  const displayValue = computed(() => {
    if (props.displayValue) return adapter.date(props.displayValue);
    if (model.value.length > 0) return adapter.date(model.value[0]);
    if (props.min) return adapter.date(props.min);
    if (Array.isArray(props.allowedDates)) return adapter.date(props.allowedDates[0]);
    return adapter.date();
  });
  const year = useProxiedModel(props, "year", void 0, (v) => {
    const value = v != null ? Number(v) : adapter.getYear(displayValue.value);
    return adapter.startOfYear(adapter.setYear(adapter.date(), value));
  }, (v) => adapter.getYear(v));
  const month = useProxiedModel(props, "month", void 0, (v) => {
    const value = v != null ? Number(v) : adapter.getMonth(displayValue.value);
    const date = adapter.setYear(adapter.startOfMonth(adapter.date()), adapter.getYear(year.value));
    return adapter.setMonth(date, value);
  }, (v) => adapter.getMonth(v));
  const defaultFirstDayOfWeek = computed(() => {
    return props.firstDayOfWeek ?? props.weekdays[0];
  });
  const weekDays = computed(() => {
    const firstDayOfWeek = Number(props.firstDayOfWeek ?? 0);
    return props.weekdays.map((day) => (day + firstDayOfWeek) % 7);
  });
  const weeksInMonth = computed(() => {
    const weeks = adapter.getWeekArray(month.value, defaultFirstDayOfWeek.value);
    const days = weeks.flat();
    const daysInMonth2 = 6 * 7;
    if (props.weeksInMonth === "static" && days.length < daysInMonth2) {
      const lastDay = days[days.length - 1];
      let week = [];
      for (let day = 1; day <= daysInMonth2 - days.length; day++) {
        week.push(adapter.addDays(lastDay, day));
        if (day % 7 === 0) {
          weeks.push(week);
          week = [];
        }
      }
    }
    return weeks;
  });
  function genDays(days, today) {
    return days.filter((date) => {
      return weekDays.value.includes(adapter.toJsDate(date).getDay());
    }).map((date, index) => {
      const isoDate = adapter.toISO(date);
      const isAdjacent = !adapter.isSameMonth(date, month.value);
      const isStart = adapter.isSameDay(date, adapter.startOfMonth(month.value));
      const isEnd = adapter.isSameDay(date, adapter.endOfMonth(month.value));
      const isSame = adapter.isSameDay(date, month.value);
      return {
        date,
        isoDate,
        formatted: adapter.format(date, "keyboardDate"),
        year: adapter.getYear(date),
        month: adapter.getMonth(date),
        isDisabled: isDisabled(date),
        isWeekStart: index % 7 === 0,
        isWeekEnd: index % 7 === 6,
        isToday: adapter.isSameDay(date, today),
        isAdjacent,
        isHidden: isAdjacent && !props.showAdjacentMonths,
        isStart,
        isSelected: model.value.some((value) => adapter.isSameDay(date, value)),
        isEnd,
        isSame,
        localized: adapter.format(date, "dayOfMonth")
      };
    });
  }
  const daysInWeek = computed(() => {
    const lastDay = adapter.startOfWeek(displayValue.value, props.firstDayOfWeek);
    const week = [];
    for (let day = 0; day <= 6; day++) {
      week.push(adapter.addDays(lastDay, day));
    }
    const today = adapter.date();
    return genDays(week, today);
  });
  const daysInMonth = computed(() => {
    const days = weeksInMonth.value.flat();
    const today = adapter.date();
    return genDays(days, today);
  });
  const weekNumbers = computed(() => {
    return weeksInMonth.value.map((week) => {
      return week.length ? getWeek(adapter, week[0]) : null;
    });
  });
  function isDisabled(value) {
    if (props.disabled) return true;
    const date = adapter.date(value);
    if (props.min && adapter.isAfter(adapter.date(props.min), date)) return true;
    if (props.max && adapter.isAfter(date, adapter.date(props.max))) return true;
    if (Array.isArray(props.allowedDates) && props.allowedDates.length > 0) {
      return !props.allowedDates.some((d) => adapter.isSameDay(adapter.date(d), date));
    }
    if (typeof props.allowedDates === "function") {
      return !props.allowedDates(date);
    }
    return false;
  }
  return {
    displayValue,
    daysInMonth,
    daysInWeek,
    genDays,
    model,
    weeksInMonth,
    weekDays,
    weekNumbers
  };
}

const makeVDatePickerMonthProps = propsFactory({
  color: String,
  hideWeekdays: Boolean,
  multiple: [Boolean, Number, String],
  showWeek: Boolean,
  transition: {
    type: String,
    default: "picker-transition"
  },
  reverseTransition: {
    type: String,
    default: "picker-reverse-transition"
  },
  ...omit(makeCalendarProps(), ["displayValue"])
}, "VDatePickerMonth");
const VDatePickerMonth = genericComponent()({
  name: "VDatePickerMonth",
  props: makeVDatePickerMonthProps(),
  emits: {
    "update:modelValue": (date) => true,
    "update:month": (date) => true,
    "update:year": (date) => true
  },
  setup(props, _ref) {
    let {
      emit,
      slots
    } = _ref;
    const daysRef = ref();
    const {
      daysInMonth,
      model,
      weekNumbers
    } = useCalendar(props);
    const adapter = useDate();
    const rangeStart = shallowRef();
    const rangeStop = shallowRef();
    const isReverse = shallowRef(false);
    const transition = computed(() => {
      return !isReverse.value ? props.transition : props.reverseTransition;
    });
    if (props.multiple === "range" && model.value.length > 0) {
      rangeStart.value = model.value[0];
      if (model.value.length > 1) {
        rangeStop.value = model.value[model.value.length - 1];
      }
    }
    const atMax = computed(() => {
      const max = ["number", "string"].includes(typeof props.multiple) ? Number(props.multiple) : Infinity;
      return model.value.length >= max;
    });
    watch(daysInMonth, (val, oldVal) => {
      if (!oldVal) return;
      isReverse.value = adapter.isBefore(val[0].date, oldVal[0].date);
    });
    function onRangeClick(value) {
      const _value = adapter.startOfDay(value);
      if (model.value.length === 0) {
        rangeStart.value = void 0;
      } else if (model.value.length === 1) {
        rangeStart.value = model.value[0];
        rangeStop.value = void 0;
      }
      if (!rangeStart.value) {
        rangeStart.value = _value;
        model.value = [rangeStart.value];
      } else if (!rangeStop.value) {
        if (adapter.isSameDay(_value, rangeStart.value)) {
          rangeStart.value = void 0;
          model.value = [];
          return;
        } else if (adapter.isBefore(_value, rangeStart.value)) {
          rangeStop.value = adapter.endOfDay(rangeStart.value);
          rangeStart.value = _value;
        } else {
          rangeStop.value = adapter.endOfDay(_value);
        }
        const diff = adapter.getDiff(rangeStop.value, rangeStart.value, "days");
        const datesInRange = [rangeStart.value];
        for (let i = 1; i < diff; i++) {
          const nextDate = adapter.addDays(rangeStart.value, i);
          datesInRange.push(nextDate);
        }
        datesInRange.push(rangeStop.value);
        model.value = datesInRange;
      } else {
        rangeStart.value = value;
        rangeStop.value = void 0;
        model.value = [rangeStart.value];
      }
    }
    function onMultipleClick(value) {
      const index = model.value.findIndex((selection) => adapter.isSameDay(selection, value));
      if (index === -1) {
        model.value = [...model.value, value];
      } else {
        const value2 = [...model.value];
        value2.splice(index, 1);
        model.value = value2;
      }
    }
    function onClick(value) {
      if (props.multiple === "range") {
        onRangeClick(value);
      } else if (props.multiple) {
        onMultipleClick(value);
      } else {
        model.value = [value];
      }
    }
    return () => createVNode("div", {
      "class": "v-date-picker-month"
    }, [props.showWeek && createVNode("div", {
      "key": "weeks",
      "class": "v-date-picker-month__weeks"
    }, [!props.hideWeekdays && createVNode("div", {
      "key": "hide-week-days",
      "class": "v-date-picker-month__day"
    }, [createTextVNode(" ")]), weekNumbers.value.map((week) => createVNode("div", {
      "class": ["v-date-picker-month__day", "v-date-picker-month__day--adjacent"]
    }, [week]))]), createVNode(MaybeTransition, {
      "name": transition.value
    }, {
      default: () => {
        var _a;
        return [createVNode("div", {
          "ref": daysRef,
          "key": (_a = daysInMonth.value[0].date) == null ? void 0 : _a.toString(),
          "class": "v-date-picker-month__days"
        }, [!props.hideWeekdays && adapter.getWeekdays(props.firstDayOfWeek).map((weekDay) => createVNode("div", {
          "class": ["v-date-picker-month__day", "v-date-picker-month__weekday"]
        }, [weekDay])), daysInMonth.value.map((item, i) => {
          const slotProps = {
            props: {
              onClick: () => onClick(item.date)
            },
            item,
            i
          };
          if (atMax.value && !item.isSelected) {
            item.isDisabled = true;
          }
          return createVNode("div", {
            "class": ["v-date-picker-month__day", {
              "v-date-picker-month__day--adjacent": item.isAdjacent,
              "v-date-picker-month__day--hide-adjacent": item.isHidden,
              "v-date-picker-month__day--selected": item.isSelected,
              "v-date-picker-month__day--week-end": item.isWeekEnd,
              "v-date-picker-month__day--week-start": item.isWeekStart
            }],
            "data-v-date": !item.isDisabled ? item.isoDate : void 0
          }, [(props.showAdjacentMonths || !item.isAdjacent) && createVNode(VDefaultsProvider, {
            "defaults": {
              VBtn: {
                class: "v-date-picker-month__day-btn",
                color: (item.isSelected || item.isToday) && !item.isDisabled ? props.color : void 0,
                disabled: item.isDisabled,
                icon: true,
                ripple: false,
                text: item.localized,
                variant: item.isDisabled ? item.isToday ? "outlined" : "text" : item.isToday && !item.isSelected ? "outlined" : "flat",
                onClick: () => onClick(item.date)
              }
            }
          }, {
            default: () => {
              var _a2;
              return [((_a2 = slots.day) == null ? void 0 : _a2.call(slots, slotProps)) ?? createVNode(VBtn, slotProps.props, null)];
            }
          })]);
        })])];
      }
    })]);
  }
});

const makeVDatePickerMonthsProps = propsFactory({
  color: String,
  height: [String, Number],
  min: null,
  max: null,
  modelValue: Number,
  year: Number
}, "VDatePickerMonths");
const VDatePickerMonths = genericComponent()({
  name: "VDatePickerMonths",
  props: makeVDatePickerMonthsProps(),
  emits: {
    "update:modelValue": (date) => true
  },
  setup(props, _ref) {
    let {
      emit,
      slots
    } = _ref;
    const adapter = useDate();
    const model = useProxiedModel(props, "modelValue");
    const months = computed(() => {
      let date = adapter.startOfYear(adapter.date());
      if (props.year) {
        date = adapter.setYear(date, props.year);
      }
      return createRange(12).map((i) => {
        const text = adapter.format(date, "monthShort");
        const isDisabled = !!(props.min && adapter.isAfter(adapter.startOfMonth(adapter.date(props.min)), date) || props.max && adapter.isAfter(date, adapter.startOfMonth(adapter.date(props.max))));
        date = adapter.getNextMonth(date);
        return {
          isDisabled,
          text,
          value: i
        };
      });
    });
    watchEffect(() => {
      model.value = model.value ?? adapter.getMonth(adapter.date());
    });
    useRender(() => createVNode("div", {
      "class": "v-date-picker-months",
      "style": {
        height: convertToUnit(props.height)
      }
    }, [createVNode("div", {
      "class": "v-date-picker-months__content"
    }, [months.value.map((month, i) => {
      var _a;
      const btnProps = {
        active: model.value === i,
        color: model.value === i ? props.color : void 0,
        disabled: month.isDisabled,
        rounded: true,
        text: month.text,
        variant: model.value === month.value ? "flat" : "text",
        onClick: () => onClick(i)
      };
      function onClick(i2) {
        if (model.value === i2) {
          emit("update:modelValue", model.value);
          return;
        }
        model.value = i2;
      }
      return ((_a = slots.month) == null ? void 0 : _a.call(slots, {
        month,
        i,
        props: btnProps
      })) ?? createVNode(VBtn, mergeProps({
        "key": "month"
      }, btnProps), null);
    })])]));
    return {};
  }
});

const makeVDatePickerYearsProps = propsFactory({
  color: String,
  height: [String, Number],
  min: null,
  max: null,
  modelValue: Number
}, "VDatePickerYears");
const VDatePickerYears = genericComponent()({
  name: "VDatePickerYears",
  props: makeVDatePickerYearsProps(),
  emits: {
    "update:modelValue": (year) => true
  },
  setup(props, _ref) {
    let {
      emit,
      slots
    } = _ref;
    const adapter = useDate();
    const model = useProxiedModel(props, "modelValue");
    const years = computed(() => {
      const year = adapter.getYear(adapter.date());
      let min = year - 100;
      let max = year + 52;
      if (props.min) {
        min = adapter.getYear(adapter.date(props.min));
      }
      if (props.max) {
        max = adapter.getYear(adapter.date(props.max));
      }
      let date = adapter.startOfYear(adapter.date());
      date = adapter.setYear(date, min);
      return createRange(max - min + 1, min).map((i) => {
        const text = adapter.format(date, "year");
        date = adapter.setYear(date, adapter.getYear(date) + 1);
        return {
          text,
          value: i
        };
      });
    });
    watchEffect(() => {
      model.value = model.value ?? adapter.getYear(adapter.date());
    });
    const yearRef = templateRef();
    useRender(() => createVNode("div", {
      "class": "v-date-picker-years",
      "style": {
        height: convertToUnit(props.height)
      }
    }, [createVNode("div", {
      "class": "v-date-picker-years__content"
    }, [years.value.map((year, i) => {
      var _a;
      const btnProps = {
        ref: model.value === year.value ? yearRef : void 0,
        active: model.value === year.value,
        color: model.value === year.value ? props.color : void 0,
        rounded: true,
        text: year.text,
        variant: model.value === year.value ? "flat" : "text",
        onClick: () => {
          if (model.value === year.value) {
            emit("update:modelValue", model.value);
            return;
          }
          model.value = year.value;
        }
      };
      return ((_a = slots.year) == null ? void 0 : _a.call(slots, {
        year,
        i,
        props: btnProps
      })) ?? createVNode(VBtn, mergeProps({
        "key": "month"
      }, btnProps), null);
    })])]));
    return {};
  }
});

const VPickerTitle = createSimpleFunctional("v-picker-title");

const makeVPickerProps = propsFactory({
  bgColor: String,
  landscape: Boolean,
  title: String,
  hideHeader: Boolean,
  ...makeVSheetProps()
}, "VPicker");
const VPicker = genericComponent()({
  name: "VPicker",
  props: makeVPickerProps(),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor(toRef(props, "color"));
    useRender(() => {
      const sheetProps = VSheet.filterProps(props);
      const hasTitle = !!(props.title || slots.title);
      return createVNode(VSheet, mergeProps(sheetProps, {
        "color": props.bgColor,
        "class": ["v-picker", {
          "v-picker--landscape": props.landscape,
          "v-picker--with-actions": !!slots.actions
        }, props.class],
        "style": props.style
      }), {
        default: () => {
          var _a;
          return [!props.hideHeader && createVNode("div", {
            "key": "header",
            "class": [backgroundColorClasses.value],
            "style": [backgroundColorStyles.value]
          }, [hasTitle && createVNode(VPickerTitle, {
            "key": "picker-title"
          }, {
            default: () => {
              var _a2;
              return [((_a2 = slots.title) == null ? void 0 : _a2.call(slots)) ?? props.title];
            }
          }), slots.header && createVNode("div", {
            "class": "v-picker__header"
          }, [slots.header()])]), createVNode("div", {
            "class": "v-picker__body"
          }, [(_a = slots.default) == null ? void 0 : _a.call(slots)]), slots.actions && createVNode(VDefaultsProvider, {
            "defaults": {
              VBtn: {
                slim: true,
                variant: "text"
              }
            }
          }, {
            default: () => [createVNode("div", {
              "class": "v-picker__actions"
            }, [slots.actions()])]
          })];
        }
      });
    });
    return {};
  }
});

const makeVDatePickerProps = propsFactory({
  // TODO: implement in v3.5
  // calendarIcon: {
  //   type: String,
  //   default: '$calendar',
  // },
  // keyboardIcon: {
  //   type: String,
  //   default: '$edit',
  // },
  // inputMode: {
  //   type: String as PropType<'calendar' | 'keyboard'>,
  //   default: 'calendar',
  // },
  // inputText: {
  //   type: String,
  //   default: '$vuetify.datePicker.input.placeholder',
  // },
  // inputPlaceholder: {
  //   type: String,
  //   default: 'dd/mm/yyyy',
  // },
  header: {
    type: String,
    default: "$vuetify.datePicker.header"
  },
  ...makeVDatePickerControlsProps(),
  ...makeVDatePickerMonthProps({
    weeksInMonth: "static"
  }),
  ...omit(makeVDatePickerMonthsProps(), ["modelValue"]),
  ...omit(makeVDatePickerYearsProps(), ["modelValue"]),
  ...makeVPickerProps({
    title: "$vuetify.datePicker.title"
  }),
  modelValue: null
}, "VDatePicker");
const VDatePicker = genericComponent()({
  name: "VDatePicker",
  props: makeVDatePickerProps(),
  emits: {
    "update:modelValue": (date) => true,
    "update:month": (date) => true,
    "update:year": (date) => true,
    // 'update:inputMode': (date: any) => true,
    "update:viewMode": (date) => true
  },
  setup(props, _ref) {
    let {
      emit,
      slots
    } = _ref;
    const adapter = useDate();
    const {
      t
    } = useLocale();
    const model = useProxiedModel(props, "modelValue", void 0, (v) => wrapInArray(v).map((i) => adapter.date(i)), (v) => props.multiple ? v : v[0]);
    const viewMode = useProxiedModel(props, "viewMode");
    const minDate = computed(() => {
      const date = adapter.date(props.min);
      return props.min && adapter.isValid(date) ? date : null;
    });
    const maxDate = computed(() => {
      const date = adapter.date(props.max);
      return props.max && adapter.isValid(date) ? date : null;
    });
    const internal = computed(() => {
      var _a;
      const today = adapter.date();
      let value = today;
      if ((_a = model.value) == null ? void 0 : _a[0]) {
        value = adapter.date(model.value[0]);
      } else if (minDate.value && adapter.isBefore(today, minDate.value)) {
        value = minDate.value;
      } else if (maxDate.value && adapter.isAfter(today, maxDate.value)) {
        value = maxDate.value;
      }
      return value && adapter.isValid(value) ? value : today;
    });
    const month = ref(Number(props.month ?? adapter.getMonth(adapter.startOfMonth(internal.value))));
    const year = ref(Number(props.year ?? adapter.getYear(adapter.startOfYear(adapter.setMonth(internal.value, month.value)))));
    const isReversing = shallowRef(false);
    const header = computed(() => {
      if (props.multiple && model.value.length > 1) {
        return t("$vuetify.datePicker.itemsSelected", model.value.length);
      }
      return model.value[0] && adapter.isValid(model.value[0]) ? adapter.format(adapter.date(model.value[0]), "normalDateWithWeekday") : t(props.header);
    });
    const text = computed(() => {
      let date = adapter.date();
      date = adapter.setDate(date, 1);
      date = adapter.setMonth(date, month.value);
      date = adapter.setYear(date, year.value);
      return adapter.format(date, "monthAndYear");
    });
    const headerTransition = computed(() => `date-picker-header${isReversing.value ? "-reverse" : ""}-transition`);
    const disabled = computed(() => {
      if (props.disabled) return true;
      const targets = [];
      if (viewMode.value !== "month") {
        targets.push(...["prev", "next"]);
      } else {
        let _date = adapter.date();
        _date = adapter.startOfMonth(_date);
        _date = adapter.setMonth(_date, month.value);
        _date = adapter.setYear(_date, year.value);
        if (minDate.value) {
          const date = adapter.addDays(adapter.startOfMonth(_date), -1);
          adapter.isAfter(minDate.value, date) && targets.push("prev");
        }
        if (maxDate.value) {
          const date = adapter.addDays(adapter.endOfMonth(_date), 1);
          adapter.isAfter(date, maxDate.value) && targets.push("next");
        }
      }
      return targets;
    });
    function onClickNext() {
      if (month.value < 11) {
        month.value++;
      } else {
        year.value++;
        month.value = 0;
        onUpdateYear(year.value);
      }
      onUpdateMonth(month.value);
    }
    function onClickPrev() {
      if (month.value > 0) {
        month.value--;
      } else {
        year.value--;
        month.value = 11;
        onUpdateYear(year.value);
      }
      onUpdateMonth(month.value);
    }
    function onClickDate() {
      viewMode.value = "month";
    }
    function onClickMonth() {
      viewMode.value = viewMode.value === "months" ? "month" : "months";
    }
    function onClickYear() {
      viewMode.value = viewMode.value === "year" ? "month" : "year";
    }
    function onUpdateMonth(value) {
      if (viewMode.value === "months") onClickMonth();
      emit("update:month", value);
    }
    function onUpdateYear(value) {
      if (viewMode.value === "year") onClickYear();
      emit("update:year", value);
    }
    watch(model, (val, oldVal) => {
      const arrBefore = wrapInArray(oldVal);
      const arrAfter = wrapInArray(val);
      if (!arrAfter.length) return;
      const before = adapter.date(arrBefore[arrBefore.length - 1]);
      const after = adapter.date(arrAfter[arrAfter.length - 1]);
      const newMonth = adapter.getMonth(after);
      const newYear = adapter.getYear(after);
      if (newMonth !== month.value) {
        month.value = newMonth;
        onUpdateMonth(month.value);
      }
      if (newYear !== year.value) {
        year.value = newYear;
        onUpdateYear(year.value);
      }
      isReversing.value = adapter.isBefore(before, after);
    });
    useRender(() => {
      const pickerProps = VPicker.filterProps(props);
      const datePickerControlsProps = VDatePickerControls.filterProps(props);
      const datePickerHeaderProps = VDatePickerHeader.filterProps(props);
      const datePickerMonthProps = VDatePickerMonth.filterProps(props);
      const datePickerMonthsProps = omit(VDatePickerMonths.filterProps(props), ["modelValue"]);
      const datePickerYearsProps = omit(VDatePickerYears.filterProps(props), ["modelValue"]);
      const headerProps = {
        header: header.value,
        transition: headerTransition.value
      };
      return createVNode(VPicker, mergeProps(pickerProps, {
        "class": ["v-date-picker", `v-date-picker--${viewMode.value}`, {
          "v-date-picker--show-week": props.showWeek
        }, props.class],
        "style": props.style
      }), {
        title: () => {
          var _a;
          return ((_a = slots.title) == null ? void 0 : _a.call(slots)) ?? createVNode("div", {
            "class": "v-date-picker__title"
          }, [t(props.title)]);
        },
        header: () => slots.header ? createVNode(VDefaultsProvider, {
          "defaults": {
            VDatePickerHeader: {
              ...headerProps
            }
          }
        }, {
          default: () => {
            var _a;
            return [(_a = slots.header) == null ? void 0 : _a.call(slots, headerProps)];
          }
        }) : createVNode(VDatePickerHeader, mergeProps({
          "key": "header"
        }, datePickerHeaderProps, headerProps, {
          "onClick": viewMode.value !== "month" ? onClickDate : void 0
        }), {
          ...slots,
          default: void 0
        }),
        default: () => createVNode(Fragment, null, [createVNode(VDatePickerControls, mergeProps(datePickerControlsProps, {
          "disabled": disabled.value,
          "text": text.value,
          "onClick:next": onClickNext,
          "onClick:prev": onClickPrev,
          "onClick:month": onClickMonth,
          "onClick:year": onClickYear
        }), null), createVNode(VFadeTransition, {
          "hideOnLeave": true
        }, {
          default: () => [viewMode.value === "months" ? createVNode(VDatePickerMonths, mergeProps({
            "key": "date-picker-months"
          }, datePickerMonthsProps, {
            "modelValue": month.value,
            "onUpdate:modelValue": [($event) => month.value = $event, onUpdateMonth],
            "min": minDate.value,
            "max": maxDate.value,
            "year": year.value
          }), null) : viewMode.value === "year" ? createVNode(VDatePickerYears, mergeProps({
            "key": "date-picker-years"
          }, datePickerYearsProps, {
            "modelValue": year.value,
            "onUpdate:modelValue": [($event) => year.value = $event, onUpdateYear],
            "min": minDate.value,
            "max": maxDate.value
          }), null) : createVNode(VDatePickerMonth, mergeProps({
            "key": "date-picker-month"
          }, datePickerMonthProps, {
            "modelValue": model.value,
            "onUpdate:modelValue": ($event) => model.value = $event,
            "month": month.value,
            "onUpdate:month": [($event) => month.value = $event, onUpdateMonth],
            "year": year.value,
            "onUpdate:year": [($event) => year.value = $event, onUpdateYear],
            "min": minDate.value,
            "max": maxDate.value
          }), null)]
        })]),
        actions: slots.actions
      });
    });
    return {};
  }
});

const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  __name: "studioUtils",
  __ssrInlineRender: true,
  emits: ["update:content", "save"],
  setup(__props, { emit: __emit }) {
    const emit = __emit;
    const userStore = useUserStore();
    const tab = ref("type");
    const showCodeDialog = ref(false);
    const codeTab = ref("template");
    const generatedCode = ref("");
    const showSnackbarMessage = ref(false);
    const snackbarText = ref("Code copied to clipboard");
    const snackbarColor = ref("success");
    const customTemplateName = ref("");
    Chart.register(
      CategoryScale,
      LinearScale,
      BarElement,
      LineElement,
      PointElement,
      ArcElement,
      RadialLinearScale,
      Title,
      Tooltip,
      Legend
    );
    const componentTypes = [
      { text: "Button", value: "button" },
      { text: "Badge", value: "badge" },
      { text: "Alert", value: "alert" },
      { text: "Chip", value: "chip" },
      { text: "Date Picker", value: "date" },
      { text: "Data Table", value: "table" },
      { text: "Chart", value: "chart" },
      { text: "File Upload", value: "file" }
    ];
    const selectedType = ref("button");
    const variants = ["text", "outlined", "plain", "elevated", "tonal", "flat"];
    const sizes = ["x-small", "small", "default", "large", "x-large"];
    const positions = ["top start", "top end", "bottom start", "bottom end"];
    const gradients = [
      "to top right",
      "to right",
      "to bottom right",
      "to bottom",
      "to bottom left",
      "to left",
      "to top left",
      "to top"
    ];
    const eventTypes = [
      "click",
      "change",
      "input",
      "focus",
      "blur",
      "mouseenter",
      "mouseleave",
      "submit"
    ];
    const transitions = [
      "none",
      "fade",
      "slide-x",
      "slide-y",
      "scale",
      "scroll-x",
      "scroll-y"
    ];
    const buttonTypes = [
      "button",
      "submit",
      "reset"
    ];
    const colors = [
      { text: "Default", value: "default" },
      { text: "Primary", value: "primary" },
      { text: "Secondary", value: "secondary" },
      { text: "Success", value: "success" },
      { text: "Info", value: "info" },
      { text: "Warning", value: "warning" },
      { text: "Error", value: "error" }
    ];
    const properties = ref({
      variant: "elevated",
      size: "default",
      color: "primary",
      text: "",
      icon: "",
      description: "",
      position: "top end",
      rounded: false,
      block: false,
      disabled: false,
      loading: false,
      href: "",
      target: "_self",
      elevation: 0,
      gradient: "",
      date: ref([]),
      landscape: false,
      multiple: false,
      fullWidth: false,
      showWeek: false,
      title: "",
      showAdjacentMonths: true,
      eventType: "click",
      eventHandler: "",
      stopPropagation: false,
      preventDefault: false,
      transition: "none",
      transitionDuration: 300,
      ripple: true,
      eager: false,
      closeOnContentClick: false,
      closeOnBack: false,
      buttonType: "button",
      formAction: "",
      tableHeaders: [
        { title: "Name", key: "name", sortable: true },
        { title: "Email", key: "email", sortable: true },
        { title: "Status", key: "status", sortable: false }
      ],
      tableItems: [
        { name: "John Doe", email: "john@example.com", status: "Active" },
        { name: "Jack Smith", email: "jack@example.com", status: "Pending" },
        { name: "Bob Johnson", email: "bob@example.com", status: "Inactive" }
      ],
      itemsPerPage: 5,
      sortBy: "name",
      sortOrder: "asc",
      showSelect: false,
      showFooter: true,
      dense: false,
      chartType: "bar",
      chartData: [12, 19, 3, 5, 2, 3],
      chartLabels: ["Red", "Blue", "Yellow", "Green", "Purple", "Orange"],
      showLegend: true,
      responsive: true,
      maintainAspectRatio: true,
      acceptTypes: "image/*",
      maxFiles: 5,
      maxSize: 2,
      dropzoneText: "Drop files here or click to upload",
      showPreview: true,
      autoUpload: true,
      chips: true,
      counter: true,
      validateOnSelect: true,
      returnObject: false
    });
    const showIconField = computed(() => ["button", "badge", "alert", "chip"].includes(selectedType.value));
    const showPosition = computed(() => selectedType.value === "badge");
    const showDescription = computed(() => selectedType.value === "alert");
    const chartData = computed(() => {
      const chartColors = ["#FF6384", "#36A2EB", "#FFCE56", "#4BC0C0", "#9966FF", "#FF9F40"];
      return {
        labels: properties.value.chartLabels,
        datasets: [{
          label: "Dataset",
          data: properties.value.chartData,
          backgroundColor: chartColors,
          borderColor: properties.value.chartType === "line" ? "#36A2EB" : chartColors,
          borderWidth: 1
        }]
      };
    });
    const chartOptions = computed(() => {
      return {
        responsive: properties.value.responsive,
        maintainAspectRatio: properties.value.maintainAspectRatio,
        plugins: {
          legend: {
            display: properties.value.showLegend
          }
        }
      };
    });
    const generateUtilsCode = () => {
      const templateCode = generateTemplateCode();
      const scriptCode = generateScriptCode();
      const themeCode = theme;
      switch (codeTab.value) {
        case "template":
          return templateCode;
        case "script":
          return scriptCode;
        case "style":
          return themeCode;
        default:
          return `${templateCode}

${scriptCode}

${themeCode}`;
      }
    };
    const generateTemplateCode = () => {
      let code = "";
      switch (selectedType.value) {
        case "button":
          code = `<v-btn
`;
          if (properties.value.color !== "default") code += `  color="${properties.value.color}"
`;
          if (properties.value.variant !== "elevated") code += `  variant="${properties.value.variant}"
`;
          if (properties.value.size !== "default") code += `  size="${properties.value.size}"
`;
          if (properties.value.disabled) code += `  disabled
`;
          if (properties.value.block) code += `  block
`;
          if (properties.value.rounded) code += `  rounded
`;
          if (properties.value.icon) code += `  prepend-icon="${properties.value.icon}"
`;
          if (properties.value.href) code += `  href="${properties.value.href}"
`;
          if (properties.value.target !== "_self") code += `  target="${properties.value.target}"
`;
          if (properties.value.elevation > 0) code += `  elevation="${properties.value.elevation}"
`;
          if (properties.value.loading) code += `  loading
`;
          if (properties.value.gradient) {
            code += `  :style="{ background: 'linear-gradient(${properties.value.gradient}, ${properties.value.color}, ${properties.value.color}80)' }"
`;
          }
          if (properties.value.buttonType !== "button") code += `  type="${properties.value.buttonType}"
`;
          if (properties.value.buttonType === "submit" && properties.value.formAction) {
            code += `  form-action="${properties.value.formAction}"
`;
          }
          if (properties.value.ripple === false) code += `  :ripple="false"
`;
          if (properties.value.eventHandler) {
            const eventModifiers = [];
            if (properties.value.stopPropagation) eventModifiers.push("stop");
            if (properties.value.preventDefault) eventModifiers.push("prevent");
            const eventWithModifiers = eventModifiers.length > 0 ? `${properties.value.eventType}.${eventModifiers.join(".")}` : properties.value.eventType;
            code += `  @${eventWithModifiers}="${properties.value.eventHandler}"
`;
          }
          if (properties.value.transition !== "none") {
            code += `  transition="${properties.value.transition}"
`;
            code += `  :transition-duration="${properties.value.transitionDuration}"
`;
          }
          code += `>
  ${properties.value.text || "Button"}
</v-btn>`;
          break;
        case "badge":
          code = `<v-badge
`;
          code += `  content="${properties.value.text}"
`;
          if (properties.value.color !== "default") code += `  color="${properties.value.color}"
`;
          code += `  location="${properties.value.position}"
`;
          if (properties.value.transition !== "none") {
            code += `  transition="${properties.value.transition}"
`;
            code += `  :transition-duration="${properties.value.transitionDuration}"
`;
          }
          if (properties.value.closeOnContentClick) code += `  close-on-content-click
`;
          if (properties.value.eager) code += `  eager
`;
          code += `>
  <v-avatar size="48">
`;
          code += `    <v-icon>${properties.value.icon || "mdi-account"}</v-icon>
`;
          code += `  </v-avatar>
</v-badge>`;
          break;
        case "alert":
          code = `<v-alert
`;
          if (properties.value.color !== "default") code += `  type="${properties.value.color}"
`;
          if (properties.value.variant !== "elevated") code += `  variant="${properties.value.variant}"
`;
          if (properties.value.text) code += `  title="${properties.value.text}"
`;
          if (properties.value.description) code += `  text="${properties.value.description}"
`;
          if (properties.value.icon) code += `  icon="${properties.value.icon}"
`;
          if (properties.value.transition !== "none") {
            code += `  transition="${properties.value.transition}"
`;
            code += `  :transition-duration="${properties.value.transitionDuration}"
`;
          }
          if (properties.value.closeOnBack) code += `  close-on-back
`;
          if (properties.value.eventHandler) {
            const eventModifiers = [];
            if (properties.value.stopPropagation) eventModifiers.push("stop");
            if (properties.value.preventDefault) eventModifiers.push("prevent");
            const eventWithModifiers = eventModifiers.length > 0 ? `${properties.value.eventType}.${eventModifiers.join(".")}` : properties.value.eventType;
            code += `  @${eventWithModifiers}="${properties.value.eventHandler}"
`;
          }
          code += `></v-alert>`;
          break;
        case "chip":
          code = `<v-chip
`;
          if (properties.value.color !== "default") code += `  color="${properties.value.color}"
`;
          if (properties.value.variant !== "elevated") code += `  variant="${properties.value.variant}"
`;
          if (properties.value.size !== "default") code += `  size="${properties.value.size}"
`;
          if (properties.value.icon) code += `  prepend-icon="${properties.value.icon}"
`;
          if (properties.value.ripple === false) code += `  :ripple="false"
`;
          if (properties.value.transition !== "none") {
            code += `  transition="${properties.value.transition}"
`;
            code += `  :transition-duration="${properties.value.transitionDuration}"
`;
          }
          if (properties.value.eventHandler) {
            const eventModifiers = [];
            if (properties.value.stopPropagation) eventModifiers.push("stop");
            if (properties.value.preventDefault) eventModifiers.push("prevent");
            const eventWithModifiers = eventModifiers.length > 0 ? `${properties.value.eventType}.${eventModifiers.join(".")}` : properties.value.eventType;
            code += `  @${eventWithModifiers}="${properties.value.eventHandler}"
`;
          }
          code += `>
  ${properties.value.text || "Chip"}
</v-chip>`;
          break;
        case "date":
          code = `<v-date-picker
`;
          code += `  v-model="date"
`;
          if (properties.value.color !== "default") code += `  color="${properties.value.color}"
`;
          if (properties.value.variant !== "elevated") code += `  variant="${properties.value.variant}"
`;
          if (properties.value.multiple) code += `  multiple
`;
          if (properties.value.landscape) code += `  landscape
`;
          if (properties.value.showWeek) code += `  show-week-numbers
`;
          if (properties.value.showAdjacentMonths) code += `  show-adjacent-months
`;
          if (properties.value.title) code += `  title="${properties.value.title}"
`;
          if (properties.value.fullWidth) code += `  width="100%"
`;
          if (properties.value.transition !== "none") {
            code += `  transition="${properties.value.transition}"
`;
            code += `  :transition-duration="${properties.value.transitionDuration}"
`;
          }
          if (properties.value.eager) code += `  eager
`;
          if (properties.value.eventHandler) {
            const eventModifiers = [];
            if (properties.value.stopPropagation) eventModifiers.push("stop");
            if (properties.value.preventDefault) eventModifiers.push("prevent");
            const eventWithModifiers = eventModifiers.length > 0 ? `${properties.value.eventType}.${eventModifiers.join(".")}` : properties.value.eventType;
            code += `  @${eventWithModifiers}="${properties.value.eventHandler}"
`;
          }
          code += `  class="elevation-4"
`;
          code += `></v-date-picker>`;
          break;
        case "table":
          code = `<v-data-table
`;
          code += `  :headers="tableHeaders"
`;
          code += `  :items="tableItems"
`;
          code += `  :items-per-page="${properties.value.itemsPerPage}"
`;
          code += `  :sort-by="[{ key: '${properties.value.sortBy}', order: '${properties.value.sortOrder}' }]"
`;
          if (properties.value.showSelect) code += `  show-select
`;
          if (properties.value.showFooter) code += `  show-footer
`;
          if (properties.value.dense) code += `  dense
`;
          code += `>
`;
          code += `</v-data-table>`;
          break;
        case "chart":
          code = `<div style="position: relative; height: 300px;">
`;
          const chartComponent = properties.value.chartType === "bar" ? "Bar" : properties.value.chartType === "line" ? "Line" : properties.value.chartType === "pie" ? "Pie" : properties.value.chartType === "doughnut" ? "Doughnut" : properties.value.chartType === "polarArea" ? "PolarArea" : "Radar";
          code += `  <${chartComponent}
`;
          code += `    :data="chartData"
`;
          code += `    :options="chartOptions"
`;
          code += `  />
`;
          code += `</div>`;
          break;
        case "file":
          code = `<v-file-input
`;
          if (properties.value.multiple) code += `  multiple
`;
          code += `  :accept="${properties.value.acceptTypes}"
`;
          code += `  :max-files="${properties.value.maxFiles}"
`;
          code += `  :max-size="${properties.value.maxSize * 1024 * 1024}"
`;
          code += `  :show-size="true"
`;
          code += `  label="${properties.value.dropzoneText}"
`;
          if (properties.value.color !== "default") code += `  color="${properties.value.color}"
`;
          code += `  variant="outlined"
`;
          if (properties.value.showPreview) code += `  show-preview
`;
          if (properties.value.chips) code += `  chips
`;
          if (properties.value.counter) code += `  counter
`;
          if (properties.value.validateOnSelect) code += `  validate-on-select
`;
          if (properties.value.returnObject) code += `  return-object
`;
          if (properties.value.autoUpload) code += `  auto-upload
`;
          if (properties.value.disabled) code += `  disabled
`;
          if (properties.value.eventHandler) {
            const eventModifiers = [];
            if (properties.value.stopPropagation) eventModifiers.push("stop");
            if (properties.value.preventDefault) eventModifiers.push("prevent");
            const eventWithModifiers = eventModifiers.length > 0 ? `${properties.value.eventType}.${eventModifiers.join(".")}` : properties.value.eventType;
            code += `  @${eventWithModifiers}="${properties.value.eventHandler}"
`;
          }
          code += `  prepend-icon="mdi-file-upload"
`;
          code += `></v-file-input>`;
          break;
      }
      return code;
    };
    const generateScriptCode = () => {
      let code = "";
      if (selectedType.value === "chart") {
        code = `
import { ref } from 'vue';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  PointElement,
  ArcElement,
  RadialLinearScale,
  Title,
  Tooltip,
  Legend
} from 'chart.js';
import { ${properties.value.chartType === "bar" ? "Bar" : properties.value.chartType === "line" ? "Line" : properties.value.chartType === "pie" ? "Pie" : properties.value.chartType === "doughnut" ? "Doughnut" : properties.value.chartType === "polarArea" ? "PolarArea" : "Radar"} } from 'vue-chartjs';

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  PointElement,
  ArcElement,
  RadialLinearScale,
  Title,
  Tooltip,
  Legend
);

const chartColors = ref(['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40']);

const chartData = ref({
  labels: ${JSON.stringify(properties.value.chartLabels)},
  datasets: [{
    label: 'Dataset',
    data: ${JSON.stringify(properties.value.chartData)},
    backgroundColor: chartColors.value,
    borderColor: ${properties.value.chartType === "line" ? "'#36A2EB'" : "chartColors.value"},
    borderWidth: 1
  }]
});

const chartOptions = ref({
  responsive: ${properties.value.responsive},
  maintainAspectRatio: ${properties.value.maintainAspectRatio},
  plugins: { 
    legend: { 
      display: ${properties.value.showLegend} 
    } 
  }
});
`;
      } else if (selectedType.value === "table") {
        code = `
import { ref } from 'vue';

const tableHeaders = ref(${JSON.stringify(properties.value.tableHeaders, null, 2)});

const tableItems = ref(${JSON.stringify(properties.value.tableItems, null, 2)});
`;
      } else {
        code = `
import { ref } from 'vue';
`;
      }
      return code;
    };
    const previewCode = () => {
      generatedCode.value = generateUtilsCode();
      showCodeDialog.value = true;
    };
    const copyUtilsCode = () => {
      const templateCode = generateTemplateCode();
      const scriptCode = generateScriptCode();
      const fullCode = `${templateCode}

${scriptCode}`;
      (void 0).clipboard.writeText(fullCode).then(() => {
        snackbarText.value = "Code copied to clipboard!";
        showSnackbarMessage.value = true;
      }).catch((err) => {
        console.error("Error copying:", err);
      });
    };
    const copyCurrentTab = () => {
      let code;
      switch (codeTab.value) {
        case "template":
          code = generateTemplateCode();
          break;
        case "script":
          code = generateScriptCode();
          break;
        case "style":
          code = theme;
          break;
        default:
          code = "";
      }
      (void 0).navigator.clipboard.writeText(code).catch((err) => {
        console.error("Error copying:", err);
      });
    };
    const generateCodeSilently = () => {
      const code = generateUtilsCode();
      emit("update:content", code);
    };
    const applyTemplate = (template) => {
      const templateData = getUtilsTemplate(template);
      if (!templateData) {
        snackbarText.value = "Template not found";
        showSnackbarMessage.value = true;
        return;
      }
      if (templateData.type) {
        selectedType.value = templateData.type;
      }
      Object.assign(properties.value, templateData);
      snackbarText.value = `Template "${template}" applied successfully!`;
      showSnackbarMessage.value = true;
      generateCodeSilently();
    };
    const saveCurrentTemplate = async () => {
      if (!customTemplateName.value) {
        snackbarText.value = "Please enter a template name";
        showSnackbarMessage.value = true;
        return;
      }
      const templateData = {
        type: selectedType.value,
        properties: JSON.parse(JSON.stringify(properties.value)),
        tableHeaders: properties.value.tableHeaders ? [...properties.value.tableHeaders] : [],
        tableItems: properties.value.tableItems ? [...properties.value.tableItems] : [],
        chartData: properties.value.chartData ? [...properties.value.chartData] : [],
        chartLabels: properties.value.chartLabels ? [...properties.value.chartLabels] : []
      };
      const response = await userStore.saveTemplate(customTemplateName.value, templateData, "utils");
      if (response) {
        snackbarText.value = `Template "${customTemplateName.value}" saved successfully`;
        showSnackbarMessage.value = true;
        customTemplateName.value = "";
        await userStore.loadData();
      } else {
        snackbarText.value = `Failed to save template "${customTemplateName.value}"`;
        showSnackbarMessage.value = true;
      }
    };
    const addTableHeader = () => {
      properties.value.tableHeaders.push({
        title: "New Column",
        key: "newColumn" + properties.value.tableHeaders.length,
        sortable: true
      });
    };
    const addTableItem = () => {
      const newItem = {};
      properties.value.tableHeaders.forEach((header) => {
        newItem[header.key] = "";
      });
      properties.value.tableItems.push(newItem);
    };
    const getSortableKeys = () => {
      return properties.value.tableHeaders.filter((header) => header.sortable).map((header) => header.key);
    };
    const addChartDataPoint = () => {
      properties.value.chartData.push(0);
      properties.value.chartLabels.push("Label " + properties.value.chartLabels.length);
    };
    const removeChartDataPoint = (index) => {
      properties.value.chartData.splice(index, 1);
      properties.value.chartLabels.splice(index, 1);
    };
    watch(() => {
      return "";
    }, () => {
    }, { immediate: true });
    watch([selectedType, properties], () => {
      generateCodeSilently();
    }, { deep: true });
    return (_ctx, _push, _parent, _attrs) => {
      _push(ssrRenderComponent(VApp, _attrs, {
        default: withCtx((_, _push2, _parent2, _scopeId) => {
          if (_push2) {
            _push2(ssrRenderComponent(VMain, { class: "w-100 h-100 overflow-hidden d-flex" }, {
              default: withCtx((_2, _push3, _parent3, _scopeId2) => {
                if (_push3) {
                  _push3(`<div class="control-panel" style="${ssrRenderStyle({ "width": "350px" })}" data-v-ce248d1e${_scopeId2}>`);
                  _push3(ssrRenderComponent(VCard, {
                    flat: "",
                    class: "fill-height"
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(`<div class="px-4 py-2 d-flex align-center" data-v-ce248d1e${_scopeId3}>`);
                        _push4(ssrRenderComponent(VChip, {
                          color: "success",
                          "prepend-icon": "mdi-vuejs",
                          size: "small",
                          class: "mr-2 px-4 py-2"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(`Vue.js`);
                            } else {
                              return [
                                createTextVNode("Vue.js")
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VChip, {
                          color: "info",
                          "prepend-icon": "mdi-vuetify",
                          size: "small",
                          class: "mr-2 px-4 py-2"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(`Vuetify`);
                            } else {
                              return [
                                createTextVNode("Vuetify")
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(`</div>`);
                        _push4(ssrRenderComponent(VTabs, {
                          modelValue: tab.value,
                          "onUpdate:modelValue": ($event) => tab.value = $event,
                          color: "primary",
                          "align-tabs": "center",
                          class: "px-4"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VTab, { value: "type" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Type`);
                                  } else {
                                    return [
                                      createTextVNode("Type")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VTab, { value: "style" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Style`);
                                  } else {
                                    return [
                                      createTextVNode("Style")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VTab, { value: "content" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Content`);
                                  } else {
                                    return [
                                      createTextVNode("Content")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VTab, { value: "actions" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Actions`);
                                  } else {
                                    return [
                                      createTextVNode("Actions")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VTab, { value: "templates" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`Templates`);
                                  } else {
                                    return [
                                      createTextVNode("Templates")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VTab, { value: "type" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Type")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "style" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Style")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "content" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Content")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "actions" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Actions")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "templates" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Templates")
                                  ]),
                                  _: 1
                                })
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VDivider, null, null, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VCardText, {
                          class: "pa-0 fill-height",
                          style: { "overflow-y": "auto" }
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VWindow, {
                                modelValue: tab.value,
                                "onUpdate:modelValue": ($event) => tab.value = $event,
                                class: "fill-height"
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VWindowItem, { value: "type" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-ce248d1e${_scopeId6}><div class="section-title d-flex align-center mb-3" data-v-ce248d1e${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-shape`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-shape")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-ce248d1e${_scopeId6}>Component Type</span></div>`);
                                          _push7(ssrRenderComponent(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VRadioGroup, {
                                                  modelValue: selectedType.value,
                                                  "onUpdate:modelValue": ($event) => selectedType.value = $event,
                                                  class: "mb-4"
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`<!--[-->`);
                                                      ssrRenderList(componentTypes, (type) => {
                                                        _push9(ssrRenderComponent(VRadio, {
                                                          key: type.value,
                                                          value: type.value,
                                                          label: type.text
                                                        }, null, _parent9, _scopeId8));
                                                      });
                                                      _push9(`<!--]-->`);
                                                    } else {
                                                      return [
                                                        (openBlock(), createBlock(Fragment, null, renderList(componentTypes, (type) => {
                                                          return createVNode(VRadio, {
                                                            key: type.value,
                                                            value: type.value,
                                                            label: type.text
                                                          }, null, 8, ["value", "label"]);
                                                        }), 64))
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VRadioGroup, {
                                                    modelValue: selectedType.value,
                                                    "onUpdate:modelValue": ($event) => selectedType.value = $event,
                                                    class: "mb-4"
                                                  }, {
                                                    default: withCtx(() => [
                                                      (openBlock(), createBlock(Fragment, null, renderList(componentTypes, (type) => {
                                                        return createVNode(VRadio, {
                                                          key: type.value,
                                                          value: type.value,
                                                          label: type.text
                                                        }, null, 8, ["value", "label"]);
                                                      }), 64))
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-shape")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Component Type")
                                              ]),
                                              createVNode(VCard, { class: "mb-4 pa-3" }, {
                                                default: withCtx(() => [
                                                  createVNode(VRadioGroup, {
                                                    modelValue: selectedType.value,
                                                    "onUpdate:modelValue": ($event) => selectedType.value = $event,
                                                    class: "mb-4"
                                                  }, {
                                                    default: withCtx(() => [
                                                      (openBlock(), createBlock(Fragment, null, renderList(componentTypes, (type) => {
                                                        return createVNode(VRadio, {
                                                          key: type.value,
                                                          value: type.value,
                                                          label: type.text
                                                        }, null, 8, ["value", "label"]);
                                                      }), 64))
                                                    ]),
                                                    _: 1
                                                  }, 8, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "style" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-ce248d1e${_scopeId6}><div class="section-title d-flex align-center mb-3" data-v-ce248d1e${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-palette`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-palette")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-ce248d1e${_scopeId6}>Appearance</span></div><div class="mb-4" data-v-ce248d1e${_scopeId6}><label class="text-subtitle-2 mb-2" data-v-ce248d1e${_scopeId6}>Variant</label>`);
                                          _push7(ssrRenderComponent(VChipGroup, {
                                            modelValue: properties.value.variant,
                                            "onUpdate:modelValue": ($event) => properties.value.variant = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<!--[-->`);
                                                ssrRenderList(variants, (variant) => {
                                                  _push8(ssrRenderComponent(VChip, {
                                                    key: variant,
                                                    size: "small",
                                                    value: variant
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`${ssrInterpolate(variant)}`);
                                                      } else {
                                                        return [
                                                          createTextVNode(toDisplayString(variant), 1)
                                                        ];
                                                      }
                                                    }),
                                                    _: 2
                                                  }, _parent8, _scopeId7));
                                                });
                                                _push8(`<!--]-->`);
                                              } else {
                                                return [
                                                  (openBlock(), createBlock(Fragment, null, renderList(variants, (variant) => {
                                                    return createVNode(VChip, {
                                                      key: variant,
                                                      size: "small",
                                                      value: variant
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(toDisplayString(variant), 1)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value"]);
                                                  }), 64))
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div><div class="mb-4" data-v-ce248d1e${_scopeId6}><label class="text-subtitle-2 mb-2" data-v-ce248d1e${_scopeId6}>Size</label>`);
                                          _push7(ssrRenderComponent(VChipGroup, {
                                            modelValue: properties.value.size,
                                            "onUpdate:modelValue": ($event) => properties.value.size = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<!--[-->`);
                                                ssrRenderList(sizes, (size) => {
                                                  _push8(ssrRenderComponent(VChip, {
                                                    key: size,
                                                    size: "small",
                                                    value: size
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(`${ssrInterpolate(size)}`);
                                                      } else {
                                                        return [
                                                          createTextVNode(toDisplayString(size), 1)
                                                        ];
                                                      }
                                                    }),
                                                    _: 2
                                                  }, _parent8, _scopeId7));
                                                });
                                                _push8(`<!--]-->`);
                                              } else {
                                                return [
                                                  (openBlock(), createBlock(Fragment, null, renderList(sizes, (size) => {
                                                    return createVNode(VChip, {
                                                      key: size,
                                                      size: "small",
                                                      value: size
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(toDisplayString(size), 1)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value"]);
                                                  }), 64))
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div><div class="mb-4" data-v-ce248d1e${_scopeId6}><label class="text-subtitle-2 mb-2" data-v-ce248d1e${_scopeId6}>Color</label>`);
                                          _push7(ssrRenderComponent(VBtnToggle, {
                                            modelValue: properties.value.color,
                                            "onUpdate:modelValue": ($event) => properties.value.color = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            "selected-class": "border-primary"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<!--[-->`);
                                                ssrRenderList(colors, (color) => {
                                                  _push8(ssrRenderComponent(VBtn, {
                                                    key: color.value,
                                                    value: color.value,
                                                    color: color.value !== "default" ? color.value : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        if (color.value === "default") {
                                                          _push9(ssrRenderComponent(VIcon, null, {
                                                            default: withCtx((_9, _push10, _parent10, _scopeId9) => {
                                                              if (_push10) {
                                                                _push10(`mdi-palette-outline`);
                                                              } else {
                                                                return [
                                                                  createTextVNode("mdi-palette-outline")
                                                                ];
                                                              }
                                                            }),
                                                            _: 2
                                                          }, _parent9, _scopeId8));
                                                        } else {
                                                          _push9(`<!---->`);
                                                        }
                                                      } else {
                                                        return [
                                                          color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ];
                                                      }
                                                    }),
                                                    _: 2
                                                  }, _parent8, _scopeId7));
                                                });
                                                _push8(`<!--]-->`);
                                              } else {
                                                return [
                                                  (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: color.value,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color", "class"]);
                                                  }), 64))
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div>`);
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: properties.value.rounded,
                                            "onUpdate:modelValue": ($event) => properties.value.rounded = $event,
                                            color: "primary",
                                            label: "Rounded",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: properties.value.block,
                                            "onUpdate:modelValue": ($event) => properties.value.block = $event,
                                            color: "primary",
                                            label: "Full Width",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VSwitch, {
                                            modelValue: properties.value.disabled,
                                            "onUpdate:modelValue": ($event) => properties.value.disabled = $event,
                                            color: "primary",
                                            label: "Disabled",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, _parent7, _scopeId6));
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-palette")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Appearance")
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-2" }, "Variant"),
                                                createVNode(VChipGroup, {
                                                  modelValue: properties.value.variant,
                                                  "onUpdate:modelValue": ($event) => properties.value.variant = $event,
                                                  mandatory: "",
                                                  "selected-class": "bg-primary text-white"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(variants, (variant) => {
                                                      return createVNode(VChip, {
                                                        key: variant,
                                                        size: "small",
                                                        value: variant
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode(toDisplayString(variant), 1)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-2" }, "Size"),
                                                createVNode(VChipGroup, {
                                                  modelValue: properties.value.size,
                                                  "onUpdate:modelValue": ($event) => properties.value.size = $event,
                                                  mandatory: "",
                                                  "selected-class": "bg-primary text-white"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(sizes, (size) => {
                                                      return createVNode(VChip, {
                                                        key: size,
                                                        size: "small",
                                                        value: size
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode(toDisplayString(size), 1)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode("div", { class: "mb-4" }, [
                                                createVNode("label", { class: "text-subtitle-2 mb-2" }, "Color"),
                                                createVNode(VBtnToggle, {
                                                  modelValue: properties.value.color,
                                                  "onUpdate:modelValue": ($event) => properties.value.color = $event,
                                                  mandatory: "",
                                                  density: "comfortable",
                                                  "selected-class": "border-primary"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                      return createVNode(VBtn, {
                                                        key: color.value,
                                                        value: color.value,
                                                        color: color.value !== "default" ? color.value : void 0,
                                                        size: "small",
                                                        variant: "tonal",
                                                        width: "40",
                                                        height: "40",
                                                        class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                      }, {
                                                        default: withCtx(() => [
                                                          color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                            default: withCtx(() => [
                                                              createTextVNode("mdi-palette-outline")
                                                            ]),
                                                            _: 1
                                                          })) : createCommentVNode("", true)
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["value", "color", "class"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.rounded,
                                                "onUpdate:modelValue": ($event) => properties.value.rounded = $event,
                                                color: "primary",
                                                label: "Rounded",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.block,
                                                "onUpdate:modelValue": ($event) => properties.value.block = $event,
                                                color: "primary",
                                                label: "Full Width",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.disabled,
                                                "onUpdate:modelValue": ($event) => properties.value.disabled = $event,
                                                color: "primary",
                                                label: "Disabled",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "content" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-ce248d1e${_scopeId6}><div class="section-title d-flex align-center mb-3" data-v-ce248d1e${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-text`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-text")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-ce248d1e${_scopeId6}>Content</span></div>`);
                                          _push7(ssrRenderComponent(VTextField, {
                                            modelValue: properties.value.text,
                                            "onUpdate:modelValue": ($event) => properties.value.text = $event,
                                            label: "Text",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          if (showIconField.value) {
                                            _push7(ssrRenderComponent(VTextField, {
                                              modelValue: properties.value.icon,
                                              "onUpdate:modelValue": ($event) => properties.value.icon = $event,
                                              label: "Icon (e.g. mdi-heart)",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, _parent7, _scopeId6));
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          if (selectedType.value === "button") {
                                            _push7(`<!--[-->`);
                                            _push7(ssrRenderComponent(VTextField, {
                                              modelValue: properties.value.href,
                                              "onUpdate:modelValue": ($event) => properties.value.href = $event,
                                              label: "Link URL",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSelect, {
                                              modelValue: properties.value.target,
                                              "onUpdate:modelValue": ($event) => properties.value.target = $event,
                                              items: ["_self", "_blank", "_parent", "_top"],
                                              label: "Link Target",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSlider, {
                                              modelValue: properties.value.elevation,
                                              "onUpdate:modelValue": ($event) => properties.value.elevation = $event,
                                              min: 0,
                                              max: 24,
                                              label: "Elevation",
                                              class: "mb-4"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSelect, {
                                              modelValue: properties.value.gradient,
                                              "onUpdate:modelValue": ($event) => properties.value.gradient = $event,
                                              items: gradients,
                                              label: "Gradient Direction",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: properties.value.loading,
                                              "onUpdate:modelValue": ($event) => properties.value.loading = $event,
                                              color: "primary",
                                              label: "Loading",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(`<!--]-->`);
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          if (selectedType.value === "date") {
                                            _push7(`<!--[-->`);
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: properties.value.landscape,
                                              "onUpdate:modelValue": ($event) => properties.value.landscape = $event,
                                              color: "primary",
                                              label: "Landscape",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: properties.value.multiple,
                                              "onUpdate:modelValue": ($event) => properties.value.multiple = $event,
                                              color: "primary",
                                              label: "Multiple Dates",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: properties.value.fullWidth,
                                              "onUpdate:modelValue": ($event) => properties.value.fullWidth = $event,
                                              color: "primary",
                                              label: "Full Width",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: properties.value.showAdjacentMonths,
                                              "onUpdate:modelValue": ($event) => properties.value.showAdjacentMonths = $event,
                                              color: "primary",
                                              label: "Show Adjacent Months",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VTextField, {
                                              modelValue: properties.value.title,
                                              "onUpdate:modelValue": ($event) => properties.value.title = $event,
                                              label: "Title",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, _parent7, _scopeId6));
                                            _push7(`<!--]-->`);
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          if (showPosition.value) {
                                            _push7(ssrRenderComponent(VSelect, {
                                              modelValue: properties.value.position,
                                              "onUpdate:modelValue": ($event) => properties.value.position = $event,
                                              items: positions,
                                              label: "Position",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, _parent7, _scopeId6));
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          if (showDescription.value) {
                                            _push7(ssrRenderComponent(VTextarea, {
                                              modelValue: properties.value.description,
                                              "onUpdate:modelValue": ($event) => properties.value.description = $event,
                                              label: "Description",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "auto-grow": "",
                                              rows: "3",
                                              class: "mb-4"
                                            }, null, _parent7, _scopeId6));
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          if (selectedType.value === "table") {
                                            _push7(`<!--[--><div class="text-subtitle-1 mb-2" data-v-ce248d1e${_scopeId6}>Table Headers</div>`);
                                            _push7(ssrRenderComponent(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`<!--[-->`);
                                                  ssrRenderList(properties.value.tableHeaders, (header, index) => {
                                                    _push8(`<div class="d-flex align-center mb-2" data-v-ce248d1e${_scopeId7}>`);
                                                    _push8(ssrRenderComponent(VTextField, {
                                                      modelValue: header.title,
                                                      "onUpdate:modelValue": ($event) => header.title = $event,
                                                      label: "Header Title",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      class: "mr-2"
                                                    }, null, _parent8, _scopeId7));
                                                    _push8(ssrRenderComponent(VTextField, {
                                                      modelValue: header.key,
                                                      "onUpdate:modelValue": ($event) => header.key = $event,
                                                      label: "Key",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      class: "mr-2"
                                                    }, null, _parent8, _scopeId7));
                                                    _push8(ssrRenderComponent(VSwitch, {
                                                      modelValue: header.sortable,
                                                      "onUpdate:modelValue": ($event) => header.sortable = $event,
                                                      color: "primary",
                                                      label: "Sortable",
                                                      "hide-details": "",
                                                      class: "mr-2"
                                                    }, null, _parent8, _scopeId7));
                                                    _push8(ssrRenderComponent(VBtn, {
                                                      icon: "mdi-delete",
                                                      color: "error",
                                                      variant: "text",
                                                      density: "compact",
                                                      onClick: ($event) => properties.value.tableHeaders.splice(index, 1)
                                                    }, null, _parent8, _scopeId7));
                                                    _push8(`</div>`);
                                                  });
                                                  _push8(`<!--]-->`);
                                                  _push8(ssrRenderComponent(VBtn, {
                                                    color: "primary",
                                                    "prepend-icon": "mdi-plus",
                                                    variant: "tonal",
                                                    block: "",
                                                    onClick: addTableHeader,
                                                    class: "mt-2"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(` Add Header `);
                                                      } else {
                                                        return [
                                                          createTextVNode(" Add Header ")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                } else {
                                                  return [
                                                    (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableHeaders, (header, index) => {
                                                      return openBlock(), createBlock("div", {
                                                        key: index,
                                                        class: "d-flex align-center mb-2"
                                                      }, [
                                                        createVNode(VTextField, {
                                                          modelValue: header.title,
                                                          "onUpdate:modelValue": ($event) => header.title = $event,
                                                          label: "Header Title",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          class: "mr-2"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        createVNode(VTextField, {
                                                          modelValue: header.key,
                                                          "onUpdate:modelValue": ($event) => header.key = $event,
                                                          label: "Key",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          class: "mr-2"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        createVNode(VSwitch, {
                                                          modelValue: header.sortable,
                                                          "onUpdate:modelValue": ($event) => header.sortable = $event,
                                                          color: "primary",
                                                          label: "Sortable",
                                                          "hide-details": "",
                                                          class: "mr-2"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        createVNode(VBtn, {
                                                          icon: "mdi-delete",
                                                          color: "error",
                                                          variant: "text",
                                                          density: "compact",
                                                          onClick: ($event) => properties.value.tableHeaders.splice(index, 1)
                                                        }, null, 8, ["onClick"])
                                                      ]);
                                                    }), 128)),
                                                    createVNode(VBtn, {
                                                      color: "primary",
                                                      "prepend-icon": "mdi-plus",
                                                      variant: "tonal",
                                                      block: "",
                                                      onClick: addTableHeader,
                                                      class: "mt-2"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(" Add Header ")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(`<div class="text-subtitle-1 mb-2" data-v-ce248d1e${_scopeId6}>Table Items</div>`);
                                            _push7(ssrRenderComponent(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`<!--[-->`);
                                                  ssrRenderList(properties.value.tableItems, (item, index) => {
                                                    _push8(`<div class="d-flex align-center mb-2" data-v-ce248d1e${_scopeId7}><!--[-->`);
                                                    ssrRenderList(properties.value.tableHeaders, (header) => {
                                                      _push8(`<div class="mr-2" data-v-ce248d1e${_scopeId7}>`);
                                                      _push8(ssrRenderComponent(VTextField, {
                                                        modelValue: item[header.key],
                                                        "onUpdate:modelValue": ($event) => item[header.key] = $event,
                                                        label: header.title,
                                                        variant: "outlined",
                                                        density: "compact"
                                                      }, null, _parent8, _scopeId7));
                                                      _push8(`</div>`);
                                                    });
                                                    _push8(`<!--]-->`);
                                                    _push8(ssrRenderComponent(VBtn, {
                                                      icon: "mdi-delete",
                                                      color: "error",
                                                      variant: "text",
                                                      density: "compact",
                                                      onClick: ($event) => properties.value.tableItems.splice(index, 1)
                                                    }, null, _parent8, _scopeId7));
                                                    _push8(`</div>`);
                                                  });
                                                  _push8(`<!--]-->`);
                                                  _push8(ssrRenderComponent(VBtn, {
                                                    color: "primary",
                                                    "prepend-icon": "mdi-plus",
                                                    variant: "tonal",
                                                    block: "",
                                                    onClick: addTableItem,
                                                    class: "mt-2"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(` Add Item `);
                                                      } else {
                                                        return [
                                                          createTextVNode(" Add Item ")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                } else {
                                                  return [
                                                    (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableItems, (item, index) => {
                                                      return openBlock(), createBlock("div", {
                                                        key: index,
                                                        class: "d-flex align-center mb-2"
                                                      }, [
                                                        (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableHeaders, (header) => {
                                                          return openBlock(), createBlock("div", {
                                                            key: header.key,
                                                            class: "mr-2"
                                                          }, [
                                                            createVNode(VTextField, {
                                                              modelValue: item[header.key],
                                                              "onUpdate:modelValue": ($event) => item[header.key] = $event,
                                                              label: header.title,
                                                              variant: "outlined",
                                                              density: "compact"
                                                            }, null, 8, ["modelValue", "onUpdate:modelValue", "label"])
                                                          ]);
                                                        }), 128)),
                                                        createVNode(VBtn, {
                                                          icon: "mdi-delete",
                                                          color: "error",
                                                          variant: "text",
                                                          density: "compact",
                                                          onClick: ($event) => properties.value.tableItems.splice(index, 1)
                                                        }, null, 8, ["onClick"])
                                                      ]);
                                                    }), 128)),
                                                    createVNode(VBtn, {
                                                      color: "primary",
                                                      "prepend-icon": "mdi-plus",
                                                      variant: "tonal",
                                                      block: "",
                                                      onClick: addTableItem,
                                                      class: "mt-2"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(" Add Item ")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSlider, {
                                              modelValue: properties.value.itemsPerPage,
                                              "onUpdate:modelValue": ($event) => properties.value.itemsPerPage = $event,
                                              min: 5,
                                              max: 25,
                                              step: 5,
                                              label: "Items Per Page",
                                              class: "mb-4",
                                              "thumb-label": ""
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSelect, {
                                              modelValue: properties.value.sortBy,
                                              "onUpdate:modelValue": ($event) => properties.value.sortBy = $event,
                                              items: getSortableKeys(),
                                              label: "Default Sort By",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSelect, {
                                              modelValue: properties.value.sortOrder,
                                              "onUpdate:modelValue": ($event) => properties.value.sortOrder = $event,
                                              items: ["asc", "desc"],
                                              label: "Sort Order",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: properties.value.showSelect,
                                              "onUpdate:modelValue": ($event) => properties.value.showSelect = $event,
                                              color: "primary",
                                              label: "Show Selection",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: properties.value.showFooter,
                                              "onUpdate:modelValue": ($event) => properties.value.showFooter = $event,
                                              color: "primary",
                                              label: "Show Footer",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: properties.value.dense,
                                              "onUpdate:modelValue": ($event) => properties.value.dense = $event,
                                              color: "primary",
                                              label: "Dense",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(`<!--]-->`);
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          if (selectedType.value === "chart") {
                                            _push7(`<!--[-->`);
                                            _push7(ssrRenderComponent(VSelect, {
                                              modelValue: properties.value.chartType,
                                              "onUpdate:modelValue": ($event) => properties.value.chartType = $event,
                                              items: ["bar", "line", "pie", "doughnut", "radar", "polarArea"],
                                              label: "Chart Type",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, _parent7, _scopeId6));
                                            _push7(`<div class="text-subtitle-1 mb-2" data-v-ce248d1e${_scopeId6}>Chart Data</div>`);
                                            _push7(ssrRenderComponent(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`<!--[-->`);
                                                  ssrRenderList(properties.value.chartData, (value, index) => {
                                                    _push8(`<div class="d-flex align-center mb-2" data-v-ce248d1e${_scopeId7}>`);
                                                    _push8(ssrRenderComponent(VTextField, {
                                                      modelValue: properties.value.chartLabels[index],
                                                      "onUpdate:modelValue": ($event) => properties.value.chartLabels[index] = $event,
                                                      label: "Label",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      class: "mr-2"
                                                    }, null, _parent8, _scopeId7));
                                                    _push8(ssrRenderComponent(VTextField, {
                                                      modelValue: properties.value.chartData[index],
                                                      "onUpdate:modelValue": ($event) => properties.value.chartData[index] = $event,
                                                      modelModifiers: { number: true },
                                                      label: "Value",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      type: "number",
                                                      class: "mr-2"
                                                    }, null, _parent8, _scopeId7));
                                                    _push8(ssrRenderComponent(VBtn, {
                                                      icon: "mdi-delete",
                                                      color: "error",
                                                      variant: "text",
                                                      density: "compact",
                                                      onClick: ($event) => removeChartDataPoint(index)
                                                    }, null, _parent8, _scopeId7));
                                                    _push8(`</div>`);
                                                  });
                                                  _push8(`<!--]-->`);
                                                  _push8(ssrRenderComponent(VBtn, {
                                                    color: "primary",
                                                    "prepend-icon": "mdi-plus",
                                                    variant: "tonal",
                                                    block: "",
                                                    onClick: addChartDataPoint,
                                                    class: "mt-2"
                                                  }, {
                                                    default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                      if (_push9) {
                                                        _push9(` Add Data Point `);
                                                      } else {
                                                        return [
                                                          createTextVNode(" Add Data Point ")
                                                        ];
                                                      }
                                                    }),
                                                    _: 1
                                                  }, _parent8, _scopeId7));
                                                } else {
                                                  return [
                                                    (openBlock(true), createBlock(Fragment, null, renderList(properties.value.chartData, (value, index) => {
                                                      return openBlock(), createBlock("div", {
                                                        key: index,
                                                        class: "d-flex align-center mb-2"
                                                      }, [
                                                        createVNode(VTextField, {
                                                          modelValue: properties.value.chartLabels[index],
                                                          "onUpdate:modelValue": ($event) => properties.value.chartLabels[index] = $event,
                                                          label: "Label",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          class: "mr-2"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        createVNode(VTextField, {
                                                          modelValue: properties.value.chartData[index],
                                                          "onUpdate:modelValue": ($event) => properties.value.chartData[index] = $event,
                                                          modelModifiers: { number: true },
                                                          label: "Value",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          type: "number",
                                                          class: "mr-2"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        createVNode(VBtn, {
                                                          icon: "mdi-delete",
                                                          color: "error",
                                                          variant: "text",
                                                          density: "compact",
                                                          onClick: ($event) => removeChartDataPoint(index)
                                                        }, null, 8, ["onClick"])
                                                      ]);
                                                    }), 128)),
                                                    createVNode(VBtn, {
                                                      color: "primary",
                                                      "prepend-icon": "mdi-plus",
                                                      variant: "tonal",
                                                      block: "",
                                                      onClick: addChartDataPoint,
                                                      class: "mt-2"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(" Add Data Point ")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: properties.value.showLegend,
                                              "onUpdate:modelValue": ($event) => properties.value.showLegend = $event,
                                              color: "primary",
                                              label: "Show Legend",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: properties.value.responsive,
                                              "onUpdate:modelValue": ($event) => properties.value.responsive = $event,
                                              color: "primary",
                                              label: "Responsive",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: properties.value.maintainAspectRatio,
                                              "onUpdate:modelValue": ($event) => properties.value.maintainAspectRatio = $event,
                                              color: "primary",
                                              label: "Maintain Aspect Ratio",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(`<!--]-->`);
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          if (selectedType.value === "file") {
                                            _push7(`<!--[-->`);
                                            _push7(ssrRenderComponent(VTextField, {
                                              modelValue: properties.value.dropzoneText,
                                              "onUpdate:modelValue": ($event) => properties.value.dropzoneText = $event,
                                              label: "Dropzone Text",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VTextField, {
                                              modelValue: properties.value.acceptTypes,
                                              "onUpdate:modelValue": ($event) => properties.value.acceptTypes = $event,
                                              label: "Accepted File Types",
                                              variant: "outlined",
                                              density: "comfortable",
                                              placeholder: "image/*, .pdf, .docx",
                                              class: "mb-4"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSlider, {
                                              modelValue: properties.value.maxFiles,
                                              "onUpdate:modelValue": ($event) => properties.value.maxFiles = $event,
                                              min: 1,
                                              max: 20,
                                              label: "Max Files",
                                              class: "mb-4",
                                              "thumb-label": ""
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSlider, {
                                              modelValue: properties.value.maxSize,
                                              "onUpdate:modelValue": ($event) => properties.value.maxSize = $event,
                                              min: 1,
                                              max: 50,
                                              label: "Max Size (MB)",
                                              class: "mb-4",
                                              "thumb-label": ""
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: properties.value.multiple,
                                              "onUpdate:modelValue": ($event) => properties.value.multiple = $event,
                                              color: "primary",
                                              label: "Allow Multiple Files",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: properties.value.showPreview,
                                              "onUpdate:modelValue": ($event) => properties.value.showPreview = $event,
                                              color: "primary",
                                              label: "Show Preview",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: properties.value.autoUpload,
                                              "onUpdate:modelValue": ($event) => properties.value.autoUpload = $event,
                                              color: "primary",
                                              label: "Auto Upload",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: properties.value.chips,
                                              "onUpdate:modelValue": ($event) => properties.value.chips = $event,
                                              color: "primary",
                                              label: "Show as Chips",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: properties.value.counter,
                                              "onUpdate:modelValue": ($event) => properties.value.counter = $event,
                                              color: "primary",
                                              label: "Show Counter",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: properties.value.validateOnSelect,
                                              "onUpdate:modelValue": ($event) => properties.value.validateOnSelect = $event,
                                              color: "primary",
                                              label: "Validate on Select",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(ssrRenderComponent(VSwitch, {
                                              modelValue: properties.value.returnObject,
                                              "onUpdate:modelValue": ($event) => properties.value.returnObject = $event,
                                              color: "primary",
                                              label: "Return Object",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, _parent7, _scopeId6));
                                            _push7(`<!--]-->`);
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-text")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Content")
                                              ]),
                                              createVNode(VTextField, {
                                                modelValue: properties.value.text,
                                                "onUpdate:modelValue": ($event) => properties.value.text = $event,
                                                label: "Text",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              showIconField.value ? (openBlock(), createBlock(VTextField, {
                                                key: 0,
                                                modelValue: properties.value.icon,
                                                "onUpdate:modelValue": ($event) => properties.value.icon = $event,
                                                label: "Icon (e.g. mdi-heart)",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                              selectedType.value === "button" ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                                createVNode(VTextField, {
                                                  modelValue: properties.value.href,
                                                  "onUpdate:modelValue": ($event) => properties.value.href = $event,
                                                  label: "Link URL",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-4"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSelect, {
                                                  modelValue: properties.value.target,
                                                  "onUpdate:modelValue": ($event) => properties.value.target = $event,
                                                  items: ["_self", "_blank", "_parent", "_top"],
                                                  label: "Link Target",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-4"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSlider, {
                                                  modelValue: properties.value.elevation,
                                                  "onUpdate:modelValue": ($event) => properties.value.elevation = $event,
                                                  min: 0,
                                                  max: 24,
                                                  label: "Elevation",
                                                  class: "mb-4"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSelect, {
                                                  modelValue: properties.value.gradient,
                                                  "onUpdate:modelValue": ($event) => properties.value.gradient = $event,
                                                  items: gradients,
                                                  label: "Gradient Direction",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-4"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.loading,
                                                  "onUpdate:modelValue": ($event) => properties.value.loading = $event,
                                                  color: "primary",
                                                  label: "Loading",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                              ], 64)) : createCommentVNode("", true),
                                              selectedType.value === "date" ? (openBlock(), createBlock(Fragment, { key: 2 }, [
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.landscape,
                                                  "onUpdate:modelValue": ($event) => properties.value.landscape = $event,
                                                  color: "primary",
                                                  label: "Landscape",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.multiple,
                                                  "onUpdate:modelValue": ($event) => properties.value.multiple = $event,
                                                  color: "primary",
                                                  label: "Multiple Dates",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.fullWidth,
                                                  "onUpdate:modelValue": ($event) => properties.value.fullWidth = $event,
                                                  color: "primary",
                                                  label: "Full Width",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.showAdjacentMonths,
                                                  "onUpdate:modelValue": ($event) => properties.value.showAdjacentMonths = $event,
                                                  color: "primary",
                                                  label: "Show Adjacent Months",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VTextField, {
                                                  modelValue: properties.value.title,
                                                  "onUpdate:modelValue": ($event) => properties.value.title = $event,
                                                  label: "Title",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-4"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                              ], 64)) : createCommentVNode("", true),
                                              showPosition.value ? (openBlock(), createBlock(VSelect, {
                                                key: 3,
                                                modelValue: properties.value.position,
                                                "onUpdate:modelValue": ($event) => properties.value.position = $event,
                                                items: positions,
                                                label: "Position",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                              showDescription.value ? (openBlock(), createBlock(VTextarea, {
                                                key: 4,
                                                modelValue: properties.value.description,
                                                "onUpdate:modelValue": ($event) => properties.value.description = $event,
                                                label: "Description",
                                                variant: "outlined",
                                                density: "comfortable",
                                                "auto-grow": "",
                                                rows: "3",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                              selectedType.value === "table" ? (openBlock(), createBlock(Fragment, { key: 5 }, [
                                                createVNode("div", { class: "text-subtitle-1 mb-2" }, "Table Headers"),
                                                createVNode(VCard, { class: "mb-4 pa-3" }, {
                                                  default: withCtx(() => [
                                                    (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableHeaders, (header, index) => {
                                                      return openBlock(), createBlock("div", {
                                                        key: index,
                                                        class: "d-flex align-center mb-2"
                                                      }, [
                                                        createVNode(VTextField, {
                                                          modelValue: header.title,
                                                          "onUpdate:modelValue": ($event) => header.title = $event,
                                                          label: "Header Title",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          class: "mr-2"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        createVNode(VTextField, {
                                                          modelValue: header.key,
                                                          "onUpdate:modelValue": ($event) => header.key = $event,
                                                          label: "Key",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          class: "mr-2"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        createVNode(VSwitch, {
                                                          modelValue: header.sortable,
                                                          "onUpdate:modelValue": ($event) => header.sortable = $event,
                                                          color: "primary",
                                                          label: "Sortable",
                                                          "hide-details": "",
                                                          class: "mr-2"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        createVNode(VBtn, {
                                                          icon: "mdi-delete",
                                                          color: "error",
                                                          variant: "text",
                                                          density: "compact",
                                                          onClick: ($event) => properties.value.tableHeaders.splice(index, 1)
                                                        }, null, 8, ["onClick"])
                                                      ]);
                                                    }), 128)),
                                                    createVNode(VBtn, {
                                                      color: "primary",
                                                      "prepend-icon": "mdi-plus",
                                                      variant: "tonal",
                                                      block: "",
                                                      onClick: addTableHeader,
                                                      class: "mt-2"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(" Add Header ")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("div", { class: "text-subtitle-1 mb-2" }, "Table Items"),
                                                createVNode(VCard, { class: "mb-4 pa-3" }, {
                                                  default: withCtx(() => [
                                                    (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableItems, (item, index) => {
                                                      return openBlock(), createBlock("div", {
                                                        key: index,
                                                        class: "d-flex align-center mb-2"
                                                      }, [
                                                        (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableHeaders, (header) => {
                                                          return openBlock(), createBlock("div", {
                                                            key: header.key,
                                                            class: "mr-2"
                                                          }, [
                                                            createVNode(VTextField, {
                                                              modelValue: item[header.key],
                                                              "onUpdate:modelValue": ($event) => item[header.key] = $event,
                                                              label: header.title,
                                                              variant: "outlined",
                                                              density: "compact"
                                                            }, null, 8, ["modelValue", "onUpdate:modelValue", "label"])
                                                          ]);
                                                        }), 128)),
                                                        createVNode(VBtn, {
                                                          icon: "mdi-delete",
                                                          color: "error",
                                                          variant: "text",
                                                          density: "compact",
                                                          onClick: ($event) => properties.value.tableItems.splice(index, 1)
                                                        }, null, 8, ["onClick"])
                                                      ]);
                                                    }), 128)),
                                                    createVNode(VBtn, {
                                                      color: "primary",
                                                      "prepend-icon": "mdi-plus",
                                                      variant: "tonal",
                                                      block: "",
                                                      onClick: addTableItem,
                                                      class: "mt-2"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(" Add Item ")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VSlider, {
                                                  modelValue: properties.value.itemsPerPage,
                                                  "onUpdate:modelValue": ($event) => properties.value.itemsPerPage = $event,
                                                  min: 5,
                                                  max: 25,
                                                  step: 5,
                                                  label: "Items Per Page",
                                                  class: "mb-4",
                                                  "thumb-label": ""
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSelect, {
                                                  modelValue: properties.value.sortBy,
                                                  "onUpdate:modelValue": ($event) => properties.value.sortBy = $event,
                                                  items: getSortableKeys(),
                                                  label: "Default Sort By",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-4"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                                createVNode(VSelect, {
                                                  modelValue: properties.value.sortOrder,
                                                  "onUpdate:modelValue": ($event) => properties.value.sortOrder = $event,
                                                  items: ["asc", "desc"],
                                                  label: "Sort Order",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-4"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.showSelect,
                                                  "onUpdate:modelValue": ($event) => properties.value.showSelect = $event,
                                                  color: "primary",
                                                  label: "Show Selection",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.showFooter,
                                                  "onUpdate:modelValue": ($event) => properties.value.showFooter = $event,
                                                  color: "primary",
                                                  label: "Show Footer",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.dense,
                                                  "onUpdate:modelValue": ($event) => properties.value.dense = $event,
                                                  color: "primary",
                                                  label: "Dense",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                              ], 64)) : createCommentVNode("", true),
                                              selectedType.value === "chart" ? (openBlock(), createBlock(Fragment, { key: 6 }, [
                                                createVNode(VSelect, {
                                                  modelValue: properties.value.chartType,
                                                  "onUpdate:modelValue": ($event) => properties.value.chartType = $event,
                                                  items: ["bar", "line", "pie", "doughnut", "radar", "polarArea"],
                                                  label: "Chart Type",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-4"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode("div", { class: "text-subtitle-1 mb-2" }, "Chart Data"),
                                                createVNode(VCard, { class: "mb-4 pa-3" }, {
                                                  default: withCtx(() => [
                                                    (openBlock(true), createBlock(Fragment, null, renderList(properties.value.chartData, (value, index) => {
                                                      return openBlock(), createBlock("div", {
                                                        key: index,
                                                        class: "d-flex align-center mb-2"
                                                      }, [
                                                        createVNode(VTextField, {
                                                          modelValue: properties.value.chartLabels[index],
                                                          "onUpdate:modelValue": ($event) => properties.value.chartLabels[index] = $event,
                                                          label: "Label",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          class: "mr-2"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        createVNode(VTextField, {
                                                          modelValue: properties.value.chartData[index],
                                                          "onUpdate:modelValue": ($event) => properties.value.chartData[index] = $event,
                                                          modelModifiers: { number: true },
                                                          label: "Value",
                                                          variant: "outlined",
                                                          density: "compact",
                                                          type: "number",
                                                          class: "mr-2"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                        createVNode(VBtn, {
                                                          icon: "mdi-delete",
                                                          color: "error",
                                                          variant: "text",
                                                          density: "compact",
                                                          onClick: ($event) => removeChartDataPoint(index)
                                                        }, null, 8, ["onClick"])
                                                      ]);
                                                    }), 128)),
                                                    createVNode(VBtn, {
                                                      color: "primary",
                                                      "prepend-icon": "mdi-plus",
                                                      variant: "tonal",
                                                      block: "",
                                                      onClick: addChartDataPoint,
                                                      class: "mt-2"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(" Add Data Point ")
                                                      ]),
                                                      _: 1
                                                    })
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.showLegend,
                                                  "onUpdate:modelValue": ($event) => properties.value.showLegend = $event,
                                                  color: "primary",
                                                  label: "Show Legend",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.responsive,
                                                  "onUpdate:modelValue": ($event) => properties.value.responsive = $event,
                                                  color: "primary",
                                                  label: "Responsive",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.maintainAspectRatio,
                                                  "onUpdate:modelValue": ($event) => properties.value.maintainAspectRatio = $event,
                                                  color: "primary",
                                                  label: "Maintain Aspect Ratio",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                              ], 64)) : createCommentVNode("", true),
                                              selectedType.value === "file" ? (openBlock(), createBlock(Fragment, { key: 7 }, [
                                                createVNode(VTextField, {
                                                  modelValue: properties.value.dropzoneText,
                                                  "onUpdate:modelValue": ($event) => properties.value.dropzoneText = $event,
                                                  label: "Dropzone Text",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-4"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VTextField, {
                                                  modelValue: properties.value.acceptTypes,
                                                  "onUpdate:modelValue": ($event) => properties.value.acceptTypes = $event,
                                                  label: "Accepted File Types",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  placeholder: "image/*, .pdf, .docx",
                                                  class: "mb-4"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSlider, {
                                                  modelValue: properties.value.maxFiles,
                                                  "onUpdate:modelValue": ($event) => properties.value.maxFiles = $event,
                                                  min: 1,
                                                  max: 20,
                                                  label: "Max Files",
                                                  class: "mb-4",
                                                  "thumb-label": ""
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSlider, {
                                                  modelValue: properties.value.maxSize,
                                                  "onUpdate:modelValue": ($event) => properties.value.maxSize = $event,
                                                  min: 1,
                                                  max: 50,
                                                  label: "Max Size (MB)",
                                                  class: "mb-4",
                                                  "thumb-label": ""
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.multiple,
                                                  "onUpdate:modelValue": ($event) => properties.value.multiple = $event,
                                                  color: "primary",
                                                  label: "Allow Multiple Files",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.showPreview,
                                                  "onUpdate:modelValue": ($event) => properties.value.showPreview = $event,
                                                  color: "primary",
                                                  label: "Show Preview",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.autoUpload,
                                                  "onUpdate:modelValue": ($event) => properties.value.autoUpload = $event,
                                                  color: "primary",
                                                  label: "Auto Upload",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.chips,
                                                  "onUpdate:modelValue": ($event) => properties.value.chips = $event,
                                                  color: "primary",
                                                  label: "Show as Chips",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.counter,
                                                  "onUpdate:modelValue": ($event) => properties.value.counter = $event,
                                                  color: "primary",
                                                  label: "Show Counter",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.validateOnSelect,
                                                  "onUpdate:modelValue": ($event) => properties.value.validateOnSelect = $event,
                                                  color: "primary",
                                                  label: "Validate on Select",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.returnObject,
                                                  "onUpdate:modelValue": ($event) => properties.value.returnObject = $event,
                                                  color: "primary",
                                                  label: "Return Object",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                              ], 64)) : createCommentVNode("", true)
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "actions" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-ce248d1e${_scopeId6}><div class="section-title d-flex align-center mb-3" data-v-ce248d1e${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-gesture-tap-button`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-gesture-tap-button")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-ce248d1e${_scopeId6}>Interactions</span></div>`);
                                          _push7(ssrRenderComponent(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<div class="text-subtitle-1 mb-2" data-v-ce248d1e${_scopeId7}>Event Handling</div>`);
                                                _push8(ssrRenderComponent(VSelect, {
                                                  modelValue: properties.value.eventType,
                                                  "onUpdate:modelValue": ($event) => properties.value.eventType = $event,
                                                  items: eventTypes,
                                                  label: "Event Type",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-3"
                                                }, null, _parent8, _scopeId7));
                                                _push8(ssrRenderComponent(VTextField, {
                                                  modelValue: properties.value.eventHandler,
                                                  "onUpdate:modelValue": ($event) => properties.value.eventHandler = $event,
                                                  label: "Event Handler",
                                                  placeholder: "methodName",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-3"
                                                }, null, _parent8, _scopeId7));
                                                _push8(ssrRenderComponent(VSwitch, {
                                                  modelValue: properties.value.stopPropagation,
                                                  "onUpdate:modelValue": ($event) => properties.value.stopPropagation = $event,
                                                  color: "primary",
                                                  label: "Stop Propagation",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, _parent8, _scopeId7));
                                                _push8(ssrRenderComponent(VSwitch, {
                                                  modelValue: properties.value.preventDefault,
                                                  "onUpdate:modelValue": ($event) => properties.value.preventDefault = $event,
                                                  color: "primary",
                                                  label: "Prevent Default",
                                                  "hide-details": "",
                                                  class: "mb-4"
                                                }, null, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode("div", { class: "text-subtitle-1 mb-2" }, "Event Handling"),
                                                  createVNode(VSelect, {
                                                    modelValue: properties.value.eventType,
                                                    "onUpdate:modelValue": ($event) => properties.value.eventType = $event,
                                                    items: eventTypes,
                                                    label: "Event Type",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    class: "mb-3"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VTextField, {
                                                    modelValue: properties.value.eventHandler,
                                                    "onUpdate:modelValue": ($event) => properties.value.eventHandler = $event,
                                                    label: "Event Handler",
                                                    placeholder: "methodName",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    class: "mb-3"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VSwitch, {
                                                    modelValue: properties.value.stopPropagation,
                                                    "onUpdate:modelValue": ($event) => properties.value.stopPropagation = $event,
                                                    color: "primary",
                                                    label: "Stop Propagation",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VSwitch, {
                                                    modelValue: properties.value.preventDefault,
                                                    "onUpdate:modelValue": ($event) => properties.value.preventDefault = $event,
                                                    color: "primary",
                                                    label: "Prevent Default",
                                                    "hide-details": "",
                                                    class: "mb-4"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<div class="text-subtitle-1 mb-2" data-v-ce248d1e${_scopeId7}>Animation &amp; Transitions</div>`);
                                                _push8(ssrRenderComponent(VSelect, {
                                                  modelValue: properties.value.transition,
                                                  "onUpdate:modelValue": ($event) => properties.value.transition = $event,
                                                  items: transitions,
                                                  label: "Transition Effect",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-3"
                                                }, null, _parent8, _scopeId7));
                                                _push8(`<div class="d-flex align-center mb-3" data-v-ce248d1e${_scopeId7}>`);
                                                _push8(ssrRenderComponent(VIcon, {
                                                  size: "small",
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(`mdi-clock-outline`);
                                                    } else {
                                                      return [
                                                        createTextVNode("mdi-clock-outline")
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                                _push8(ssrRenderComponent(VSlider, {
                                                  modelValue: properties.value.transitionDuration,
                                                  "onUpdate:modelValue": ($event) => properties.value.transitionDuration = $event,
                                                  min: "0",
                                                  max: "1000",
                                                  step: "50",
                                                  label: "Duration (ms)",
                                                  class: "mx-2",
                                                  "thumb-label": ""
                                                }, null, _parent8, _scopeId7));
                                                _push8(`<span class="text-caption" data-v-ce248d1e${_scopeId7}>${ssrInterpolate(properties.value.transitionDuration)}ms</span></div>`);
                                              } else {
                                                return [
                                                  createVNode("div", { class: "text-subtitle-1 mb-2" }, "Animation & Transitions"),
                                                  createVNode(VSelect, {
                                                    modelValue: properties.value.transition,
                                                    "onUpdate:modelValue": ($event) => properties.value.transition = $event,
                                                    items: transitions,
                                                    label: "Transition Effect",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    class: "mb-3"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode("div", { class: "d-flex align-center mb-3" }, [
                                                    createVNode(VIcon, {
                                                      size: "small",
                                                      color: "primary",
                                                      class: "mr-2"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-clock-outline")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VSlider, {
                                                      modelValue: properties.value.transitionDuration,
                                                      "onUpdate:modelValue": ($event) => properties.value.transitionDuration = $event,
                                                      min: "0",
                                                      max: "1000",
                                                      step: "50",
                                                      label: "Duration (ms)",
                                                      class: "mx-2",
                                                      "thumb-label": ""
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode("span", { class: "text-caption" }, toDisplayString(properties.value.transitionDuration) + "ms", 1)
                                                  ])
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<div class="text-subtitle-1 mb-2" data-v-ce248d1e${_scopeId7}>Advanced Options</div>`);
                                                _push8(ssrRenderComponent(VSwitch, {
                                                  modelValue: properties.value.ripple,
                                                  "onUpdate:modelValue": ($event) => properties.value.ripple = $event,
                                                  color: "primary",
                                                  label: "Ripple Effect",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, _parent8, _scopeId7));
                                                _push8(ssrRenderComponent(VSwitch, {
                                                  modelValue: properties.value.eager,
                                                  "onUpdate:modelValue": ($event) => properties.value.eager = $event,
                                                  color: "primary",
                                                  label: "Eager Loading",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, _parent8, _scopeId7));
                                                if (["badge"].includes(selectedType.value)) {
                                                  _push8(ssrRenderComponent(VSwitch, {
                                                    modelValue: properties.value.closeOnContentClick,
                                                    "onUpdate:modelValue": ($event) => properties.value.closeOnContentClick = $event,
                                                    color: "primary",
                                                    label: "Close on Content Click",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, _parent8, _scopeId7));
                                                } else {
                                                  _push8(`<!---->`);
                                                }
                                                if (["alert"].includes(selectedType.value)) {
                                                  _push8(ssrRenderComponent(VSwitch, {
                                                    modelValue: properties.value.closeOnBack,
                                                    "onUpdate:modelValue": ($event) => properties.value.closeOnBack = $event,
                                                    color: "primary",
                                                    label: "Close on Back Navigation",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, _parent8, _scopeId7));
                                                } else {
                                                  _push8(`<!---->`);
                                                }
                                              } else {
                                                return [
                                                  createVNode("div", { class: "text-subtitle-1 mb-2" }, "Advanced Options"),
                                                  createVNode(VSwitch, {
                                                    modelValue: properties.value.ripple,
                                                    "onUpdate:modelValue": ($event) => properties.value.ripple = $event,
                                                    color: "primary",
                                                    label: "Ripple Effect",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VSwitch, {
                                                    modelValue: properties.value.eager,
                                                    "onUpdate:modelValue": ($event) => properties.value.eager = $event,
                                                    color: "primary",
                                                    label: "Eager Loading",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  ["badge"].includes(selectedType.value) ? (openBlock(), createBlock(VSwitch, {
                                                    key: 0,
                                                    modelValue: properties.value.closeOnContentClick,
                                                    "onUpdate:modelValue": ($event) => properties.value.closeOnContentClick = $event,
                                                    color: "primary",
                                                    label: "Close on Content Click",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                                  ["alert"].includes(selectedType.value) ? (openBlock(), createBlock(VSwitch, {
                                                    key: 1,
                                                    modelValue: properties.value.closeOnBack,
                                                    "onUpdate:modelValue": ($event) => properties.value.closeOnBack = $event,
                                                    color: "primary",
                                                    label: "Close on Back Navigation",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          if (selectedType.value === "button") {
                                            _push7(ssrRenderComponent(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                if (_push8) {
                                                  _push8(`<div class="text-subtitle-1 mb-2" data-v-ce248d1e${_scopeId7}>Button Specific Actions</div>`);
                                                  _push8(ssrRenderComponent(VSelect, {
                                                    modelValue: properties.value.buttonType,
                                                    "onUpdate:modelValue": ($event) => properties.value.buttonType = $event,
                                                    items: buttonTypes,
                                                    label: "Button Type",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    class: "mb-3"
                                                  }, null, _parent8, _scopeId7));
                                                  if (properties.value.buttonType === "submit") {
                                                    _push8(ssrRenderComponent(VTextField, {
                                                      modelValue: properties.value.formAction,
                                                      "onUpdate:modelValue": ($event) => properties.value.formAction = $event,
                                                      label: "Form Action",
                                                      placeholder: "https://example.com/submit",
                                                      variant: "outlined",
                                                      density: "comfortable",
                                                      class: "mb-3"
                                                    }, null, _parent8, _scopeId7));
                                                  } else {
                                                    _push8(`<!---->`);
                                                  }
                                                } else {
                                                  return [
                                                    createVNode("div", { class: "text-subtitle-1 mb-2" }, "Button Specific Actions"),
                                                    createVNode(VSelect, {
                                                      modelValue: properties.value.buttonType,
                                                      "onUpdate:modelValue": ($event) => properties.value.buttonType = $event,
                                                      items: buttonTypes,
                                                      label: "Button Type",
                                                      variant: "outlined",
                                                      density: "comfortable",
                                                      class: "mb-3"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    properties.value.buttonType === "submit" ? (openBlock(), createBlock(VTextField, {
                                                      key: 0,
                                                      modelValue: properties.value.formAction,
                                                      "onUpdate:modelValue": ($event) => properties.value.formAction = $event,
                                                      label: "Form Action",
                                                      placeholder: "https://example.com/submit",
                                                      variant: "outlined",
                                                      density: "comfortable",
                                                      class: "mb-3"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                                  ];
                                                }
                                              }),
                                              _: 1
                                            }, _parent7, _scopeId6));
                                          } else {
                                            _push7(`<!---->`);
                                          }
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-gesture-tap-button")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Interactions")
                                              ]),
                                              createVNode(VCard, { class: "mb-4 pa-3" }, {
                                                default: withCtx(() => [
                                                  createVNode("div", { class: "text-subtitle-1 mb-2" }, "Event Handling"),
                                                  createVNode(VSelect, {
                                                    modelValue: properties.value.eventType,
                                                    "onUpdate:modelValue": ($event) => properties.value.eventType = $event,
                                                    items: eventTypes,
                                                    label: "Event Type",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    class: "mb-3"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VTextField, {
                                                    modelValue: properties.value.eventHandler,
                                                    "onUpdate:modelValue": ($event) => properties.value.eventHandler = $event,
                                                    label: "Event Handler",
                                                    placeholder: "methodName",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    class: "mb-3"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VSwitch, {
                                                    modelValue: properties.value.stopPropagation,
                                                    "onUpdate:modelValue": ($event) => properties.value.stopPropagation = $event,
                                                    color: "primary",
                                                    label: "Stop Propagation",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VSwitch, {
                                                    modelValue: properties.value.preventDefault,
                                                    "onUpdate:modelValue": ($event) => properties.value.preventDefault = $event,
                                                    color: "primary",
                                                    label: "Prevent Default",
                                                    "hide-details": "",
                                                    class: "mb-4"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VCard, { class: "mb-4 pa-3" }, {
                                                default: withCtx(() => [
                                                  createVNode("div", { class: "text-subtitle-1 mb-2" }, "Animation & Transitions"),
                                                  createVNode(VSelect, {
                                                    modelValue: properties.value.transition,
                                                    "onUpdate:modelValue": ($event) => properties.value.transition = $event,
                                                    items: transitions,
                                                    label: "Transition Effect",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    class: "mb-3"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode("div", { class: "d-flex align-center mb-3" }, [
                                                    createVNode(VIcon, {
                                                      size: "small",
                                                      color: "primary",
                                                      class: "mr-2"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-clock-outline")
                                                      ]),
                                                      _: 1
                                                    }),
                                                    createVNode(VSlider, {
                                                      modelValue: properties.value.transitionDuration,
                                                      "onUpdate:modelValue": ($event) => properties.value.transitionDuration = $event,
                                                      min: "0",
                                                      max: "1000",
                                                      step: "50",
                                                      label: "Duration (ms)",
                                                      class: "mx-2",
                                                      "thumb-label": ""
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode("span", { class: "text-caption" }, toDisplayString(properties.value.transitionDuration) + "ms", 1)
                                                  ])
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VCard, { class: "mb-4 pa-3" }, {
                                                default: withCtx(() => [
                                                  createVNode("div", { class: "text-subtitle-1 mb-2" }, "Advanced Options"),
                                                  createVNode(VSwitch, {
                                                    modelValue: properties.value.ripple,
                                                    "onUpdate:modelValue": ($event) => properties.value.ripple = $event,
                                                    color: "primary",
                                                    label: "Ripple Effect",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VSwitch, {
                                                    modelValue: properties.value.eager,
                                                    "onUpdate:modelValue": ($event) => properties.value.eager = $event,
                                                    color: "primary",
                                                    label: "Eager Loading",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  ["badge"].includes(selectedType.value) ? (openBlock(), createBlock(VSwitch, {
                                                    key: 0,
                                                    modelValue: properties.value.closeOnContentClick,
                                                    "onUpdate:modelValue": ($event) => properties.value.closeOnContentClick = $event,
                                                    color: "primary",
                                                    label: "Close on Content Click",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                                  ["alert"].includes(selectedType.value) ? (openBlock(), createBlock(VSwitch, {
                                                    key: 1,
                                                    modelValue: properties.value.closeOnBack,
                                                    "onUpdate:modelValue": ($event) => properties.value.closeOnBack = $event,
                                                    color: "primary",
                                                    label: "Close on Back Navigation",
                                                    "hide-details": "",
                                                    class: "mb-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                                ]),
                                                _: 1
                                              }),
                                              selectedType.value === "button" ? (openBlock(), createBlock(VCard, {
                                                key: 0,
                                                class: "mb-4 pa-3"
                                              }, {
                                                default: withCtx(() => [
                                                  createVNode("div", { class: "text-subtitle-1 mb-2" }, "Button Specific Actions"),
                                                  createVNode(VSelect, {
                                                    modelValue: properties.value.buttonType,
                                                    "onUpdate:modelValue": ($event) => properties.value.buttonType = $event,
                                                    items: buttonTypes,
                                                    label: "Button Type",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    class: "mb-3"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  properties.value.buttonType === "submit" ? (openBlock(), createBlock(VTextField, {
                                                    key: 0,
                                                    modelValue: properties.value.formAction,
                                                    "onUpdate:modelValue": ($event) => properties.value.formAction = $event,
                                                    label: "Form Action",
                                                    placeholder: "https://example.com/submit",
                                                    variant: "outlined",
                                                    density: "comfortable",
                                                    class: "mb-3"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                                ]),
                                                _: 1
                                              })) : createCommentVNode("", true)
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "templates" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`<div class="pa-4" data-v-ce248d1e${_scopeId6}><div class="section-title d-flex align-center mb-3 justify-space-between" data-v-ce248d1e${_scopeId6}><div class="d-flex align-center" data-v-ce248d1e${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-file-document-outline`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-file-document-outline")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-ce248d1e${_scopeId6}>Component Templates</span></div>`);
                                          _push7(ssrRenderComponent(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props }, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VBtn, mergeProps({
                                                  icon: "mdi-help-circle-outline",
                                                  variant: "text",
                                                  size: "small"
                                                }, props), null, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VBtn, mergeProps({
                                                    icon: "mdi-help-circle-outline",
                                                    variant: "text",
                                                    size: "small"
                                                  }, props), null, 16)
                                                ];
                                              }
                                            }),
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`<span data-v-ce248d1e${_scopeId7}>Apply pre-defined templates or save your own</span>`);
                                              } else {
                                                return [
                                                  createVNode("span", null, "Apply pre-defined templates or save your own")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div><p class="text-body-2 mb-4" data-v-ce248d1e${_scopeId6}>Choose a pre-defined template to quickly create common components.</p>`);
                                          _push7(ssrRenderComponent(VCard, { class: "mb-4" }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(ssrRenderComponent(VList, null, {
                                                  default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                    if (_push9) {
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("info"),
                                                        "prepend-icon": "mdi-information",
                                                        title: "Info Alert",
                                                        subtitle: "Informational message"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("status"),
                                                        "prepend-icon": "mdi-account-check",
                                                        title: "Status Badge",
                                                        subtitle: "User status indicator"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("barChart"),
                                                        "prepend-icon": "mdi-chart-bar",
                                                        title: "Bar Chart",
                                                        subtitle: "Monthly data visualization"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("lineChart"),
                                                        "prepend-icon": "mdi-chart-line",
                                                        title: "Line Chart",
                                                        subtitle: "Weekly trend visualization"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("pieChart"),
                                                        "prepend-icon": "mdi-chart-pie",
                                                        title: "Pie Chart",
                                                        subtitle: "Distribution visualization"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("doughnutChart"),
                                                        "prepend-icon": "mdi-chart-donut",
                                                        title: "Doughnut Chart",
                                                        subtitle: "Product distribution"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("radarChart"),
                                                        "prepend-icon": "mdi-chart-scatter-plot",
                                                        title: "Radar Chart",
                                                        subtitle: "Performance metrics"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("polarAreaChart"),
                                                        "prepend-icon": "mdi-chart-arc",
                                                        title: "Polar Area Chart",
                                                        subtitle: "Regional distribution"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("dataTable"),
                                                        "prepend-icon": "mdi-table",
                                                        title: "Data Table",
                                                        subtitle: "Structured data display"
                                                      }, null, _parent9, _scopeId8));
                                                      _push9(ssrRenderComponent(VListItem, {
                                                        onClick: ($event) => applyTemplate("fileUpload"),
                                                        "prepend-icon": "mdi-file-upload",
                                                        title: "File Upload",
                                                        subtitle: "Document upload component"
                                                      }, null, _parent9, _scopeId8));
                                                    } else {
                                                      return [
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("info"),
                                                          "prepend-icon": "mdi-information",
                                                          title: "Info Alert",
                                                          subtitle: "Informational message"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("status"),
                                                          "prepend-icon": "mdi-account-check",
                                                          title: "Status Badge",
                                                          subtitle: "User status indicator"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("barChart"),
                                                          "prepend-icon": "mdi-chart-bar",
                                                          title: "Bar Chart",
                                                          subtitle: "Monthly data visualization"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("lineChart"),
                                                          "prepend-icon": "mdi-chart-line",
                                                          title: "Line Chart",
                                                          subtitle: "Weekly trend visualization"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("pieChart"),
                                                          "prepend-icon": "mdi-chart-pie",
                                                          title: "Pie Chart",
                                                          subtitle: "Distribution visualization"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("doughnutChart"),
                                                          "prepend-icon": "mdi-chart-donut",
                                                          title: "Doughnut Chart",
                                                          subtitle: "Product distribution"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("radarChart"),
                                                          "prepend-icon": "mdi-chart-scatter-plot",
                                                          title: "Radar Chart",
                                                          subtitle: "Performance metrics"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("polarAreaChart"),
                                                          "prepend-icon": "mdi-chart-arc",
                                                          title: "Polar Area Chart",
                                                          subtitle: "Regional distribution"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("dataTable"),
                                                          "prepend-icon": "mdi-table",
                                                          title: "Data Table",
                                                          subtitle: "Structured data display"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VListItem, {
                                                          onClick: ($event) => applyTemplate("fileUpload"),
                                                          "prepend-icon": "mdi-file-upload",
                                                          title: "File Upload",
                                                          subtitle: "Document upload component"
                                                        }, null, 8, ["onClick"])
                                                      ];
                                                    }
                                                  }),
                                                  _: 1
                                                }, _parent8, _scopeId7));
                                              } else {
                                                return [
                                                  createVNode(VList, null, {
                                                    default: withCtx(() => [
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("info"),
                                                        "prepend-icon": "mdi-information",
                                                        title: "Info Alert",
                                                        subtitle: "Informational message"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("status"),
                                                        "prepend-icon": "mdi-account-check",
                                                        title: "Status Badge",
                                                        subtitle: "User status indicator"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("barChart"),
                                                        "prepend-icon": "mdi-chart-bar",
                                                        title: "Bar Chart",
                                                        subtitle: "Monthly data visualization"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("lineChart"),
                                                        "prepend-icon": "mdi-chart-line",
                                                        title: "Line Chart",
                                                        subtitle: "Weekly trend visualization"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("pieChart"),
                                                        "prepend-icon": "mdi-chart-pie",
                                                        title: "Pie Chart",
                                                        subtitle: "Distribution visualization"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("doughnutChart"),
                                                        "prepend-icon": "mdi-chart-donut",
                                                        title: "Doughnut Chart",
                                                        subtitle: "Product distribution"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("radarChart"),
                                                        "prepend-icon": "mdi-chart-scatter-plot",
                                                        title: "Radar Chart",
                                                        subtitle: "Performance metrics"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("polarAreaChart"),
                                                        "prepend-icon": "mdi-chart-arc",
                                                        title: "Polar Area Chart",
                                                        subtitle: "Regional distribution"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("dataTable"),
                                                        "prepend-icon": "mdi-table",
                                                        title: "Data Table",
                                                        subtitle: "Structured data display"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("fileUpload"),
                                                        "prepend-icon": "mdi-file-upload",
                                                        title: "File Upload",
                                                        subtitle: "Document upload component"
                                                      }, null, 8, ["onClick"])
                                                    ]),
                                                    _: 1
                                                  })
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VAlert, {
                                            type: "info",
                                            variant: "tonal",
                                            class: "mb-4"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(` Applying a template will replace your current component settings. `);
                                              } else {
                                                return [
                                                  createTextVNode(" Applying a template will replace your current component settings. ")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VDivider, { class: "my-4" }, null, _parent7, _scopeId6));
                                          _push7(`<div class="section-title d-flex align-center mb-3" data-v-ce248d1e${_scopeId6}>`);
                                          _push7(ssrRenderComponent(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`mdi-content-save`);
                                              } else {
                                                return [
                                                  createTextVNode("mdi-content-save")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`<span class="text-h6" data-v-ce248d1e${_scopeId6}>Save Current Component</span></div>`);
                                          _push7(ssrRenderComponent(VTextField, {
                                            modelValue: customTemplateName.value,
                                            "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                            label: "Template Name",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "prepend-inner-icon": "mdi-tag",
                                            class: "mb-4"
                                          }, null, _parent7, _scopeId6));
                                          _push7(ssrRenderComponent(VBtn, {
                                            color: "primary",
                                            "prepend-icon": "mdi-content-save",
                                            block: "",
                                            onClick: saveCurrentTemplate
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(` Save Current Component as Template `);
                                              } else {
                                                return [
                                                  createTextVNode(" Save Current Component as Template ")
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                          _push7(`</div>`);
                                        } else {
                                          return [
                                            createVNode("div", { class: "pa-4" }, [
                                              createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                                createVNode("div", { class: "d-flex align-center" }, [
                                                  createVNode(VIcon, {
                                                    color: "primary",
                                                    class: "mr-2"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-file-document-outline")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode("span", { class: "text-h6" }, "Component Templates")
                                                ]),
                                                createVNode(VTooltip, { location: "bottom" }, {
                                                  activator: withCtx(({ props }) => [
                                                    createVNode(VBtn, mergeProps({
                                                      icon: "mdi-help-circle-outline",
                                                      variant: "text",
                                                      size: "small"
                                                    }, props), null, 16)
                                                  ]),
                                                  default: withCtx(() => [
                                                    createVNode("span", null, "Apply pre-defined templates or save your own")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common components."),
                                              createVNode(VCard, { class: "mb-4" }, {
                                                default: withCtx(() => [
                                                  createVNode(VList, null, {
                                                    default: withCtx(() => [
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("info"),
                                                        "prepend-icon": "mdi-information",
                                                        title: "Info Alert",
                                                        subtitle: "Informational message"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("status"),
                                                        "prepend-icon": "mdi-account-check",
                                                        title: "Status Badge",
                                                        subtitle: "User status indicator"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("barChart"),
                                                        "prepend-icon": "mdi-chart-bar",
                                                        title: "Bar Chart",
                                                        subtitle: "Monthly data visualization"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("lineChart"),
                                                        "prepend-icon": "mdi-chart-line",
                                                        title: "Line Chart",
                                                        subtitle: "Weekly trend visualization"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("pieChart"),
                                                        "prepend-icon": "mdi-chart-pie",
                                                        title: "Pie Chart",
                                                        subtitle: "Distribution visualization"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("doughnutChart"),
                                                        "prepend-icon": "mdi-chart-donut",
                                                        title: "Doughnut Chart",
                                                        subtitle: "Product distribution"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("radarChart"),
                                                        "prepend-icon": "mdi-chart-scatter-plot",
                                                        title: "Radar Chart",
                                                        subtitle: "Performance metrics"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("polarAreaChart"),
                                                        "prepend-icon": "mdi-chart-arc",
                                                        title: "Polar Area Chart",
                                                        subtitle: "Regional distribution"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("dataTable"),
                                                        "prepend-icon": "mdi-table",
                                                        title: "Data Table",
                                                        subtitle: "Structured data display"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VListItem, {
                                                        onClick: ($event) => applyTemplate("fileUpload"),
                                                        "prepend-icon": "mdi-file-upload",
                                                        title: "File Upload",
                                                        subtitle: "Document upload component"
                                                      }, null, 8, ["onClick"])
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VAlert, {
                                                type: "info",
                                                variant: "tonal",
                                                class: "mb-4"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Applying a template will replace your current component settings. ")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VDivider, { class: "my-4" }),
                                              createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-content-save")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Save Current Component")
                                              ]),
                                              createVNode(VTextField, {
                                                modelValue: customTemplateName.value,
                                                "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                                label: "Template Name",
                                                variant: "outlined",
                                                density: "comfortable",
                                                "prepend-inner-icon": "mdi-tag",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VBtn, {
                                                color: "primary",
                                                "prepend-icon": "mdi-content-save",
                                                block: "",
                                                onClick: saveCurrentTemplate
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Save Current Component as Template ")
                                                ]),
                                                _: 1
                                              })
                                            ])
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                  } else {
                                    return [
                                      createVNode(VWindowItem, { value: "type" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-shape")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Component Type")
                                            ]),
                                            createVNode(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx(() => [
                                                createVNode(VRadioGroup, {
                                                  modelValue: selectedType.value,
                                                  "onUpdate:modelValue": ($event) => selectedType.value = $event,
                                                  class: "mb-4"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(), createBlock(Fragment, null, renderList(componentTypes, (type) => {
                                                      return createVNode(VRadio, {
                                                        key: type.value,
                                                        value: type.value,
                                                        label: type.text
                                                      }, null, 8, ["value", "label"]);
                                                    }), 64))
                                                  ]),
                                                  _: 1
                                                }, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "style" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-palette")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Appearance")
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-2" }, "Variant"),
                                              createVNode(VChipGroup, {
                                                modelValue: properties.value.variant,
                                                "onUpdate:modelValue": ($event) => properties.value.variant = $event,
                                                mandatory: "",
                                                "selected-class": "bg-primary text-white"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(variants, (variant) => {
                                                    return createVNode(VChip, {
                                                      key: variant,
                                                      size: "small",
                                                      value: variant
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(toDisplayString(variant), 1)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-2" }, "Size"),
                                              createVNode(VChipGroup, {
                                                modelValue: properties.value.size,
                                                "onUpdate:modelValue": ($event) => properties.value.size = $event,
                                                mandatory: "",
                                                "selected-class": "bg-primary text-white"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(sizes, (size) => {
                                                    return createVNode(VChip, {
                                                      key: size,
                                                      size: "small",
                                                      value: size
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(toDisplayString(size), 1)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode("div", { class: "mb-4" }, [
                                              createVNode("label", { class: "text-subtitle-2 mb-2" }, "Color"),
                                              createVNode(VBtnToggle, {
                                                modelValue: properties.value.color,
                                                "onUpdate:modelValue": ($event) => properties.value.color = $event,
                                                mandatory: "",
                                                density: "comfortable",
                                                "selected-class": "border-primary"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                    return createVNode(VBtn, {
                                                      key: color.value,
                                                      value: color.value,
                                                      color: color.value !== "default" ? color.value : void 0,
                                                      size: "small",
                                                      variant: "tonal",
                                                      width: "40",
                                                      height: "40",
                                                      class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                    }, {
                                                      default: withCtx(() => [
                                                        color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                          default: withCtx(() => [
                                                            createTextVNode("mdi-palette-outline")
                                                          ]),
                                                          _: 1
                                                        })) : createCommentVNode("", true)
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["value", "color", "class"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.rounded,
                                              "onUpdate:modelValue": ($event) => properties.value.rounded = $event,
                                              color: "primary",
                                              label: "Rounded",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.block,
                                              "onUpdate:modelValue": ($event) => properties.value.block = $event,
                                              color: "primary",
                                              label: "Full Width",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.disabled,
                                              "onUpdate:modelValue": ($event) => properties.value.disabled = $event,
                                              color: "primary",
                                              label: "Disabled",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "content" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-text")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Content")
                                            ]),
                                            createVNode(VTextField, {
                                              modelValue: properties.value.text,
                                              "onUpdate:modelValue": ($event) => properties.value.text = $event,
                                              label: "Text",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            showIconField.value ? (openBlock(), createBlock(VTextField, {
                                              key: 0,
                                              modelValue: properties.value.icon,
                                              "onUpdate:modelValue": ($event) => properties.value.icon = $event,
                                              label: "Icon (e.g. mdi-heart)",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                            selectedType.value === "button" ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                              createVNode(VTextField, {
                                                modelValue: properties.value.href,
                                                "onUpdate:modelValue": ($event) => properties.value.href = $event,
                                                label: "Link URL",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSelect, {
                                                modelValue: properties.value.target,
                                                "onUpdate:modelValue": ($event) => properties.value.target = $event,
                                                items: ["_self", "_blank", "_parent", "_top"],
                                                label: "Link Target",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSlider, {
                                                modelValue: properties.value.elevation,
                                                "onUpdate:modelValue": ($event) => properties.value.elevation = $event,
                                                min: 0,
                                                max: 24,
                                                label: "Elevation",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSelect, {
                                                modelValue: properties.value.gradient,
                                                "onUpdate:modelValue": ($event) => properties.value.gradient = $event,
                                                items: gradients,
                                                label: "Gradient Direction",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.loading,
                                                "onUpdate:modelValue": ($event) => properties.value.loading = $event,
                                                color: "primary",
                                                label: "Loading",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                            ], 64)) : createCommentVNode("", true),
                                            selectedType.value === "date" ? (openBlock(), createBlock(Fragment, { key: 2 }, [
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.landscape,
                                                "onUpdate:modelValue": ($event) => properties.value.landscape = $event,
                                                color: "primary",
                                                label: "Landscape",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.multiple,
                                                "onUpdate:modelValue": ($event) => properties.value.multiple = $event,
                                                color: "primary",
                                                label: "Multiple Dates",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.fullWidth,
                                                "onUpdate:modelValue": ($event) => properties.value.fullWidth = $event,
                                                color: "primary",
                                                label: "Full Width",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.showAdjacentMonths,
                                                "onUpdate:modelValue": ($event) => properties.value.showAdjacentMonths = $event,
                                                color: "primary",
                                                label: "Show Adjacent Months",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VTextField, {
                                                modelValue: properties.value.title,
                                                "onUpdate:modelValue": ($event) => properties.value.title = $event,
                                                label: "Title",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                            ], 64)) : createCommentVNode("", true),
                                            showPosition.value ? (openBlock(), createBlock(VSelect, {
                                              key: 3,
                                              modelValue: properties.value.position,
                                              "onUpdate:modelValue": ($event) => properties.value.position = $event,
                                              items: positions,
                                              label: "Position",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                            showDescription.value ? (openBlock(), createBlock(VTextarea, {
                                              key: 4,
                                              modelValue: properties.value.description,
                                              "onUpdate:modelValue": ($event) => properties.value.description = $event,
                                              label: "Description",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "auto-grow": "",
                                              rows: "3",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                            selectedType.value === "table" ? (openBlock(), createBlock(Fragment, { key: 5 }, [
                                              createVNode("div", { class: "text-subtitle-1 mb-2" }, "Table Headers"),
                                              createVNode(VCard, { class: "mb-4 pa-3" }, {
                                                default: withCtx(() => [
                                                  (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableHeaders, (header, index) => {
                                                    return openBlock(), createBlock("div", {
                                                      key: index,
                                                      class: "d-flex align-center mb-2"
                                                    }, [
                                                      createVNode(VTextField, {
                                                        modelValue: header.title,
                                                        "onUpdate:modelValue": ($event) => header.title = $event,
                                                        label: "Header Title",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        class: "mr-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode(VTextField, {
                                                        modelValue: header.key,
                                                        "onUpdate:modelValue": ($event) => header.key = $event,
                                                        label: "Key",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        class: "mr-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode(VSwitch, {
                                                        modelValue: header.sortable,
                                                        "onUpdate:modelValue": ($event) => header.sortable = $event,
                                                        color: "primary",
                                                        label: "Sortable",
                                                        "hide-details": "",
                                                        class: "mr-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode(VBtn, {
                                                        icon: "mdi-delete",
                                                        color: "error",
                                                        variant: "text",
                                                        density: "compact",
                                                        onClick: ($event) => properties.value.tableHeaders.splice(index, 1)
                                                      }, null, 8, ["onClick"])
                                                    ]);
                                                  }), 128)),
                                                  createVNode(VBtn, {
                                                    color: "primary",
                                                    "prepend-icon": "mdi-plus",
                                                    variant: "tonal",
                                                    block: "",
                                                    onClick: addTableHeader,
                                                    class: "mt-2"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(" Add Header ")
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("div", { class: "text-subtitle-1 mb-2" }, "Table Items"),
                                              createVNode(VCard, { class: "mb-4 pa-3" }, {
                                                default: withCtx(() => [
                                                  (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableItems, (item, index) => {
                                                    return openBlock(), createBlock("div", {
                                                      key: index,
                                                      class: "d-flex align-center mb-2"
                                                    }, [
                                                      (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableHeaders, (header) => {
                                                        return openBlock(), createBlock("div", {
                                                          key: header.key,
                                                          class: "mr-2"
                                                        }, [
                                                          createVNode(VTextField, {
                                                            modelValue: item[header.key],
                                                            "onUpdate:modelValue": ($event) => item[header.key] = $event,
                                                            label: header.title,
                                                            variant: "outlined",
                                                            density: "compact"
                                                          }, null, 8, ["modelValue", "onUpdate:modelValue", "label"])
                                                        ]);
                                                      }), 128)),
                                                      createVNode(VBtn, {
                                                        icon: "mdi-delete",
                                                        color: "error",
                                                        variant: "text",
                                                        density: "compact",
                                                        onClick: ($event) => properties.value.tableItems.splice(index, 1)
                                                      }, null, 8, ["onClick"])
                                                    ]);
                                                  }), 128)),
                                                  createVNode(VBtn, {
                                                    color: "primary",
                                                    "prepend-icon": "mdi-plus",
                                                    variant: "tonal",
                                                    block: "",
                                                    onClick: addTableItem,
                                                    class: "mt-2"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(" Add Item ")
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: properties.value.itemsPerPage,
                                                "onUpdate:modelValue": ($event) => properties.value.itemsPerPage = $event,
                                                min: 5,
                                                max: 25,
                                                step: 5,
                                                label: "Items Per Page",
                                                class: "mb-4",
                                                "thumb-label": ""
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSelect, {
                                                modelValue: properties.value.sortBy,
                                                "onUpdate:modelValue": ($event) => properties.value.sortBy = $event,
                                                items: getSortableKeys(),
                                                label: "Default Sort By",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                              createVNode(VSelect, {
                                                modelValue: properties.value.sortOrder,
                                                "onUpdate:modelValue": ($event) => properties.value.sortOrder = $event,
                                                items: ["asc", "desc"],
                                                label: "Sort Order",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.showSelect,
                                                "onUpdate:modelValue": ($event) => properties.value.showSelect = $event,
                                                color: "primary",
                                                label: "Show Selection",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.showFooter,
                                                "onUpdate:modelValue": ($event) => properties.value.showFooter = $event,
                                                color: "primary",
                                                label: "Show Footer",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.dense,
                                                "onUpdate:modelValue": ($event) => properties.value.dense = $event,
                                                color: "primary",
                                                label: "Dense",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                            ], 64)) : createCommentVNode("", true),
                                            selectedType.value === "chart" ? (openBlock(), createBlock(Fragment, { key: 6 }, [
                                              createVNode(VSelect, {
                                                modelValue: properties.value.chartType,
                                                "onUpdate:modelValue": ($event) => properties.value.chartType = $event,
                                                items: ["bar", "line", "pie", "doughnut", "radar", "polarArea"],
                                                label: "Chart Type",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode("div", { class: "text-subtitle-1 mb-2" }, "Chart Data"),
                                              createVNode(VCard, { class: "mb-4 pa-3" }, {
                                                default: withCtx(() => [
                                                  (openBlock(true), createBlock(Fragment, null, renderList(properties.value.chartData, (value, index) => {
                                                    return openBlock(), createBlock("div", {
                                                      key: index,
                                                      class: "d-flex align-center mb-2"
                                                    }, [
                                                      createVNode(VTextField, {
                                                        modelValue: properties.value.chartLabels[index],
                                                        "onUpdate:modelValue": ($event) => properties.value.chartLabels[index] = $event,
                                                        label: "Label",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        class: "mr-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode(VTextField, {
                                                        modelValue: properties.value.chartData[index],
                                                        "onUpdate:modelValue": ($event) => properties.value.chartData[index] = $event,
                                                        modelModifiers: { number: true },
                                                        label: "Value",
                                                        variant: "outlined",
                                                        density: "compact",
                                                        type: "number",
                                                        class: "mr-2"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                      createVNode(VBtn, {
                                                        icon: "mdi-delete",
                                                        color: "error",
                                                        variant: "text",
                                                        density: "compact",
                                                        onClick: ($event) => removeChartDataPoint(index)
                                                      }, null, 8, ["onClick"])
                                                    ]);
                                                  }), 128)),
                                                  createVNode(VBtn, {
                                                    color: "primary",
                                                    "prepend-icon": "mdi-plus",
                                                    variant: "tonal",
                                                    block: "",
                                                    onClick: addChartDataPoint,
                                                    class: "mt-2"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(" Add Data Point ")
                                                    ]),
                                                    _: 1
                                                  })
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.showLegend,
                                                "onUpdate:modelValue": ($event) => properties.value.showLegend = $event,
                                                color: "primary",
                                                label: "Show Legend",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.responsive,
                                                "onUpdate:modelValue": ($event) => properties.value.responsive = $event,
                                                color: "primary",
                                                label: "Responsive",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.maintainAspectRatio,
                                                "onUpdate:modelValue": ($event) => properties.value.maintainAspectRatio = $event,
                                                color: "primary",
                                                label: "Maintain Aspect Ratio",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                            ], 64)) : createCommentVNode("", true),
                                            selectedType.value === "file" ? (openBlock(), createBlock(Fragment, { key: 7 }, [
                                              createVNode(VTextField, {
                                                modelValue: properties.value.dropzoneText,
                                                "onUpdate:modelValue": ($event) => properties.value.dropzoneText = $event,
                                                label: "Dropzone Text",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VTextField, {
                                                modelValue: properties.value.acceptTypes,
                                                "onUpdate:modelValue": ($event) => properties.value.acceptTypes = $event,
                                                label: "Accepted File Types",
                                                variant: "outlined",
                                                density: "comfortable",
                                                placeholder: "image/*, .pdf, .docx",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSlider, {
                                                modelValue: properties.value.maxFiles,
                                                "onUpdate:modelValue": ($event) => properties.value.maxFiles = $event,
                                                min: 1,
                                                max: 20,
                                                label: "Max Files",
                                                class: "mb-4",
                                                "thumb-label": ""
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSlider, {
                                                modelValue: properties.value.maxSize,
                                                "onUpdate:modelValue": ($event) => properties.value.maxSize = $event,
                                                min: 1,
                                                max: 50,
                                                label: "Max Size (MB)",
                                                class: "mb-4",
                                                "thumb-label": ""
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.multiple,
                                                "onUpdate:modelValue": ($event) => properties.value.multiple = $event,
                                                color: "primary",
                                                label: "Allow Multiple Files",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.showPreview,
                                                "onUpdate:modelValue": ($event) => properties.value.showPreview = $event,
                                                color: "primary",
                                                label: "Show Preview",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.autoUpload,
                                                "onUpdate:modelValue": ($event) => properties.value.autoUpload = $event,
                                                color: "primary",
                                                label: "Auto Upload",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.chips,
                                                "onUpdate:modelValue": ($event) => properties.value.chips = $event,
                                                color: "primary",
                                                label: "Show as Chips",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.counter,
                                                "onUpdate:modelValue": ($event) => properties.value.counter = $event,
                                                color: "primary",
                                                label: "Show Counter",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.validateOnSelect,
                                                "onUpdate:modelValue": ($event) => properties.value.validateOnSelect = $event,
                                                color: "primary",
                                                label: "Validate on Select",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.returnObject,
                                                "onUpdate:modelValue": ($event) => properties.value.returnObject = $event,
                                                color: "primary",
                                                label: "Return Object",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                            ], 64)) : createCommentVNode("", true)
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "actions" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-gesture-tap-button")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Interactions")
                                            ]),
                                            createVNode(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx(() => [
                                                createVNode("div", { class: "text-subtitle-1 mb-2" }, "Event Handling"),
                                                createVNode(VSelect, {
                                                  modelValue: properties.value.eventType,
                                                  "onUpdate:modelValue": ($event) => properties.value.eventType = $event,
                                                  items: eventTypes,
                                                  label: "Event Type",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-3"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VTextField, {
                                                  modelValue: properties.value.eventHandler,
                                                  "onUpdate:modelValue": ($event) => properties.value.eventHandler = $event,
                                                  label: "Event Handler",
                                                  placeholder: "methodName",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-3"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.stopPropagation,
                                                  "onUpdate:modelValue": ($event) => properties.value.stopPropagation = $event,
                                                  color: "primary",
                                                  label: "Stop Propagation",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.preventDefault,
                                                  "onUpdate:modelValue": ($event) => properties.value.preventDefault = $event,
                                                  color: "primary",
                                                  label: "Prevent Default",
                                                  "hide-details": "",
                                                  class: "mb-4"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx(() => [
                                                createVNode("div", { class: "text-subtitle-1 mb-2" }, "Animation & Transitions"),
                                                createVNode(VSelect, {
                                                  modelValue: properties.value.transition,
                                                  "onUpdate:modelValue": ($event) => properties.value.transition = $event,
                                                  items: transitions,
                                                  label: "Transition Effect",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-3"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode("div", { class: "d-flex align-center mb-3" }, [
                                                  createVNode(VIcon, {
                                                    size: "small",
                                                    color: "primary",
                                                    class: "mr-2"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-clock-outline")
                                                    ]),
                                                    _: 1
                                                  }),
                                                  createVNode(VSlider, {
                                                    modelValue: properties.value.transitionDuration,
                                                    "onUpdate:modelValue": ($event) => properties.value.transitionDuration = $event,
                                                    min: "0",
                                                    max: "1000",
                                                    step: "50",
                                                    label: "Duration (ms)",
                                                    class: "mx-2",
                                                    "thumb-label": ""
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode("span", { class: "text-caption" }, toDisplayString(properties.value.transitionDuration) + "ms", 1)
                                                ])
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx(() => [
                                                createVNode("div", { class: "text-subtitle-1 mb-2" }, "Advanced Options"),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.ripple,
                                                  "onUpdate:modelValue": ($event) => properties.value.ripple = $event,
                                                  color: "primary",
                                                  label: "Ripple Effect",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: properties.value.eager,
                                                  "onUpdate:modelValue": ($event) => properties.value.eager = $event,
                                                  color: "primary",
                                                  label: "Eager Loading",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                ["badge"].includes(selectedType.value) ? (openBlock(), createBlock(VSwitch, {
                                                  key: 0,
                                                  modelValue: properties.value.closeOnContentClick,
                                                  "onUpdate:modelValue": ($event) => properties.value.closeOnContentClick = $event,
                                                  color: "primary",
                                                  label: "Close on Content Click",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                                ["alert"].includes(selectedType.value) ? (openBlock(), createBlock(VSwitch, {
                                                  key: 1,
                                                  modelValue: properties.value.closeOnBack,
                                                  "onUpdate:modelValue": ($event) => properties.value.closeOnBack = $event,
                                                  color: "primary",
                                                  label: "Close on Back Navigation",
                                                  "hide-details": "",
                                                  class: "mb-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                              ]),
                                              _: 1
                                            }),
                                            selectedType.value === "button" ? (openBlock(), createBlock(VCard, {
                                              key: 0,
                                              class: "mb-4 pa-3"
                                            }, {
                                              default: withCtx(() => [
                                                createVNode("div", { class: "text-subtitle-1 mb-2" }, "Button Specific Actions"),
                                                createVNode(VSelect, {
                                                  modelValue: properties.value.buttonType,
                                                  "onUpdate:modelValue": ($event) => properties.value.buttonType = $event,
                                                  items: buttonTypes,
                                                  label: "Button Type",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-3"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                properties.value.buttonType === "submit" ? (openBlock(), createBlock(VTextField, {
                                                  key: 0,
                                                  modelValue: properties.value.formAction,
                                                  "onUpdate:modelValue": ($event) => properties.value.formAction = $event,
                                                  label: "Form Action",
                                                  placeholder: "https://example.com/submit",
                                                  variant: "outlined",
                                                  density: "comfortable",
                                                  class: "mb-3"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                              ]),
                                              _: 1
                                            })) : createCommentVNode("", true)
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "templates" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "pa-4" }, [
                                            createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                              createVNode("div", { class: "d-flex align-center" }, [
                                                createVNode(VIcon, {
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-file-document-outline")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode("span", { class: "text-h6" }, "Component Templates")
                                              ]),
                                              createVNode(VTooltip, { location: "bottom" }, {
                                                activator: withCtx(({ props }) => [
                                                  createVNode(VBtn, mergeProps({
                                                    icon: "mdi-help-circle-outline",
                                                    variant: "text",
                                                    size: "small"
                                                  }, props), null, 16)
                                                ]),
                                                default: withCtx(() => [
                                                  createVNode("span", null, "Apply pre-defined templates or save your own")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common components."),
                                            createVNode(VCard, { class: "mb-4" }, {
                                              default: withCtx(() => [
                                                createVNode(VList, null, {
                                                  default: withCtx(() => [
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("info"),
                                                      "prepend-icon": "mdi-information",
                                                      title: "Info Alert",
                                                      subtitle: "Informational message"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("status"),
                                                      "prepend-icon": "mdi-account-check",
                                                      title: "Status Badge",
                                                      subtitle: "User status indicator"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("barChart"),
                                                      "prepend-icon": "mdi-chart-bar",
                                                      title: "Bar Chart",
                                                      subtitle: "Monthly data visualization"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("lineChart"),
                                                      "prepend-icon": "mdi-chart-line",
                                                      title: "Line Chart",
                                                      subtitle: "Weekly trend visualization"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("pieChart"),
                                                      "prepend-icon": "mdi-chart-pie",
                                                      title: "Pie Chart",
                                                      subtitle: "Distribution visualization"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("doughnutChart"),
                                                      "prepend-icon": "mdi-chart-donut",
                                                      title: "Doughnut Chart",
                                                      subtitle: "Product distribution"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("radarChart"),
                                                      "prepend-icon": "mdi-chart-scatter-plot",
                                                      title: "Radar Chart",
                                                      subtitle: "Performance metrics"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("polarAreaChart"),
                                                      "prepend-icon": "mdi-chart-arc",
                                                      title: "Polar Area Chart",
                                                      subtitle: "Regional distribution"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("dataTable"),
                                                      "prepend-icon": "mdi-table",
                                                      title: "Data Table",
                                                      subtitle: "Structured data display"
                                                    }, null, 8, ["onClick"]),
                                                    createVNode(VListItem, {
                                                      onClick: ($event) => applyTemplate("fileUpload"),
                                                      "prepend-icon": "mdi-file-upload",
                                                      title: "File Upload",
                                                      subtitle: "Document upload component"
                                                    }, null, 8, ["onClick"])
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VAlert, {
                                              type: "info",
                                              variant: "tonal",
                                              class: "mb-4"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(" Applying a template will replace your current component settings. ")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VDivider, { class: "my-4" }),
                                            createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-content-save")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Save Current Component")
                                            ]),
                                            createVNode(VTextField, {
                                              modelValue: customTemplateName.value,
                                              "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                              label: "Template Name",
                                              variant: "outlined",
                                              density: "comfortable",
                                              "prepend-inner-icon": "mdi-tag",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VBtn, {
                                              color: "primary",
                                              "prepend-icon": "mdi-content-save",
                                              block: "",
                                              onClick: saveCurrentTemplate
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(" Save Current Component as Template ")
                                              ]),
                                              _: 1
                                            })
                                          ])
                                        ]),
                                        _: 1
                                      })
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VWindow, {
                                  modelValue: tab.value,
                                  "onUpdate:modelValue": ($event) => tab.value = $event,
                                  class: "fill-height"
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VWindowItem, { value: "type" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-shape")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Component Type")
                                          ]),
                                          createVNode(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx(() => [
                                              createVNode(VRadioGroup, {
                                                modelValue: selectedType.value,
                                                "onUpdate:modelValue": ($event) => selectedType.value = $event,
                                                class: "mb-4"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(), createBlock(Fragment, null, renderList(componentTypes, (type) => {
                                                    return createVNode(VRadio, {
                                                      key: type.value,
                                                      value: type.value,
                                                      label: type.text
                                                    }, null, 8, ["value", "label"]);
                                                  }), 64))
                                                ]),
                                                _: 1
                                              }, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            _: 1
                                          })
                                        ])
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "style" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-palette")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Appearance")
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-2" }, "Variant"),
                                            createVNode(VChipGroup, {
                                              modelValue: properties.value.variant,
                                              "onUpdate:modelValue": ($event) => properties.value.variant = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(variants, (variant) => {
                                                  return createVNode(VChip, {
                                                    key: variant,
                                                    size: "small",
                                                    value: variant
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(toDisplayString(variant), 1)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-2" }, "Size"),
                                            createVNode(VChipGroup, {
                                              modelValue: properties.value.size,
                                              "onUpdate:modelValue": ($event) => properties.value.size = $event,
                                              mandatory: "",
                                              "selected-class": "bg-primary text-white"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(sizes, (size) => {
                                                  return createVNode(VChip, {
                                                    key: size,
                                                    size: "small",
                                                    value: size
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(toDisplayString(size), 1)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode("div", { class: "mb-4" }, [
                                            createVNode("label", { class: "text-subtitle-2 mb-2" }, "Color"),
                                            createVNode(VBtnToggle, {
                                              modelValue: properties.value.color,
                                              "onUpdate:modelValue": ($event) => properties.value.color = $event,
                                              mandatory: "",
                                              density: "comfortable",
                                              "selected-class": "border-primary"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                  return createVNode(VBtn, {
                                                    key: color.value,
                                                    value: color.value,
                                                    color: color.value !== "default" ? color.value : void 0,
                                                    size: "small",
                                                    variant: "tonal",
                                                    width: "40",
                                                    height: "40",
                                                    class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                  }, {
                                                    default: withCtx(() => [
                                                      color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                        default: withCtx(() => [
                                                          createTextVNode("mdi-palette-outline")
                                                        ]),
                                                        _: 1
                                                      })) : createCommentVNode("", true)
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["value", "color", "class"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.rounded,
                                            "onUpdate:modelValue": ($event) => properties.value.rounded = $event,
                                            color: "primary",
                                            label: "Rounded",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.block,
                                            "onUpdate:modelValue": ($event) => properties.value.block = $event,
                                            color: "primary",
                                            label: "Full Width",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.disabled,
                                            "onUpdate:modelValue": ($event) => properties.value.disabled = $event,
                                            color: "primary",
                                            label: "Disabled",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ])
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "content" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-text")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Content")
                                          ]),
                                          createVNode(VTextField, {
                                            modelValue: properties.value.text,
                                            "onUpdate:modelValue": ($event) => properties.value.text = $event,
                                            label: "Text",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          showIconField.value ? (openBlock(), createBlock(VTextField, {
                                            key: 0,
                                            modelValue: properties.value.icon,
                                            "onUpdate:modelValue": ($event) => properties.value.icon = $event,
                                            label: "Icon (e.g. mdi-heart)",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                          selectedType.value === "button" ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                            createVNode(VTextField, {
                                              modelValue: properties.value.href,
                                              "onUpdate:modelValue": ($event) => properties.value.href = $event,
                                              label: "Link URL",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSelect, {
                                              modelValue: properties.value.target,
                                              "onUpdate:modelValue": ($event) => properties.value.target = $event,
                                              items: ["_self", "_blank", "_parent", "_top"],
                                              label: "Link Target",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSlider, {
                                              modelValue: properties.value.elevation,
                                              "onUpdate:modelValue": ($event) => properties.value.elevation = $event,
                                              min: 0,
                                              max: 24,
                                              label: "Elevation",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSelect, {
                                              modelValue: properties.value.gradient,
                                              "onUpdate:modelValue": ($event) => properties.value.gradient = $event,
                                              items: gradients,
                                              label: "Gradient Direction",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.loading,
                                              "onUpdate:modelValue": ($event) => properties.value.loading = $event,
                                              color: "primary",
                                              label: "Loading",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ], 64)) : createCommentVNode("", true),
                                          selectedType.value === "date" ? (openBlock(), createBlock(Fragment, { key: 2 }, [
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.landscape,
                                              "onUpdate:modelValue": ($event) => properties.value.landscape = $event,
                                              color: "primary",
                                              label: "Landscape",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.multiple,
                                              "onUpdate:modelValue": ($event) => properties.value.multiple = $event,
                                              color: "primary",
                                              label: "Multiple Dates",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.fullWidth,
                                              "onUpdate:modelValue": ($event) => properties.value.fullWidth = $event,
                                              color: "primary",
                                              label: "Full Width",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.showAdjacentMonths,
                                              "onUpdate:modelValue": ($event) => properties.value.showAdjacentMonths = $event,
                                              color: "primary",
                                              label: "Show Adjacent Months",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VTextField, {
                                              modelValue: properties.value.title,
                                              "onUpdate:modelValue": ($event) => properties.value.title = $event,
                                              label: "Title",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ], 64)) : createCommentVNode("", true),
                                          showPosition.value ? (openBlock(), createBlock(VSelect, {
                                            key: 3,
                                            modelValue: properties.value.position,
                                            "onUpdate:modelValue": ($event) => properties.value.position = $event,
                                            items: positions,
                                            label: "Position",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                          showDescription.value ? (openBlock(), createBlock(VTextarea, {
                                            key: 4,
                                            modelValue: properties.value.description,
                                            "onUpdate:modelValue": ($event) => properties.value.description = $event,
                                            label: "Description",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "auto-grow": "",
                                            rows: "3",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                          selectedType.value === "table" ? (openBlock(), createBlock(Fragment, { key: 5 }, [
                                            createVNode("div", { class: "text-subtitle-1 mb-2" }, "Table Headers"),
                                            createVNode(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx(() => [
                                                (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableHeaders, (header, index) => {
                                                  return openBlock(), createBlock("div", {
                                                    key: index,
                                                    class: "d-flex align-center mb-2"
                                                  }, [
                                                    createVNode(VTextField, {
                                                      modelValue: header.title,
                                                      "onUpdate:modelValue": ($event) => header.title = $event,
                                                      label: "Header Title",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      class: "mr-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode(VTextField, {
                                                      modelValue: header.key,
                                                      "onUpdate:modelValue": ($event) => header.key = $event,
                                                      label: "Key",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      class: "mr-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode(VSwitch, {
                                                      modelValue: header.sortable,
                                                      "onUpdate:modelValue": ($event) => header.sortable = $event,
                                                      color: "primary",
                                                      label: "Sortable",
                                                      "hide-details": "",
                                                      class: "mr-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode(VBtn, {
                                                      icon: "mdi-delete",
                                                      color: "error",
                                                      variant: "text",
                                                      density: "compact",
                                                      onClick: ($event) => properties.value.tableHeaders.splice(index, 1)
                                                    }, null, 8, ["onClick"])
                                                  ]);
                                                }), 128)),
                                                createVNode(VBtn, {
                                                  color: "primary",
                                                  "prepend-icon": "mdi-plus",
                                                  variant: "tonal",
                                                  block: "",
                                                  onClick: addTableHeader,
                                                  class: "mt-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(" Add Header ")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("div", { class: "text-subtitle-1 mb-2" }, "Table Items"),
                                            createVNode(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx(() => [
                                                (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableItems, (item, index) => {
                                                  return openBlock(), createBlock("div", {
                                                    key: index,
                                                    class: "d-flex align-center mb-2"
                                                  }, [
                                                    (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableHeaders, (header) => {
                                                      return openBlock(), createBlock("div", {
                                                        key: header.key,
                                                        class: "mr-2"
                                                      }, [
                                                        createVNode(VTextField, {
                                                          modelValue: item[header.key],
                                                          "onUpdate:modelValue": ($event) => item[header.key] = $event,
                                                          label: header.title,
                                                          variant: "outlined",
                                                          density: "compact"
                                                        }, null, 8, ["modelValue", "onUpdate:modelValue", "label"])
                                                      ]);
                                                    }), 128)),
                                                    createVNode(VBtn, {
                                                      icon: "mdi-delete",
                                                      color: "error",
                                                      variant: "text",
                                                      density: "compact",
                                                      onClick: ($event) => properties.value.tableItems.splice(index, 1)
                                                    }, null, 8, ["onClick"])
                                                  ]);
                                                }), 128)),
                                                createVNode(VBtn, {
                                                  color: "primary",
                                                  "prepend-icon": "mdi-plus",
                                                  variant: "tonal",
                                                  block: "",
                                                  onClick: addTableItem,
                                                  class: "mt-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(" Add Item ")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: properties.value.itemsPerPage,
                                              "onUpdate:modelValue": ($event) => properties.value.itemsPerPage = $event,
                                              min: 5,
                                              max: 25,
                                              step: 5,
                                              label: "Items Per Page",
                                              class: "mb-4",
                                              "thumb-label": ""
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSelect, {
                                              modelValue: properties.value.sortBy,
                                              "onUpdate:modelValue": ($event) => properties.value.sortBy = $event,
                                              items: getSortableKeys(),
                                              label: "Default Sort By",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                            createVNode(VSelect, {
                                              modelValue: properties.value.sortOrder,
                                              "onUpdate:modelValue": ($event) => properties.value.sortOrder = $event,
                                              items: ["asc", "desc"],
                                              label: "Sort Order",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.showSelect,
                                              "onUpdate:modelValue": ($event) => properties.value.showSelect = $event,
                                              color: "primary",
                                              label: "Show Selection",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.showFooter,
                                              "onUpdate:modelValue": ($event) => properties.value.showFooter = $event,
                                              color: "primary",
                                              label: "Show Footer",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.dense,
                                              "onUpdate:modelValue": ($event) => properties.value.dense = $event,
                                              color: "primary",
                                              label: "Dense",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ], 64)) : createCommentVNode("", true),
                                          selectedType.value === "chart" ? (openBlock(), createBlock(Fragment, { key: 6 }, [
                                            createVNode(VSelect, {
                                              modelValue: properties.value.chartType,
                                              "onUpdate:modelValue": ($event) => properties.value.chartType = $event,
                                              items: ["bar", "line", "pie", "doughnut", "radar", "polarArea"],
                                              label: "Chart Type",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode("div", { class: "text-subtitle-1 mb-2" }, "Chart Data"),
                                            createVNode(VCard, { class: "mb-4 pa-3" }, {
                                              default: withCtx(() => [
                                                (openBlock(true), createBlock(Fragment, null, renderList(properties.value.chartData, (value, index) => {
                                                  return openBlock(), createBlock("div", {
                                                    key: index,
                                                    class: "d-flex align-center mb-2"
                                                  }, [
                                                    createVNode(VTextField, {
                                                      modelValue: properties.value.chartLabels[index],
                                                      "onUpdate:modelValue": ($event) => properties.value.chartLabels[index] = $event,
                                                      label: "Label",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      class: "mr-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode(VTextField, {
                                                      modelValue: properties.value.chartData[index],
                                                      "onUpdate:modelValue": ($event) => properties.value.chartData[index] = $event,
                                                      modelModifiers: { number: true },
                                                      label: "Value",
                                                      variant: "outlined",
                                                      density: "compact",
                                                      type: "number",
                                                      class: "mr-2"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                    createVNode(VBtn, {
                                                      icon: "mdi-delete",
                                                      color: "error",
                                                      variant: "text",
                                                      density: "compact",
                                                      onClick: ($event) => removeChartDataPoint(index)
                                                    }, null, 8, ["onClick"])
                                                  ]);
                                                }), 128)),
                                                createVNode(VBtn, {
                                                  color: "primary",
                                                  "prepend-icon": "mdi-plus",
                                                  variant: "tonal",
                                                  block: "",
                                                  onClick: addChartDataPoint,
                                                  class: "mt-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(" Add Data Point ")
                                                  ]),
                                                  _: 1
                                                })
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.showLegend,
                                              "onUpdate:modelValue": ($event) => properties.value.showLegend = $event,
                                              color: "primary",
                                              label: "Show Legend",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.responsive,
                                              "onUpdate:modelValue": ($event) => properties.value.responsive = $event,
                                              color: "primary",
                                              label: "Responsive",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.maintainAspectRatio,
                                              "onUpdate:modelValue": ($event) => properties.value.maintainAspectRatio = $event,
                                              color: "primary",
                                              label: "Maintain Aspect Ratio",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ], 64)) : createCommentVNode("", true),
                                          selectedType.value === "file" ? (openBlock(), createBlock(Fragment, { key: 7 }, [
                                            createVNode(VTextField, {
                                              modelValue: properties.value.dropzoneText,
                                              "onUpdate:modelValue": ($event) => properties.value.dropzoneText = $event,
                                              label: "Dropzone Text",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VTextField, {
                                              modelValue: properties.value.acceptTypes,
                                              "onUpdate:modelValue": ($event) => properties.value.acceptTypes = $event,
                                              label: "Accepted File Types",
                                              variant: "outlined",
                                              density: "comfortable",
                                              placeholder: "image/*, .pdf, .docx",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSlider, {
                                              modelValue: properties.value.maxFiles,
                                              "onUpdate:modelValue": ($event) => properties.value.maxFiles = $event,
                                              min: 1,
                                              max: 20,
                                              label: "Max Files",
                                              class: "mb-4",
                                              "thumb-label": ""
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSlider, {
                                              modelValue: properties.value.maxSize,
                                              "onUpdate:modelValue": ($event) => properties.value.maxSize = $event,
                                              min: 1,
                                              max: 50,
                                              label: "Max Size (MB)",
                                              class: "mb-4",
                                              "thumb-label": ""
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.multiple,
                                              "onUpdate:modelValue": ($event) => properties.value.multiple = $event,
                                              color: "primary",
                                              label: "Allow Multiple Files",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.showPreview,
                                              "onUpdate:modelValue": ($event) => properties.value.showPreview = $event,
                                              color: "primary",
                                              label: "Show Preview",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.autoUpload,
                                              "onUpdate:modelValue": ($event) => properties.value.autoUpload = $event,
                                              color: "primary",
                                              label: "Auto Upload",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.chips,
                                              "onUpdate:modelValue": ($event) => properties.value.chips = $event,
                                              color: "primary",
                                              label: "Show as Chips",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.counter,
                                              "onUpdate:modelValue": ($event) => properties.value.counter = $event,
                                              color: "primary",
                                              label: "Show Counter",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.validateOnSelect,
                                              "onUpdate:modelValue": ($event) => properties.value.validateOnSelect = $event,
                                              color: "primary",
                                              label: "Validate on Select",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.returnObject,
                                              "onUpdate:modelValue": ($event) => properties.value.returnObject = $event,
                                              color: "primary",
                                              label: "Return Object",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ], 64)) : createCommentVNode("", true)
                                        ])
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "actions" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-gesture-tap-button")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Interactions")
                                          ]),
                                          createVNode(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx(() => [
                                              createVNode("div", { class: "text-subtitle-1 mb-2" }, "Event Handling"),
                                              createVNode(VSelect, {
                                                modelValue: properties.value.eventType,
                                                "onUpdate:modelValue": ($event) => properties.value.eventType = $event,
                                                items: eventTypes,
                                                label: "Event Type",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-3"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VTextField, {
                                                modelValue: properties.value.eventHandler,
                                                "onUpdate:modelValue": ($event) => properties.value.eventHandler = $event,
                                                label: "Event Handler",
                                                placeholder: "methodName",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-3"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.stopPropagation,
                                                "onUpdate:modelValue": ($event) => properties.value.stopPropagation = $event,
                                                color: "primary",
                                                label: "Stop Propagation",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.preventDefault,
                                                "onUpdate:modelValue": ($event) => properties.value.preventDefault = $event,
                                                color: "primary",
                                                label: "Prevent Default",
                                                "hide-details": "",
                                                class: "mb-4"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx(() => [
                                              createVNode("div", { class: "text-subtitle-1 mb-2" }, "Animation & Transitions"),
                                              createVNode(VSelect, {
                                                modelValue: properties.value.transition,
                                                "onUpdate:modelValue": ($event) => properties.value.transition = $event,
                                                items: transitions,
                                                label: "Transition Effect",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-3"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode("div", { class: "d-flex align-center mb-3" }, [
                                                createVNode(VIcon, {
                                                  size: "small",
                                                  color: "primary",
                                                  class: "mr-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode("mdi-clock-outline")
                                                  ]),
                                                  _: 1
                                                }),
                                                createVNode(VSlider, {
                                                  modelValue: properties.value.transitionDuration,
                                                  "onUpdate:modelValue": ($event) => properties.value.transitionDuration = $event,
                                                  min: "0",
                                                  max: "1000",
                                                  step: "50",
                                                  label: "Duration (ms)",
                                                  class: "mx-2",
                                                  "thumb-label": ""
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode("span", { class: "text-caption" }, toDisplayString(properties.value.transitionDuration) + "ms", 1)
                                              ])
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx(() => [
                                              createVNode("div", { class: "text-subtitle-1 mb-2" }, "Advanced Options"),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.ripple,
                                                "onUpdate:modelValue": ($event) => properties.value.ripple = $event,
                                                color: "primary",
                                                label: "Ripple Effect",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode(VSwitch, {
                                                modelValue: properties.value.eager,
                                                "onUpdate:modelValue": ($event) => properties.value.eager = $event,
                                                color: "primary",
                                                label: "Eager Loading",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              ["badge"].includes(selectedType.value) ? (openBlock(), createBlock(VSwitch, {
                                                key: 0,
                                                modelValue: properties.value.closeOnContentClick,
                                                "onUpdate:modelValue": ($event) => properties.value.closeOnContentClick = $event,
                                                color: "primary",
                                                label: "Close on Content Click",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                              ["alert"].includes(selectedType.value) ? (openBlock(), createBlock(VSwitch, {
                                                key: 1,
                                                modelValue: properties.value.closeOnBack,
                                                "onUpdate:modelValue": ($event) => properties.value.closeOnBack = $event,
                                                color: "primary",
                                                label: "Close on Back Navigation",
                                                "hide-details": "",
                                                class: "mb-2"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                            ]),
                                            _: 1
                                          }),
                                          selectedType.value === "button" ? (openBlock(), createBlock(VCard, {
                                            key: 0,
                                            class: "mb-4 pa-3"
                                          }, {
                                            default: withCtx(() => [
                                              createVNode("div", { class: "text-subtitle-1 mb-2" }, "Button Specific Actions"),
                                              createVNode(VSelect, {
                                                modelValue: properties.value.buttonType,
                                                "onUpdate:modelValue": ($event) => properties.value.buttonType = $event,
                                                items: buttonTypes,
                                                label: "Button Type",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-3"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              properties.value.buttonType === "submit" ? (openBlock(), createBlock(VTextField, {
                                                key: 0,
                                                modelValue: properties.value.formAction,
                                                "onUpdate:modelValue": ($event) => properties.value.formAction = $event,
                                                label: "Form Action",
                                                placeholder: "https://example.com/submit",
                                                variant: "outlined",
                                                density: "comfortable",
                                                class: "mb-3"
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                            ]),
                                            _: 1
                                          })) : createCommentVNode("", true)
                                        ])
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "templates" }, {
                                      default: withCtx(() => [
                                        createVNode("div", { class: "pa-4" }, [
                                          createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                            createVNode("div", { class: "d-flex align-center" }, [
                                              createVNode(VIcon, {
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-file-document-outline")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode("span", { class: "text-h6" }, "Component Templates")
                                            ]),
                                            createVNode(VTooltip, { location: "bottom" }, {
                                              activator: withCtx(({ props }) => [
                                                createVNode(VBtn, mergeProps({
                                                  icon: "mdi-help-circle-outline",
                                                  variant: "text",
                                                  size: "small"
                                                }, props), null, 16)
                                              ]),
                                              default: withCtx(() => [
                                                createVNode("span", null, "Apply pre-defined templates or save your own")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common components."),
                                          createVNode(VCard, { class: "mb-4" }, {
                                            default: withCtx(() => [
                                              createVNode(VList, null, {
                                                default: withCtx(() => [
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("info"),
                                                    "prepend-icon": "mdi-information",
                                                    title: "Info Alert",
                                                    subtitle: "Informational message"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("status"),
                                                    "prepend-icon": "mdi-account-check",
                                                    title: "Status Badge",
                                                    subtitle: "User status indicator"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("barChart"),
                                                    "prepend-icon": "mdi-chart-bar",
                                                    title: "Bar Chart",
                                                    subtitle: "Monthly data visualization"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("lineChart"),
                                                    "prepend-icon": "mdi-chart-line",
                                                    title: "Line Chart",
                                                    subtitle: "Weekly trend visualization"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("pieChart"),
                                                    "prepend-icon": "mdi-chart-pie",
                                                    title: "Pie Chart",
                                                    subtitle: "Distribution visualization"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("doughnutChart"),
                                                    "prepend-icon": "mdi-chart-donut",
                                                    title: "Doughnut Chart",
                                                    subtitle: "Product distribution"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("radarChart"),
                                                    "prepend-icon": "mdi-chart-scatter-plot",
                                                    title: "Radar Chart",
                                                    subtitle: "Performance metrics"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("polarAreaChart"),
                                                    "prepend-icon": "mdi-chart-arc",
                                                    title: "Polar Area Chart",
                                                    subtitle: "Regional distribution"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("dataTable"),
                                                    "prepend-icon": "mdi-table",
                                                    title: "Data Table",
                                                    subtitle: "Structured data display"
                                                  }, null, 8, ["onClick"]),
                                                  createVNode(VListItem, {
                                                    onClick: ($event) => applyTemplate("fileUpload"),
                                                    "prepend-icon": "mdi-file-upload",
                                                    title: "File Upload",
                                                    subtitle: "Document upload component"
                                                  }, null, 8, ["onClick"])
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VAlert, {
                                            type: "info",
                                            variant: "tonal",
                                            class: "mb-4"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(" Applying a template will replace your current component settings. ")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VDivider, { class: "my-4" }),
                                          createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-content-save")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Save Current Component")
                                          ]),
                                          createVNode(VTextField, {
                                            modelValue: customTemplateName.value,
                                            "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                            label: "Template Name",
                                            variant: "outlined",
                                            density: "comfortable",
                                            "prepend-inner-icon": "mdi-tag",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VBtn, {
                                            color: "primary",
                                            "prepend-icon": "mdi-content-save",
                                            block: "",
                                            onClick: saveCurrentTemplate
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(" Save Current Component as Template ")
                                            ]),
                                            _: 1
                                          })
                                        ])
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }, 8, ["modelValue", "onUpdate:modelValue"])
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                      } else {
                        return [
                          createVNode("div", { class: "px-4 py-2 d-flex align-center" }, [
                            createVNode(VChip, {
                              color: "success",
                              "prepend-icon": "mdi-vuejs",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vue.js")
                              ]),
                              _: 1
                            }),
                            createVNode(VChip, {
                              color: "info",
                              "prepend-icon": "mdi-vuetify",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vuetify")
                              ]),
                              _: 1
                            })
                          ]),
                          createVNode(VTabs, {
                            modelValue: tab.value,
                            "onUpdate:modelValue": ($event) => tab.value = $event,
                            color: "primary",
                            "align-tabs": "center",
                            class: "px-4"
                          }, {
                            default: withCtx(() => [
                              createVNode(VTab, { value: "type" }, {
                                default: withCtx(() => [
                                  createTextVNode("Type")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "style" }, {
                                default: withCtx(() => [
                                  createTextVNode("Style")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "content" }, {
                                default: withCtx(() => [
                                  createTextVNode("Content")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "actions" }, {
                                default: withCtx(() => [
                                  createTextVNode("Actions")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "templates" }, {
                                default: withCtx(() => [
                                  createTextVNode("Templates")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue"]),
                          createVNode(VDivider),
                          createVNode(VCardText, {
                            class: "pa-0 fill-height",
                            style: { "overflow-y": "auto" }
                          }, {
                            default: withCtx(() => [
                              createVNode(VWindow, {
                                modelValue: tab.value,
                                "onUpdate:modelValue": ($event) => tab.value = $event,
                                class: "fill-height"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VWindowItem, { value: "type" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-shape")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Component Type")
                                        ]),
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            createVNode(VRadioGroup, {
                                              modelValue: selectedType.value,
                                              "onUpdate:modelValue": ($event) => selectedType.value = $event,
                                              class: "mb-4"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(componentTypes, (type) => {
                                                  return createVNode(VRadio, {
                                                    key: type.value,
                                                    value: type.value,
                                                    label: type.text
                                                  }, null, 8, ["value", "label"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          _: 1
                                        })
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "style" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-palette")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Appearance")
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2" }, "Variant"),
                                          createVNode(VChipGroup, {
                                            modelValue: properties.value.variant,
                                            "onUpdate:modelValue": ($event) => properties.value.variant = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(variants, (variant) => {
                                                return createVNode(VChip, {
                                                  key: variant,
                                                  size: "small",
                                                  value: variant
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(toDisplayString(variant), 1)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2" }, "Size"),
                                          createVNode(VChipGroup, {
                                            modelValue: properties.value.size,
                                            "onUpdate:modelValue": ($event) => properties.value.size = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(sizes, (size) => {
                                                return createVNode(VChip, {
                                                  key: size,
                                                  size: "small",
                                                  value: size
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(toDisplayString(size), 1)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2" }, "Color"),
                                          createVNode(VBtnToggle, {
                                            modelValue: properties.value.color,
                                            "onUpdate:modelValue": ($event) => properties.value.color = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            "selected-class": "border-primary"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                return createVNode(VBtn, {
                                                  key: color.value,
                                                  value: color.value,
                                                  color: color.value !== "default" ? color.value : void 0,
                                                  size: "small",
                                                  variant: "tonal",
                                                  width: "40",
                                                  height: "40",
                                                  class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                }, {
                                                  default: withCtx(() => [
                                                    color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-palette-outline")
                                                      ]),
                                                      _: 1
                                                    })) : createCommentVNode("", true)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value", "color", "class"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.rounded,
                                          "onUpdate:modelValue": ($event) => properties.value.rounded = $event,
                                          color: "primary",
                                          label: "Rounded",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.block,
                                          "onUpdate:modelValue": ($event) => properties.value.block = $event,
                                          color: "primary",
                                          label: "Full Width",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.disabled,
                                          "onUpdate:modelValue": ($event) => properties.value.disabled = $event,
                                          color: "primary",
                                          label: "Disabled",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "content" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-text")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Content")
                                        ]),
                                        createVNode(VTextField, {
                                          modelValue: properties.value.text,
                                          "onUpdate:modelValue": ($event) => properties.value.text = $event,
                                          label: "Text",
                                          variant: "outlined",
                                          density: "comfortable",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        showIconField.value ? (openBlock(), createBlock(VTextField, {
                                          key: 0,
                                          modelValue: properties.value.icon,
                                          "onUpdate:modelValue": ($event) => properties.value.icon = $event,
                                          label: "Icon (e.g. mdi-heart)",
                                          variant: "outlined",
                                          density: "comfortable",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                        selectedType.value === "button" ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                          createVNode(VTextField, {
                                            modelValue: properties.value.href,
                                            "onUpdate:modelValue": ($event) => properties.value.href = $event,
                                            label: "Link URL",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSelect, {
                                            modelValue: properties.value.target,
                                            "onUpdate:modelValue": ($event) => properties.value.target = $event,
                                            items: ["_self", "_blank", "_parent", "_top"],
                                            label: "Link Target",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSlider, {
                                            modelValue: properties.value.elevation,
                                            "onUpdate:modelValue": ($event) => properties.value.elevation = $event,
                                            min: 0,
                                            max: 24,
                                            label: "Elevation",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSelect, {
                                            modelValue: properties.value.gradient,
                                            "onUpdate:modelValue": ($event) => properties.value.gradient = $event,
                                            items: gradients,
                                            label: "Gradient Direction",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.loading,
                                            "onUpdate:modelValue": ($event) => properties.value.loading = $event,
                                            color: "primary",
                                            label: "Loading",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ], 64)) : createCommentVNode("", true),
                                        selectedType.value === "date" ? (openBlock(), createBlock(Fragment, { key: 2 }, [
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.landscape,
                                            "onUpdate:modelValue": ($event) => properties.value.landscape = $event,
                                            color: "primary",
                                            label: "Landscape",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.multiple,
                                            "onUpdate:modelValue": ($event) => properties.value.multiple = $event,
                                            color: "primary",
                                            label: "Multiple Dates",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.fullWidth,
                                            "onUpdate:modelValue": ($event) => properties.value.fullWidth = $event,
                                            color: "primary",
                                            label: "Full Width",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.showAdjacentMonths,
                                            "onUpdate:modelValue": ($event) => properties.value.showAdjacentMonths = $event,
                                            color: "primary",
                                            label: "Show Adjacent Months",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VTextField, {
                                            modelValue: properties.value.title,
                                            "onUpdate:modelValue": ($event) => properties.value.title = $event,
                                            label: "Title",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ], 64)) : createCommentVNode("", true),
                                        showPosition.value ? (openBlock(), createBlock(VSelect, {
                                          key: 3,
                                          modelValue: properties.value.position,
                                          "onUpdate:modelValue": ($event) => properties.value.position = $event,
                                          items: positions,
                                          label: "Position",
                                          variant: "outlined",
                                          density: "comfortable",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                        showDescription.value ? (openBlock(), createBlock(VTextarea, {
                                          key: 4,
                                          modelValue: properties.value.description,
                                          "onUpdate:modelValue": ($event) => properties.value.description = $event,
                                          label: "Description",
                                          variant: "outlined",
                                          density: "comfortable",
                                          "auto-grow": "",
                                          rows: "3",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                        selectedType.value === "table" ? (openBlock(), createBlock(Fragment, { key: 5 }, [
                                          createVNode("div", { class: "text-subtitle-1 mb-2" }, "Table Headers"),
                                          createVNode(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx(() => [
                                              (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableHeaders, (header, index) => {
                                                return openBlock(), createBlock("div", {
                                                  key: index,
                                                  class: "d-flex align-center mb-2"
                                                }, [
                                                  createVNode(VTextField, {
                                                    modelValue: header.title,
                                                    "onUpdate:modelValue": ($event) => header.title = $event,
                                                    label: "Header Title",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    class: "mr-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VTextField, {
                                                    modelValue: header.key,
                                                    "onUpdate:modelValue": ($event) => header.key = $event,
                                                    label: "Key",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    class: "mr-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VSwitch, {
                                                    modelValue: header.sortable,
                                                    "onUpdate:modelValue": ($event) => header.sortable = $event,
                                                    color: "primary",
                                                    label: "Sortable",
                                                    "hide-details": "",
                                                    class: "mr-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VBtn, {
                                                    icon: "mdi-delete",
                                                    color: "error",
                                                    variant: "text",
                                                    density: "compact",
                                                    onClick: ($event) => properties.value.tableHeaders.splice(index, 1)
                                                  }, null, 8, ["onClick"])
                                                ]);
                                              }), 128)),
                                              createVNode(VBtn, {
                                                color: "primary",
                                                "prepend-icon": "mdi-plus",
                                                variant: "tonal",
                                                block: "",
                                                onClick: addTableHeader,
                                                class: "mt-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Add Header ")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("div", { class: "text-subtitle-1 mb-2" }, "Table Items"),
                                          createVNode(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx(() => [
                                              (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableItems, (item, index) => {
                                                return openBlock(), createBlock("div", {
                                                  key: index,
                                                  class: "d-flex align-center mb-2"
                                                }, [
                                                  (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableHeaders, (header) => {
                                                    return openBlock(), createBlock("div", {
                                                      key: header.key,
                                                      class: "mr-2"
                                                    }, [
                                                      createVNode(VTextField, {
                                                        modelValue: item[header.key],
                                                        "onUpdate:modelValue": ($event) => item[header.key] = $event,
                                                        label: header.title,
                                                        variant: "outlined",
                                                        density: "compact"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue", "label"])
                                                    ]);
                                                  }), 128)),
                                                  createVNode(VBtn, {
                                                    icon: "mdi-delete",
                                                    color: "error",
                                                    variant: "text",
                                                    density: "compact",
                                                    onClick: ($event) => properties.value.tableItems.splice(index, 1)
                                                  }, null, 8, ["onClick"])
                                                ]);
                                              }), 128)),
                                              createVNode(VBtn, {
                                                color: "primary",
                                                "prepend-icon": "mdi-plus",
                                                variant: "tonal",
                                                block: "",
                                                onClick: addTableItem,
                                                class: "mt-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Add Item ")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VSlider, {
                                            modelValue: properties.value.itemsPerPage,
                                            "onUpdate:modelValue": ($event) => properties.value.itemsPerPage = $event,
                                            min: 5,
                                            max: 25,
                                            step: 5,
                                            label: "Items Per Page",
                                            class: "mb-4",
                                            "thumb-label": ""
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSelect, {
                                            modelValue: properties.value.sortBy,
                                            "onUpdate:modelValue": ($event) => properties.value.sortBy = $event,
                                            items: getSortableKeys(),
                                            label: "Default Sort By",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                          createVNode(VSelect, {
                                            modelValue: properties.value.sortOrder,
                                            "onUpdate:modelValue": ($event) => properties.value.sortOrder = $event,
                                            items: ["asc", "desc"],
                                            label: "Sort Order",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.showSelect,
                                            "onUpdate:modelValue": ($event) => properties.value.showSelect = $event,
                                            color: "primary",
                                            label: "Show Selection",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.showFooter,
                                            "onUpdate:modelValue": ($event) => properties.value.showFooter = $event,
                                            color: "primary",
                                            label: "Show Footer",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.dense,
                                            "onUpdate:modelValue": ($event) => properties.value.dense = $event,
                                            color: "primary",
                                            label: "Dense",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ], 64)) : createCommentVNode("", true),
                                        selectedType.value === "chart" ? (openBlock(), createBlock(Fragment, { key: 6 }, [
                                          createVNode(VSelect, {
                                            modelValue: properties.value.chartType,
                                            "onUpdate:modelValue": ($event) => properties.value.chartType = $event,
                                            items: ["bar", "line", "pie", "doughnut", "radar", "polarArea"],
                                            label: "Chart Type",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode("div", { class: "text-subtitle-1 mb-2" }, "Chart Data"),
                                          createVNode(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx(() => [
                                              (openBlock(true), createBlock(Fragment, null, renderList(properties.value.chartData, (value, index) => {
                                                return openBlock(), createBlock("div", {
                                                  key: index,
                                                  class: "d-flex align-center mb-2"
                                                }, [
                                                  createVNode(VTextField, {
                                                    modelValue: properties.value.chartLabels[index],
                                                    "onUpdate:modelValue": ($event) => properties.value.chartLabels[index] = $event,
                                                    label: "Label",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    class: "mr-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VTextField, {
                                                    modelValue: properties.value.chartData[index],
                                                    "onUpdate:modelValue": ($event) => properties.value.chartData[index] = $event,
                                                    modelModifiers: { number: true },
                                                    label: "Value",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    type: "number",
                                                    class: "mr-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VBtn, {
                                                    icon: "mdi-delete",
                                                    color: "error",
                                                    variant: "text",
                                                    density: "compact",
                                                    onClick: ($event) => removeChartDataPoint(index)
                                                  }, null, 8, ["onClick"])
                                                ]);
                                              }), 128)),
                                              createVNode(VBtn, {
                                                color: "primary",
                                                "prepend-icon": "mdi-plus",
                                                variant: "tonal",
                                                block: "",
                                                onClick: addChartDataPoint,
                                                class: "mt-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Add Data Point ")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.showLegend,
                                            "onUpdate:modelValue": ($event) => properties.value.showLegend = $event,
                                            color: "primary",
                                            label: "Show Legend",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.responsive,
                                            "onUpdate:modelValue": ($event) => properties.value.responsive = $event,
                                            color: "primary",
                                            label: "Responsive",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.maintainAspectRatio,
                                            "onUpdate:modelValue": ($event) => properties.value.maintainAspectRatio = $event,
                                            color: "primary",
                                            label: "Maintain Aspect Ratio",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ], 64)) : createCommentVNode("", true),
                                        selectedType.value === "file" ? (openBlock(), createBlock(Fragment, { key: 7 }, [
                                          createVNode(VTextField, {
                                            modelValue: properties.value.dropzoneText,
                                            "onUpdate:modelValue": ($event) => properties.value.dropzoneText = $event,
                                            label: "Dropzone Text",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VTextField, {
                                            modelValue: properties.value.acceptTypes,
                                            "onUpdate:modelValue": ($event) => properties.value.acceptTypes = $event,
                                            label: "Accepted File Types",
                                            variant: "outlined",
                                            density: "comfortable",
                                            placeholder: "image/*, .pdf, .docx",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSlider, {
                                            modelValue: properties.value.maxFiles,
                                            "onUpdate:modelValue": ($event) => properties.value.maxFiles = $event,
                                            min: 1,
                                            max: 20,
                                            label: "Max Files",
                                            class: "mb-4",
                                            "thumb-label": ""
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSlider, {
                                            modelValue: properties.value.maxSize,
                                            "onUpdate:modelValue": ($event) => properties.value.maxSize = $event,
                                            min: 1,
                                            max: 50,
                                            label: "Max Size (MB)",
                                            class: "mb-4",
                                            "thumb-label": ""
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.multiple,
                                            "onUpdate:modelValue": ($event) => properties.value.multiple = $event,
                                            color: "primary",
                                            label: "Allow Multiple Files",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.showPreview,
                                            "onUpdate:modelValue": ($event) => properties.value.showPreview = $event,
                                            color: "primary",
                                            label: "Show Preview",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.autoUpload,
                                            "onUpdate:modelValue": ($event) => properties.value.autoUpload = $event,
                                            color: "primary",
                                            label: "Auto Upload",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.chips,
                                            "onUpdate:modelValue": ($event) => properties.value.chips = $event,
                                            color: "primary",
                                            label: "Show as Chips",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.counter,
                                            "onUpdate:modelValue": ($event) => properties.value.counter = $event,
                                            color: "primary",
                                            label: "Show Counter",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.validateOnSelect,
                                            "onUpdate:modelValue": ($event) => properties.value.validateOnSelect = $event,
                                            color: "primary",
                                            label: "Validate on Select",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.returnObject,
                                            "onUpdate:modelValue": ($event) => properties.value.returnObject = $event,
                                            color: "primary",
                                            label: "Return Object",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ], 64)) : createCommentVNode("", true)
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "actions" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-gesture-tap-button")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Interactions")
                                        ]),
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            createVNode("div", { class: "text-subtitle-1 mb-2" }, "Event Handling"),
                                            createVNode(VSelect, {
                                              modelValue: properties.value.eventType,
                                              "onUpdate:modelValue": ($event) => properties.value.eventType = $event,
                                              items: eventTypes,
                                              label: "Event Type",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-3"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VTextField, {
                                              modelValue: properties.value.eventHandler,
                                              "onUpdate:modelValue": ($event) => properties.value.eventHandler = $event,
                                              label: "Event Handler",
                                              placeholder: "methodName",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-3"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.stopPropagation,
                                              "onUpdate:modelValue": ($event) => properties.value.stopPropagation = $event,
                                              color: "primary",
                                              label: "Stop Propagation",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.preventDefault,
                                              "onUpdate:modelValue": ($event) => properties.value.preventDefault = $event,
                                              color: "primary",
                                              label: "Prevent Default",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            createVNode("div", { class: "text-subtitle-1 mb-2" }, "Animation & Transitions"),
                                            createVNode(VSelect, {
                                              modelValue: properties.value.transition,
                                              "onUpdate:modelValue": ($event) => properties.value.transition = $event,
                                              items: transitions,
                                              label: "Transition Effect",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-3"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode("div", { class: "d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-clock-outline")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: properties.value.transitionDuration,
                                                "onUpdate:modelValue": ($event) => properties.value.transitionDuration = $event,
                                                min: "0",
                                                max: "1000",
                                                step: "50",
                                                label: "Duration (ms)",
                                                class: "mx-2",
                                                "thumb-label": ""
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode("span", { class: "text-caption" }, toDisplayString(properties.value.transitionDuration) + "ms", 1)
                                            ])
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            createVNode("div", { class: "text-subtitle-1 mb-2" }, "Advanced Options"),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.ripple,
                                              "onUpdate:modelValue": ($event) => properties.value.ripple = $event,
                                              color: "primary",
                                              label: "Ripple Effect",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.eager,
                                              "onUpdate:modelValue": ($event) => properties.value.eager = $event,
                                              color: "primary",
                                              label: "Eager Loading",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            ["badge"].includes(selectedType.value) ? (openBlock(), createBlock(VSwitch, {
                                              key: 0,
                                              modelValue: properties.value.closeOnContentClick,
                                              "onUpdate:modelValue": ($event) => properties.value.closeOnContentClick = $event,
                                              color: "primary",
                                              label: "Close on Content Click",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                            ["alert"].includes(selectedType.value) ? (openBlock(), createBlock(VSwitch, {
                                              key: 1,
                                              modelValue: properties.value.closeOnBack,
                                              "onUpdate:modelValue": ($event) => properties.value.closeOnBack = $event,
                                              color: "primary",
                                              label: "Close on Back Navigation",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                          ]),
                                          _: 1
                                        }),
                                        selectedType.value === "button" ? (openBlock(), createBlock(VCard, {
                                          key: 0,
                                          class: "mb-4 pa-3"
                                        }, {
                                          default: withCtx(() => [
                                            createVNode("div", { class: "text-subtitle-1 mb-2" }, "Button Specific Actions"),
                                            createVNode(VSelect, {
                                              modelValue: properties.value.buttonType,
                                              "onUpdate:modelValue": ($event) => properties.value.buttonType = $event,
                                              items: buttonTypes,
                                              label: "Button Type",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-3"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            properties.value.buttonType === "submit" ? (openBlock(), createBlock(VTextField, {
                                              key: 0,
                                              modelValue: properties.value.formAction,
                                              "onUpdate:modelValue": ($event) => properties.value.formAction = $event,
                                              label: "Form Action",
                                              placeholder: "https://example.com/submit",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-3"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                          ]),
                                          _: 1
                                        })) : createCommentVNode("", true)
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "templates" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-file-document-outline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Component Templates")
                                          ]),
                                          createVNode(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props }) => [
                                              createVNode(VBtn, mergeProps({
                                                icon: "mdi-help-circle-outline",
                                                variant: "text",
                                                size: "small"
                                              }, props), null, 16)
                                            ]),
                                            default: withCtx(() => [
                                              createVNode("span", null, "Apply pre-defined templates or save your own")
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common components."),
                                        createVNode(VCard, { class: "mb-4" }, {
                                          default: withCtx(() => [
                                            createVNode(VList, null, {
                                              default: withCtx(() => [
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("info"),
                                                  "prepend-icon": "mdi-information",
                                                  title: "Info Alert",
                                                  subtitle: "Informational message"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("status"),
                                                  "prepend-icon": "mdi-account-check",
                                                  title: "Status Badge",
                                                  subtitle: "User status indicator"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("barChart"),
                                                  "prepend-icon": "mdi-chart-bar",
                                                  title: "Bar Chart",
                                                  subtitle: "Monthly data visualization"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("lineChart"),
                                                  "prepend-icon": "mdi-chart-line",
                                                  title: "Line Chart",
                                                  subtitle: "Weekly trend visualization"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("pieChart"),
                                                  "prepend-icon": "mdi-chart-pie",
                                                  title: "Pie Chart",
                                                  subtitle: "Distribution visualization"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("doughnutChart"),
                                                  "prepend-icon": "mdi-chart-donut",
                                                  title: "Doughnut Chart",
                                                  subtitle: "Product distribution"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("radarChart"),
                                                  "prepend-icon": "mdi-chart-scatter-plot",
                                                  title: "Radar Chart",
                                                  subtitle: "Performance metrics"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("polarAreaChart"),
                                                  "prepend-icon": "mdi-chart-arc",
                                                  title: "Polar Area Chart",
                                                  subtitle: "Regional distribution"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("dataTable"),
                                                  "prepend-icon": "mdi-table",
                                                  title: "Data Table",
                                                  subtitle: "Structured data display"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("fileUpload"),
                                                  "prepend-icon": "mdi-file-upload",
                                                  title: "File Upload",
                                                  subtitle: "Document upload component"
                                                }, null, 8, ["onClick"])
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VAlert, {
                                          type: "info",
                                          variant: "tonal",
                                          class: "mb-4"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(" Applying a template will replace your current component settings. ")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-content-save")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Save Current Component")
                                        ]),
                                        createVNode(VTextField, {
                                          modelValue: customTemplateName.value,
                                          "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                          label: "Template Name",
                                          variant: "outlined",
                                          density: "comfortable",
                                          "prepend-inner-icon": "mdi-tag",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VBtn, {
                                          color: "primary",
                                          "prepend-icon": "mdi-content-save",
                                          block: "",
                                          onClick: saveCurrentTemplate
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(" Save Current Component as Template ")
                                          ]),
                                          _: 1
                                        })
                                      ])
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"])
                            ]),
                            _: 1
                          })
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(`</div><div class="preview-area pa-4 d-flex flex-column" data-v-ce248d1e${_scopeId2}><div class="d-flex justify-space-between align-center mb-3" data-v-ce248d1e${_scopeId2}>`);
                  _push3(ssrRenderComponent(VChip, {
                    color: "primary",
                    variant: "flat",
                    size: "small",
                    class: "mr-2"
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(ssrRenderComponent(VIcon, {
                          start: "",
                          size: "small"
                        }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(`mdi-eye`);
                            } else {
                              return [
                                createTextVNode("mdi-eye")
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(` Live Preview `);
                      } else {
                        return [
                          createVNode(VIcon, {
                            start: "",
                            size: "small"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("mdi-eye")
                            ]),
                            _: 1
                          }),
                          createTextVNode(" Live Preview ")
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(`</div><div class="preview-canvas flex-grow-1 pa-4 bg-grey-darken-4 rounded-lg" data-v-ce248d1e${_scopeId2}><div class="d-flex align-center justify-center w-100 h-100" data-v-ce248d1e${_scopeId2}>`);
                  if (selectedType.value === "button") {
                    _push3(ssrRenderComponent(VBtn, {
                      color: properties.value.color,
                      variant: properties.value.variant,
                      size: properties.value.size,
                      disabled: properties.value.disabled,
                      block: properties.value.block,
                      rounded: properties.value.rounded,
                      "prepend-icon": properties.value.icon,
                      href: properties.value.href,
                      target: properties.value.target,
                      elevation: properties.value.elevation,
                      loading: properties.value.loading,
                      style: properties.value.gradient ? { background: `linear-gradient(${properties.value.gradient}, ${properties.value.color}, ${properties.value.color}80)` } : {}
                    }, {
                      default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                        if (_push4) {
                          _push4(`${ssrInterpolate(properties.value.text || "Button")}`);
                        } else {
                          return [
                            createTextVNode(toDisplayString(properties.value.text || "Button"), 1)
                          ];
                        }
                      }),
                      _: 1
                    }, _parent3, _scopeId2));
                  } else if (selectedType.value === "badge") {
                    _push3(ssrRenderComponent(VBadge, {
                      content: properties.value.text,
                      color: properties.value.color,
                      location: properties.value.position
                    }, {
                      default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                        if (_push4) {
                          _push4(ssrRenderComponent(VAvatar, { size: "48" }, {
                            default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                              if (_push5) {
                                _push5(ssrRenderComponent(VIcon, null, {
                                  default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                    if (_push6) {
                                      _push6(`${ssrInterpolate(properties.value.icon || "mdi-account")}`);
                                    } else {
                                      return [
                                        createTextVNode(toDisplayString(properties.value.icon || "mdi-account"), 1)
                                      ];
                                    }
                                  }),
                                  _: 1
                                }, _parent5, _scopeId4));
                              } else {
                                return [
                                  createVNode(VIcon, null, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString(properties.value.icon || "mdi-account"), 1)
                                    ]),
                                    _: 1
                                  })
                                ];
                              }
                            }),
                            _: 1
                          }, _parent4, _scopeId3));
                        } else {
                          return [
                            createVNode(VAvatar, { size: "48" }, {
                              default: withCtx(() => [
                                createVNode(VIcon, null, {
                                  default: withCtx(() => [
                                    createTextVNode(toDisplayString(properties.value.icon || "mdi-account"), 1)
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            })
                          ];
                        }
                      }),
                      _: 1
                    }, _parent3, _scopeId2));
                  } else if (selectedType.value === "alert") {
                    _push3(ssrRenderComponent(VAlert, {
                      type: properties.value.color === "default" ? void 0 : properties.value.color,
                      variant: properties.value.variant,
                      title: properties.value.text,
                      text: properties.value.description,
                      icon: properties.value.icon,
                      class: "w-100"
                    }, null, _parent3, _scopeId2));
                  } else if (selectedType.value === "chip") {
                    _push3(ssrRenderComponent(VChip, {
                      color: properties.value.color,
                      variant: properties.value.variant,
                      size: properties.value.size,
                      "prepend-icon": properties.value.icon
                    }, {
                      default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                        if (_push4) {
                          _push4(`${ssrInterpolate(properties.value.text || "Chip")}`);
                        } else {
                          return [
                            createTextVNode(toDisplayString(properties.value.text || "Chip"), 1)
                          ];
                        }
                      }),
                      _: 1
                    }, _parent3, _scopeId2));
                  } else if (selectedType.value === "date") {
                    _push3(ssrRenderComponent(VDatePicker, {
                      modelValue: properties.value.date,
                      "onUpdate:modelValue": ($event) => properties.value.date = $event,
                      color: properties.value.color,
                      variant: properties.value.variant,
                      multiple: properties.value.multiple,
                      landscape: properties.value.landscape,
                      "show-week-numbers": properties.value.showWeek,
                      "show-adjacent-months": properties.value.showAdjacentMonths,
                      title: properties.value.title,
                      width: properties.value.fullWidth ? "100%" : void 0,
                      class: "elevation-4"
                    }, null, _parent3, _scopeId2));
                  } else if (selectedType.value === "table") {
                    _push3(ssrRenderComponent(VDataTable, {
                      headers: properties.value.tableHeaders,
                      items: properties.value.tableItems,
                      "items-per-page": properties.value.itemsPerPage,
                      "sort-by": [{ key: properties.value.sortBy, order: properties.value.sortOrder }],
                      "show-select": properties.value.showSelect,
                      "show-footer": properties.value.showFooter,
                      dense: properties.value.dense,
                      class: "w-100"
                    }, null, _parent3, _scopeId2));
                  } else if (selectedType.value === "chart") {
                    _push3(`<div class="w-100 h-100 d-flex align-center justify-center" data-v-ce248d1e${_scopeId2}>`);
                    _push3(ssrRenderComponent(VCard, {
                      class: "pa-4 w-100",
                      "max-width": "500"
                    }, {
                      default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                        if (_push4) {
                          _push4(ssrRenderComponent(VCardTitle, null, {
                            default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                              if (_push5) {
                                _push5(`${ssrInterpolate(properties.value.chartType.charAt(0).toUpperCase() + properties.value.chartType.slice(1))} Chart`);
                              } else {
                                return [
                                  createTextVNode(toDisplayString(properties.value.chartType.charAt(0).toUpperCase() + properties.value.chartType.slice(1)) + " Chart", 1)
                                ];
                              }
                            }),
                            _: 1
                          }, _parent4, _scopeId3));
                          _push4(ssrRenderComponent(VCardText, null, {
                            default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                              if (_push5) {
                                _push5(`<div style="${ssrRenderStyle({ "position": "relative", "height": "300px" })}" data-v-ce248d1e${_scopeId4}>`);
                                ssrRenderVNode(_push5, createVNode(resolveDynamicComponent(properties.value.chartType === "bar" ? unref(Bar) : properties.value.chartType === "line" ? unref(Line) : properties.value.chartType === "pie" ? unref(Pie) : properties.value.chartType === "doughnut" ? unref(Doughnut) : properties.value.chartType === "polarArea" ? unref(PolarArea) : unref(Radar)), {
                                  data: chartData.value,
                                  options: chartOptions.value
                                }, null), _parent5, _scopeId4);
                                _push5(`</div>`);
                              } else {
                                return [
                                  createVNode("div", { style: { "position": "relative", "height": "300px" } }, [
                                    (openBlock(), createBlock(resolveDynamicComponent(properties.value.chartType === "bar" ? unref(Bar) : properties.value.chartType === "line" ? unref(Line) : properties.value.chartType === "pie" ? unref(Pie) : properties.value.chartType === "doughnut" ? unref(Doughnut) : properties.value.chartType === "polarArea" ? unref(PolarArea) : unref(Radar)), {
                                      data: chartData.value,
                                      options: chartOptions.value
                                    }, null, 8, ["data", "options"]))
                                  ])
                                ];
                              }
                            }),
                            _: 1
                          }, _parent4, _scopeId3));
                        } else {
                          return [
                            createVNode(VCardTitle, null, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString(properties.value.chartType.charAt(0).toUpperCase() + properties.value.chartType.slice(1)) + " Chart", 1)
                              ]),
                              _: 1
                            }),
                            createVNode(VCardText, null, {
                              default: withCtx(() => [
                                createVNode("div", { style: { "position": "relative", "height": "300px" } }, [
                                  (openBlock(), createBlock(resolveDynamicComponent(properties.value.chartType === "bar" ? unref(Bar) : properties.value.chartType === "line" ? unref(Line) : properties.value.chartType === "pie" ? unref(Pie) : properties.value.chartType === "doughnut" ? unref(Doughnut) : properties.value.chartType === "polarArea" ? unref(PolarArea) : unref(Radar)), {
                                    data: chartData.value,
                                    options: chartOptions.value
                                  }, null, 8, ["data", "options"]))
                                ])
                              ]),
                              _: 1
                            })
                          ];
                        }
                      }),
                      _: 1
                    }, _parent3, _scopeId2));
                    _push3(`</div>`);
                  } else if (selectedType.value === "file") {
                    _push3(`<div class="w-100 h-100 d-flex align-center justify-center" data-v-ce248d1e${_scopeId2}>`);
                    _push3(ssrRenderComponent(VCard, {
                      class: "pa-4 w-100",
                      "max-width": "500"
                    }, {
                      default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                        if (_push4) {
                          _push4(ssrRenderComponent(VCardTitle, null, {
                            default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                              if (_push5) {
                                _push5(`File Upload`);
                              } else {
                                return [
                                  createTextVNode("File Upload")
                                ];
                              }
                            }),
                            _: 1
                          }, _parent4, _scopeId3));
                          _push4(ssrRenderComponent(VCardText, null, {
                            default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                              if (_push5) {
                                _push5(ssrRenderComponent(VFileInput, {
                                  multiple: properties.value.multiple,
                                  accept: properties.value.acceptTypes,
                                  "max-files": properties.value.maxFiles,
                                  "max-size": properties.value.maxSize * 1024 * 1024,
                                  "show-size": true,
                                  label: properties.value.dropzoneText,
                                  color: properties.value.color !== "default" ? properties.value.color : void 0,
                                  variant: "outlined",
                                  "show-preview": properties.value.showPreview,
                                  chips: properties.value.chips,
                                  counter: properties.value.counter,
                                  "validate-on-select": properties.value.validateOnSelect,
                                  "return-object": properties.value.returnObject,
                                  "prepend-icon": "mdi-file-upload"
                                }, null, _parent5, _scopeId4));
                              } else {
                                return [
                                  createVNode(VFileInput, {
                                    multiple: properties.value.multiple,
                                    accept: properties.value.acceptTypes,
                                    "max-files": properties.value.maxFiles,
                                    "max-size": properties.value.maxSize * 1024 * 1024,
                                    "show-size": true,
                                    label: properties.value.dropzoneText,
                                    color: properties.value.color !== "default" ? properties.value.color : void 0,
                                    variant: "outlined",
                                    "show-preview": properties.value.showPreview,
                                    chips: properties.value.chips,
                                    counter: properties.value.counter,
                                    "validate-on-select": properties.value.validateOnSelect,
                                    "return-object": properties.value.returnObject,
                                    "prepend-icon": "mdi-file-upload"
                                  }, null, 8, ["multiple", "accept", "max-files", "max-size", "label", "color", "show-preview", "chips", "counter", "validate-on-select", "return-object"])
                                ];
                              }
                            }),
                            _: 1
                          }, _parent4, _scopeId3));
                        } else {
                          return [
                            createVNode(VCardTitle, null, {
                              default: withCtx(() => [
                                createTextVNode("File Upload")
                              ]),
                              _: 1
                            }),
                            createVNode(VCardText, null, {
                              default: withCtx(() => [
                                createVNode(VFileInput, {
                                  multiple: properties.value.multiple,
                                  accept: properties.value.acceptTypes,
                                  "max-files": properties.value.maxFiles,
                                  "max-size": properties.value.maxSize * 1024 * 1024,
                                  "show-size": true,
                                  label: properties.value.dropzoneText,
                                  color: properties.value.color !== "default" ? properties.value.color : void 0,
                                  variant: "outlined",
                                  "show-preview": properties.value.showPreview,
                                  chips: properties.value.chips,
                                  counter: properties.value.counter,
                                  "validate-on-select": properties.value.validateOnSelect,
                                  "return-object": properties.value.returnObject,
                                  "prepend-icon": "mdi-file-upload"
                                }, null, 8, ["multiple", "accept", "max-files", "max-size", "label", "color", "show-preview", "chips", "counter", "validate-on-select", "return-object"])
                              ]),
                              _: 1
                            })
                          ];
                        }
                      }),
                      _: 1
                    }, _parent3, _scopeId2));
                    _push3(`</div>`);
                  } else {
                    _push3(`<!---->`);
                  }
                  _push3(`</div></div><div class="d-flex justify-end mt-3" data-v-ce248d1e${_scopeId2}>`);
                  _push3(ssrRenderComponent(VBtn, {
                    color: "secondary",
                    class: "mr-2",
                    "prepend-icon": "mdi-eye",
                    onClick: previewCode
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(` Preview Code `);
                      } else {
                        return [
                          createTextVNode(" Preview Code ")
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(ssrRenderComponent(VBtn, {
                    color: "primary",
                    "prepend-icon": "mdi-content-copy",
                    onClick: copyUtilsCode
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(` Copy Code `);
                      } else {
                        return [
                          createTextVNode(" Copy Code ")
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                  _push3(`</div></div>`);
                } else {
                  return [
                    createVNode("div", {
                      class: "control-panel",
                      style: { "width": "350px" }
                    }, [
                      createVNode(VCard, {
                        flat: "",
                        class: "fill-height"
                      }, {
                        default: withCtx(() => [
                          createVNode("div", { class: "px-4 py-2 d-flex align-center" }, [
                            createVNode(VChip, {
                              color: "success",
                              "prepend-icon": "mdi-vuejs",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vue.js")
                              ]),
                              _: 1
                            }),
                            createVNode(VChip, {
                              color: "info",
                              "prepend-icon": "mdi-vuetify",
                              size: "small",
                              class: "mr-2 px-4 py-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("Vuetify")
                              ]),
                              _: 1
                            })
                          ]),
                          createVNode(VTabs, {
                            modelValue: tab.value,
                            "onUpdate:modelValue": ($event) => tab.value = $event,
                            color: "primary",
                            "align-tabs": "center",
                            class: "px-4"
                          }, {
                            default: withCtx(() => [
                              createVNode(VTab, { value: "type" }, {
                                default: withCtx(() => [
                                  createTextVNode("Type")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "style" }, {
                                default: withCtx(() => [
                                  createTextVNode("Style")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "content" }, {
                                default: withCtx(() => [
                                  createTextVNode("Content")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "actions" }, {
                                default: withCtx(() => [
                                  createTextVNode("Actions")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "templates" }, {
                                default: withCtx(() => [
                                  createTextVNode("Templates")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue"]),
                          createVNode(VDivider),
                          createVNode(VCardText, {
                            class: "pa-0 fill-height",
                            style: { "overflow-y": "auto" }
                          }, {
                            default: withCtx(() => [
                              createVNode(VWindow, {
                                modelValue: tab.value,
                                "onUpdate:modelValue": ($event) => tab.value = $event,
                                class: "fill-height"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VWindowItem, { value: "type" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-shape")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Component Type")
                                        ]),
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            createVNode(VRadioGroup, {
                                              modelValue: selectedType.value,
                                              "onUpdate:modelValue": ($event) => selectedType.value = $event,
                                              class: "mb-4"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(), createBlock(Fragment, null, renderList(componentTypes, (type) => {
                                                  return createVNode(VRadio, {
                                                    key: type.value,
                                                    value: type.value,
                                                    label: type.text
                                                  }, null, 8, ["value", "label"]);
                                                }), 64))
                                              ]),
                                              _: 1
                                            }, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          _: 1
                                        })
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "style" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-palette")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Appearance")
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2" }, "Variant"),
                                          createVNode(VChipGroup, {
                                            modelValue: properties.value.variant,
                                            "onUpdate:modelValue": ($event) => properties.value.variant = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(variants, (variant) => {
                                                return createVNode(VChip, {
                                                  key: variant,
                                                  size: "small",
                                                  value: variant
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(toDisplayString(variant), 1)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2" }, "Size"),
                                          createVNode(VChipGroup, {
                                            modelValue: properties.value.size,
                                            "onUpdate:modelValue": ($event) => properties.value.size = $event,
                                            mandatory: "",
                                            "selected-class": "bg-primary text-white"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(sizes, (size) => {
                                                return createVNode(VChip, {
                                                  key: size,
                                                  size: "small",
                                                  value: size
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(toDisplayString(size), 1)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode("div", { class: "mb-4" }, [
                                          createVNode("label", { class: "text-subtitle-2 mb-2" }, "Color"),
                                          createVNode(VBtnToggle, {
                                            modelValue: properties.value.color,
                                            "onUpdate:modelValue": ($event) => properties.value.color = $event,
                                            mandatory: "",
                                            density: "comfortable",
                                            "selected-class": "border-primary"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                                return createVNode(VBtn, {
                                                  key: color.value,
                                                  value: color.value,
                                                  color: color.value !== "default" ? color.value : void 0,
                                                  size: "small",
                                                  variant: "tonal",
                                                  width: "40",
                                                  height: "40",
                                                  class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                                }, {
                                                  default: withCtx(() => [
                                                    color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                      default: withCtx(() => [
                                                        createTextVNode("mdi-palette-outline")
                                                      ]),
                                                      _: 1
                                                    })) : createCommentVNode("", true)
                                                  ]),
                                                  _: 2
                                                }, 1032, ["value", "color", "class"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.rounded,
                                          "onUpdate:modelValue": ($event) => properties.value.rounded = $event,
                                          color: "primary",
                                          label: "Rounded",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.block,
                                          "onUpdate:modelValue": ($event) => properties.value.block = $event,
                                          color: "primary",
                                          label: "Full Width",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.disabled,
                                          "onUpdate:modelValue": ($event) => properties.value.disabled = $event,
                                          color: "primary",
                                          label: "Disabled",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "content" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-text")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Content")
                                        ]),
                                        createVNode(VTextField, {
                                          modelValue: properties.value.text,
                                          "onUpdate:modelValue": ($event) => properties.value.text = $event,
                                          label: "Text",
                                          variant: "outlined",
                                          density: "comfortable",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        showIconField.value ? (openBlock(), createBlock(VTextField, {
                                          key: 0,
                                          modelValue: properties.value.icon,
                                          "onUpdate:modelValue": ($event) => properties.value.icon = $event,
                                          label: "Icon (e.g. mdi-heart)",
                                          variant: "outlined",
                                          density: "comfortable",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                        selectedType.value === "button" ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                          createVNode(VTextField, {
                                            modelValue: properties.value.href,
                                            "onUpdate:modelValue": ($event) => properties.value.href = $event,
                                            label: "Link URL",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSelect, {
                                            modelValue: properties.value.target,
                                            "onUpdate:modelValue": ($event) => properties.value.target = $event,
                                            items: ["_self", "_blank", "_parent", "_top"],
                                            label: "Link Target",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSlider, {
                                            modelValue: properties.value.elevation,
                                            "onUpdate:modelValue": ($event) => properties.value.elevation = $event,
                                            min: 0,
                                            max: 24,
                                            label: "Elevation",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSelect, {
                                            modelValue: properties.value.gradient,
                                            "onUpdate:modelValue": ($event) => properties.value.gradient = $event,
                                            items: gradients,
                                            label: "Gradient Direction",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.loading,
                                            "onUpdate:modelValue": ($event) => properties.value.loading = $event,
                                            color: "primary",
                                            label: "Loading",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ], 64)) : createCommentVNode("", true),
                                        selectedType.value === "date" ? (openBlock(), createBlock(Fragment, { key: 2 }, [
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.landscape,
                                            "onUpdate:modelValue": ($event) => properties.value.landscape = $event,
                                            color: "primary",
                                            label: "Landscape",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.multiple,
                                            "onUpdate:modelValue": ($event) => properties.value.multiple = $event,
                                            color: "primary",
                                            label: "Multiple Dates",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.fullWidth,
                                            "onUpdate:modelValue": ($event) => properties.value.fullWidth = $event,
                                            color: "primary",
                                            label: "Full Width",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.showAdjacentMonths,
                                            "onUpdate:modelValue": ($event) => properties.value.showAdjacentMonths = $event,
                                            color: "primary",
                                            label: "Show Adjacent Months",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VTextField, {
                                            modelValue: properties.value.title,
                                            "onUpdate:modelValue": ($event) => properties.value.title = $event,
                                            label: "Title",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ], 64)) : createCommentVNode("", true),
                                        showPosition.value ? (openBlock(), createBlock(VSelect, {
                                          key: 3,
                                          modelValue: properties.value.position,
                                          "onUpdate:modelValue": ($event) => properties.value.position = $event,
                                          items: positions,
                                          label: "Position",
                                          variant: "outlined",
                                          density: "comfortable",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                        showDescription.value ? (openBlock(), createBlock(VTextarea, {
                                          key: 4,
                                          modelValue: properties.value.description,
                                          "onUpdate:modelValue": ($event) => properties.value.description = $event,
                                          label: "Description",
                                          variant: "outlined",
                                          density: "comfortable",
                                          "auto-grow": "",
                                          rows: "3",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                        selectedType.value === "table" ? (openBlock(), createBlock(Fragment, { key: 5 }, [
                                          createVNode("div", { class: "text-subtitle-1 mb-2" }, "Table Headers"),
                                          createVNode(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx(() => [
                                              (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableHeaders, (header, index) => {
                                                return openBlock(), createBlock("div", {
                                                  key: index,
                                                  class: "d-flex align-center mb-2"
                                                }, [
                                                  createVNode(VTextField, {
                                                    modelValue: header.title,
                                                    "onUpdate:modelValue": ($event) => header.title = $event,
                                                    label: "Header Title",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    class: "mr-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VTextField, {
                                                    modelValue: header.key,
                                                    "onUpdate:modelValue": ($event) => header.key = $event,
                                                    label: "Key",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    class: "mr-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VSwitch, {
                                                    modelValue: header.sortable,
                                                    "onUpdate:modelValue": ($event) => header.sortable = $event,
                                                    color: "primary",
                                                    label: "Sortable",
                                                    "hide-details": "",
                                                    class: "mr-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VBtn, {
                                                    icon: "mdi-delete",
                                                    color: "error",
                                                    variant: "text",
                                                    density: "compact",
                                                    onClick: ($event) => properties.value.tableHeaders.splice(index, 1)
                                                  }, null, 8, ["onClick"])
                                                ]);
                                              }), 128)),
                                              createVNode(VBtn, {
                                                color: "primary",
                                                "prepend-icon": "mdi-plus",
                                                variant: "tonal",
                                                block: "",
                                                onClick: addTableHeader,
                                                class: "mt-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Add Header ")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("div", { class: "text-subtitle-1 mb-2" }, "Table Items"),
                                          createVNode(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx(() => [
                                              (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableItems, (item, index) => {
                                                return openBlock(), createBlock("div", {
                                                  key: index,
                                                  class: "d-flex align-center mb-2"
                                                }, [
                                                  (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableHeaders, (header) => {
                                                    return openBlock(), createBlock("div", {
                                                      key: header.key,
                                                      class: "mr-2"
                                                    }, [
                                                      createVNode(VTextField, {
                                                        modelValue: item[header.key],
                                                        "onUpdate:modelValue": ($event) => item[header.key] = $event,
                                                        label: header.title,
                                                        variant: "outlined",
                                                        density: "compact"
                                                      }, null, 8, ["modelValue", "onUpdate:modelValue", "label"])
                                                    ]);
                                                  }), 128)),
                                                  createVNode(VBtn, {
                                                    icon: "mdi-delete",
                                                    color: "error",
                                                    variant: "text",
                                                    density: "compact",
                                                    onClick: ($event) => properties.value.tableItems.splice(index, 1)
                                                  }, null, 8, ["onClick"])
                                                ]);
                                              }), 128)),
                                              createVNode(VBtn, {
                                                color: "primary",
                                                "prepend-icon": "mdi-plus",
                                                variant: "tonal",
                                                block: "",
                                                onClick: addTableItem,
                                                class: "mt-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Add Item ")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VSlider, {
                                            modelValue: properties.value.itemsPerPage,
                                            "onUpdate:modelValue": ($event) => properties.value.itemsPerPage = $event,
                                            min: 5,
                                            max: 25,
                                            step: 5,
                                            label: "Items Per Page",
                                            class: "mb-4",
                                            "thumb-label": ""
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSelect, {
                                            modelValue: properties.value.sortBy,
                                            "onUpdate:modelValue": ($event) => properties.value.sortBy = $event,
                                            items: getSortableKeys(),
                                            label: "Default Sort By",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                          createVNode(VSelect, {
                                            modelValue: properties.value.sortOrder,
                                            "onUpdate:modelValue": ($event) => properties.value.sortOrder = $event,
                                            items: ["asc", "desc"],
                                            label: "Sort Order",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.showSelect,
                                            "onUpdate:modelValue": ($event) => properties.value.showSelect = $event,
                                            color: "primary",
                                            label: "Show Selection",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.showFooter,
                                            "onUpdate:modelValue": ($event) => properties.value.showFooter = $event,
                                            color: "primary",
                                            label: "Show Footer",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.dense,
                                            "onUpdate:modelValue": ($event) => properties.value.dense = $event,
                                            color: "primary",
                                            label: "Dense",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ], 64)) : createCommentVNode("", true),
                                        selectedType.value === "chart" ? (openBlock(), createBlock(Fragment, { key: 6 }, [
                                          createVNode(VSelect, {
                                            modelValue: properties.value.chartType,
                                            "onUpdate:modelValue": ($event) => properties.value.chartType = $event,
                                            items: ["bar", "line", "pie", "doughnut", "radar", "polarArea"],
                                            label: "Chart Type",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode("div", { class: "text-subtitle-1 mb-2" }, "Chart Data"),
                                          createVNode(VCard, { class: "mb-4 pa-3" }, {
                                            default: withCtx(() => [
                                              (openBlock(true), createBlock(Fragment, null, renderList(properties.value.chartData, (value, index) => {
                                                return openBlock(), createBlock("div", {
                                                  key: index,
                                                  class: "d-flex align-center mb-2"
                                                }, [
                                                  createVNode(VTextField, {
                                                    modelValue: properties.value.chartLabels[index],
                                                    "onUpdate:modelValue": ($event) => properties.value.chartLabels[index] = $event,
                                                    label: "Label",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    class: "mr-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VTextField, {
                                                    modelValue: properties.value.chartData[index],
                                                    "onUpdate:modelValue": ($event) => properties.value.chartData[index] = $event,
                                                    modelModifiers: { number: true },
                                                    label: "Value",
                                                    variant: "outlined",
                                                    density: "compact",
                                                    type: "number",
                                                    class: "mr-2"
                                                  }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                  createVNode(VBtn, {
                                                    icon: "mdi-delete",
                                                    color: "error",
                                                    variant: "text",
                                                    density: "compact",
                                                    onClick: ($event) => removeChartDataPoint(index)
                                                  }, null, 8, ["onClick"])
                                                ]);
                                              }), 128)),
                                              createVNode(VBtn, {
                                                color: "primary",
                                                "prepend-icon": "mdi-plus",
                                                variant: "tonal",
                                                block: "",
                                                onClick: addChartDataPoint,
                                                class: "mt-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(" Add Data Point ")
                                                ]),
                                                _: 1
                                              })
                                            ]),
                                            _: 1
                                          }),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.showLegend,
                                            "onUpdate:modelValue": ($event) => properties.value.showLegend = $event,
                                            color: "primary",
                                            label: "Show Legend",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.responsive,
                                            "onUpdate:modelValue": ($event) => properties.value.responsive = $event,
                                            color: "primary",
                                            label: "Responsive",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.maintainAspectRatio,
                                            "onUpdate:modelValue": ($event) => properties.value.maintainAspectRatio = $event,
                                            color: "primary",
                                            label: "Maintain Aspect Ratio",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ], 64)) : createCommentVNode("", true),
                                        selectedType.value === "file" ? (openBlock(), createBlock(Fragment, { key: 7 }, [
                                          createVNode(VTextField, {
                                            modelValue: properties.value.dropzoneText,
                                            "onUpdate:modelValue": ($event) => properties.value.dropzoneText = $event,
                                            label: "Dropzone Text",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VTextField, {
                                            modelValue: properties.value.acceptTypes,
                                            "onUpdate:modelValue": ($event) => properties.value.acceptTypes = $event,
                                            label: "Accepted File Types",
                                            variant: "outlined",
                                            density: "comfortable",
                                            placeholder: "image/*, .pdf, .docx",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSlider, {
                                            modelValue: properties.value.maxFiles,
                                            "onUpdate:modelValue": ($event) => properties.value.maxFiles = $event,
                                            min: 1,
                                            max: 20,
                                            label: "Max Files",
                                            class: "mb-4",
                                            "thumb-label": ""
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSlider, {
                                            modelValue: properties.value.maxSize,
                                            "onUpdate:modelValue": ($event) => properties.value.maxSize = $event,
                                            min: 1,
                                            max: 50,
                                            label: "Max Size (MB)",
                                            class: "mb-4",
                                            "thumb-label": ""
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.multiple,
                                            "onUpdate:modelValue": ($event) => properties.value.multiple = $event,
                                            color: "primary",
                                            label: "Allow Multiple Files",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.showPreview,
                                            "onUpdate:modelValue": ($event) => properties.value.showPreview = $event,
                                            color: "primary",
                                            label: "Show Preview",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.autoUpload,
                                            "onUpdate:modelValue": ($event) => properties.value.autoUpload = $event,
                                            color: "primary",
                                            label: "Auto Upload",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.chips,
                                            "onUpdate:modelValue": ($event) => properties.value.chips = $event,
                                            color: "primary",
                                            label: "Show as Chips",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.counter,
                                            "onUpdate:modelValue": ($event) => properties.value.counter = $event,
                                            color: "primary",
                                            label: "Show Counter",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.validateOnSelect,
                                            "onUpdate:modelValue": ($event) => properties.value.validateOnSelect = $event,
                                            color: "primary",
                                            label: "Validate on Select",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.returnObject,
                                            "onUpdate:modelValue": ($event) => properties.value.returnObject = $event,
                                            color: "primary",
                                            label: "Return Object",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ], 64)) : createCommentVNode("", true)
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "actions" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-gesture-tap-button")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Interactions")
                                        ]),
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            createVNode("div", { class: "text-subtitle-1 mb-2" }, "Event Handling"),
                                            createVNode(VSelect, {
                                              modelValue: properties.value.eventType,
                                              "onUpdate:modelValue": ($event) => properties.value.eventType = $event,
                                              items: eventTypes,
                                              label: "Event Type",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-3"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VTextField, {
                                              modelValue: properties.value.eventHandler,
                                              "onUpdate:modelValue": ($event) => properties.value.eventHandler = $event,
                                              label: "Event Handler",
                                              placeholder: "methodName",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-3"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.stopPropagation,
                                              "onUpdate:modelValue": ($event) => properties.value.stopPropagation = $event,
                                              color: "primary",
                                              label: "Stop Propagation",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.preventDefault,
                                              "onUpdate:modelValue": ($event) => properties.value.preventDefault = $event,
                                              color: "primary",
                                              label: "Prevent Default",
                                              "hide-details": "",
                                              class: "mb-4"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            createVNode("div", { class: "text-subtitle-1 mb-2" }, "Animation & Transitions"),
                                            createVNode(VSelect, {
                                              modelValue: properties.value.transition,
                                              "onUpdate:modelValue": ($event) => properties.value.transition = $event,
                                              items: transitions,
                                              label: "Transition Effect",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-3"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode("div", { class: "d-flex align-center mb-3" }, [
                                              createVNode(VIcon, {
                                                size: "small",
                                                color: "primary",
                                                class: "mr-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode("mdi-clock-outline")
                                                ]),
                                                _: 1
                                              }),
                                              createVNode(VSlider, {
                                                modelValue: properties.value.transitionDuration,
                                                "onUpdate:modelValue": ($event) => properties.value.transitionDuration = $event,
                                                min: "0",
                                                max: "1000",
                                                step: "50",
                                                label: "Duration (ms)",
                                                class: "mx-2",
                                                "thumb-label": ""
                                              }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                              createVNode("span", { class: "text-caption" }, toDisplayString(properties.value.transitionDuration) + "ms", 1)
                                            ])
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            createVNode("div", { class: "text-subtitle-1 mb-2" }, "Advanced Options"),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.ripple,
                                              "onUpdate:modelValue": ($event) => properties.value.ripple = $event,
                                              color: "primary",
                                              label: "Ripple Effect",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode(VSwitch, {
                                              modelValue: properties.value.eager,
                                              "onUpdate:modelValue": ($event) => properties.value.eager = $event,
                                              color: "primary",
                                              label: "Eager Loading",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            ["badge"].includes(selectedType.value) ? (openBlock(), createBlock(VSwitch, {
                                              key: 0,
                                              modelValue: properties.value.closeOnContentClick,
                                              "onUpdate:modelValue": ($event) => properties.value.closeOnContentClick = $event,
                                              color: "primary",
                                              label: "Close on Content Click",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                            ["alert"].includes(selectedType.value) ? (openBlock(), createBlock(VSwitch, {
                                              key: 1,
                                              modelValue: properties.value.closeOnBack,
                                              "onUpdate:modelValue": ($event) => properties.value.closeOnBack = $event,
                                              color: "primary",
                                              label: "Close on Back Navigation",
                                              "hide-details": "",
                                              class: "mb-2"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                          ]),
                                          _: 1
                                        }),
                                        selectedType.value === "button" ? (openBlock(), createBlock(VCard, {
                                          key: 0,
                                          class: "mb-4 pa-3"
                                        }, {
                                          default: withCtx(() => [
                                            createVNode("div", { class: "text-subtitle-1 mb-2" }, "Button Specific Actions"),
                                            createVNode(VSelect, {
                                              modelValue: properties.value.buttonType,
                                              "onUpdate:modelValue": ($event) => properties.value.buttonType = $event,
                                              items: buttonTypes,
                                              label: "Button Type",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-3"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            properties.value.buttonType === "submit" ? (openBlock(), createBlock(VTextField, {
                                              key: 0,
                                              modelValue: properties.value.formAction,
                                              "onUpdate:modelValue": ($event) => properties.value.formAction = $event,
                                              label: "Form Action",
                                              placeholder: "https://example.com/submit",
                                              variant: "outlined",
                                              density: "comfortable",
                                              class: "mb-3"
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                          ]),
                                          _: 1
                                        })) : createCommentVNode("", true)
                                      ])
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "templates" }, {
                                    default: withCtx(() => [
                                      createVNode("div", { class: "pa-4" }, [
                                        createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                          createVNode("div", { class: "d-flex align-center" }, [
                                            createVNode(VIcon, {
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-file-document-outline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode("span", { class: "text-h6" }, "Component Templates")
                                          ]),
                                          createVNode(VTooltip, { location: "bottom" }, {
                                            activator: withCtx(({ props }) => [
                                              createVNode(VBtn, mergeProps({
                                                icon: "mdi-help-circle-outline",
                                                variant: "text",
                                                size: "small"
                                              }, props), null, 16)
                                            ]),
                                            default: withCtx(() => [
                                              createVNode("span", null, "Apply pre-defined templates or save your own")
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common components."),
                                        createVNode(VCard, { class: "mb-4" }, {
                                          default: withCtx(() => [
                                            createVNode(VList, null, {
                                              default: withCtx(() => [
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("info"),
                                                  "prepend-icon": "mdi-information",
                                                  title: "Info Alert",
                                                  subtitle: "Informational message"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("status"),
                                                  "prepend-icon": "mdi-account-check",
                                                  title: "Status Badge",
                                                  subtitle: "User status indicator"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("barChart"),
                                                  "prepend-icon": "mdi-chart-bar",
                                                  title: "Bar Chart",
                                                  subtitle: "Monthly data visualization"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("lineChart"),
                                                  "prepend-icon": "mdi-chart-line",
                                                  title: "Line Chart",
                                                  subtitle: "Weekly trend visualization"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("pieChart"),
                                                  "prepend-icon": "mdi-chart-pie",
                                                  title: "Pie Chart",
                                                  subtitle: "Distribution visualization"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("doughnutChart"),
                                                  "prepend-icon": "mdi-chart-donut",
                                                  title: "Doughnut Chart",
                                                  subtitle: "Product distribution"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("radarChart"),
                                                  "prepend-icon": "mdi-chart-scatter-plot",
                                                  title: "Radar Chart",
                                                  subtitle: "Performance metrics"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("polarAreaChart"),
                                                  "prepend-icon": "mdi-chart-arc",
                                                  title: "Polar Area Chart",
                                                  subtitle: "Regional distribution"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("dataTable"),
                                                  "prepend-icon": "mdi-table",
                                                  title: "Data Table",
                                                  subtitle: "Structured data display"
                                                }, null, 8, ["onClick"]),
                                                createVNode(VListItem, {
                                                  onClick: ($event) => applyTemplate("fileUpload"),
                                                  "prepend-icon": "mdi-file-upload",
                                                  title: "File Upload",
                                                  subtitle: "Document upload component"
                                                }, null, 8, ["onClick"])
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VAlert, {
                                          type: "info",
                                          variant: "tonal",
                                          class: "mb-4"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(" Applying a template will replace your current component settings. ")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VDivider, { class: "my-4" }),
                                        createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-content-save")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Save Current Component")
                                        ]),
                                        createVNode(VTextField, {
                                          modelValue: customTemplateName.value,
                                          "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                          label: "Template Name",
                                          variant: "outlined",
                                          density: "comfortable",
                                          "prepend-inner-icon": "mdi-tag",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VBtn, {
                                          color: "primary",
                                          "prepend-icon": "mdi-content-save",
                                          block: "",
                                          onClick: saveCurrentTemplate
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(" Save Current Component as Template ")
                                          ]),
                                          _: 1
                                        })
                                      ])
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"])
                            ]),
                            _: 1
                          })
                        ]),
                        _: 1
                      })
                    ]),
                    createVNode("div", { class: "preview-area pa-4 d-flex flex-column" }, [
                      createVNode("div", { class: "d-flex justify-space-between align-center mb-3" }, [
                        createVNode(VChip, {
                          color: "primary",
                          variant: "flat",
                          size: "small",
                          class: "mr-2"
                        }, {
                          default: withCtx(() => [
                            createVNode(VIcon, {
                              start: "",
                              size: "small"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("mdi-eye")
                              ]),
                              _: 1
                            }),
                            createTextVNode(" Live Preview ")
                          ]),
                          _: 1
                        })
                      ]),
                      createVNode("div", { class: "preview-canvas flex-grow-1 pa-4 bg-grey-darken-4 rounded-lg" }, [
                        createVNode("div", { class: "d-flex align-center justify-center w-100 h-100" }, [
                          selectedType.value === "button" ? (openBlock(), createBlock(VBtn, {
                            key: 0,
                            color: properties.value.color,
                            variant: properties.value.variant,
                            size: properties.value.size,
                            disabled: properties.value.disabled,
                            block: properties.value.block,
                            rounded: properties.value.rounded,
                            "prepend-icon": properties.value.icon,
                            href: properties.value.href,
                            target: properties.value.target,
                            elevation: properties.value.elevation,
                            loading: properties.value.loading,
                            style: properties.value.gradient ? { background: `linear-gradient(${properties.value.gradient}, ${properties.value.color}, ${properties.value.color}80)` } : {}
                          }, {
                            default: withCtx(() => [
                              createTextVNode(toDisplayString(properties.value.text || "Button"), 1)
                            ]),
                            _: 1
                          }, 8, ["color", "variant", "size", "disabled", "block", "rounded", "prepend-icon", "href", "target", "elevation", "loading", "style"])) : selectedType.value === "badge" ? (openBlock(), createBlock(VBadge, {
                            key: 1,
                            content: properties.value.text,
                            color: properties.value.color,
                            location: properties.value.position
                          }, {
                            default: withCtx(() => [
                              createVNode(VAvatar, { size: "48" }, {
                                default: withCtx(() => [
                                  createVNode(VIcon, null, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString(properties.value.icon || "mdi-account"), 1)
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["content", "color", "location"])) : selectedType.value === "alert" ? (openBlock(), createBlock(VAlert, {
                            key: 2,
                            type: properties.value.color === "default" ? void 0 : properties.value.color,
                            variant: properties.value.variant,
                            title: properties.value.text,
                            text: properties.value.description,
                            icon: properties.value.icon,
                            class: "w-100"
                          }, null, 8, ["type", "variant", "title", "text", "icon"])) : selectedType.value === "chip" ? (openBlock(), createBlock(VChip, {
                            key: 3,
                            color: properties.value.color,
                            variant: properties.value.variant,
                            size: properties.value.size,
                            "prepend-icon": properties.value.icon
                          }, {
                            default: withCtx(() => [
                              createTextVNode(toDisplayString(properties.value.text || "Chip"), 1)
                            ]),
                            _: 1
                          }, 8, ["color", "variant", "size", "prepend-icon"])) : selectedType.value === "date" ? (openBlock(), createBlock(VDatePicker, {
                            key: 4,
                            modelValue: properties.value.date,
                            "onUpdate:modelValue": ($event) => properties.value.date = $event,
                            color: properties.value.color,
                            variant: properties.value.variant,
                            multiple: properties.value.multiple,
                            landscape: properties.value.landscape,
                            "show-week-numbers": properties.value.showWeek,
                            "show-adjacent-months": properties.value.showAdjacentMonths,
                            title: properties.value.title,
                            width: properties.value.fullWidth ? "100%" : void 0,
                            class: "elevation-4"
                          }, null, 8, ["modelValue", "onUpdate:modelValue", "color", "variant", "multiple", "landscape", "show-week-numbers", "show-adjacent-months", "title", "width"])) : selectedType.value === "table" ? (openBlock(), createBlock(VDataTable, {
                            key: 5,
                            headers: properties.value.tableHeaders,
                            items: properties.value.tableItems,
                            "items-per-page": properties.value.itemsPerPage,
                            "sort-by": [{ key: properties.value.sortBy, order: properties.value.sortOrder }],
                            "show-select": properties.value.showSelect,
                            "show-footer": properties.value.showFooter,
                            dense: properties.value.dense,
                            class: "w-100"
                          }, null, 8, ["headers", "items", "items-per-page", "sort-by", "show-select", "show-footer", "dense"])) : selectedType.value === "chart" ? (openBlock(), createBlock("div", {
                            key: 6,
                            class: "w-100 h-100 d-flex align-center justify-center"
                          }, [
                            createVNode(VCard, {
                              class: "pa-4 w-100",
                              "max-width": "500"
                            }, {
                              default: withCtx(() => [
                                createVNode(VCardTitle, null, {
                                  default: withCtx(() => [
                                    createTextVNode(toDisplayString(properties.value.chartType.charAt(0).toUpperCase() + properties.value.chartType.slice(1)) + " Chart", 1)
                                  ]),
                                  _: 1
                                }),
                                createVNode(VCardText, null, {
                                  default: withCtx(() => [
                                    createVNode("div", { style: { "position": "relative", "height": "300px" } }, [
                                      (openBlock(), createBlock(resolveDynamicComponent(properties.value.chartType === "bar" ? unref(Bar) : properties.value.chartType === "line" ? unref(Line) : properties.value.chartType === "pie" ? unref(Pie) : properties.value.chartType === "doughnut" ? unref(Doughnut) : properties.value.chartType === "polarArea" ? unref(PolarArea) : unref(Radar)), {
                                        data: chartData.value,
                                        options: chartOptions.value
                                      }, null, 8, ["data", "options"]))
                                    ])
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            })
                          ])) : selectedType.value === "file" ? (openBlock(), createBlock("div", {
                            key: 7,
                            class: "w-100 h-100 d-flex align-center justify-center"
                          }, [
                            createVNode(VCard, {
                              class: "pa-4 w-100",
                              "max-width": "500"
                            }, {
                              default: withCtx(() => [
                                createVNode(VCardTitle, null, {
                                  default: withCtx(() => [
                                    createTextVNode("File Upload")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VCardText, null, {
                                  default: withCtx(() => [
                                    createVNode(VFileInput, {
                                      multiple: properties.value.multiple,
                                      accept: properties.value.acceptTypes,
                                      "max-files": properties.value.maxFiles,
                                      "max-size": properties.value.maxSize * 1024 * 1024,
                                      "show-size": true,
                                      label: properties.value.dropzoneText,
                                      color: properties.value.color !== "default" ? properties.value.color : void 0,
                                      variant: "outlined",
                                      "show-preview": properties.value.showPreview,
                                      chips: properties.value.chips,
                                      counter: properties.value.counter,
                                      "validate-on-select": properties.value.validateOnSelect,
                                      "return-object": properties.value.returnObject,
                                      "prepend-icon": "mdi-file-upload"
                                    }, null, 8, ["multiple", "accept", "max-files", "max-size", "label", "color", "show-preview", "chips", "counter", "validate-on-select", "return-object"])
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            })
                          ])) : createCommentVNode("", true)
                        ])
                      ]),
                      createVNode("div", { class: "d-flex justify-end mt-3" }, [
                        createVNode(VBtn, {
                          color: "secondary",
                          class: "mr-2",
                          "prepend-icon": "mdi-eye",
                          onClick: previewCode
                        }, {
                          default: withCtx(() => [
                            createTextVNode(" Preview Code ")
                          ]),
                          _: 1
                        }),
                        createVNode(VBtn, {
                          color: "primary",
                          "prepend-icon": "mdi-content-copy",
                          onClick: copyUtilsCode
                        }, {
                          default: withCtx(() => [
                            createTextVNode(" Copy Code ")
                          ]),
                          _: 1
                        })
                      ])
                    ])
                  ];
                }
              }),
              _: 1
            }, _parent2, _scopeId));
            _push2(ssrRenderComponent(VDialog, {
              modelValue: showCodeDialog.value,
              "onUpdate:modelValue": ($event) => showCodeDialog.value = $event,
              width: "800"
            }, {
              default: withCtx((_2, _push3, _parent3, _scopeId2) => {
                if (_push3) {
                  _push3(ssrRenderComponent(VCard, { class: "bg-grey-darken-4" }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(ssrRenderComponent(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VTabs, {
                                modelValue: codeTab.value,
                                "onUpdate:modelValue": ($event) => codeTab.value = $event,
                                color: "primary"
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VTab, { value: "template" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`Template`);
                                        } else {
                                          return [
                                            createTextVNode("Template")
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VTab, { value: "script" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`Script`);
                                        } else {
                                          return [
                                            createTextVNode("Script")
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VTab, { value: "theme" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`Theme`);
                                        } else {
                                          return [
                                            createTextVNode("Theme")
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                  } else {
                                    return [
                                      createVNode(VTab, { value: "template" }, {
                                        default: withCtx(() => [
                                          createTextVNode("Template")
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VTab, { value: "script" }, {
                                        default: withCtx(() => [
                                          createTextVNode("Script")
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VTab, { value: "theme" }, {
                                        default: withCtx(() => [
                                          createTextVNode("Theme")
                                        ]),
                                        _: 1
                                      })
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VBtn, {
                                icon: "mdi-close",
                                variant: "text",
                                onClick: ($event) => showCodeDialog.value = false
                              }, null, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VTabs, {
                                  modelValue: codeTab.value,
                                  "onUpdate:modelValue": ($event) => codeTab.value = $event,
                                  color: "primary"
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VTab, { value: "template" }, {
                                      default: withCtx(() => [
                                        createTextVNode("Template")
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VTab, { value: "script" }, {
                                      default: withCtx(() => [
                                        createTextVNode("Script")
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VTab, { value: "theme" }, {
                                      default: withCtx(() => [
                                        createTextVNode("Theme")
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }, 8, ["modelValue", "onUpdate:modelValue"]),
                                createVNode(VBtn, {
                                  icon: "mdi-close",
                                  variant: "text",
                                  onClick: ($event) => showCodeDialog.value = false
                                }, null, 8, ["onClick"])
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VCardText, null, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VWindow, {
                                modelValue: codeTab.value,
                                "onUpdate:modelValue": ($event) => codeTab.value = $event
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VWindowItem, { value: "template" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(ssrRenderComponent(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`${ssrInterpolate(generateTemplateCode())}`);
                                              } else {
                                                return [
                                                  createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                        } else {
                                          return [
                                            createVNode(VSheet, {
                                              class: "bg-grey-darken-4 rounded pa-4",
                                              style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                              ]),
                                              _: 1
                                            })
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "script" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(ssrRenderComponent(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`${ssrInterpolate(generateScriptCode())}`);
                                              } else {
                                                return [
                                                  createTextVNode(toDisplayString(generateScriptCode()), 1)
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                        } else {
                                          return [
                                            createVNode(VSheet, {
                                              class: "bg-grey-darken-4 rounded pa-4",
                                              style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(generateScriptCode()), 1)
                                              ]),
                                              _: 1
                                            })
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(ssrRenderComponent(VWindowItem, { value: "theme" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(ssrRenderComponent(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                              if (_push8) {
                                                _push8(`${ssrInterpolate("theme" in _ctx ? _ctx.theme : unref(theme))}`);
                                              } else {
                                                return [
                                                  createTextVNode(toDisplayString("theme" in _ctx ? _ctx.theme : unref(theme)), 1)
                                                ];
                                              }
                                            }),
                                            _: 1
                                          }, _parent7, _scopeId6));
                                        } else {
                                          return [
                                            createVNode(VSheet, {
                                              class: "bg-grey-darken-4 rounded pa-4",
                                              style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString("theme" in _ctx ? _ctx.theme : unref(theme)), 1)
                                              ]),
                                              _: 1
                                            })
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                  } else {
                                    return [
                                      createVNode(VWindowItem, { value: "template" }, {
                                        default: withCtx(() => [
                                          createVNode(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "script" }, {
                                        default: withCtx(() => [
                                          createVNode(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString(generateScriptCode()), 1)
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VWindowItem, { value: "theme" }, {
                                        default: withCtx(() => [
                                          createVNode(VSheet, {
                                            class: "bg-grey-darken-4 rounded pa-4",
                                            style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString("theme" in _ctx ? _ctx.theme : unref(theme)), 1)
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        _: 1
                                      })
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VWindow, {
                                  modelValue: codeTab.value,
                                  "onUpdate:modelValue": ($event) => codeTab.value = $event
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VWindowItem, { value: "template" }, {
                                      default: withCtx(() => [
                                        createVNode(VSheet, {
                                          class: "bg-grey-darken-4 rounded pa-4",
                                          style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "script" }, {
                                      default: withCtx(() => [
                                        createVNode(VSheet, {
                                          class: "bg-grey-darken-4 rounded pa-4",
                                          style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(generateScriptCode()), 1)
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      _: 1
                                    }),
                                    createVNode(VWindowItem, { value: "theme" }, {
                                      default: withCtx(() => [
                                        createVNode(VSheet, {
                                          class: "bg-grey-darken-4 rounded pa-4",
                                          style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString("theme" in _ctx ? _ctx.theme : unref(theme)), 1)
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }, 8, ["modelValue", "onUpdate:modelValue"])
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VCardActions, { class: "pa-4" }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VBtn, {
                                color: "secondary",
                                "prepend-icon": "mdi-content-copy",
                                onClick: copyCurrentTab
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(` Copy Current Tab `);
                                  } else {
                                    return [
                                      createTextVNode(" Copy Current Tab ")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VBtn, {
                                  color: "secondary",
                                  "prepend-icon": "mdi-content-copy",
                                  onClick: copyCurrentTab
                                }, {
                                  default: withCtx(() => [
                                    createTextVNode(" Copy Current Tab ")
                                  ]),
                                  _: 1
                                })
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                      } else {
                        return [
                          createVNode(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                            default: withCtx(() => [
                              createVNode(VTabs, {
                                modelValue: codeTab.value,
                                "onUpdate:modelValue": ($event) => codeTab.value = $event,
                                color: "primary"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VTab, { value: "template" }, {
                                    default: withCtx(() => [
                                      createTextVNode("Template")
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VTab, { value: "script" }, {
                                    default: withCtx(() => [
                                      createTextVNode("Script")
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VTab, { value: "theme" }, {
                                    default: withCtx(() => [
                                      createTextVNode("Theme")
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"]),
                              createVNode(VBtn, {
                                icon: "mdi-close",
                                variant: "text",
                                onClick: ($event) => showCodeDialog.value = false
                              }, null, 8, ["onClick"])
                            ]),
                            _: 1
                          }),
                          createVNode(VCardText, null, {
                            default: withCtx(() => [
                              createVNode(VWindow, {
                                modelValue: codeTab.value,
                                "onUpdate:modelValue": ($event) => codeTab.value = $event
                              }, {
                                default: withCtx(() => [
                                  createVNode(VWindowItem, { value: "template" }, {
                                    default: withCtx(() => [
                                      createVNode(VSheet, {
                                        class: "bg-grey-darken-4 rounded pa-4",
                                        style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                        ]),
                                        _: 1
                                      })
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "script" }, {
                                    default: withCtx(() => [
                                      createVNode(VSheet, {
                                        class: "bg-grey-darken-4 rounded pa-4",
                                        style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(generateScriptCode()), 1)
                                        ]),
                                        _: 1
                                      })
                                    ]),
                                    _: 1
                                  }),
                                  createVNode(VWindowItem, { value: "theme" }, {
                                    default: withCtx(() => [
                                      createVNode(VSheet, {
                                        class: "bg-grey-darken-4 rounded pa-4",
                                        style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString("theme" in _ctx ? _ctx.theme : unref(theme)), 1)
                                        ]),
                                        _: 1
                                      })
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["modelValue", "onUpdate:modelValue"])
                            ]),
                            _: 1
                          }),
                          createVNode(VCardActions, { class: "pa-4" }, {
                            default: withCtx(() => [
                              createVNode(VBtn, {
                                color: "secondary",
                                "prepend-icon": "mdi-content-copy",
                                onClick: copyCurrentTab
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(" Copy Current Tab ")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          })
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                } else {
                  return [
                    createVNode(VCard, { class: "bg-grey-darken-4" }, {
                      default: withCtx(() => [
                        createVNode(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                          default: withCtx(() => [
                            createVNode(VTabs, {
                              modelValue: codeTab.value,
                              "onUpdate:modelValue": ($event) => codeTab.value = $event,
                              color: "primary"
                            }, {
                              default: withCtx(() => [
                                createVNode(VTab, { value: "template" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Template")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "script" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Script")
                                  ]),
                                  _: 1
                                }),
                                createVNode(VTab, { value: "theme" }, {
                                  default: withCtx(() => [
                                    createTextVNode("Theme")
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            }, 8, ["modelValue", "onUpdate:modelValue"]),
                            createVNode(VBtn, {
                              icon: "mdi-close",
                              variant: "text",
                              onClick: ($event) => showCodeDialog.value = false
                            }, null, 8, ["onClick"])
                          ]),
                          _: 1
                        }),
                        createVNode(VCardText, null, {
                          default: withCtx(() => [
                            createVNode(VWindow, {
                              modelValue: codeTab.value,
                              "onUpdate:modelValue": ($event) => codeTab.value = $event
                            }, {
                              default: withCtx(() => [
                                createVNode(VWindowItem, { value: "template" }, {
                                  default: withCtx(() => [
                                    createVNode(VSheet, {
                                      class: "bg-grey-darken-4 rounded pa-4",
                                      style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "script" }, {
                                  default: withCtx(() => [
                                    createVNode(VSheet, {
                                      class: "bg-grey-darken-4 rounded pa-4",
                                      style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode(toDisplayString(generateScriptCode()), 1)
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "theme" }, {
                                  default: withCtx(() => [
                                    createVNode(VSheet, {
                                      class: "bg-grey-darken-4 rounded pa-4",
                                      style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode(toDisplayString("theme" in _ctx ? _ctx.theme : unref(theme)), 1)
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            }, 8, ["modelValue", "onUpdate:modelValue"])
                          ]),
                          _: 1
                        }),
                        createVNode(VCardActions, { class: "pa-4" }, {
                          default: withCtx(() => [
                            createVNode(VBtn, {
                              color: "secondary",
                              "prepend-icon": "mdi-content-copy",
                              onClick: copyCurrentTab
                            }, {
                              default: withCtx(() => [
                                createTextVNode(" Copy Current Tab ")
                              ]),
                              _: 1
                            })
                          ]),
                          _: 1
                        })
                      ]),
                      _: 1
                    })
                  ];
                }
              }),
              _: 1
            }, _parent2, _scopeId));
            _push2(ssrRenderComponent(Snackbar, {
              modelValue: showSnackbarMessage.value,
              "onUpdate:modelValue": ($event) => showSnackbarMessage.value = $event,
              text: snackbarText.value,
              color: snackbarColor.value
            }, null, _parent2, _scopeId));
          } else {
            return [
              createVNode(VMain, { class: "w-100 h-100 overflow-hidden d-flex" }, {
                default: withCtx(() => [
                  createVNode("div", {
                    class: "control-panel",
                    style: { "width": "350px" }
                  }, [
                    createVNode(VCard, {
                      flat: "",
                      class: "fill-height"
                    }, {
                      default: withCtx(() => [
                        createVNode("div", { class: "px-4 py-2 d-flex align-center" }, [
                          createVNode(VChip, {
                            color: "success",
                            "prepend-icon": "mdi-vuejs",
                            size: "small",
                            class: "mr-2 px-4 py-2"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("Vue.js")
                            ]),
                            _: 1
                          }),
                          createVNode(VChip, {
                            color: "info",
                            "prepend-icon": "mdi-vuetify",
                            size: "small",
                            class: "mr-2 px-4 py-2"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("Vuetify")
                            ]),
                            _: 1
                          })
                        ]),
                        createVNode(VTabs, {
                          modelValue: tab.value,
                          "onUpdate:modelValue": ($event) => tab.value = $event,
                          color: "primary",
                          "align-tabs": "center",
                          class: "px-4"
                        }, {
                          default: withCtx(() => [
                            createVNode(VTab, { value: "type" }, {
                              default: withCtx(() => [
                                createTextVNode("Type")
                              ]),
                              _: 1
                            }),
                            createVNode(VTab, { value: "style" }, {
                              default: withCtx(() => [
                                createTextVNode("Style")
                              ]),
                              _: 1
                            }),
                            createVNode(VTab, { value: "content" }, {
                              default: withCtx(() => [
                                createTextVNode("Content")
                              ]),
                              _: 1
                            }),
                            createVNode(VTab, { value: "actions" }, {
                              default: withCtx(() => [
                                createTextVNode("Actions")
                              ]),
                              _: 1
                            }),
                            createVNode(VTab, { value: "templates" }, {
                              default: withCtx(() => [
                                createTextVNode("Templates")
                              ]),
                              _: 1
                            })
                          ]),
                          _: 1
                        }, 8, ["modelValue", "onUpdate:modelValue"]),
                        createVNode(VDivider),
                        createVNode(VCardText, {
                          class: "pa-0 fill-height",
                          style: { "overflow-y": "auto" }
                        }, {
                          default: withCtx(() => [
                            createVNode(VWindow, {
                              modelValue: tab.value,
                              "onUpdate:modelValue": ($event) => tab.value = $event,
                              class: "fill-height"
                            }, {
                              default: withCtx(() => [
                                createVNode(VWindowItem, { value: "type" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-shape")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Component Type")
                                      ]),
                                      createVNode(VCard, { class: "mb-4 pa-3" }, {
                                        default: withCtx(() => [
                                          createVNode(VRadioGroup, {
                                            modelValue: selectedType.value,
                                            "onUpdate:modelValue": ($event) => selectedType.value = $event,
                                            class: "mb-4"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(), createBlock(Fragment, null, renderList(componentTypes, (type) => {
                                                return createVNode(VRadio, {
                                                  key: type.value,
                                                  value: type.value,
                                                  label: type.text
                                                }, null, 8, ["value", "label"]);
                                              }), 64))
                                            ]),
                                            _: 1
                                          }, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        _: 1
                                      })
                                    ])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "style" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-palette")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Appearance")
                                      ]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-2" }, "Variant"),
                                        createVNode(VChipGroup, {
                                          modelValue: properties.value.variant,
                                          "onUpdate:modelValue": ($event) => properties.value.variant = $event,
                                          mandatory: "",
                                          "selected-class": "bg-primary text-white"
                                        }, {
                                          default: withCtx(() => [
                                            (openBlock(), createBlock(Fragment, null, renderList(variants, (variant) => {
                                              return createVNode(VChip, {
                                                key: variant,
                                                size: "small",
                                                value: variant
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(toDisplayString(variant), 1)
                                                ]),
                                                _: 2
                                              }, 1032, ["value"]);
                                            }), 64))
                                          ]),
                                          _: 1
                                        }, 8, ["modelValue", "onUpdate:modelValue"])
                                      ]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-2" }, "Size"),
                                        createVNode(VChipGroup, {
                                          modelValue: properties.value.size,
                                          "onUpdate:modelValue": ($event) => properties.value.size = $event,
                                          mandatory: "",
                                          "selected-class": "bg-primary text-white"
                                        }, {
                                          default: withCtx(() => [
                                            (openBlock(), createBlock(Fragment, null, renderList(sizes, (size) => {
                                              return createVNode(VChip, {
                                                key: size,
                                                size: "small",
                                                value: size
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(toDisplayString(size), 1)
                                                ]),
                                                _: 2
                                              }, 1032, ["value"]);
                                            }), 64))
                                          ]),
                                          _: 1
                                        }, 8, ["modelValue", "onUpdate:modelValue"])
                                      ]),
                                      createVNode("div", { class: "mb-4" }, [
                                        createVNode("label", { class: "text-subtitle-2 mb-2" }, "Color"),
                                        createVNode(VBtnToggle, {
                                          modelValue: properties.value.color,
                                          "onUpdate:modelValue": ($event) => properties.value.color = $event,
                                          mandatory: "",
                                          density: "comfortable",
                                          "selected-class": "border-primary"
                                        }, {
                                          default: withCtx(() => [
                                            (openBlock(), createBlock(Fragment, null, renderList(colors, (color) => {
                                              return createVNode(VBtn, {
                                                key: color.value,
                                                value: color.value,
                                                color: color.value !== "default" ? color.value : void 0,
                                                size: "small",
                                                variant: "tonal",
                                                width: "40",
                                                height: "40",
                                                class: ["ma-1", { "bg-grey-lighten-3": color.value === "default" }]
                                              }, {
                                                default: withCtx(() => [
                                                  color.value === "default" ? (openBlock(), createBlock(VIcon, { key: 0 }, {
                                                    default: withCtx(() => [
                                                      createTextVNode("mdi-palette-outline")
                                                    ]),
                                                    _: 1
                                                  })) : createCommentVNode("", true)
                                                ]),
                                                _: 2
                                              }, 1032, ["value", "color", "class"]);
                                            }), 64))
                                          ]),
                                          _: 1
                                        }, 8, ["modelValue", "onUpdate:modelValue"])
                                      ]),
                                      createVNode(VSwitch, {
                                        modelValue: properties.value.rounded,
                                        "onUpdate:modelValue": ($event) => properties.value.rounded = $event,
                                        color: "primary",
                                        label: "Rounded",
                                        "hide-details": "",
                                        class: "mb-2"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VSwitch, {
                                        modelValue: properties.value.block,
                                        "onUpdate:modelValue": ($event) => properties.value.block = $event,
                                        color: "primary",
                                        label: "Full Width",
                                        "hide-details": "",
                                        class: "mb-2"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VSwitch, {
                                        modelValue: properties.value.disabled,
                                        "onUpdate:modelValue": ($event) => properties.value.disabled = $event,
                                        color: "primary",
                                        label: "Disabled",
                                        "hide-details": "",
                                        class: "mb-2"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                    ])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "content" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-text")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Content")
                                      ]),
                                      createVNode(VTextField, {
                                        modelValue: properties.value.text,
                                        "onUpdate:modelValue": ($event) => properties.value.text = $event,
                                        label: "Text",
                                        variant: "outlined",
                                        density: "comfortable",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      showIconField.value ? (openBlock(), createBlock(VTextField, {
                                        key: 0,
                                        modelValue: properties.value.icon,
                                        "onUpdate:modelValue": ($event) => properties.value.icon = $event,
                                        label: "Icon (e.g. mdi-heart)",
                                        variant: "outlined",
                                        density: "comfortable",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                      selectedType.value === "button" ? (openBlock(), createBlock(Fragment, { key: 1 }, [
                                        createVNode(VTextField, {
                                          modelValue: properties.value.href,
                                          "onUpdate:modelValue": ($event) => properties.value.href = $event,
                                          label: "Link URL",
                                          variant: "outlined",
                                          density: "comfortable",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSelect, {
                                          modelValue: properties.value.target,
                                          "onUpdate:modelValue": ($event) => properties.value.target = $event,
                                          items: ["_self", "_blank", "_parent", "_top"],
                                          label: "Link Target",
                                          variant: "outlined",
                                          density: "comfortable",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSlider, {
                                          modelValue: properties.value.elevation,
                                          "onUpdate:modelValue": ($event) => properties.value.elevation = $event,
                                          min: 0,
                                          max: 24,
                                          label: "Elevation",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSelect, {
                                          modelValue: properties.value.gradient,
                                          "onUpdate:modelValue": ($event) => properties.value.gradient = $event,
                                          items: gradients,
                                          label: "Gradient Direction",
                                          variant: "outlined",
                                          density: "comfortable",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.loading,
                                          "onUpdate:modelValue": ($event) => properties.value.loading = $event,
                                          color: "primary",
                                          label: "Loading",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                      ], 64)) : createCommentVNode("", true),
                                      selectedType.value === "date" ? (openBlock(), createBlock(Fragment, { key: 2 }, [
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.landscape,
                                          "onUpdate:modelValue": ($event) => properties.value.landscape = $event,
                                          color: "primary",
                                          label: "Landscape",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.multiple,
                                          "onUpdate:modelValue": ($event) => properties.value.multiple = $event,
                                          color: "primary",
                                          label: "Multiple Dates",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.fullWidth,
                                          "onUpdate:modelValue": ($event) => properties.value.fullWidth = $event,
                                          color: "primary",
                                          label: "Full Width",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.showAdjacentMonths,
                                          "onUpdate:modelValue": ($event) => properties.value.showAdjacentMonths = $event,
                                          color: "primary",
                                          label: "Show Adjacent Months",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VTextField, {
                                          modelValue: properties.value.title,
                                          "onUpdate:modelValue": ($event) => properties.value.title = $event,
                                          label: "Title",
                                          variant: "outlined",
                                          density: "comfortable",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                      ], 64)) : createCommentVNode("", true),
                                      showPosition.value ? (openBlock(), createBlock(VSelect, {
                                        key: 3,
                                        modelValue: properties.value.position,
                                        "onUpdate:modelValue": ($event) => properties.value.position = $event,
                                        items: positions,
                                        label: "Position",
                                        variant: "outlined",
                                        density: "comfortable",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                      showDescription.value ? (openBlock(), createBlock(VTextarea, {
                                        key: 4,
                                        modelValue: properties.value.description,
                                        "onUpdate:modelValue": ($event) => properties.value.description = $event,
                                        label: "Description",
                                        variant: "outlined",
                                        density: "comfortable",
                                        "auto-grow": "",
                                        rows: "3",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                      selectedType.value === "table" ? (openBlock(), createBlock(Fragment, { key: 5 }, [
                                        createVNode("div", { class: "text-subtitle-1 mb-2" }, "Table Headers"),
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableHeaders, (header, index) => {
                                              return openBlock(), createBlock("div", {
                                                key: index,
                                                class: "d-flex align-center mb-2"
                                              }, [
                                                createVNode(VTextField, {
                                                  modelValue: header.title,
                                                  "onUpdate:modelValue": ($event) => header.title = $event,
                                                  label: "Header Title",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  class: "mr-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VTextField, {
                                                  modelValue: header.key,
                                                  "onUpdate:modelValue": ($event) => header.key = $event,
                                                  label: "Key",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  class: "mr-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VSwitch, {
                                                  modelValue: header.sortable,
                                                  "onUpdate:modelValue": ($event) => header.sortable = $event,
                                                  color: "primary",
                                                  label: "Sortable",
                                                  "hide-details": "",
                                                  class: "mr-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VBtn, {
                                                  icon: "mdi-delete",
                                                  color: "error",
                                                  variant: "text",
                                                  density: "compact",
                                                  onClick: ($event) => properties.value.tableHeaders.splice(index, 1)
                                                }, null, 8, ["onClick"])
                                              ]);
                                            }), 128)),
                                            createVNode(VBtn, {
                                              color: "primary",
                                              "prepend-icon": "mdi-plus",
                                              variant: "tonal",
                                              block: "",
                                              onClick: addTableHeader,
                                              class: "mt-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(" Add Header ")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("div", { class: "text-subtitle-1 mb-2" }, "Table Items"),
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableItems, (item, index) => {
                                              return openBlock(), createBlock("div", {
                                                key: index,
                                                class: "d-flex align-center mb-2"
                                              }, [
                                                (openBlock(true), createBlock(Fragment, null, renderList(properties.value.tableHeaders, (header) => {
                                                  return openBlock(), createBlock("div", {
                                                    key: header.key,
                                                    class: "mr-2"
                                                  }, [
                                                    createVNode(VTextField, {
                                                      modelValue: item[header.key],
                                                      "onUpdate:modelValue": ($event) => item[header.key] = $event,
                                                      label: header.title,
                                                      variant: "outlined",
                                                      density: "compact"
                                                    }, null, 8, ["modelValue", "onUpdate:modelValue", "label"])
                                                  ]);
                                                }), 128)),
                                                createVNode(VBtn, {
                                                  icon: "mdi-delete",
                                                  color: "error",
                                                  variant: "text",
                                                  density: "compact",
                                                  onClick: ($event) => properties.value.tableItems.splice(index, 1)
                                                }, null, 8, ["onClick"])
                                              ]);
                                            }), 128)),
                                            createVNode(VBtn, {
                                              color: "primary",
                                              "prepend-icon": "mdi-plus",
                                              variant: "tonal",
                                              block: "",
                                              onClick: addTableItem,
                                              class: "mt-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(" Add Item ")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VSlider, {
                                          modelValue: properties.value.itemsPerPage,
                                          "onUpdate:modelValue": ($event) => properties.value.itemsPerPage = $event,
                                          min: 5,
                                          max: 25,
                                          step: 5,
                                          label: "Items Per Page",
                                          class: "mb-4",
                                          "thumb-label": ""
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSelect, {
                                          modelValue: properties.value.sortBy,
                                          "onUpdate:modelValue": ($event) => properties.value.sortBy = $event,
                                          items: getSortableKeys(),
                                          label: "Default Sort By",
                                          variant: "outlined",
                                          density: "comfortable",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                                        createVNode(VSelect, {
                                          modelValue: properties.value.sortOrder,
                                          "onUpdate:modelValue": ($event) => properties.value.sortOrder = $event,
                                          items: ["asc", "desc"],
                                          label: "Sort Order",
                                          variant: "outlined",
                                          density: "comfortable",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.showSelect,
                                          "onUpdate:modelValue": ($event) => properties.value.showSelect = $event,
                                          color: "primary",
                                          label: "Show Selection",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.showFooter,
                                          "onUpdate:modelValue": ($event) => properties.value.showFooter = $event,
                                          color: "primary",
                                          label: "Show Footer",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.dense,
                                          "onUpdate:modelValue": ($event) => properties.value.dense = $event,
                                          color: "primary",
                                          label: "Dense",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                      ], 64)) : createCommentVNode("", true),
                                      selectedType.value === "chart" ? (openBlock(), createBlock(Fragment, { key: 6 }, [
                                        createVNode(VSelect, {
                                          modelValue: properties.value.chartType,
                                          "onUpdate:modelValue": ($event) => properties.value.chartType = $event,
                                          items: ["bar", "line", "pie", "doughnut", "radar", "polarArea"],
                                          label: "Chart Type",
                                          variant: "outlined",
                                          density: "comfortable",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode("div", { class: "text-subtitle-1 mb-2" }, "Chart Data"),
                                        createVNode(VCard, { class: "mb-4 pa-3" }, {
                                          default: withCtx(() => [
                                            (openBlock(true), createBlock(Fragment, null, renderList(properties.value.chartData, (value, index) => {
                                              return openBlock(), createBlock("div", {
                                                key: index,
                                                class: "d-flex align-center mb-2"
                                              }, [
                                                createVNode(VTextField, {
                                                  modelValue: properties.value.chartLabels[index],
                                                  "onUpdate:modelValue": ($event) => properties.value.chartLabels[index] = $event,
                                                  label: "Label",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  class: "mr-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VTextField, {
                                                  modelValue: properties.value.chartData[index],
                                                  "onUpdate:modelValue": ($event) => properties.value.chartData[index] = $event,
                                                  modelModifiers: { number: true },
                                                  label: "Value",
                                                  variant: "outlined",
                                                  density: "compact",
                                                  type: "number",
                                                  class: "mr-2"
                                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                                createVNode(VBtn, {
                                                  icon: "mdi-delete",
                                                  color: "error",
                                                  variant: "text",
                                                  density: "compact",
                                                  onClick: ($event) => removeChartDataPoint(index)
                                                }, null, 8, ["onClick"])
                                              ]);
                                            }), 128)),
                                            createVNode(VBtn, {
                                              color: "primary",
                                              "prepend-icon": "mdi-plus",
                                              variant: "tonal",
                                              block: "",
                                              onClick: addChartDataPoint,
                                              class: "mt-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(" Add Data Point ")
                                              ]),
                                              _: 1
                                            })
                                          ]),
                                          _: 1
                                        }),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.showLegend,
                                          "onUpdate:modelValue": ($event) => properties.value.showLegend = $event,
                                          color: "primary",
                                          label: "Show Legend",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.responsive,
                                          "onUpdate:modelValue": ($event) => properties.value.responsive = $event,
                                          color: "primary",
                                          label: "Responsive",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.maintainAspectRatio,
                                          "onUpdate:modelValue": ($event) => properties.value.maintainAspectRatio = $event,
                                          color: "primary",
                                          label: "Maintain Aspect Ratio",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                      ], 64)) : createCommentVNode("", true),
                                      selectedType.value === "file" ? (openBlock(), createBlock(Fragment, { key: 7 }, [
                                        createVNode(VTextField, {
                                          modelValue: properties.value.dropzoneText,
                                          "onUpdate:modelValue": ($event) => properties.value.dropzoneText = $event,
                                          label: "Dropzone Text",
                                          variant: "outlined",
                                          density: "comfortable",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VTextField, {
                                          modelValue: properties.value.acceptTypes,
                                          "onUpdate:modelValue": ($event) => properties.value.acceptTypes = $event,
                                          label: "Accepted File Types",
                                          variant: "outlined",
                                          density: "comfortable",
                                          placeholder: "image/*, .pdf, .docx",
                                          class: "mb-4"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSlider, {
                                          modelValue: properties.value.maxFiles,
                                          "onUpdate:modelValue": ($event) => properties.value.maxFiles = $event,
                                          min: 1,
                                          max: 20,
                                          label: "Max Files",
                                          class: "mb-4",
                                          "thumb-label": ""
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSlider, {
                                          modelValue: properties.value.maxSize,
                                          "onUpdate:modelValue": ($event) => properties.value.maxSize = $event,
                                          min: 1,
                                          max: 50,
                                          label: "Max Size (MB)",
                                          class: "mb-4",
                                          "thumb-label": ""
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.multiple,
                                          "onUpdate:modelValue": ($event) => properties.value.multiple = $event,
                                          color: "primary",
                                          label: "Allow Multiple Files",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.showPreview,
                                          "onUpdate:modelValue": ($event) => properties.value.showPreview = $event,
                                          color: "primary",
                                          label: "Show Preview",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.autoUpload,
                                          "onUpdate:modelValue": ($event) => properties.value.autoUpload = $event,
                                          color: "primary",
                                          label: "Auto Upload",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.chips,
                                          "onUpdate:modelValue": ($event) => properties.value.chips = $event,
                                          color: "primary",
                                          label: "Show as Chips",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.counter,
                                          "onUpdate:modelValue": ($event) => properties.value.counter = $event,
                                          color: "primary",
                                          label: "Show Counter",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.validateOnSelect,
                                          "onUpdate:modelValue": ($event) => properties.value.validateOnSelect = $event,
                                          color: "primary",
                                          label: "Validate on Select",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                        createVNode(VSwitch, {
                                          modelValue: properties.value.returnObject,
                                          "onUpdate:modelValue": ($event) => properties.value.returnObject = $event,
                                          color: "primary",
                                          label: "Return Object",
                                          "hide-details": "",
                                          class: "mb-2"
                                        }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                      ], 64)) : createCommentVNode("", true)
                                    ])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "actions" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-gesture-tap-button")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Interactions")
                                      ]),
                                      createVNode(VCard, { class: "mb-4 pa-3" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "text-subtitle-1 mb-2" }, "Event Handling"),
                                          createVNode(VSelect, {
                                            modelValue: properties.value.eventType,
                                            "onUpdate:modelValue": ($event) => properties.value.eventType = $event,
                                            items: eventTypes,
                                            label: "Event Type",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-3"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VTextField, {
                                            modelValue: properties.value.eventHandler,
                                            "onUpdate:modelValue": ($event) => properties.value.eventHandler = $event,
                                            label: "Event Handler",
                                            placeholder: "methodName",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-3"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.stopPropagation,
                                            "onUpdate:modelValue": ($event) => properties.value.stopPropagation = $event,
                                            color: "primary",
                                            label: "Stop Propagation",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.preventDefault,
                                            "onUpdate:modelValue": ($event) => properties.value.preventDefault = $event,
                                            color: "primary",
                                            label: "Prevent Default",
                                            "hide-details": "",
                                            class: "mb-4"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VCard, { class: "mb-4 pa-3" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "text-subtitle-1 mb-2" }, "Animation & Transitions"),
                                          createVNode(VSelect, {
                                            modelValue: properties.value.transition,
                                            "onUpdate:modelValue": ($event) => properties.value.transition = $event,
                                            items: transitions,
                                            label: "Transition Effect",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-3"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode("div", { class: "d-flex align-center mb-3" }, [
                                            createVNode(VIcon, {
                                              size: "small",
                                              color: "primary",
                                              class: "mr-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode("mdi-clock-outline")
                                              ]),
                                              _: 1
                                            }),
                                            createVNode(VSlider, {
                                              modelValue: properties.value.transitionDuration,
                                              "onUpdate:modelValue": ($event) => properties.value.transitionDuration = $event,
                                              min: "0",
                                              max: "1000",
                                              step: "50",
                                              label: "Duration (ms)",
                                              class: "mx-2",
                                              "thumb-label": ""
                                            }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                            createVNode("span", { class: "text-caption" }, toDisplayString(properties.value.transitionDuration) + "ms", 1)
                                          ])
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VCard, { class: "mb-4 pa-3" }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "text-subtitle-1 mb-2" }, "Advanced Options"),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.ripple,
                                            "onUpdate:modelValue": ($event) => properties.value.ripple = $event,
                                            color: "primary",
                                            label: "Ripple Effect",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          createVNode(VSwitch, {
                                            modelValue: properties.value.eager,
                                            "onUpdate:modelValue": ($event) => properties.value.eager = $event,
                                            color: "primary",
                                            label: "Eager Loading",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          ["badge"].includes(selectedType.value) ? (openBlock(), createBlock(VSwitch, {
                                            key: 0,
                                            modelValue: properties.value.closeOnContentClick,
                                            "onUpdate:modelValue": ($event) => properties.value.closeOnContentClick = $event,
                                            color: "primary",
                                            label: "Close on Content Click",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true),
                                          ["alert"].includes(selectedType.value) ? (openBlock(), createBlock(VSwitch, {
                                            key: 1,
                                            modelValue: properties.value.closeOnBack,
                                            "onUpdate:modelValue": ($event) => properties.value.closeOnBack = $event,
                                            color: "primary",
                                            label: "Close on Back Navigation",
                                            "hide-details": "",
                                            class: "mb-2"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                        ]),
                                        _: 1
                                      }),
                                      selectedType.value === "button" ? (openBlock(), createBlock(VCard, {
                                        key: 0,
                                        class: "mb-4 pa-3"
                                      }, {
                                        default: withCtx(() => [
                                          createVNode("div", { class: "text-subtitle-1 mb-2" }, "Button Specific Actions"),
                                          createVNode(VSelect, {
                                            modelValue: properties.value.buttonType,
                                            "onUpdate:modelValue": ($event) => properties.value.buttonType = $event,
                                            items: buttonTypes,
                                            label: "Button Type",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-3"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                          properties.value.buttonType === "submit" ? (openBlock(), createBlock(VTextField, {
                                            key: 0,
                                            modelValue: properties.value.formAction,
                                            "onUpdate:modelValue": ($event) => properties.value.formAction = $event,
                                            label: "Form Action",
                                            placeholder: "https://example.com/submit",
                                            variant: "outlined",
                                            density: "comfortable",
                                            class: "mb-3"
                                          }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                                        ]),
                                        _: 1
                                      })) : createCommentVNode("", true)
                                    ])
                                  ]),
                                  _: 1
                                }),
                                createVNode(VWindowItem, { value: "templates" }, {
                                  default: withCtx(() => [
                                    createVNode("div", { class: "pa-4" }, [
                                      createVNode("div", { class: "section-title d-flex align-center mb-3 justify-space-between" }, [
                                        createVNode("div", { class: "d-flex align-center" }, [
                                          createVNode(VIcon, {
                                            color: "primary",
                                            class: "mr-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode("mdi-file-document-outline")
                                            ]),
                                            _: 1
                                          }),
                                          createVNode("span", { class: "text-h6" }, "Component Templates")
                                        ]),
                                        createVNode(VTooltip, { location: "bottom" }, {
                                          activator: withCtx(({ props }) => [
                                            createVNode(VBtn, mergeProps({
                                              icon: "mdi-help-circle-outline",
                                              variant: "text",
                                              size: "small"
                                            }, props), null, 16)
                                          ]),
                                          default: withCtx(() => [
                                            createVNode("span", null, "Apply pre-defined templates or save your own")
                                          ]),
                                          _: 1
                                        })
                                      ]),
                                      createVNode("p", { class: "text-body-2 mb-4" }, "Choose a pre-defined template to quickly create common components."),
                                      createVNode(VCard, { class: "mb-4" }, {
                                        default: withCtx(() => [
                                          createVNode(VList, null, {
                                            default: withCtx(() => [
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("info"),
                                                "prepend-icon": "mdi-information",
                                                title: "Info Alert",
                                                subtitle: "Informational message"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("status"),
                                                "prepend-icon": "mdi-account-check",
                                                title: "Status Badge",
                                                subtitle: "User status indicator"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("barChart"),
                                                "prepend-icon": "mdi-chart-bar",
                                                title: "Bar Chart",
                                                subtitle: "Monthly data visualization"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("lineChart"),
                                                "prepend-icon": "mdi-chart-line",
                                                title: "Line Chart",
                                                subtitle: "Weekly trend visualization"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("pieChart"),
                                                "prepend-icon": "mdi-chart-pie",
                                                title: "Pie Chart",
                                                subtitle: "Distribution visualization"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("doughnutChart"),
                                                "prepend-icon": "mdi-chart-donut",
                                                title: "Doughnut Chart",
                                                subtitle: "Product distribution"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("radarChart"),
                                                "prepend-icon": "mdi-chart-scatter-plot",
                                                title: "Radar Chart",
                                                subtitle: "Performance metrics"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("polarAreaChart"),
                                                "prepend-icon": "mdi-chart-arc",
                                                title: "Polar Area Chart",
                                                subtitle: "Regional distribution"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("dataTable"),
                                                "prepend-icon": "mdi-table",
                                                title: "Data Table",
                                                subtitle: "Structured data display"
                                              }, null, 8, ["onClick"]),
                                              createVNode(VListItem, {
                                                onClick: ($event) => applyTemplate("fileUpload"),
                                                "prepend-icon": "mdi-file-upload",
                                                title: "File Upload",
                                                subtitle: "Document upload component"
                                              }, null, 8, ["onClick"])
                                            ]),
                                            _: 1
                                          })
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VAlert, {
                                        type: "info",
                                        variant: "tonal",
                                        class: "mb-4"
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(" Applying a template will replace your current component settings. ")
                                        ]),
                                        _: 1
                                      }),
                                      createVNode(VDivider, { class: "my-4" }),
                                      createVNode("div", { class: "section-title d-flex align-center mb-3" }, [
                                        createVNode(VIcon, {
                                          color: "primary",
                                          class: "mr-2"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-content-save")
                                          ]),
                                          _: 1
                                        }),
                                        createVNode("span", { class: "text-h6" }, "Save Current Component")
                                      ]),
                                      createVNode(VTextField, {
                                        modelValue: customTemplateName.value,
                                        "onUpdate:modelValue": ($event) => customTemplateName.value = $event,
                                        label: "Template Name",
                                        variant: "outlined",
                                        density: "comfortable",
                                        "prepend-inner-icon": "mdi-tag",
                                        class: "mb-4"
                                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                      createVNode(VBtn, {
                                        color: "primary",
                                        "prepend-icon": "mdi-content-save",
                                        block: "",
                                        onClick: saveCurrentTemplate
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode(" Save Current Component as Template ")
                                        ]),
                                        _: 1
                                      })
                                    ])
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            }, 8, ["modelValue", "onUpdate:modelValue"])
                          ]),
                          _: 1
                        })
                      ]),
                      _: 1
                    })
                  ]),
                  createVNode("div", { class: "preview-area pa-4 d-flex flex-column" }, [
                    createVNode("div", { class: "d-flex justify-space-between align-center mb-3" }, [
                      createVNode(VChip, {
                        color: "primary",
                        variant: "flat",
                        size: "small",
                        class: "mr-2"
                      }, {
                        default: withCtx(() => [
                          createVNode(VIcon, {
                            start: "",
                            size: "small"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("mdi-eye")
                            ]),
                            _: 1
                          }),
                          createTextVNode(" Live Preview ")
                        ]),
                        _: 1
                      })
                    ]),
                    createVNode("div", { class: "preview-canvas flex-grow-1 pa-4 bg-grey-darken-4 rounded-lg" }, [
                      createVNode("div", { class: "d-flex align-center justify-center w-100 h-100" }, [
                        selectedType.value === "button" ? (openBlock(), createBlock(VBtn, {
                          key: 0,
                          color: properties.value.color,
                          variant: properties.value.variant,
                          size: properties.value.size,
                          disabled: properties.value.disabled,
                          block: properties.value.block,
                          rounded: properties.value.rounded,
                          "prepend-icon": properties.value.icon,
                          href: properties.value.href,
                          target: properties.value.target,
                          elevation: properties.value.elevation,
                          loading: properties.value.loading,
                          style: properties.value.gradient ? { background: `linear-gradient(${properties.value.gradient}, ${properties.value.color}, ${properties.value.color}80)` } : {}
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(properties.value.text || "Button"), 1)
                          ]),
                          _: 1
                        }, 8, ["color", "variant", "size", "disabled", "block", "rounded", "prepend-icon", "href", "target", "elevation", "loading", "style"])) : selectedType.value === "badge" ? (openBlock(), createBlock(VBadge, {
                          key: 1,
                          content: properties.value.text,
                          color: properties.value.color,
                          location: properties.value.position
                        }, {
                          default: withCtx(() => [
                            createVNode(VAvatar, { size: "48" }, {
                              default: withCtx(() => [
                                createVNode(VIcon, null, {
                                  default: withCtx(() => [
                                    createTextVNode(toDisplayString(properties.value.icon || "mdi-account"), 1)
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            })
                          ]),
                          _: 1
                        }, 8, ["content", "color", "location"])) : selectedType.value === "alert" ? (openBlock(), createBlock(VAlert, {
                          key: 2,
                          type: properties.value.color === "default" ? void 0 : properties.value.color,
                          variant: properties.value.variant,
                          title: properties.value.text,
                          text: properties.value.description,
                          icon: properties.value.icon,
                          class: "w-100"
                        }, null, 8, ["type", "variant", "title", "text", "icon"])) : selectedType.value === "chip" ? (openBlock(), createBlock(VChip, {
                          key: 3,
                          color: properties.value.color,
                          variant: properties.value.variant,
                          size: properties.value.size,
                          "prepend-icon": properties.value.icon
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(properties.value.text || "Chip"), 1)
                          ]),
                          _: 1
                        }, 8, ["color", "variant", "size", "prepend-icon"])) : selectedType.value === "date" ? (openBlock(), createBlock(VDatePicker, {
                          key: 4,
                          modelValue: properties.value.date,
                          "onUpdate:modelValue": ($event) => properties.value.date = $event,
                          color: properties.value.color,
                          variant: properties.value.variant,
                          multiple: properties.value.multiple,
                          landscape: properties.value.landscape,
                          "show-week-numbers": properties.value.showWeek,
                          "show-adjacent-months": properties.value.showAdjacentMonths,
                          title: properties.value.title,
                          width: properties.value.fullWidth ? "100%" : void 0,
                          class: "elevation-4"
                        }, null, 8, ["modelValue", "onUpdate:modelValue", "color", "variant", "multiple", "landscape", "show-week-numbers", "show-adjacent-months", "title", "width"])) : selectedType.value === "table" ? (openBlock(), createBlock(VDataTable, {
                          key: 5,
                          headers: properties.value.tableHeaders,
                          items: properties.value.tableItems,
                          "items-per-page": properties.value.itemsPerPage,
                          "sort-by": [{ key: properties.value.sortBy, order: properties.value.sortOrder }],
                          "show-select": properties.value.showSelect,
                          "show-footer": properties.value.showFooter,
                          dense: properties.value.dense,
                          class: "w-100"
                        }, null, 8, ["headers", "items", "items-per-page", "sort-by", "show-select", "show-footer", "dense"])) : selectedType.value === "chart" ? (openBlock(), createBlock("div", {
                          key: 6,
                          class: "w-100 h-100 d-flex align-center justify-center"
                        }, [
                          createVNode(VCard, {
                            class: "pa-4 w-100",
                            "max-width": "500"
                          }, {
                            default: withCtx(() => [
                              createVNode(VCardTitle, null, {
                                default: withCtx(() => [
                                  createTextVNode(toDisplayString(properties.value.chartType.charAt(0).toUpperCase() + properties.value.chartType.slice(1)) + " Chart", 1)
                                ]),
                                _: 1
                              }),
                              createVNode(VCardText, null, {
                                default: withCtx(() => [
                                  createVNode("div", { style: { "position": "relative", "height": "300px" } }, [
                                    (openBlock(), createBlock(resolveDynamicComponent(properties.value.chartType === "bar" ? unref(Bar) : properties.value.chartType === "line" ? unref(Line) : properties.value.chartType === "pie" ? unref(Pie) : properties.value.chartType === "doughnut" ? unref(Doughnut) : properties.value.chartType === "polarArea" ? unref(PolarArea) : unref(Radar)), {
                                      data: chartData.value,
                                      options: chartOptions.value
                                    }, null, 8, ["data", "options"]))
                                  ])
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          })
                        ])) : selectedType.value === "file" ? (openBlock(), createBlock("div", {
                          key: 7,
                          class: "w-100 h-100 d-flex align-center justify-center"
                        }, [
                          createVNode(VCard, {
                            class: "pa-4 w-100",
                            "max-width": "500"
                          }, {
                            default: withCtx(() => [
                              createVNode(VCardTitle, null, {
                                default: withCtx(() => [
                                  createTextVNode("File Upload")
                                ]),
                                _: 1
                              }),
                              createVNode(VCardText, null, {
                                default: withCtx(() => [
                                  createVNode(VFileInput, {
                                    multiple: properties.value.multiple,
                                    accept: properties.value.acceptTypes,
                                    "max-files": properties.value.maxFiles,
                                    "max-size": properties.value.maxSize * 1024 * 1024,
                                    "show-size": true,
                                    label: properties.value.dropzoneText,
                                    color: properties.value.color !== "default" ? properties.value.color : void 0,
                                    variant: "outlined",
                                    "show-preview": properties.value.showPreview,
                                    chips: properties.value.chips,
                                    counter: properties.value.counter,
                                    "validate-on-select": properties.value.validateOnSelect,
                                    "return-object": properties.value.returnObject,
                                    "prepend-icon": "mdi-file-upload"
                                  }, null, 8, ["multiple", "accept", "max-files", "max-size", "label", "color", "show-preview", "chips", "counter", "validate-on-select", "return-object"])
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          })
                        ])) : createCommentVNode("", true)
                      ])
                    ]),
                    createVNode("div", { class: "d-flex justify-end mt-3" }, [
                      createVNode(VBtn, {
                        color: "secondary",
                        class: "mr-2",
                        "prepend-icon": "mdi-eye",
                        onClick: previewCode
                      }, {
                        default: withCtx(() => [
                          createTextVNode(" Preview Code ")
                        ]),
                        _: 1
                      }),
                      createVNode(VBtn, {
                        color: "primary",
                        "prepend-icon": "mdi-content-copy",
                        onClick: copyUtilsCode
                      }, {
                        default: withCtx(() => [
                          createTextVNode(" Copy Code ")
                        ]),
                        _: 1
                      })
                    ])
                  ])
                ]),
                _: 1
              }),
              createVNode(VDialog, {
                modelValue: showCodeDialog.value,
                "onUpdate:modelValue": ($event) => showCodeDialog.value = $event,
                width: "800"
              }, {
                default: withCtx(() => [
                  createVNode(VCard, { class: "bg-grey-darken-4" }, {
                    default: withCtx(() => [
                      createVNode(VCardTitle, { class: "d-flex justify-space-between align-center pa-4" }, {
                        default: withCtx(() => [
                          createVNode(VTabs, {
                            modelValue: codeTab.value,
                            "onUpdate:modelValue": ($event) => codeTab.value = $event,
                            color: "primary"
                          }, {
                            default: withCtx(() => [
                              createVNode(VTab, { value: "template" }, {
                                default: withCtx(() => [
                                  createTextVNode("Template")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "script" }, {
                                default: withCtx(() => [
                                  createTextVNode("Script")
                                ]),
                                _: 1
                              }),
                              createVNode(VTab, { value: "theme" }, {
                                default: withCtx(() => [
                                  createTextVNode("Theme")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue"]),
                          createVNode(VBtn, {
                            icon: "mdi-close",
                            variant: "text",
                            onClick: ($event) => showCodeDialog.value = false
                          }, null, 8, ["onClick"])
                        ]),
                        _: 1
                      }),
                      createVNode(VCardText, null, {
                        default: withCtx(() => [
                          createVNode(VWindow, {
                            modelValue: codeTab.value,
                            "onUpdate:modelValue": ($event) => codeTab.value = $event
                          }, {
                            default: withCtx(() => [
                              createVNode(VWindowItem, { value: "template" }, {
                                default: withCtx(() => [
                                  createVNode(VSheet, {
                                    class: "bg-grey-darken-4 rounded pa-4",
                                    style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString(generateTemplateCode()), 1)
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }),
                              createVNode(VWindowItem, { value: "script" }, {
                                default: withCtx(() => [
                                  createVNode(VSheet, {
                                    class: "bg-grey-darken-4 rounded pa-4",
                                    style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString(generateScriptCode()), 1)
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }),
                              createVNode(VWindowItem, { value: "theme" }, {
                                default: withCtx(() => [
                                  createVNode(VSheet, {
                                    class: "bg-grey-darken-4 rounded pa-4",
                                    style: { "white-space": "pre-wrap", "font-family": "monospace", "color": "white" }
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString("theme" in _ctx ? _ctx.theme : unref(theme)), 1)
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }, 8, ["modelValue", "onUpdate:modelValue"])
                        ]),
                        _: 1
                      }),
                      createVNode(VCardActions, { class: "pa-4" }, {
                        default: withCtx(() => [
                          createVNode(VBtn, {
                            color: "secondary",
                            "prepend-icon": "mdi-content-copy",
                            onClick: copyCurrentTab
                          }, {
                            default: withCtx(() => [
                              createTextVNode(" Copy Current Tab ")
                            ]),
                            _: 1
                          })
                        ]),
                        _: 1
                      })
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }, 8, ["modelValue", "onUpdate:modelValue"]),
              createVNode(Snackbar, {
                modelValue: showSnackbarMessage.value,
                "onUpdate:modelValue": ($event) => showSnackbarMessage.value = $event,
                text: snackbarText.value,
                color: snackbarColor.value
              }, null, 8, ["modelValue", "onUpdate:modelValue", "text", "color"])
            ];
          }
        }),
        _: 1
      }, _parent));
    };
  }
});

const _sfc_setup$1 = _sfc_main$1.setup;
_sfc_main$1.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/studioUtils.vue");
  return _sfc_setup$1 ? _sfc_setup$1(props, ctx) : void 0;
};
const StudioUtils = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["__scopeId", "data-v-ce248d1e"]]);

const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "studio",
  __ssrInlineRender: true,
  setup(__props) {
    useHead({
      title: "Studio - DevUnity",
      meta: [
        { name: "description", content: "Create and customize components with the Studio" },
        { name: "author", content: "DevUnity" },
        { name: "robots", content: "noindex, nofollow" },
        { name: "viewport", content: "width=device-width, initial-scale=1.0" },
        { name: "og:title", content: "Studio - DevUnity" },
        { name: "og:description", content: "Create and customize components with the Studio" },
        { name: "og:image", content: "/logo/devunity-title.png" }
      ]
    });
    const editorContent = ref("");
    const deleteConfirmation = ref(false);
    const templateToDelete = ref(null);
    const componentsList = ref(["Card (v-card)", "Nav (v-navigation-drawer)", "Timeline (v-timeline)", "Form (v-form)", "Utils (v-date, v-color, v-alerts)"]);
    const selectedComponent = ref("Card (v-card)");
    const isPremiumComponent = (component) => {
      return component !== "Card (v-card)";
    };
    const getPremiumComponentTitle = (component) => {
      switch (component) {
        case "Nav (v-navigation-drawer)":
          return "Navigation Components";
        case "Timeline (v-timeline)":
          return "Timeline Components";
        case "Form (v-form)":
          return "Form Builder";
        case "Utils (v-date, v-color, v-alerts)":
          return "UI Utilities";
        default:
          return "Premium Components";
      }
    };
    const getComponentIcon = (componentType) => {
      switch (componentType) {
        case "card":
          return "mdi-card-outline";
        case "nav":
          return "mdi-navigation-outline";
        case "timeline":
          return "mdi-timeline-outline";
        case "form":
          return "mdi-format-align-left";
        case "utils":
          return "mdi-hammer-wrench";
      }
    };
    const openSaveTemplateDialog = ref(false);
    const userStore = useUserStore();
    const updateEditorContent = (content) => {
      editorContent.value = content;
    };
    const formatDate = (dateString) => {
      const date = new Date(dateString);
      return date.toLocaleDateString("en-US", { year: "numeric", month: "long", day: "numeric" });
    };
    const getUniqueComponentTypes = () => {
      if (!userStore.studioComponents || userStore.studioComponents.length === 0) return [];
      return [...new Set(userStore.studioComponents.map((comp) => comp.component_type))];
    };
    const getComponentsByType = (type) => {
      return userStore.studioComponents.filter((comp) => comp.component_type === type);
    };
    const applyTemplate = (template) => {
      if (!template || !template.id) {
        console.error("Invalid template");
        return;
      }
      console.log("Applying template:", template.name, template.id, template.component_type);
      const isPremiumComponent2 = template.component_type.toLowerCase() !== "card";
      if (isPremiumComponent2 && !userStore.user.isPremium) {
        snackbarText.value = "This template requires premium access";
        snackbarColor.value = "warning";
        showSnackbar.value = true;
        return;
      }
      switch (template.component_type.toLowerCase()) {
        case "card":
          selectedComponent.value = "Card (v-card)";
          break;
        case "nav":
          selectedComponent.value = "Nav (v-navigation-drawer)";
          break;
        case "timeline":
          selectedComponent.value = "Timeline (v-timeline)";
          break;
        case "form":
          selectedComponent.value = "Form (v-form)";
          break;
        case "utils":
          selectedComponent.value = "Utils (v-date, v-color, v-alerts)";
          break;
      }
      console.log("Selected component:", selectedComponent.value);
      openSaveTemplateDialog.value = false;
      const currentComponent = selectedComponent.value;
      selectedComponent.value = "";
      setTimeout(() => {
        editorContent.value = template.content;
        console.log("Template content loaded, length:", template.content.length);
        selectedComponent.value = currentComponent;
        console.log("Component reactivated");
      }, 50);
    };
    const confirmDelete = (template) => {
      console.log("Confirming delete for template:", template);
      if (!template || !template.id) {
        console.error("Invalid template or missing ID");
        snackbarText.value = "Cannot delete template: invalid data";
        snackbarColor.value = "error";
        showSnackbar.value = true;
        return;
      }
      templateToDelete.value = {
        id: template.id,
        name: template.name,
        component_type: template.component_type
      };
      console.log("Template to delete set to:", templateToDelete.value);
      deleteConfirmation.value = true;
    };
    const deleteTemplate = async () => {
      console.log("Template to delete:", templateToDelete.value);
      if (!templateToDelete.value) {
        console.error("Template is undefined");
        return;
      }
      const templateId = templateToDelete.value.id;
      console.log("Template ID:", templateId);
      if (!templateId) {
        console.error("Template ID is undefined");
        return;
      }
      try {
        const response = await userStore.removeTemplate(templateId);
        if (!response) {
          throw new Error("No response from server");
        }
        const result = await response.json();
        if (result.success) {
          deleteConfirmation.value = false;
          snackbarText.value = "Template deleted successfully";
          snackbarColor.value = "success";
          showSnackbar.value = true;
          await userStore.loadData();
        } else {
          throw new Error(result.error || "Failed to delete template");
        }
      } catch (error) {
        console.error("Error deleting template:", error);
        snackbarText.value = "Error deleting template";
        snackbarColor.value = "error";
        showSnackbar.value = true;
      } finally {
        templateToDelete.value = null;
      }
    };
    const isLoading = ref(false);
    const showSnackbar = ref(false);
    const snackbarText = ref("");
    const snackbarColor = ref("success");
    const refreshTemplates = async () => {
      isLoading.value = true;
      try {
        await userStore.loadData();
        snackbarText.value = "Templates refreshed successfully";
        showSnackbar.value = true;
      } catch (error) {
        console.error("Error refreshing templates:", error);
        snackbarText.value = "Error refreshing templates";
        showSnackbar.value = true;
      } finally {
        isLoading.value = false;
      }
    };
    return (_ctx, _push, _parent, _attrs) => {
      const _component_PremiumFeature = premiumFeatures;
      _push(ssrRenderComponent(VApp, _attrs, {
        default: withCtx((_, _push2, _parent2, _scopeId) => {
          if (_push2) {
            _push2(ssrRenderComponent(VMain, null, {
              default: withCtx((_2, _push3, _parent3, _scopeId2) => {
                if (_push3) {
                  _push3(ssrRenderComponent(VContainer, {
                    fluid: "",
                    class: "pa-2 pa-sm-4"
                  }, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(`<div class="d-flex flex-column flex-sm-row justify-space-between align-center mb-4" data-v-623aa048${_scopeId3}>`);
                        _push4(ssrRenderComponent(VSelect, {
                          modelValue: selectedComponent.value,
                          "onUpdate:modelValue": ($event) => selectedComponent.value = $event,
                          items: unref(userStore).user.isPremium ? componentsList.value : ["Card (v-card)"],
                          label: "Select Component",
                          variant: "outlined",
                          density: "comfortable",
                          class: "mb-2 mb-sm-0 mr-0 mr-sm-4",
                          style: { "max-width": "300px" },
                          "hide-details": "auto"
                        }, null, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VBtn, {
                          icon: "mdi-dots-vertical",
                          variant: "text",
                          onClick: ($event) => openSaveTemplateDialog.value = true,
                          class: "mt-2 mt-sm-0"
                        }, null, _parent4, _scopeId3));
                        _push4(`</div>`);
                        if (selectedComponent.value === "Card (v-card)") {
                          _push4(ssrRenderComponent(StudioEditor, {
                            initialContent: editorContent.value,
                            "onUpdate:content": updateEditorContent,
                            class: "fill-height studio-editor"
                          }, null, _parent4, _scopeId3));
                        } else if (selectedComponent.value === "Nav (v-navigation-drawer)" && unref(userStore).user.isPremium) {
                          _push4(`<div class="studio-editor" data-v-623aa048${_scopeId3}>`);
                          _push4(ssrRenderComponent(StudioNav, {
                            initialContent: editorContent.value,
                            "onUpdate:content": updateEditorContent,
                            class: "fill-height"
                          }, null, _parent4, _scopeId3));
                          _push4(`</div>`);
                        } else if (selectedComponent.value === "Timeline (v-timeline)" && unref(userStore).user.isPremium) {
                          _push4(`<div class="studio-editor" data-v-623aa048${_scopeId3}>`);
                          _push4(ssrRenderComponent(StudioTimeline, {
                            initialContent: editorContent.value,
                            "onUpdate:content": updateEditorContent,
                            class: "fill-height"
                          }, null, _parent4, _scopeId3));
                          _push4(`</div>`);
                        } else if (selectedComponent.value === "Form (v-form)" && unref(userStore).user.isPremium) {
                          _push4(`<div class="studio-editor" data-v-623aa048${_scopeId3}>`);
                          _push4(ssrRenderComponent(StudioForm, {
                            initialContent: editorContent.value,
                            "onUpdate:content": updateEditorContent,
                            class: "fill-height"
                          }, null, _parent4, _scopeId3));
                          _push4(`</div>`);
                        } else if (selectedComponent.value === "Utils (v-date, v-color, v-alerts)" && unref(userStore).user.isPremium) {
                          _push4(`<div class="studio-editor" data-v-623aa048${_scopeId3}>`);
                          _push4(ssrRenderComponent(StudioUtils, {
                            initialContent: editorContent.value,
                            "onUpdate:content": updateEditorContent,
                            class: "fill-height"
                          }, null, _parent4, _scopeId3));
                          _push4(`</div>`);
                        } else if (isPremiumComponent(selectedComponent.value) && !unref(userStore).user.isPremium) {
                          _push4(`<div class="studio-editor d-flex align-center justify-center" data-v-623aa048${_scopeId3}>`);
                          _push4(ssrRenderComponent(_component_PremiumFeature, {
                            title: getPremiumComponentTitle(selectedComponent.value),
                            icon: "mdi-puzzle",
                            type: "button",
                            featureKey: "studioComponents",
                            color: "warning",
                            variant: "elevated",
                            class: "premium-feature-button"
                          }, null, _parent4, _scopeId3));
                          _push4(`</div>`);
                        } else {
                          _push4(`<!---->`);
                        }
                      } else {
                        return [
                          createVNode("div", { class: "d-flex flex-column flex-sm-row justify-space-between align-center mb-4" }, [
                            createVNode(VSelect, {
                              modelValue: selectedComponent.value,
                              "onUpdate:modelValue": ($event) => selectedComponent.value = $event,
                              items: unref(userStore).user.isPremium ? componentsList.value : ["Card (v-card)"],
                              label: "Select Component",
                              variant: "outlined",
                              density: "comfortable",
                              class: "mb-2 mb-sm-0 mr-0 mr-sm-4",
                              style: { "max-width": "300px" },
                              "hide-details": "auto"
                            }, null, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                            createVNode(VBtn, {
                              icon: "mdi-dots-vertical",
                              variant: "text",
                              onClick: ($event) => openSaveTemplateDialog.value = true,
                              class: "mt-2 mt-sm-0"
                            }, null, 8, ["onClick"])
                          ]),
                          selectedComponent.value === "Card (v-card)" ? (openBlock(), createBlock(StudioEditor, {
                            key: 0,
                            initialContent: editorContent.value,
                            "onUpdate:content": updateEditorContent,
                            class: "fill-height studio-editor"
                          }, null, 8, ["initialContent"])) : selectedComponent.value === "Nav (v-navigation-drawer)" && unref(userStore).user.isPremium ? (openBlock(), createBlock("div", {
                            key: 1,
                            class: "studio-editor"
                          }, [
                            createVNode(StudioNav, {
                              initialContent: editorContent.value,
                              "onUpdate:content": updateEditorContent,
                              class: "fill-height"
                            }, null, 8, ["initialContent"])
                          ])) : selectedComponent.value === "Timeline (v-timeline)" && unref(userStore).user.isPremium ? (openBlock(), createBlock("div", {
                            key: 2,
                            class: "studio-editor"
                          }, [
                            createVNode(StudioTimeline, {
                              initialContent: editorContent.value,
                              "onUpdate:content": updateEditorContent,
                              class: "fill-height"
                            }, null, 8, ["initialContent"])
                          ])) : selectedComponent.value === "Form (v-form)" && unref(userStore).user.isPremium ? (openBlock(), createBlock("div", {
                            key: 3,
                            class: "studio-editor"
                          }, [
                            createVNode(StudioForm, {
                              initialContent: editorContent.value,
                              "onUpdate:content": updateEditorContent,
                              class: "fill-height"
                            }, null, 8, ["initialContent"])
                          ])) : selectedComponent.value === "Utils (v-date, v-color, v-alerts)" && unref(userStore).user.isPremium ? (openBlock(), createBlock("div", {
                            key: 4,
                            class: "studio-editor"
                          }, [
                            createVNode(StudioUtils, {
                              initialContent: editorContent.value,
                              "onUpdate:content": updateEditorContent,
                              class: "fill-height"
                            }, null, 8, ["initialContent"])
                          ])) : isPremiumComponent(selectedComponent.value) && !unref(userStore).user.isPremium ? (openBlock(), createBlock("div", {
                            key: 5,
                            class: "studio-editor d-flex align-center justify-center"
                          }, [
                            createVNode(_component_PremiumFeature, {
                              title: getPremiumComponentTitle(selectedComponent.value),
                              icon: "mdi-puzzle",
                              type: "button",
                              featureKey: "studioComponents",
                              color: "warning",
                              variant: "elevated",
                              class: "premium-feature-button"
                            }, null, 8, ["title"])
                          ])) : createCommentVNode("", true)
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                } else {
                  return [
                    createVNode(VContainer, {
                      fluid: "",
                      class: "pa-2 pa-sm-4"
                    }, {
                      default: withCtx(() => [
                        createVNode("div", { class: "d-flex flex-column flex-sm-row justify-space-between align-center mb-4" }, [
                          createVNode(VSelect, {
                            modelValue: selectedComponent.value,
                            "onUpdate:modelValue": ($event) => selectedComponent.value = $event,
                            items: unref(userStore).user.isPremium ? componentsList.value : ["Card (v-card)"],
                            label: "Select Component",
                            variant: "outlined",
                            density: "comfortable",
                            class: "mb-2 mb-sm-0 mr-0 mr-sm-4",
                            style: { "max-width": "300px" },
                            "hide-details": "auto"
                          }, null, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                          createVNode(VBtn, {
                            icon: "mdi-dots-vertical",
                            variant: "text",
                            onClick: ($event) => openSaveTemplateDialog.value = true,
                            class: "mt-2 mt-sm-0"
                          }, null, 8, ["onClick"])
                        ]),
                        selectedComponent.value === "Card (v-card)" ? (openBlock(), createBlock(StudioEditor, {
                          key: 0,
                          initialContent: editorContent.value,
                          "onUpdate:content": updateEditorContent,
                          class: "fill-height studio-editor"
                        }, null, 8, ["initialContent"])) : selectedComponent.value === "Nav (v-navigation-drawer)" && unref(userStore).user.isPremium ? (openBlock(), createBlock("div", {
                          key: 1,
                          class: "studio-editor"
                        }, [
                          createVNode(StudioNav, {
                            initialContent: editorContent.value,
                            "onUpdate:content": updateEditorContent,
                            class: "fill-height"
                          }, null, 8, ["initialContent"])
                        ])) : selectedComponent.value === "Timeline (v-timeline)" && unref(userStore).user.isPremium ? (openBlock(), createBlock("div", {
                          key: 2,
                          class: "studio-editor"
                        }, [
                          createVNode(StudioTimeline, {
                            initialContent: editorContent.value,
                            "onUpdate:content": updateEditorContent,
                            class: "fill-height"
                          }, null, 8, ["initialContent"])
                        ])) : selectedComponent.value === "Form (v-form)" && unref(userStore).user.isPremium ? (openBlock(), createBlock("div", {
                          key: 3,
                          class: "studio-editor"
                        }, [
                          createVNode(StudioForm, {
                            initialContent: editorContent.value,
                            "onUpdate:content": updateEditorContent,
                            class: "fill-height"
                          }, null, 8, ["initialContent"])
                        ])) : selectedComponent.value === "Utils (v-date, v-color, v-alerts)" && unref(userStore).user.isPremium ? (openBlock(), createBlock("div", {
                          key: 4,
                          class: "studio-editor"
                        }, [
                          createVNode(StudioUtils, {
                            initialContent: editorContent.value,
                            "onUpdate:content": updateEditorContent,
                            class: "fill-height"
                          }, null, 8, ["initialContent"])
                        ])) : isPremiumComponent(selectedComponent.value) && !unref(userStore).user.isPremium ? (openBlock(), createBlock("div", {
                          key: 5,
                          class: "studio-editor d-flex align-center justify-center"
                        }, [
                          createVNode(_component_PremiumFeature, {
                            title: getPremiumComponentTitle(selectedComponent.value),
                            icon: "mdi-puzzle",
                            type: "button",
                            featureKey: "studioComponents",
                            color: "warning",
                            variant: "elevated",
                            class: "premium-feature-button"
                          }, null, 8, ["title"])
                        ])) : createCommentVNode("", true)
                      ]),
                      _: 1
                    })
                  ];
                }
              }),
              _: 1
            }, _parent2, _scopeId));
            _push2(ssrRenderComponent(VDialog, {
              modelValue: openSaveTemplateDialog.value,
              "onUpdate:modelValue": ($event) => openSaveTemplateDialog.value = $event,
              width: "90%",
              "max-width": "500",
              class: "template-dialog"
            }, {
              default: withCtx((_2, _push3, _parent3, _scopeId2) => {
                if (_push3) {
                  _push3(ssrRenderComponent(VCard, null, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(ssrRenderComponent(VCardTitle, { class: "d-flex align-center" }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VIcon, { start: "" }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`mdi-content-save`);
                                  } else {
                                    return [
                                      createTextVNode("mdi-content-save")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(` Saved Templates `);
                            } else {
                              return [
                                createVNode(VIcon, { start: "" }, {
                                  default: withCtx(() => [
                                    createTextVNode("mdi-content-save")
                                  ]),
                                  _: 1
                                }),
                                createTextVNode(" Saved Templates ")
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VCardText, { class: "pa-2 pa-sm-4" }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(`<div class="d-flex justify-space-between align-center mb-4" data-v-623aa048${_scopeId4}><div data-v-623aa048${_scopeId4}>`);
                              _push5(ssrRenderComponent(VChip, {
                                color: "primary",
                                variant: "tonal",
                                size: "small",
                                class: "mr-2"
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VIcon, {
                                      start: "",
                                      size: "small"
                                    }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`mdi-file-document-outline`);
                                        } else {
                                          return [
                                            createTextVNode("mdi-file-document-outline")
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(` Available Templates `);
                                  } else {
                                    return [
                                      createVNode(VIcon, {
                                        start: "",
                                        size: "small"
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode("mdi-file-document-outline")
                                        ]),
                                        _: 1
                                      }),
                                      createTextVNode(" Available Templates ")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(`</div>`);
                              _push5(ssrRenderComponent(VBtn, {
                                icon: "mdi-refresh",
                                variant: "text",
                                size: "small",
                                onClick: refreshTemplates,
                                loading: isLoading.value
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VTooltip, {
                                      activator: "parent",
                                      location: "top"
                                    }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`Refresh templates`);
                                        } else {
                                          return [
                                            createTextVNode("Refresh templates")
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                  } else {
                                    return [
                                      createVNode(VTooltip, {
                                        activator: "parent",
                                        location: "top"
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode("Refresh templates")
                                        ]),
                                        _: 1
                                      })
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(`</div>`);
                              if (unref(userStore).studioComponents && unref(userStore).studioComponents.length > 0) {
                                _push5(`<div data-v-623aa048${_scopeId4}>`);
                                _push5(ssrRenderComponent(VExpansionPanels, {
                                  variant: "accordion",
                                  "bg-color": "surface",
                                  class: "elevation-2"
                                }, {
                                  default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                    if (_push6) {
                                      _push6(`<!--[-->`);
                                      ssrRenderList(getUniqueComponentTypes(), (componentType) => {
                                        _push6(ssrRenderComponent(VExpansionPanel, { key: componentType }, {
                                          default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                            if (_push7) {
                                              _push7(ssrRenderComponent(VExpansionPanelTitle, { class: "text-subtitle-1 font-weight-medium" }, {
                                                default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                  if (_push8) {
                                                    _push8(`${ssrInterpolate(componentType)} `);
                                                    _push8(ssrRenderComponent(VChip, {
                                                      size: "x-small",
                                                      color: "primary",
                                                      class: "ml-2"
                                                    }, {
                                                      default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                        if (_push9) {
                                                          _push9(`${ssrInterpolate(getComponentsByType(componentType).length)}`);
                                                        } else {
                                                          return [
                                                            createTextVNode(toDisplayString(getComponentsByType(componentType).length), 1)
                                                          ];
                                                        }
                                                      }),
                                                      _: 2
                                                    }, _parent8, _scopeId7));
                                                  } else {
                                                    return [
                                                      createTextVNode(toDisplayString(componentType) + " ", 1),
                                                      createVNode(VChip, {
                                                        size: "x-small",
                                                        color: "primary",
                                                        class: "ml-2"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createTextVNode(toDisplayString(getComponentsByType(componentType).length), 1)
                                                        ]),
                                                        _: 2
                                                      }, 1024)
                                                    ];
                                                  }
                                                }),
                                                _: 2
                                              }, _parent7, _scopeId6));
                                              _push7(ssrRenderComponent(VExpansionPanelText, null, {
                                                default: withCtx((_7, _push8, _parent8, _scopeId7) => {
                                                  if (_push8) {
                                                    _push8(ssrRenderComponent(VList, {
                                                      lines: "two",
                                                      class: "pa-0"
                                                    }, {
                                                      default: withCtx((_8, _push9, _parent9, _scopeId8) => {
                                                        if (_push9) {
                                                          _push9(`<!--[-->`);
                                                          ssrRenderList(getComponentsByType(componentType), (template) => {
                                                            _push9(ssrRenderComponent(VListItem, {
                                                              key: template.id,
                                                              title: template.name,
                                                              subtitle: "Updated on " + formatDate(template.updated_at),
                                                              class: "mb-2",
                                                              onClick: ($event) => applyTemplate(template)
                                                            }, {
                                                              prepend: withCtx((_9, _push10, _parent10, _scopeId9) => {
                                                                if (_push10) {
                                                                  _push10(ssrRenderComponent(VAvatar, {
                                                                    size: "36",
                                                                    color: "primary",
                                                                    variant: "tonal",
                                                                    class: "mr-3"
                                                                  }, {
                                                                    default: withCtx((_10, _push11, _parent11, _scopeId10) => {
                                                                      if (_push11) {
                                                                        _push11(ssrRenderComponent(VIcon, null, {
                                                                          default: withCtx((_11, _push12, _parent12, _scopeId11) => {
                                                                            if (_push12) {
                                                                              _push12(`${ssrInterpolate(getComponentIcon(template.component_type))}`);
                                                                            } else {
                                                                              return [
                                                                                createTextVNode(toDisplayString(getComponentIcon(template.component_type)), 1)
                                                                              ];
                                                                            }
                                                                          }),
                                                                          _: 2
                                                                        }, _parent11, _scopeId10));
                                                                      } else {
                                                                        return [
                                                                          createVNode(VIcon, null, {
                                                                            default: withCtx(() => [
                                                                              createTextVNode(toDisplayString(getComponentIcon(template.component_type)), 1)
                                                                            ]),
                                                                            _: 2
                                                                          }, 1024)
                                                                        ];
                                                                      }
                                                                    }),
                                                                    _: 2
                                                                  }, _parent10, _scopeId9));
                                                                } else {
                                                                  return [
                                                                    createVNode(VAvatar, {
                                                                      size: "36",
                                                                      color: "primary",
                                                                      variant: "tonal",
                                                                      class: "mr-3"
                                                                    }, {
                                                                      default: withCtx(() => [
                                                                        createVNode(VIcon, null, {
                                                                          default: withCtx(() => [
                                                                            createTextVNode(toDisplayString(getComponentIcon(template.component_type)), 1)
                                                                          ]),
                                                                          _: 2
                                                                        }, 1024)
                                                                      ]),
                                                                      _: 2
                                                                    }, 1024)
                                                                  ];
                                                                }
                                                              }),
                                                              append: withCtx((_9, _push10, _parent10, _scopeId9) => {
                                                                if (_push10) {
                                                                  _push10(`<div class="d-flex" data-v-623aa048${_scopeId9}>`);
                                                                  _push10(ssrRenderComponent(VBtn, {
                                                                    icon: "mdi-download",
                                                                    color: "primary",
                                                                    size: "x-small",
                                                                    variant: "text",
                                                                    onClick: ($event) => applyTemplate(template),
                                                                    class: "mr-2"
                                                                  }, null, _parent10, _scopeId9));
                                                                  _push10(ssrRenderComponent(VBtn, {
                                                                    icon: "mdi-delete",
                                                                    color: "error",
                                                                    size: "x-small",
                                                                    variant: "text",
                                                                    onClick: ($event) => confirmDelete(template)
                                                                  }, null, _parent10, _scopeId9));
                                                                  _push10(`</div>`);
                                                                } else {
                                                                  return [
                                                                    createVNode("div", { class: "d-flex" }, [
                                                                      createVNode(VBtn, {
                                                                        icon: "mdi-download",
                                                                        color: "primary",
                                                                        size: "x-small",
                                                                        variant: "text",
                                                                        onClick: withModifiers(($event) => applyTemplate(template), ["stop"]),
                                                                        class: "mr-2"
                                                                      }, null, 8, ["onClick"]),
                                                                      createVNode(VBtn, {
                                                                        icon: "mdi-delete",
                                                                        color: "error",
                                                                        size: "x-small",
                                                                        variant: "text",
                                                                        onClick: withModifiers(($event) => confirmDelete(template), ["stop"])
                                                                      }, null, 8, ["onClick"])
                                                                    ])
                                                                  ];
                                                                }
                                                              }),
                                                              _: 2
                                                            }, _parent9, _scopeId8));
                                                          });
                                                          _push9(`<!--]-->`);
                                                        } else {
                                                          return [
                                                            (openBlock(true), createBlock(Fragment, null, renderList(getComponentsByType(componentType), (template) => {
                                                              return openBlock(), createBlock(VListItem, {
                                                                key: template.id,
                                                                title: template.name,
                                                                subtitle: "Updated on " + formatDate(template.updated_at),
                                                                class: "mb-2",
                                                                onClick: ($event) => applyTemplate(template)
                                                              }, {
                                                                prepend: withCtx(() => [
                                                                  createVNode(VAvatar, {
                                                                    size: "36",
                                                                    color: "primary",
                                                                    variant: "tonal",
                                                                    class: "mr-3"
                                                                  }, {
                                                                    default: withCtx(() => [
                                                                      createVNode(VIcon, null, {
                                                                        default: withCtx(() => [
                                                                          createTextVNode(toDisplayString(getComponentIcon(template.component_type)), 1)
                                                                        ]),
                                                                        _: 2
                                                                      }, 1024)
                                                                    ]),
                                                                    _: 2
                                                                  }, 1024)
                                                                ]),
                                                                append: withCtx(() => [
                                                                  createVNode("div", { class: "d-flex" }, [
                                                                    createVNode(VBtn, {
                                                                      icon: "mdi-download",
                                                                      color: "primary",
                                                                      size: "x-small",
                                                                      variant: "text",
                                                                      onClick: withModifiers(($event) => applyTemplate(template), ["stop"]),
                                                                      class: "mr-2"
                                                                    }, null, 8, ["onClick"]),
                                                                    createVNode(VBtn, {
                                                                      icon: "mdi-delete",
                                                                      color: "error",
                                                                      size: "x-small",
                                                                      variant: "text",
                                                                      onClick: withModifiers(($event) => confirmDelete(template), ["stop"])
                                                                    }, null, 8, ["onClick"])
                                                                  ])
                                                                ]),
                                                                _: 2
                                                              }, 1032, ["title", "subtitle", "onClick"]);
                                                            }), 128))
                                                          ];
                                                        }
                                                      }),
                                                      _: 2
                                                    }, _parent8, _scopeId7));
                                                  } else {
                                                    return [
                                                      createVNode(VList, {
                                                        lines: "two",
                                                        class: "pa-0"
                                                      }, {
                                                        default: withCtx(() => [
                                                          (openBlock(true), createBlock(Fragment, null, renderList(getComponentsByType(componentType), (template) => {
                                                            return openBlock(), createBlock(VListItem, {
                                                              key: template.id,
                                                              title: template.name,
                                                              subtitle: "Updated on " + formatDate(template.updated_at),
                                                              class: "mb-2",
                                                              onClick: ($event) => applyTemplate(template)
                                                            }, {
                                                              prepend: withCtx(() => [
                                                                createVNode(VAvatar, {
                                                                  size: "36",
                                                                  color: "primary",
                                                                  variant: "tonal",
                                                                  class: "mr-3"
                                                                }, {
                                                                  default: withCtx(() => [
                                                                    createVNode(VIcon, null, {
                                                                      default: withCtx(() => [
                                                                        createTextVNode(toDisplayString(getComponentIcon(template.component_type)), 1)
                                                                      ]),
                                                                      _: 2
                                                                    }, 1024)
                                                                  ]),
                                                                  _: 2
                                                                }, 1024)
                                                              ]),
                                                              append: withCtx(() => [
                                                                createVNode("div", { class: "d-flex" }, [
                                                                  createVNode(VBtn, {
                                                                    icon: "mdi-download",
                                                                    color: "primary",
                                                                    size: "x-small",
                                                                    variant: "text",
                                                                    onClick: withModifiers(($event) => applyTemplate(template), ["stop"]),
                                                                    class: "mr-2"
                                                                  }, null, 8, ["onClick"]),
                                                                  createVNode(VBtn, {
                                                                    icon: "mdi-delete",
                                                                    color: "error",
                                                                    size: "x-small",
                                                                    variant: "text",
                                                                    onClick: withModifiers(($event) => confirmDelete(template), ["stop"])
                                                                  }, null, 8, ["onClick"])
                                                                ])
                                                              ]),
                                                              _: 2
                                                            }, 1032, ["title", "subtitle", "onClick"]);
                                                          }), 128))
                                                        ]),
                                                        _: 2
                                                      }, 1024)
                                                    ];
                                                  }
                                                }),
                                                _: 2
                                              }, _parent7, _scopeId6));
                                            } else {
                                              return [
                                                createVNode(VExpansionPanelTitle, { class: "text-subtitle-1 font-weight-medium" }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(toDisplayString(componentType) + " ", 1),
                                                    createVNode(VChip, {
                                                      size: "x-small",
                                                      color: "primary",
                                                      class: "ml-2"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createTextVNode(toDisplayString(getComponentsByType(componentType).length), 1)
                                                      ]),
                                                      _: 2
                                                    }, 1024)
                                                  ]),
                                                  _: 2
                                                }, 1024),
                                                createVNode(VExpansionPanelText, null, {
                                                  default: withCtx(() => [
                                                    createVNode(VList, {
                                                      lines: "two",
                                                      class: "pa-0"
                                                    }, {
                                                      default: withCtx(() => [
                                                        (openBlock(true), createBlock(Fragment, null, renderList(getComponentsByType(componentType), (template) => {
                                                          return openBlock(), createBlock(VListItem, {
                                                            key: template.id,
                                                            title: template.name,
                                                            subtitle: "Updated on " + formatDate(template.updated_at),
                                                            class: "mb-2",
                                                            onClick: ($event) => applyTemplate(template)
                                                          }, {
                                                            prepend: withCtx(() => [
                                                              createVNode(VAvatar, {
                                                                size: "36",
                                                                color: "primary",
                                                                variant: "tonal",
                                                                class: "mr-3"
                                                              }, {
                                                                default: withCtx(() => [
                                                                  createVNode(VIcon, null, {
                                                                    default: withCtx(() => [
                                                                      createTextVNode(toDisplayString(getComponentIcon(template.component_type)), 1)
                                                                    ]),
                                                                    _: 2
                                                                  }, 1024)
                                                                ]),
                                                                _: 2
                                                              }, 1024)
                                                            ]),
                                                            append: withCtx(() => [
                                                              createVNode("div", { class: "d-flex" }, [
                                                                createVNode(VBtn, {
                                                                  icon: "mdi-download",
                                                                  color: "primary",
                                                                  size: "x-small",
                                                                  variant: "text",
                                                                  onClick: withModifiers(($event) => applyTemplate(template), ["stop"]),
                                                                  class: "mr-2"
                                                                }, null, 8, ["onClick"]),
                                                                createVNode(VBtn, {
                                                                  icon: "mdi-delete",
                                                                  color: "error",
                                                                  size: "x-small",
                                                                  variant: "text",
                                                                  onClick: withModifiers(($event) => confirmDelete(template), ["stop"])
                                                                }, null, 8, ["onClick"])
                                                              ])
                                                            ]),
                                                            _: 2
                                                          }, 1032, ["title", "subtitle", "onClick"]);
                                                        }), 128))
                                                      ]),
                                                      _: 2
                                                    }, 1024)
                                                  ]),
                                                  _: 2
                                                }, 1024)
                                              ];
                                            }
                                          }),
                                          _: 2
                                        }, _parent6, _scopeId5));
                                      });
                                      _push6(`<!--]-->`);
                                    } else {
                                      return [
                                        (openBlock(true), createBlock(Fragment, null, renderList(getUniqueComponentTypes(), (componentType) => {
                                          return openBlock(), createBlock(VExpansionPanel, { key: componentType }, {
                                            default: withCtx(() => [
                                              createVNode(VExpansionPanelTitle, { class: "text-subtitle-1 font-weight-medium" }, {
                                                default: withCtx(() => [
                                                  createTextVNode(toDisplayString(componentType) + " ", 1),
                                                  createVNode(VChip, {
                                                    size: "x-small",
                                                    color: "primary",
                                                    class: "ml-2"
                                                  }, {
                                                    default: withCtx(() => [
                                                      createTextVNode(toDisplayString(getComponentsByType(componentType).length), 1)
                                                    ]),
                                                    _: 2
                                                  }, 1024)
                                                ]),
                                                _: 2
                                              }, 1024),
                                              createVNode(VExpansionPanelText, null, {
                                                default: withCtx(() => [
                                                  createVNode(VList, {
                                                    lines: "two",
                                                    class: "pa-0"
                                                  }, {
                                                    default: withCtx(() => [
                                                      (openBlock(true), createBlock(Fragment, null, renderList(getComponentsByType(componentType), (template) => {
                                                        return openBlock(), createBlock(VListItem, {
                                                          key: template.id,
                                                          title: template.name,
                                                          subtitle: "Updated on " + formatDate(template.updated_at),
                                                          class: "mb-2",
                                                          onClick: ($event) => applyTemplate(template)
                                                        }, {
                                                          prepend: withCtx(() => [
                                                            createVNode(VAvatar, {
                                                              size: "36",
                                                              color: "primary",
                                                              variant: "tonal",
                                                              class: "mr-3"
                                                            }, {
                                                              default: withCtx(() => [
                                                                createVNode(VIcon, null, {
                                                                  default: withCtx(() => [
                                                                    createTextVNode(toDisplayString(getComponentIcon(template.component_type)), 1)
                                                                  ]),
                                                                  _: 2
                                                                }, 1024)
                                                              ]),
                                                              _: 2
                                                            }, 1024)
                                                          ]),
                                                          append: withCtx(() => [
                                                            createVNode("div", { class: "d-flex" }, [
                                                              createVNode(VBtn, {
                                                                icon: "mdi-download",
                                                                color: "primary",
                                                                size: "x-small",
                                                                variant: "text",
                                                                onClick: withModifiers(($event) => applyTemplate(template), ["stop"]),
                                                                class: "mr-2"
                                                              }, null, 8, ["onClick"]),
                                                              createVNode(VBtn, {
                                                                icon: "mdi-delete",
                                                                color: "error",
                                                                size: "x-small",
                                                                variant: "text",
                                                                onClick: withModifiers(($event) => confirmDelete(template), ["stop"])
                                                              }, null, 8, ["onClick"])
                                                            ])
                                                          ]),
                                                          _: 2
                                                        }, 1032, ["title", "subtitle", "onClick"]);
                                                      }), 128))
                                                    ]),
                                                    _: 2
                                                  }, 1024)
                                                ]),
                                                _: 2
                                              }, 1024)
                                            ]),
                                            _: 2
                                          }, 1024);
                                        }), 128))
                                      ];
                                    }
                                  }),
                                  _: 1
                                }, _parent5, _scopeId4));
                                _push5(`</div>`);
                              } else {
                                _push5(ssrRenderComponent(VAlert, {
                                  type: "info",
                                  class: "mt-4",
                                  variant: "tonal",
                                  border: "start",
                                  density: "comfortable"
                                }, {
                                  default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                    if (_push6) {
                                      _push6(` You haven&#39;t saved any templates yet. Create a component and save it to appear here. `);
                                    } else {
                                      return [
                                        createTextVNode(" You haven't saved any templates yet. Create a component and save it to appear here. ")
                                      ];
                                    }
                                  }),
                                  _: 1
                                }, _parent5, _scopeId4));
                              }
                            } else {
                              return [
                                createVNode("div", { class: "d-flex justify-space-between align-center mb-4" }, [
                                  createVNode("div", null, [
                                    createVNode(VChip, {
                                      color: "primary",
                                      variant: "tonal",
                                      size: "small",
                                      class: "mr-2"
                                    }, {
                                      default: withCtx(() => [
                                        createVNode(VIcon, {
                                          start: "",
                                          size: "small"
                                        }, {
                                          default: withCtx(() => [
                                            createTextVNode("mdi-file-document-outline")
                                          ]),
                                          _: 1
                                        }),
                                        createTextVNode(" Available Templates ")
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  createVNode(VBtn, {
                                    icon: "mdi-refresh",
                                    variant: "text",
                                    size: "small",
                                    onClick: refreshTemplates,
                                    loading: isLoading.value
                                  }, {
                                    default: withCtx(() => [
                                      createVNode(VTooltip, {
                                        activator: "parent",
                                        location: "top"
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode("Refresh templates")
                                        ]),
                                        _: 1
                                      })
                                    ]),
                                    _: 1
                                  }, 8, ["loading"])
                                ]),
                                unref(userStore).studioComponents && unref(userStore).studioComponents.length > 0 ? (openBlock(), createBlock("div", { key: 0 }, [
                                  createVNode(VExpansionPanels, {
                                    variant: "accordion",
                                    "bg-color": "surface",
                                    class: "elevation-2"
                                  }, {
                                    default: withCtx(() => [
                                      (openBlock(true), createBlock(Fragment, null, renderList(getUniqueComponentTypes(), (componentType) => {
                                        return openBlock(), createBlock(VExpansionPanel, { key: componentType }, {
                                          default: withCtx(() => [
                                            createVNode(VExpansionPanelTitle, { class: "text-subtitle-1 font-weight-medium" }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(componentType) + " ", 1),
                                                createVNode(VChip, {
                                                  size: "x-small",
                                                  color: "primary",
                                                  class: "ml-2"
                                                }, {
                                                  default: withCtx(() => [
                                                    createTextVNode(toDisplayString(getComponentsByType(componentType).length), 1)
                                                  ]),
                                                  _: 2
                                                }, 1024)
                                              ]),
                                              _: 2
                                            }, 1024),
                                            createVNode(VExpansionPanelText, null, {
                                              default: withCtx(() => [
                                                createVNode(VList, {
                                                  lines: "two",
                                                  class: "pa-0"
                                                }, {
                                                  default: withCtx(() => [
                                                    (openBlock(true), createBlock(Fragment, null, renderList(getComponentsByType(componentType), (template) => {
                                                      return openBlock(), createBlock(VListItem, {
                                                        key: template.id,
                                                        title: template.name,
                                                        subtitle: "Updated on " + formatDate(template.updated_at),
                                                        class: "mb-2",
                                                        onClick: ($event) => applyTemplate(template)
                                                      }, {
                                                        prepend: withCtx(() => [
                                                          createVNode(VAvatar, {
                                                            size: "36",
                                                            color: "primary",
                                                            variant: "tonal",
                                                            class: "mr-3"
                                                          }, {
                                                            default: withCtx(() => [
                                                              createVNode(VIcon, null, {
                                                                default: withCtx(() => [
                                                                  createTextVNode(toDisplayString(getComponentIcon(template.component_type)), 1)
                                                                ]),
                                                                _: 2
                                                              }, 1024)
                                                            ]),
                                                            _: 2
                                                          }, 1024)
                                                        ]),
                                                        append: withCtx(() => [
                                                          createVNode("div", { class: "d-flex" }, [
                                                            createVNode(VBtn, {
                                                              icon: "mdi-download",
                                                              color: "primary",
                                                              size: "x-small",
                                                              variant: "text",
                                                              onClick: withModifiers(($event) => applyTemplate(template), ["stop"]),
                                                              class: "mr-2"
                                                            }, null, 8, ["onClick"]),
                                                            createVNode(VBtn, {
                                                              icon: "mdi-delete",
                                                              color: "error",
                                                              size: "x-small",
                                                              variant: "text",
                                                              onClick: withModifiers(($event) => confirmDelete(template), ["stop"])
                                                            }, null, 8, ["onClick"])
                                                          ])
                                                        ]),
                                                        _: 2
                                                      }, 1032, ["title", "subtitle", "onClick"]);
                                                    }), 128))
                                                  ]),
                                                  _: 2
                                                }, 1024)
                                              ]),
                                              _: 2
                                            }, 1024)
                                          ]),
                                          _: 2
                                        }, 1024);
                                      }), 128))
                                    ]),
                                    _: 1
                                  })
                                ])) : (openBlock(), createBlock(VAlert, {
                                  key: 1,
                                  type: "info",
                                  class: "mt-4",
                                  variant: "tonal",
                                  border: "start",
                                  density: "comfortable"
                                }, {
                                  default: withCtx(() => [
                                    createTextVNode(" You haven't saved any templates yet. Create a component and save it to appear here. ")
                                  ]),
                                  _: 1
                                }))
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VCardActions, { class: "pa-2 pa-sm-4" }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VSpacer, null, null, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VBtn, {
                                color: "error",
                                variant: "tonal",
                                onClick: ($event) => openSaveTemplateDialog.value = false,
                                class: "mr-2"
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(` Close `);
                                  } else {
                                    return [
                                      createTextVNode(" Close ")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VBtn, {
                                color: "info",
                                variant: "tonal",
                                onClick: ($event) => openSaveTemplateDialog.value = false
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(ssrRenderComponent(VIcon, { start: "" }, {
                                      default: withCtx((_6, _push7, _parent7, _scopeId6) => {
                                        if (_push7) {
                                          _push7(`mdi-check`);
                                        } else {
                                          return [
                                            createTextVNode("mdi-check")
                                          ];
                                        }
                                      }),
                                      _: 1
                                    }, _parent6, _scopeId5));
                                    _push6(` Done `);
                                  } else {
                                    return [
                                      createVNode(VIcon, { start: "" }, {
                                        default: withCtx(() => [
                                          createTextVNode("mdi-check")
                                        ]),
                                        _: 1
                                      }),
                                      createTextVNode(" Done ")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VSpacer),
                                createVNode(VBtn, {
                                  color: "error",
                                  variant: "tonal",
                                  onClick: ($event) => openSaveTemplateDialog.value = false,
                                  class: "mr-2"
                                }, {
                                  default: withCtx(() => [
                                    createTextVNode(" Close ")
                                  ]),
                                  _: 1
                                }, 8, ["onClick"]),
                                createVNode(VBtn, {
                                  color: "info",
                                  variant: "tonal",
                                  onClick: ($event) => openSaveTemplateDialog.value = false
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VIcon, { start: "" }, {
                                      default: withCtx(() => [
                                        createTextVNode("mdi-check")
                                      ]),
                                      _: 1
                                    }),
                                    createTextVNode(" Done ")
                                  ]),
                                  _: 1
                                }, 8, ["onClick"])
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                      } else {
                        return [
                          createVNode(VCardTitle, { class: "d-flex align-center" }, {
                            default: withCtx(() => [
                              createVNode(VIcon, { start: "" }, {
                                default: withCtx(() => [
                                  createTextVNode("mdi-content-save")
                                ]),
                                _: 1
                              }),
                              createTextVNode(" Saved Templates ")
                            ]),
                            _: 1
                          }),
                          createVNode(VCardText, { class: "pa-2 pa-sm-4" }, {
                            default: withCtx(() => [
                              createVNode("div", { class: "d-flex justify-space-between align-center mb-4" }, [
                                createVNode("div", null, [
                                  createVNode(VChip, {
                                    color: "primary",
                                    variant: "tonal",
                                    size: "small",
                                    class: "mr-2"
                                  }, {
                                    default: withCtx(() => [
                                      createVNode(VIcon, {
                                        start: "",
                                        size: "small"
                                      }, {
                                        default: withCtx(() => [
                                          createTextVNode("mdi-file-document-outline")
                                        ]),
                                        _: 1
                                      }),
                                      createTextVNode(" Available Templates ")
                                    ]),
                                    _: 1
                                  })
                                ]),
                                createVNode(VBtn, {
                                  icon: "mdi-refresh",
                                  variant: "text",
                                  size: "small",
                                  onClick: refreshTemplates,
                                  loading: isLoading.value
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VTooltip, {
                                      activator: "parent",
                                      location: "top"
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode("Refresh templates")
                                      ]),
                                      _: 1
                                    })
                                  ]),
                                  _: 1
                                }, 8, ["loading"])
                              ]),
                              unref(userStore).studioComponents && unref(userStore).studioComponents.length > 0 ? (openBlock(), createBlock("div", { key: 0 }, [
                                createVNode(VExpansionPanels, {
                                  variant: "accordion",
                                  "bg-color": "surface",
                                  class: "elevation-2"
                                }, {
                                  default: withCtx(() => [
                                    (openBlock(true), createBlock(Fragment, null, renderList(getUniqueComponentTypes(), (componentType) => {
                                      return openBlock(), createBlock(VExpansionPanel, { key: componentType }, {
                                        default: withCtx(() => [
                                          createVNode(VExpansionPanelTitle, { class: "text-subtitle-1 font-weight-medium" }, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString(componentType) + " ", 1),
                                              createVNode(VChip, {
                                                size: "x-small",
                                                color: "primary",
                                                class: "ml-2"
                                              }, {
                                                default: withCtx(() => [
                                                  createTextVNode(toDisplayString(getComponentsByType(componentType).length), 1)
                                                ]),
                                                _: 2
                                              }, 1024)
                                            ]),
                                            _: 2
                                          }, 1024),
                                          createVNode(VExpansionPanelText, null, {
                                            default: withCtx(() => [
                                              createVNode(VList, {
                                                lines: "two",
                                                class: "pa-0"
                                              }, {
                                                default: withCtx(() => [
                                                  (openBlock(true), createBlock(Fragment, null, renderList(getComponentsByType(componentType), (template) => {
                                                    return openBlock(), createBlock(VListItem, {
                                                      key: template.id,
                                                      title: template.name,
                                                      subtitle: "Updated on " + formatDate(template.updated_at),
                                                      class: "mb-2",
                                                      onClick: ($event) => applyTemplate(template)
                                                    }, {
                                                      prepend: withCtx(() => [
                                                        createVNode(VAvatar, {
                                                          size: "36",
                                                          color: "primary",
                                                          variant: "tonal",
                                                          class: "mr-3"
                                                        }, {
                                                          default: withCtx(() => [
                                                            createVNode(VIcon, null, {
                                                              default: withCtx(() => [
                                                                createTextVNode(toDisplayString(getComponentIcon(template.component_type)), 1)
                                                              ]),
                                                              _: 2
                                                            }, 1024)
                                                          ]),
                                                          _: 2
                                                        }, 1024)
                                                      ]),
                                                      append: withCtx(() => [
                                                        createVNode("div", { class: "d-flex" }, [
                                                          createVNode(VBtn, {
                                                            icon: "mdi-download",
                                                            color: "primary",
                                                            size: "x-small",
                                                            variant: "text",
                                                            onClick: withModifiers(($event) => applyTemplate(template), ["stop"]),
                                                            class: "mr-2"
                                                          }, null, 8, ["onClick"]),
                                                          createVNode(VBtn, {
                                                            icon: "mdi-delete",
                                                            color: "error",
                                                            size: "x-small",
                                                            variant: "text",
                                                            onClick: withModifiers(($event) => confirmDelete(template), ["stop"])
                                                          }, null, 8, ["onClick"])
                                                        ])
                                                      ]),
                                                      _: 2
                                                    }, 1032, ["title", "subtitle", "onClick"]);
                                                  }), 128))
                                                ]),
                                                _: 2
                                              }, 1024)
                                            ]),
                                            _: 2
                                          }, 1024)
                                        ]),
                                        _: 2
                                      }, 1024);
                                    }), 128))
                                  ]),
                                  _: 1
                                })
                              ])) : (openBlock(), createBlock(VAlert, {
                                key: 1,
                                type: "info",
                                class: "mt-4",
                                variant: "tonal",
                                border: "start",
                                density: "comfortable"
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(" You haven't saved any templates yet. Create a component and save it to appear here. ")
                                ]),
                                _: 1
                              }))
                            ]),
                            _: 1
                          }),
                          createVNode(VCardActions, { class: "pa-2 pa-sm-4" }, {
                            default: withCtx(() => [
                              createVNode(VSpacer),
                              createVNode(VBtn, {
                                color: "error",
                                variant: "tonal",
                                onClick: ($event) => openSaveTemplateDialog.value = false,
                                class: "mr-2"
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(" Close ")
                                ]),
                                _: 1
                              }, 8, ["onClick"]),
                              createVNode(VBtn, {
                                color: "info",
                                variant: "tonal",
                                onClick: ($event) => openSaveTemplateDialog.value = false
                              }, {
                                default: withCtx(() => [
                                  createVNode(VIcon, { start: "" }, {
                                    default: withCtx(() => [
                                      createTextVNode("mdi-check")
                                    ]),
                                    _: 1
                                  }),
                                  createTextVNode(" Done ")
                                ]),
                                _: 1
                              }, 8, ["onClick"])
                            ]),
                            _: 1
                          })
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                } else {
                  return [
                    createVNode(VCard, null, {
                      default: withCtx(() => [
                        createVNode(VCardTitle, { class: "d-flex align-center" }, {
                          default: withCtx(() => [
                            createVNode(VIcon, { start: "" }, {
                              default: withCtx(() => [
                                createTextVNode("mdi-content-save")
                              ]),
                              _: 1
                            }),
                            createTextVNode(" Saved Templates ")
                          ]),
                          _: 1
                        }),
                        createVNode(VCardText, { class: "pa-2 pa-sm-4" }, {
                          default: withCtx(() => [
                            createVNode("div", { class: "d-flex justify-space-between align-center mb-4" }, [
                              createVNode("div", null, [
                                createVNode(VChip, {
                                  color: "primary",
                                  variant: "tonal",
                                  size: "small",
                                  class: "mr-2"
                                }, {
                                  default: withCtx(() => [
                                    createVNode(VIcon, {
                                      start: "",
                                      size: "small"
                                    }, {
                                      default: withCtx(() => [
                                        createTextVNode("mdi-file-document-outline")
                                      ]),
                                      _: 1
                                    }),
                                    createTextVNode(" Available Templates ")
                                  ]),
                                  _: 1
                                })
                              ]),
                              createVNode(VBtn, {
                                icon: "mdi-refresh",
                                variant: "text",
                                size: "small",
                                onClick: refreshTemplates,
                                loading: isLoading.value
                              }, {
                                default: withCtx(() => [
                                  createVNode(VTooltip, {
                                    activator: "parent",
                                    location: "top"
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode("Refresh templates")
                                    ]),
                                    _: 1
                                  })
                                ]),
                                _: 1
                              }, 8, ["loading"])
                            ]),
                            unref(userStore).studioComponents && unref(userStore).studioComponents.length > 0 ? (openBlock(), createBlock("div", { key: 0 }, [
                              createVNode(VExpansionPanels, {
                                variant: "accordion",
                                "bg-color": "surface",
                                class: "elevation-2"
                              }, {
                                default: withCtx(() => [
                                  (openBlock(true), createBlock(Fragment, null, renderList(getUniqueComponentTypes(), (componentType) => {
                                    return openBlock(), createBlock(VExpansionPanel, { key: componentType }, {
                                      default: withCtx(() => [
                                        createVNode(VExpansionPanelTitle, { class: "text-subtitle-1 font-weight-medium" }, {
                                          default: withCtx(() => [
                                            createTextVNode(toDisplayString(componentType) + " ", 1),
                                            createVNode(VChip, {
                                              size: "x-small",
                                              color: "primary",
                                              class: "ml-2"
                                            }, {
                                              default: withCtx(() => [
                                                createTextVNode(toDisplayString(getComponentsByType(componentType).length), 1)
                                              ]),
                                              _: 2
                                            }, 1024)
                                          ]),
                                          _: 2
                                        }, 1024),
                                        createVNode(VExpansionPanelText, null, {
                                          default: withCtx(() => [
                                            createVNode(VList, {
                                              lines: "two",
                                              class: "pa-0"
                                            }, {
                                              default: withCtx(() => [
                                                (openBlock(true), createBlock(Fragment, null, renderList(getComponentsByType(componentType), (template) => {
                                                  return openBlock(), createBlock(VListItem, {
                                                    key: template.id,
                                                    title: template.name,
                                                    subtitle: "Updated on " + formatDate(template.updated_at),
                                                    class: "mb-2",
                                                    onClick: ($event) => applyTemplate(template)
                                                  }, {
                                                    prepend: withCtx(() => [
                                                      createVNode(VAvatar, {
                                                        size: "36",
                                                        color: "primary",
                                                        variant: "tonal",
                                                        class: "mr-3"
                                                      }, {
                                                        default: withCtx(() => [
                                                          createVNode(VIcon, null, {
                                                            default: withCtx(() => [
                                                              createTextVNode(toDisplayString(getComponentIcon(template.component_type)), 1)
                                                            ]),
                                                            _: 2
                                                          }, 1024)
                                                        ]),
                                                        _: 2
                                                      }, 1024)
                                                    ]),
                                                    append: withCtx(() => [
                                                      createVNode("div", { class: "d-flex" }, [
                                                        createVNode(VBtn, {
                                                          icon: "mdi-download",
                                                          color: "primary",
                                                          size: "x-small",
                                                          variant: "text",
                                                          onClick: withModifiers(($event) => applyTemplate(template), ["stop"]),
                                                          class: "mr-2"
                                                        }, null, 8, ["onClick"]),
                                                        createVNode(VBtn, {
                                                          icon: "mdi-delete",
                                                          color: "error",
                                                          size: "x-small",
                                                          variant: "text",
                                                          onClick: withModifiers(($event) => confirmDelete(template), ["stop"])
                                                        }, null, 8, ["onClick"])
                                                      ])
                                                    ]),
                                                    _: 2
                                                  }, 1032, ["title", "subtitle", "onClick"]);
                                                }), 128))
                                              ]),
                                              _: 2
                                            }, 1024)
                                          ]),
                                          _: 2
                                        }, 1024)
                                      ]),
                                      _: 2
                                    }, 1024);
                                  }), 128))
                                ]),
                                _: 1
                              })
                            ])) : (openBlock(), createBlock(VAlert, {
                              key: 1,
                              type: "info",
                              class: "mt-4",
                              variant: "tonal",
                              border: "start",
                              density: "comfortable"
                            }, {
                              default: withCtx(() => [
                                createTextVNode(" You haven't saved any templates yet. Create a component and save it to appear here. ")
                              ]),
                              _: 1
                            }))
                          ]),
                          _: 1
                        }),
                        createVNode(VCardActions, { class: "pa-2 pa-sm-4" }, {
                          default: withCtx(() => [
                            createVNode(VSpacer),
                            createVNode(VBtn, {
                              color: "error",
                              variant: "tonal",
                              onClick: ($event) => openSaveTemplateDialog.value = false,
                              class: "mr-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode(" Close ")
                              ]),
                              _: 1
                            }, 8, ["onClick"]),
                            createVNode(VBtn, {
                              color: "info",
                              variant: "tonal",
                              onClick: ($event) => openSaveTemplateDialog.value = false
                            }, {
                              default: withCtx(() => [
                                createVNode(VIcon, { start: "" }, {
                                  default: withCtx(() => [
                                    createTextVNode("mdi-check")
                                  ]),
                                  _: 1
                                }),
                                createTextVNode(" Done ")
                              ]),
                              _: 1
                            }, 8, ["onClick"])
                          ]),
                          _: 1
                        })
                      ]),
                      _: 1
                    })
                  ];
                }
              }),
              _: 1
            }, _parent2, _scopeId));
            _push2(ssrRenderComponent(VDialog, {
              modelValue: deleteConfirmation.value,
              "onUpdate:modelValue": ($event) => deleteConfirmation.value = $event,
              width: "90%",
              "max-width": "500",
              class: "delete-dialog"
            }, {
              default: withCtx((_2, _push3, _parent3, _scopeId2) => {
                if (_push3) {
                  _push3(ssrRenderComponent(VCard, null, {
                    default: withCtx((_3, _push4, _parent4, _scopeId3) => {
                      if (_push4) {
                        _push4(ssrRenderComponent(VCardTitle, { class: "d-flex align-center" }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VIcon, {
                                color: "error",
                                class: "mr-2"
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(`mdi-alert-circle`);
                                  } else {
                                    return [
                                      createTextVNode("mdi-alert-circle")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(` Delete Template `);
                            } else {
                              return [
                                createVNode(VIcon, {
                                  color: "error",
                                  class: "mr-2"
                                }, {
                                  default: withCtx(() => [
                                    createTextVNode("mdi-alert-circle")
                                  ]),
                                  _: 1
                                }),
                                createTextVNode(" Delete Template ")
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VCardText, { class: "pt-3" }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(`<p data-v-623aa048${_scopeId4}>Are you sure you want to delete this template? This action cannot be undone.</p>`);
                              _push5(ssrRenderComponent(VAlert, {
                                density: "compact",
                                type: "warning",
                                variant: "tonal",
                                class: "mt-3",
                                icon: "mdi-information-outline"
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(` All components using this template will remain unchanged. `);
                                  } else {
                                    return [
                                      createTextVNode(" All components using this template will remain unchanged. ")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode("p", null, "Are you sure you want to delete this template? This action cannot be undone."),
                                createVNode(VAlert, {
                                  density: "compact",
                                  type: "warning",
                                  variant: "tonal",
                                  class: "mt-3",
                                  icon: "mdi-information-outline"
                                }, {
                                  default: withCtx(() => [
                                    createTextVNode(" All components using this template will remain unchanged. ")
                                  ]),
                                  _: 1
                                })
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                        _push4(ssrRenderComponent(VCardActions, { class: "pa-2 pa-sm-4" }, {
                          default: withCtx((_4, _push5, _parent5, _scopeId4) => {
                            if (_push5) {
                              _push5(ssrRenderComponent(VSpacer, null, null, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VBtn, {
                                color: "grey-darken-1",
                                variant: "text",
                                onClick: ($event) => deleteConfirmation.value = false
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(` Cancel `);
                                  } else {
                                    return [
                                      createTextVNode(" Cancel ")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                              _push5(ssrRenderComponent(VBtn, {
                                color: "error",
                                variant: "elevated",
                                "prepend-icon": "mdi-delete",
                                onClick: ($event) => deleteTemplate()
                              }, {
                                default: withCtx((_5, _push6, _parent6, _scopeId5) => {
                                  if (_push6) {
                                    _push6(` Delete `);
                                  } else {
                                    return [
                                      createTextVNode(" Delete ")
                                    ];
                                  }
                                }),
                                _: 1
                              }, _parent5, _scopeId4));
                            } else {
                              return [
                                createVNode(VSpacer),
                                createVNode(VBtn, {
                                  color: "grey-darken-1",
                                  variant: "text",
                                  onClick: ($event) => deleteConfirmation.value = false
                                }, {
                                  default: withCtx(() => [
                                    createTextVNode(" Cancel ")
                                  ]),
                                  _: 1
                                }, 8, ["onClick"]),
                                createVNode(VBtn, {
                                  color: "error",
                                  variant: "elevated",
                                  "prepend-icon": "mdi-delete",
                                  onClick: ($event) => deleteTemplate()
                                }, {
                                  default: withCtx(() => [
                                    createTextVNode(" Delete ")
                                  ]),
                                  _: 1
                                }, 8, ["onClick"])
                              ];
                            }
                          }),
                          _: 1
                        }, _parent4, _scopeId3));
                      } else {
                        return [
                          createVNode(VCardTitle, { class: "d-flex align-center" }, {
                            default: withCtx(() => [
                              createVNode(VIcon, {
                                color: "error",
                                class: "mr-2"
                              }, {
                                default: withCtx(() => [
                                  createTextVNode("mdi-alert-circle")
                                ]),
                                _: 1
                              }),
                              createTextVNode(" Delete Template ")
                            ]),
                            _: 1
                          }),
                          createVNode(VCardText, { class: "pt-3" }, {
                            default: withCtx(() => [
                              createVNode("p", null, "Are you sure you want to delete this template? This action cannot be undone."),
                              createVNode(VAlert, {
                                density: "compact",
                                type: "warning",
                                variant: "tonal",
                                class: "mt-3",
                                icon: "mdi-information-outline"
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(" All components using this template will remain unchanged. ")
                                ]),
                                _: 1
                              })
                            ]),
                            _: 1
                          }),
                          createVNode(VCardActions, { class: "pa-2 pa-sm-4" }, {
                            default: withCtx(() => [
                              createVNode(VSpacer),
                              createVNode(VBtn, {
                                color: "grey-darken-1",
                                variant: "text",
                                onClick: ($event) => deleteConfirmation.value = false
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(" Cancel ")
                                ]),
                                _: 1
                              }, 8, ["onClick"]),
                              createVNode(VBtn, {
                                color: "error",
                                variant: "elevated",
                                "prepend-icon": "mdi-delete",
                                onClick: ($event) => deleteTemplate()
                              }, {
                                default: withCtx(() => [
                                  createTextVNode(" Delete ")
                                ]),
                                _: 1
                              }, 8, ["onClick"])
                            ]),
                            _: 1
                          })
                        ];
                      }
                    }),
                    _: 1
                  }, _parent3, _scopeId2));
                } else {
                  return [
                    createVNode(VCard, null, {
                      default: withCtx(() => [
                        createVNode(VCardTitle, { class: "d-flex align-center" }, {
                          default: withCtx(() => [
                            createVNode(VIcon, {
                              color: "error",
                              class: "mr-2"
                            }, {
                              default: withCtx(() => [
                                createTextVNode("mdi-alert-circle")
                              ]),
                              _: 1
                            }),
                            createTextVNode(" Delete Template ")
                          ]),
                          _: 1
                        }),
                        createVNode(VCardText, { class: "pt-3" }, {
                          default: withCtx(() => [
                            createVNode("p", null, "Are you sure you want to delete this template? This action cannot be undone."),
                            createVNode(VAlert, {
                              density: "compact",
                              type: "warning",
                              variant: "tonal",
                              class: "mt-3",
                              icon: "mdi-information-outline"
                            }, {
                              default: withCtx(() => [
                                createTextVNode(" All components using this template will remain unchanged. ")
                              ]),
                              _: 1
                            })
                          ]),
                          _: 1
                        }),
                        createVNode(VCardActions, { class: "pa-2 pa-sm-4" }, {
                          default: withCtx(() => [
                            createVNode(VSpacer),
                            createVNode(VBtn, {
                              color: "grey-darken-1",
                              variant: "text",
                              onClick: ($event) => deleteConfirmation.value = false
                            }, {
                              default: withCtx(() => [
                                createTextVNode(" Cancel ")
                              ]),
                              _: 1
                            }, 8, ["onClick"]),
                            createVNode(VBtn, {
                              color: "error",
                              variant: "elevated",
                              "prepend-icon": "mdi-delete",
                              onClick: ($event) => deleteTemplate()
                            }, {
                              default: withCtx(() => [
                                createTextVNode(" Delete ")
                              ]),
                              _: 1
                            }, 8, ["onClick"])
                          ]),
                          _: 1
                        })
                      ]),
                      _: 1
                    })
                  ];
                }
              }),
              _: 1
            }, _parent2, _scopeId));
            _push2(ssrRenderComponent(Snackbar, {
              modelValue: showSnackbar.value,
              "onUpdate:modelValue": ($event) => showSnackbar.value = $event,
              text: snackbarText.value,
              color: snackbarColor.value
            }, null, _parent2, _scopeId));
          } else {
            return [
              createVNode(VMain, null, {
                default: withCtx(() => [
                  createVNode(VContainer, {
                    fluid: "",
                    class: "pa-2 pa-sm-4"
                  }, {
                    default: withCtx(() => [
                      createVNode("div", { class: "d-flex flex-column flex-sm-row justify-space-between align-center mb-4" }, [
                        createVNode(VSelect, {
                          modelValue: selectedComponent.value,
                          "onUpdate:modelValue": ($event) => selectedComponent.value = $event,
                          items: unref(userStore).user.isPremium ? componentsList.value : ["Card (v-card)"],
                          label: "Select Component",
                          variant: "outlined",
                          density: "comfortable",
                          class: "mb-2 mb-sm-0 mr-0 mr-sm-4",
                          style: { "max-width": "300px" },
                          "hide-details": "auto"
                        }, null, 8, ["modelValue", "onUpdate:modelValue", "items"]),
                        createVNode(VBtn, {
                          icon: "mdi-dots-vertical",
                          variant: "text",
                          onClick: ($event) => openSaveTemplateDialog.value = true,
                          class: "mt-2 mt-sm-0"
                        }, null, 8, ["onClick"])
                      ]),
                      selectedComponent.value === "Card (v-card)" ? (openBlock(), createBlock(StudioEditor, {
                        key: 0,
                        initialContent: editorContent.value,
                        "onUpdate:content": updateEditorContent,
                        class: "fill-height studio-editor"
                      }, null, 8, ["initialContent"])) : selectedComponent.value === "Nav (v-navigation-drawer)" && unref(userStore).user.isPremium ? (openBlock(), createBlock("div", {
                        key: 1,
                        class: "studio-editor"
                      }, [
                        createVNode(StudioNav, {
                          initialContent: editorContent.value,
                          "onUpdate:content": updateEditorContent,
                          class: "fill-height"
                        }, null, 8, ["initialContent"])
                      ])) : selectedComponent.value === "Timeline (v-timeline)" && unref(userStore).user.isPremium ? (openBlock(), createBlock("div", {
                        key: 2,
                        class: "studio-editor"
                      }, [
                        createVNode(StudioTimeline, {
                          initialContent: editorContent.value,
                          "onUpdate:content": updateEditorContent,
                          class: "fill-height"
                        }, null, 8, ["initialContent"])
                      ])) : selectedComponent.value === "Form (v-form)" && unref(userStore).user.isPremium ? (openBlock(), createBlock("div", {
                        key: 3,
                        class: "studio-editor"
                      }, [
                        createVNode(StudioForm, {
                          initialContent: editorContent.value,
                          "onUpdate:content": updateEditorContent,
                          class: "fill-height"
                        }, null, 8, ["initialContent"])
                      ])) : selectedComponent.value === "Utils (v-date, v-color, v-alerts)" && unref(userStore).user.isPremium ? (openBlock(), createBlock("div", {
                        key: 4,
                        class: "studio-editor"
                      }, [
                        createVNode(StudioUtils, {
                          initialContent: editorContent.value,
                          "onUpdate:content": updateEditorContent,
                          class: "fill-height"
                        }, null, 8, ["initialContent"])
                      ])) : isPremiumComponent(selectedComponent.value) && !unref(userStore).user.isPremium ? (openBlock(), createBlock("div", {
                        key: 5,
                        class: "studio-editor d-flex align-center justify-center"
                      }, [
                        createVNode(_component_PremiumFeature, {
                          title: getPremiumComponentTitle(selectedComponent.value),
                          icon: "mdi-puzzle",
                          type: "button",
                          featureKey: "studioComponents",
                          color: "warning",
                          variant: "elevated",
                          class: "premium-feature-button"
                        }, null, 8, ["title"])
                      ])) : createCommentVNode("", true)
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }),
              createVNode(VDialog, {
                modelValue: openSaveTemplateDialog.value,
                "onUpdate:modelValue": ($event) => openSaveTemplateDialog.value = $event,
                width: "90%",
                "max-width": "500",
                class: "template-dialog"
              }, {
                default: withCtx(() => [
                  createVNode(VCard, null, {
                    default: withCtx(() => [
                      createVNode(VCardTitle, { class: "d-flex align-center" }, {
                        default: withCtx(() => [
                          createVNode(VIcon, { start: "" }, {
                            default: withCtx(() => [
                              createTextVNode("mdi-content-save")
                            ]),
                            _: 1
                          }),
                          createTextVNode(" Saved Templates ")
                        ]),
                        _: 1
                      }),
                      createVNode(VCardText, { class: "pa-2 pa-sm-4" }, {
                        default: withCtx(() => [
                          createVNode("div", { class: "d-flex justify-space-between align-center mb-4" }, [
                            createVNode("div", null, [
                              createVNode(VChip, {
                                color: "primary",
                                variant: "tonal",
                                size: "small",
                                class: "mr-2"
                              }, {
                                default: withCtx(() => [
                                  createVNode(VIcon, {
                                    start: "",
                                    size: "small"
                                  }, {
                                    default: withCtx(() => [
                                      createTextVNode("mdi-file-document-outline")
                                    ]),
                                    _: 1
                                  }),
                                  createTextVNode(" Available Templates ")
                                ]),
                                _: 1
                              })
                            ]),
                            createVNode(VBtn, {
                              icon: "mdi-refresh",
                              variant: "text",
                              size: "small",
                              onClick: refreshTemplates,
                              loading: isLoading.value
                            }, {
                              default: withCtx(() => [
                                createVNode(VTooltip, {
                                  activator: "parent",
                                  location: "top"
                                }, {
                                  default: withCtx(() => [
                                    createTextVNode("Refresh templates")
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            }, 8, ["loading"])
                          ]),
                          unref(userStore).studioComponents && unref(userStore).studioComponents.length > 0 ? (openBlock(), createBlock("div", { key: 0 }, [
                            createVNode(VExpansionPanels, {
                              variant: "accordion",
                              "bg-color": "surface",
                              class: "elevation-2"
                            }, {
                              default: withCtx(() => [
                                (openBlock(true), createBlock(Fragment, null, renderList(getUniqueComponentTypes(), (componentType) => {
                                  return openBlock(), createBlock(VExpansionPanel, { key: componentType }, {
                                    default: withCtx(() => [
                                      createVNode(VExpansionPanelTitle, { class: "text-subtitle-1 font-weight-medium" }, {
                                        default: withCtx(() => [
                                          createTextVNode(toDisplayString(componentType) + " ", 1),
                                          createVNode(VChip, {
                                            size: "x-small",
                                            color: "primary",
                                            class: "ml-2"
                                          }, {
                                            default: withCtx(() => [
                                              createTextVNode(toDisplayString(getComponentsByType(componentType).length), 1)
                                            ]),
                                            _: 2
                                          }, 1024)
                                        ]),
                                        _: 2
                                      }, 1024),
                                      createVNode(VExpansionPanelText, null, {
                                        default: withCtx(() => [
                                          createVNode(VList, {
                                            lines: "two",
                                            class: "pa-0"
                                          }, {
                                            default: withCtx(() => [
                                              (openBlock(true), createBlock(Fragment, null, renderList(getComponentsByType(componentType), (template) => {
                                                return openBlock(), createBlock(VListItem, {
                                                  key: template.id,
                                                  title: template.name,
                                                  subtitle: "Updated on " + formatDate(template.updated_at),
                                                  class: "mb-2",
                                                  onClick: ($event) => applyTemplate(template)
                                                }, {
                                                  prepend: withCtx(() => [
                                                    createVNode(VAvatar, {
                                                      size: "36",
                                                      color: "primary",
                                                      variant: "tonal",
                                                      class: "mr-3"
                                                    }, {
                                                      default: withCtx(() => [
                                                        createVNode(VIcon, null, {
                                                          default: withCtx(() => [
                                                            createTextVNode(toDisplayString(getComponentIcon(template.component_type)), 1)
                                                          ]),
                                                          _: 2
                                                        }, 1024)
                                                      ]),
                                                      _: 2
                                                    }, 1024)
                                                  ]),
                                                  append: withCtx(() => [
                                                    createVNode("div", { class: "d-flex" }, [
                                                      createVNode(VBtn, {
                                                        icon: "mdi-download",
                                                        color: "primary",
                                                        size: "x-small",
                                                        variant: "text",
                                                        onClick: withModifiers(($event) => applyTemplate(template), ["stop"]),
                                                        class: "mr-2"
                                                      }, null, 8, ["onClick"]),
                                                      createVNode(VBtn, {
                                                        icon: "mdi-delete",
                                                        color: "error",
                                                        size: "x-small",
                                                        variant: "text",
                                                        onClick: withModifiers(($event) => confirmDelete(template), ["stop"])
                                                      }, null, 8, ["onClick"])
                                                    ])
                                                  ]),
                                                  _: 2
                                                }, 1032, ["title", "subtitle", "onClick"]);
                                              }), 128))
                                            ]),
                                            _: 2
                                          }, 1024)
                                        ]),
                                        _: 2
                                      }, 1024)
                                    ]),
                                    _: 2
                                  }, 1024);
                                }), 128))
                              ]),
                              _: 1
                            })
                          ])) : (openBlock(), createBlock(VAlert, {
                            key: 1,
                            type: "info",
                            class: "mt-4",
                            variant: "tonal",
                            border: "start",
                            density: "comfortable"
                          }, {
                            default: withCtx(() => [
                              createTextVNode(" You haven't saved any templates yet. Create a component and save it to appear here. ")
                            ]),
                            _: 1
                          }))
                        ]),
                        _: 1
                      }),
                      createVNode(VCardActions, { class: "pa-2 pa-sm-4" }, {
                        default: withCtx(() => [
                          createVNode(VSpacer),
                          createVNode(VBtn, {
                            color: "error",
                            variant: "tonal",
                            onClick: ($event) => openSaveTemplateDialog.value = false,
                            class: "mr-2"
                          }, {
                            default: withCtx(() => [
                              createTextVNode(" Close ")
                            ]),
                            _: 1
                          }, 8, ["onClick"]),
                          createVNode(VBtn, {
                            color: "info",
                            variant: "tonal",
                            onClick: ($event) => openSaveTemplateDialog.value = false
                          }, {
                            default: withCtx(() => [
                              createVNode(VIcon, { start: "" }, {
                                default: withCtx(() => [
                                  createTextVNode("mdi-check")
                                ]),
                                _: 1
                              }),
                              createTextVNode(" Done ")
                            ]),
                            _: 1
                          }, 8, ["onClick"])
                        ]),
                        _: 1
                      })
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }, 8, ["modelValue", "onUpdate:modelValue"]),
              createVNode(VDialog, {
                modelValue: deleteConfirmation.value,
                "onUpdate:modelValue": ($event) => deleteConfirmation.value = $event,
                width: "90%",
                "max-width": "500",
                class: "delete-dialog"
              }, {
                default: withCtx(() => [
                  createVNode(VCard, null, {
                    default: withCtx(() => [
                      createVNode(VCardTitle, { class: "d-flex align-center" }, {
                        default: withCtx(() => [
                          createVNode(VIcon, {
                            color: "error",
                            class: "mr-2"
                          }, {
                            default: withCtx(() => [
                              createTextVNode("mdi-alert-circle")
                            ]),
                            _: 1
                          }),
                          createTextVNode(" Delete Template ")
                        ]),
                        _: 1
                      }),
                      createVNode(VCardText, { class: "pt-3" }, {
                        default: withCtx(() => [
                          createVNode("p", null, "Are you sure you want to delete this template? This action cannot be undone."),
                          createVNode(VAlert, {
                            density: "compact",
                            type: "warning",
                            variant: "tonal",
                            class: "mt-3",
                            icon: "mdi-information-outline"
                          }, {
                            default: withCtx(() => [
                              createTextVNode(" All components using this template will remain unchanged. ")
                            ]),
                            _: 1
                          })
                        ]),
                        _: 1
                      }),
                      createVNode(VCardActions, { class: "pa-2 pa-sm-4" }, {
                        default: withCtx(() => [
                          createVNode(VSpacer),
                          createVNode(VBtn, {
                            color: "grey-darken-1",
                            variant: "text",
                            onClick: ($event) => deleteConfirmation.value = false
                          }, {
                            default: withCtx(() => [
                              createTextVNode(" Cancel ")
                            ]),
                            _: 1
                          }, 8, ["onClick"]),
                          createVNode(VBtn, {
                            color: "error",
                            variant: "elevated",
                            "prepend-icon": "mdi-delete",
                            onClick: ($event) => deleteTemplate()
                          }, {
                            default: withCtx(() => [
                              createTextVNode(" Delete ")
                            ]),
                            _: 1
                          }, 8, ["onClick"])
                        ]),
                        _: 1
                      })
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }, 8, ["modelValue", "onUpdate:modelValue"]),
              createVNode(Snackbar, {
                modelValue: showSnackbar.value,
                "onUpdate:modelValue": ($event) => showSnackbar.value = $event,
                text: snackbarText.value,
                color: snackbarColor.value
              }, null, 8, ["modelValue", "onUpdate:modelValue", "text", "color"])
            ];
          }
        }),
        _: 1
      }, _parent));
    };
  }
});

const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("pages/studio.vue");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const studio = /* @__PURE__ */ _export_sfc(_sfc_main, [["__scopeId", "data-v-623aa048"]]);

export { studio as default };
//# sourceMappingURL=studio.vue.mjs.map
