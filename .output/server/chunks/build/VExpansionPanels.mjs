globalThis.__timing__.logStart('Load chunks/build/VExpansionPanels');import { inject, createVNode, withDirectives, vShow, computed, resolveDirective, provide, toRef } from 'vue';
import { f as y, y as y$1, b9 as i, o, ba as m, n as o$1, K as l, bc as B$1, u as x, j as x$1, l as f, ap as A, H as P, L, b8 as D, w as v, z as h, k as r, B as g, bb as z, D as u, b7 as H, t as _, O as O$1, M, bd as k, be as U } from './server.mjs';

const n=Symbol.for("vuetify:v-expansion-panel");

const V=y$1({...o$1(),...m()},"VExpansionPanelText"),C$1=y()({name:"VExpansionPanelText",props:V(),setup(e,a){let{slots:t}=a;const n$1=inject(n);if(!n$1)throw new Error("[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel");const{hasContent:s,onAfterLeave:r}=i(e,n$1.isSelected);return o(()=>createVNode(l,{onAfterLeave:r},{default:()=>[withDirectives(createVNode("div",{class:["v-expansion-panel-text",e.class],style:e.style},[t.default&&s.value&&createVNode("div",{class:"v-expansion-panel-text__wrapper"},[t.default?.()])]),[[vShow,n$1.isSelected.value]])]})),{}}});

const B=y$1({color:String,expandIcon:{type:A,default:"$expand"},collapseIcon:{type:A,default:"$collapse"},hideActions:Boolean,focusable:Boolean,static:Boolean,ripple:{type:[Boolean,Object],default:false},readonly:Boolean,...o$1(),...f()},"VExpansionPanelTitle"),O=y()({name:"VExpansionPanelTitle",directives:{Ripple:B$1},props:B(),setup(e,s){let{slots:l}=s;const n$1=inject(n);if(!n$1)throw new Error("[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel");const{backgroundColorClasses:c,backgroundColorStyles:d}=x(e,"color"),{dimensionStyles:r}=x$1(e),a=computed(()=>({collapseIcon:e.collapseIcon,disabled:n$1.disabled.value,expanded:n$1.isSelected.value,expandIcon:e.expandIcon,readonly:e.readonly})),p=computed(()=>n$1.isSelected.value?e.collapseIcon:e.expandIcon);return o(()=>withDirectives(createVNode("button",{class:["v-expansion-panel-title",{"v-expansion-panel-title--active":n$1.isSelected.value,"v-expansion-panel-title--focusable":e.focusable,"v-expansion-panel-title--static":e.static},c.value,e.class],style:[d.value,r.value,e.style],type:"button",tabindex:n$1.disabled.value?-1:void 0,disabled:n$1.disabled.value,"aria-expanded":n$1.isSelected.value,onClick:e.readonly?void 0:n$1.toggle},[createVNode("span",{class:"v-expansion-panel-title__overlay"},null),l.default?.(a.value),!e.hideActions&&createVNode(P,{defaults:{VIcon:{icon:p.value}}},{default:()=>[createVNode("span",{class:"v-expansion-panel-title__icon"},[l.actions?.(a.value)??createVNode(L,null,null)])]})]),[[resolveDirective("ripple"),e.ripple]])),{}}});

const F=y$1({title:String,text:String,bgColor:String,...u(),...z(),...g(),...r(),...B(),...V()},"VExpansionPanel"),X=y()({name:"VExpansionPanel",props:F(),emits:{"group:selected":e=>true},setup(e,p){let{slots:a}=p;const t=D(e,n),{backgroundColorClasses:c,backgroundColorStyles:x$1}=x(e,"bgColor"),{elevationClasses:v$1}=v(e),{roundedClasses:f}=h(e),P$1=computed(()=>t?.disabled.value||e.disabled),r=computed(()=>t.group.items.value.reduce((o,n,i)=>(t.group.selected.value.includes(n.id)&&o.push(i),o),[])),g=computed(()=>{const o=t.group.items.value.findIndex(n=>n.id===t.id);return !t.isSelected.value&&r.value.some(n=>n-o===1)}),E=computed(()=>{const o=t.group.items.value.findIndex(n=>n.id===t.id);return !t.isSelected.value&&r.value.some(n=>n-o===-1)});return provide(n,t),o(()=>{const o=!!(a.text||e.text),n=!!(a.title||e.title),i=O.filterProps(e),V=C$1.filterProps(e);return createVNode(e.tag,{class:["v-expansion-panel",{"v-expansion-panel--active":t.isSelected.value,"v-expansion-panel--before-active":g.value,"v-expansion-panel--after-active":E.value,"v-expansion-panel--disabled":P$1.value},f.value,c.value,e.class],style:[x$1.value,e.style]},{default:()=>[createVNode("div",{class:["v-expansion-panel__shadow",...v$1.value]},null),createVNode(P,{defaults:{VExpansionPanelTitle:{...i},VExpansionPanelText:{...V}}},{default:()=>[n&&createVNode(O,{key:"title"},{default:()=>[a.title?a.title():e.title]}),o&&createVNode(C$1,{key:"text"},{default:()=>[a.text?a.text():e.text]}),a.default?.()]})]})}),{groupItem:t}}});

const C=["default","accordion","inset","popout"],E=y$1({flat:Boolean,...U(),...k(F(),["bgColor","collapseIcon","color","eager","elevation","expandIcon","focusable","hideActions","readonly","ripple","rounded","tile","static"]),...M(),...o$1(),...r(),variant:{type:String,default:"default",validator:e=>C.includes(e)}},"VExpansionPanels"),j=y()({name:"VExpansionPanels",props:E(),emits:{"update:modelValue":e=>true},setup(e,t){let{slots:l}=t;const{next:a,prev:n$1}=H(e,n),{themeClasses:i}=_(e),r=computed(()=>e.variant&&`v-expansion-panels--variant-${e.variant}`);return O$1({VExpansionPanel:{bgColor:toRef(e,"bgColor"),collapseIcon:toRef(e,"collapseIcon"),color:toRef(e,"color"),eager:toRef(e,"eager"),elevation:toRef(e,"elevation"),expandIcon:toRef(e,"expandIcon"),focusable:toRef(e,"focusable"),hideActions:toRef(e,"hideActions"),readonly:toRef(e,"readonly"),ripple:toRef(e,"ripple"),rounded:toRef(e,"rounded"),static:toRef(e,"static")}}),o(()=>createVNode(e.tag,{class:["v-expansion-panels",{"v-expansion-panels--flat":e.flat,"v-expansion-panels--tile":e.tile},i.value,r.value,e.class],style:e.style},{default:()=>[l.default?.({prev:n$1,next:a})]})),{next:a,prev:n$1}}});

export { C$1 as C, O, X, j };;globalThis.__timing__.logEnd('Load chunks/build/VExpansionPanels');
